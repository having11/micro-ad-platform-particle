
c:/Users/gaton/source/repos/micro-ad-platform-particle/micro-ad-display/target/5.5.0/p2/micro-ad-display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fa410  085fa0a8  0000a410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005bdc  023fa418  085fa0b0  0000a418  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad6c  085ffc8c  0001ad6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  1007ade4  1007ade4  0002ade4  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffd04  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000002b0  085ffd08  085ffd08  0001fd08  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fd08  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00162a07  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00017242  00000000  00000000  00182a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00044881  00000000  00000000  00199c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003358  00000000  00000000  001de4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000c258  00000000  00000000  001e1822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ae0e  00000000  00000000  001eda7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004a76d  00000000  00000000  00218888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d857b  00000000  00000000  00262ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000096e0  00000000  00000000  0033b570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	4813      	ldr	r0, [pc, #76]	; (85fa068 <module_user_pre_init+0x50>)
 85fa01a:	4914      	ldr	r1, [pc, #80]	; (85fa06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a13      	ldr	r2, [pc, #76]	; (85fa070 <module_user_pre_init+0x58>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b12      	ldr	r3, [pc, #72]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	4812      	ldr	r0, [pc, #72]	; (85fa078 <module_user_pre_init+0x60>)
 85fa030:	4a12      	ldr	r2, [pc, #72]	; (85fa07c <module_user_pre_init+0x64>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b12      	ldr	r3, [pc, #72]	; (85fa080 <module_user_pre_init+0x68>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fa03a:	4812      	ldr	r0, [pc, #72]	; (85fa084 <module_user_pre_init+0x6c>)
 85fa03c:	4912      	ldr	r1, [pc, #72]	; (85fa088 <module_user_pre_init+0x70>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a12      	ldr	r2, [pc, #72]	; (85fa08c <module_user_pre_init+0x74>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fa048:	4b0a      	ldr	r3, [pc, #40]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa04e:	4810      	ldr	r0, [pc, #64]	; (85fa090 <module_user_pre_init+0x78>)
 85fa050:	4910      	ldr	r1, [pc, #64]	; (85fa094 <module_user_pre_init+0x7c>)
 85fa052:	4288      	cmp	r0, r1
 85fa054:	d005      	beq.n	85fa062 <module_user_pre_init+0x4a>
 85fa056:	4a10      	ldr	r2, [pc, #64]	; (85fa098 <module_user_pre_init+0x80>)
 85fa058:	4282      	cmp	r2, r0
 85fa05a:	d002      	beq.n	85fa062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa05c:	4b05      	ldr	r3, [pc, #20]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa05e:	1a12      	subs	r2, r2, r0
 85fa060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa062:	4801      	ldr	r0, [pc, #4]	; (85fa068 <module_user_pre_init+0x50>)
 85fa064:	bd08      	pop	{r3, pc}
 85fa066:	bf00      	nop
 85fa068:	1007ad6c 	.word	0x1007ad6c
 85fa06c:	085ffc8c 	.word	0x085ffc8c
 85fa070:	1007ade4 	.word	0x1007ade4
 85fa074:	10110d2d 	.word	0x10110d2d
 85fa078:	1007ade4 	.word	0x1007ade4
 85fa07c:	1007afe8 	.word	0x1007afe8
 85fa080:	10110ea1 	.word	0x10110ea1
 85fa084:	023fa410 	.word	0x023fa410
 85fa088:	085fa0a8 	.word	0x085fa0a8
 85fa08c:	023fa418 	.word	0x023fa418
 85fa090:	023fa418 	.word	0x023fa418
 85fa094:	085fa0b0 	.word	0x085fa0b0
 85fa098:	023ffff4 	.word	0x023ffff4

085fa09c <dynalib_preinit>:
 85fa09c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fa418 <strcmp>:
 23fa418:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fa41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fa420:	2a01      	cmp	r2, #1
 23fa422:	bf28      	it	cs
 23fa424:	429a      	cmpcs	r2, r3
 23fa426:	d0f7      	beq.n	23fa418 <strcmp>
 23fa428:	1ad0      	subs	r0, r2, r3
 23fa42a:	4770      	bx	lr

023fa42c <strlen>:
 23fa42c:	4603      	mov	r3, r0
 23fa42e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fa432:	2a00      	cmp	r2, #0
 23fa434:	d1fb      	bne.n	23fa42e <strlen+0x2>
 23fa436:	1a18      	subs	r0, r3, r0
 23fa438:	3801      	subs	r0, #1
 23fa43a:	4770      	bx	lr

023fa43c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fa43c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fa43e:	f003 fb65 	bl	23fdb0c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa442:	2500      	movs	r5, #0
 23fa444:	4e05      	ldr	r6, [pc, #20]	; (23fa45c <module_user_init+0x20>)
 23fa446:	4c06      	ldr	r4, [pc, #24]	; (23fa460 <module_user_init+0x24>)
 23fa448:	1ba4      	subs	r4, r4, r6
 23fa44a:	08a4      	lsrs	r4, r4, #2
 23fa44c:	42ac      	cmp	r4, r5
 23fa44e:	d100      	bne.n	23fa452 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fa450:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fa452:	f856 3b04 	ldr.w	r3, [r6], #4
 23fa456:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fa458:	3501      	adds	r5, #1
 23fa45a:	e7f7      	b.n	23fa44c <module_user_init+0x10>
 23fa45c:	023fffd0 	.word	0x023fffd0
 23fa460:	023ffff4 	.word	0x023ffff4

023fa464 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fa464:	f000 b8a2 	b.w	23fa5ac <setup>

023fa468 <module_user_loop>:
}

void module_user_loop() {
 23fa468:	b508      	push	{r3, lr}
    loop();
 23fa46a:	f000 f847 	bl	23fa4fc <loop>
    _post_loop();
}
 23fa46e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fa472:	f003 bb03 	b.w	23fda7c <_post_loop>

023fa476 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fa476:	f001 bd5f 	b.w	23fbf38 <malloc>

023fa47a <_Znaj>:
 23fa47a:	f001 bd5d 	b.w	23fbf38 <malloc>

023fa47e <_ZdaPv>:
 23fa47e:	f001 bd69 	b.w	23fbf54 <free>

023fa482 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fa482:	f001 bd67 	b.w	23fbf54 <free>
	...

023fa488 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa488:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fa48a:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fa48c:	4a02      	ldr	r2, [pc, #8]	; (23fa498 <__cxa_pure_virtual+0x10>)
 23fa48e:	4903      	ldr	r1, [pc, #12]	; (23fa49c <__cxa_pure_virtual+0x14>)
 23fa490:	f001 fbae 	bl	23fbbf0 <panic_>
  while (1);
 23fa494:	e7fe      	b.n	23fa494 <__cxa_pure_virtual+0xc>
 23fa496:	bf00      	nop
 23fa498:	023fb6e9 	.word	0x023fb6e9
 23fa49c:	023fed64 	.word	0x023fed64

023fa4a0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fa4a0:	7800      	ldrb	r0, [r0, #0]
 23fa4a2:	fab0 f080 	clz	r0, r0
 23fa4a6:	0940      	lsrs	r0, r0, #5
 23fa4a8:	4770      	bx	lr

023fa4aa <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fa4aa:	2301      	movs	r3, #1
 23fa4ac:	7003      	strb	r3, [r0, #0]
 23fa4ae:	4770      	bx	lr

023fa4b0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fa4b0:	4770      	bx	lr
	...

023fa4b4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fa4b4:	b510      	push	{r4, lr}
 23fa4b6:	4604      	mov	r4, r0
 23fa4b8:	4b09      	ldr	r3, [pc, #36]	; (23fa4e0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fa4ba:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fa4bc:	f002 fc68 	bl	23fcd90 <_ZN5spark10LogManager8instanceEv>
 23fa4c0:	4621      	mov	r1, r4
 23fa4c2:	f002 fe9f 	bl	23fd204 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fa4c6:	f003 fc2f 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fa4ca:	f003 fc1f 	bl	23fdd0c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fa4ce:	4620      	mov	r0, r4
 23fa4d0:	4b04      	ldr	r3, [pc, #16]	; (23fa4e4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fa4d2:	f840 3b04 	str.w	r3, [r0], #4
 23fa4d6:	f002 fd31 	bl	23fcf3c <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fa4da:	4620      	mov	r0, r4
 23fa4dc:	bd10      	pop	{r4, pc}
 23fa4de:	bf00      	nop
 23fa4e0:	023fedac 	.word	0x023fedac
 23fa4e4:	023fed94 	.word	0x023fed94

023fa4e8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fa4e8:	b510      	push	{r4, lr}
 23fa4ea:	4604      	mov	r4, r0
    }
 23fa4ec:	f7ff ffe2 	bl	23fa4b4 <_ZN5spark16SerialLogHandlerD1Ev>
 23fa4f0:	4620      	mov	r0, r4
 23fa4f2:	2124      	movs	r1, #36	; 0x24
 23fa4f4:	f7ff ffc5 	bl	23fa482 <_ZdlPvj>
 23fa4f8:	4620      	mov	r0, r4
 23fa4fa:	bd10      	pop	{r4, pc}

023fa4fc <loop>:
    // If ad.gif is present, display it

    // If the button has been pressed, show the QR code

    // Check APDS9960 for proximity
}
 23fa4fc:	4770      	bx	lr
	...

023fa500 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE>:

void handleAssets(spark::Vector<ApplicationAsset> assets) {
 23fa500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23fa504:	f8df 809c 	ldr.w	r8, [pc, #156]	; 23fa5a4 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xa4>
 23fa508:	f8df 909c 	ldr.w	r9, [pc, #156]	; 23fa5a8 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xa8>
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 23fa50c:	e9d0 4700 	ldrd	r4, r7, [r0]
 23fa510:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 23fa514:	eb04 1787 	add.w	r7, r4, r7, lsl #6
    for (auto& asset : assets) {
 23fa518:	42bc      	cmp	r4, r7
 23fa51a:	d03b      	beq.n	23fa594 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x94>
        int size = (int)asset.size();
 23fa51c:	4620      	mov	r0, r4
 23fa51e:	f002 f90a 	bl	23fc736 <_ZNK8particle16ApplicationAsset4sizeEv>
        String name = asset.name();
 23fa522:	4621      	mov	r1, r4
        int size = (int)asset.size();
 23fa524:	4606      	mov	r6, r0
        String name = asset.name();
 23fa526:	4668      	mov	r0, sp
 23fa528:	f002 f8fe 	bl	23fc728 <_ZNK8particle16ApplicationAsset4nameEv>
 23fa52c:	4641      	mov	r1, r8
 23fa52e:	4668      	mov	r0, sp
 23fa530:	f002 f840 	bl	23fc5b4 <_ZNK6String6equalsEPKc>
        if (name == "ad.gif" || name == "qrcode.bmp") {
 23fa534:	b1f8      	cbz	r0, 23fa576 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x76>
            uint8_t buf[BlockSize];
            int32_t bytesRead = 0;
            int fd = open(name, O_WRONLY | O_CREAT | O_TRUNC);
 23fa536:	f240 6101 	movw	r1, #1537	; 0x601
 23fa53a:	9800      	ldr	r0, [sp, #0]
 23fa53c:	f004 fb50 	bl	23febe0 <open>
            if (fd != -1) {
 23fa540:	1c43      	adds	r3, r0, #1
            int fd = open(name, O_WRONLY | O_CREAT | O_TRUNC);
 23fa542:	4605      	mov	r5, r0
            if (fd != -1) {
 23fa544:	d01d      	beq.n	23fa582 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x82>
            int32_t bytesRead = 0;
 23fa546:	f04f 0a00 	mov.w	sl, #0
                while (bytesRead < size) {
 23fa54a:	45b2      	cmp	sl, r6
 23fa54c:	da1e      	bge.n	23fa58c <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x8c>
                    int toRead = constrain(size - bytesRead, 0, sizeof(buf));
 23fa54e:	eba6 020a 	sub.w	r2, r6, sl
                    toRead = asset.read((char*)buf, toRead);
 23fa552:	6823      	ldr	r3, [r4, #0]
 23fa554:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 23fa558:	bfa8      	it	ge
 23fa55a:	f44f 7200 	movge.w	r2, #512	; 0x200
 23fa55e:	4620      	mov	r0, r4
 23fa560:	6a1b      	ldr	r3, [r3, #32]
 23fa562:	a904      	add	r1, sp, #16
 23fa564:	4798      	blx	r3

                    if (toRead <= 0) break;
 23fa566:	1e02      	subs	r2, r0, #0
 23fa568:	dd10      	ble.n	23fa58c <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x8c>

                    bytesRead += toRead;

                    write(fd, buf, toRead);
 23fa56a:	4628      	mov	r0, r5
 23fa56c:	a904      	add	r1, sp, #16
                    bytesRead += toRead;
 23fa56e:	4492      	add	sl, r2
                    write(fd, buf, toRead);
 23fa570:	f004 fb4a 	bl	23fec08 <write>
                while (bytesRead < size) {
 23fa574:	e7e9      	b.n	23fa54a <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x4a>
 23fa576:	4649      	mov	r1, r9
 23fa578:	4668      	mov	r0, sp
 23fa57a:	f002 f81b 	bl	23fc5b4 <_ZNK6String6equalsEPKc>
        if (name == "ad.gif" || name == "qrcode.bmp") {
 23fa57e:	2800      	cmp	r0, #0
 23fa580:	d1d9      	bne.n	23fa536 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x36>
        String name = asset.name();
 23fa582:	4668      	mov	r0, sp
 23fa584:	f001 ff6c 	bl	23fc460 <_ZN6StringD1Ev>
    for (auto& asset : assets) {
 23fa588:	3440      	adds	r4, #64	; 0x40
 23fa58a:	e7c5      	b.n	23fa518 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x18>
                }

                close(fd);
 23fa58c:	4628      	mov	r0, r5
 23fa58e:	f004 fb1f 	bl	23febd0 <close>
 23fa592:	e7f6      	b.n	23fa582 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x82>
            }
        }
    }

    System.assetsHandled(true);
 23fa594:	2001      	movs	r0, #1
 23fa596:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 23fa59a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    System.assetsHandled(true);
 23fa59e:	f001 be17 	b.w	23fc1d0 <_ZN11SystemClass13assetsHandledEb>
 23fa5a2:	bf00      	nop
 23fa5a4:	023fed79 	.word	0x023fed79
 23fa5a8:	023fed80 	.word	0x023fed80

023fa5ac <setup>:
void setup() {
 23fa5ac:	b530      	push	{r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23fa5ae:	2000      	movs	r0, #0
 23fa5b0:	b085      	sub	sp, #20
 23fa5b2:	f001 f8b5 	bl	23fb720 <hal_timer_millis>
        while (_while() && !_condition()) {
 23fa5b6:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
 23fa5ba:	4604      	mov	r4, r0
 23fa5bc:	2000      	movs	r0, #0
 23fa5be:	f001 f8af 	bl	23fb720 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fa5c2:	1b00      	subs	r0, r0, r4
 23fa5c4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fa5c8:	42a8      	cmp	r0, r5
 23fa5ca:	f171 0300 	sbcs.w	r3, r1, #0
 23fa5ce:	d207      	bcs.n	23fa5e0 <setup+0x34>
    waitFor(Serial.isConnected, 10000); delay(2000);
 23fa5d0:	f003 fbaa 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fa5d4:	f003 fb9d 	bl	23fdd12 <_ZN9USBSerial11isConnectedEv>
 23fa5d8:	b910      	cbnz	r0, 23fa5e0 <setup+0x34>
            spark_process();
 23fa5da:	f001 fc13 	bl	23fbe04 <spark_process>
        while (_while() && !_condition()) {
 23fa5de:	e7ed      	b.n	23fa5bc <setup+0x10>
 23fa5e0:	f003 fba2 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fa5e4:	f003 fb95 	bl	23fdd12 <_ZN9USBSerial11isConnectedEv>
 23fa5e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23fa5ec:	f003 fa0e 	bl	23fda0c <delay>
    handleAssets(System.assetsAvailable());
 23fa5f0:	a801      	add	r0, sp, #4
 23fa5f2:	f001 fee8 	bl	23fc3c6 <_ZN11SystemClass15assetsAvailableEv>
 23fa5f6:	a801      	add	r0, sp, #4
 23fa5f8:	f7ff ff82 	bl	23fa500 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE>
    destruct(data_, data_ + size_);
 23fa5fc:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
 23fa600:	eb04 1583 	add.w	r5, r4, r3, lsl #6
        for (; p != end; ++p) {
 23fa604:	42a5      	cmp	r5, r4
 23fa606:	d005      	beq.n	23fa614 <setup+0x68>
            p->~T();
 23fa608:	6823      	ldr	r3, [r4, #0]
 23fa60a:	4620      	mov	r0, r4
 23fa60c:	681b      	ldr	r3, [r3, #0]
 23fa60e:	4798      	blx	r3
        for (; p != end; ++p) {
 23fa610:	3440      	adds	r4, #64	; 0x40
 23fa612:	e7f7      	b.n	23fa604 <setup+0x58>
    ::free(ptr);
 23fa614:	9801      	ldr	r0, [sp, #4]
 23fa616:	f001 fc9d 	bl	23fbf54 <free>
    tft.begin();
 23fa61a:	4803      	ldr	r0, [pc, #12]	; (23fa628 <setup+0x7c>)
}
 23fa61c:	b005      	add	sp, #20
 23fa61e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    tft.begin();
 23fa622:	f000 bc96 	b.w	23faf52 <_ZN16Adafruit_SSD13515beginEv>
 23fa626:	bf00      	nop
 23fa628:	1007ae08 	.word	0x1007ae08

023fa62c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa62c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa62e:	2614      	movs	r6, #20
 23fa630:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa634:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa636:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa63a:	42ae      	cmp	r6, r5
 23fa63c:	d004      	beq.n	23fa648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fa63e:	4628      	mov	r0, r5
 23fa640:	f001 ff0e 	bl	23fc460 <_ZN6StringD1Ev>
 23fa644:	3514      	adds	r5, #20
 23fa646:	e7f8      	b.n	23fa63a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fa648:	6820      	ldr	r0, [r4, #0]
 23fa64a:	f001 fc83 	bl	23fbf54 <free>
}
 23fa64e:	4620      	mov	r0, r4
 23fa650:	bd70      	pop	{r4, r5, r6, pc}

023fa652 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fa652:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fa654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa656:	4604      	mov	r4, r0
 23fa658:	460d      	mov	r5, r1
 23fa65a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fa65c:	d916      	bls.n	23fa68c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fa65e:	4290      	cmp	r0, r2
 23fa660:	d215      	bcs.n	23fa68e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fa662:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fa666:	1a75      	subs	r5, r6, r1
 23fa668:	f1a1 0714 	sub.w	r7, r1, #20
 23fa66c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fa66e:	42b7      	cmp	r7, r6
 23fa670:	d01c      	beq.n	23fa6ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fa672:	b12c      	cbz	r4, 23fa680 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fa674:	4631      	mov	r1, r6
 23fa676:	4620      	mov	r0, r4
 23fa678:	f001 ff6f 	bl	23fc55a <_ZN6StringC1EOS_>
 23fa67c:	7c33      	ldrb	r3, [r6, #16]
 23fa67e:	7423      	strb	r3, [r4, #16]
 23fa680:	4630      	mov	r0, r6
 23fa682:	f001 feed 	bl	23fc460 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fa686:	3e14      	subs	r6, #20
 23fa688:	3c14      	subs	r4, #20
 23fa68a:	e7f0      	b.n	23fa66e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fa68c:	d00e      	beq.n	23fa6ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fa68e:	42b5      	cmp	r5, r6
 23fa690:	d00c      	beq.n	23fa6ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fa692:	b12c      	cbz	r4, 23fa6a0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fa694:	4629      	mov	r1, r5
 23fa696:	4620      	mov	r0, r4
 23fa698:	f001 ff5f 	bl	23fc55a <_ZN6StringC1EOS_>
 23fa69c:	7c2b      	ldrb	r3, [r5, #16]
 23fa69e:	7423      	strb	r3, [r4, #16]
 23fa6a0:	4628      	mov	r0, r5
 23fa6a2:	f001 fedd 	bl	23fc460 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fa6a6:	3514      	adds	r5, #20
 23fa6a8:	3414      	adds	r4, #20
 23fa6aa:	e7f0      	b.n	23fa68e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fa6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa6ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fa6ae:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fa6b4:	e9c0 3300 	strd	r3, r3, [r0]
 23fa6b8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa6ba:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa6bc:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa6be:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa6c0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa6c2:	dd24      	ble.n	23fa70e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fa6c4:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fa6c8:	fb08 f007 	mul.w	r0, r8, r7
 23fa6cc:	f001 fc34 	bl	23fbf38 <malloc>
            if (!d) {
 23fa6d0:	4605      	mov	r5, r0
 23fa6d2:	b1e0      	cbz	r0, 23fa70e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fa6d4:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fa6d8:	fb08 1202 	mla	r2, r8, r2, r1
 23fa6dc:	f7ff ffb9 	bl	23fa652 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fa6e0:	6820      	ldr	r0, [r4, #0]
 23fa6e2:	f001 fc37 	bl	23fbf54 <free>
        data_ = d;
 23fa6e6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fa6e8:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fa6ea:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fa6ee:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fa6f2:	45b8      	cmp	r8, r7
 23fa6f4:	d009      	beq.n	23fa70a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fa6f6:	4639      	mov	r1, r7
 23fa6f8:	4628      	mov	r0, r5
 23fa6fa:	f001 ff48 	bl	23fc58e <_ZN6StringC1ERKS_>
 23fa6fe:	7c3b      	ldrb	r3, [r7, #16]
 23fa700:	3514      	adds	r5, #20
 23fa702:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fa706:	3714      	adds	r7, #20
 23fa708:	e7f3      	b.n	23fa6f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fa70a:	6873      	ldr	r3, [r6, #4]
 23fa70c:	6063      	str	r3, [r4, #4]
}
 23fa70e:	4620      	mov	r0, r4
 23fa710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fa714 <_GLOBAL__sub_I_tft>:
 23fa714:	b570      	push	{r4, r5, r6, lr}
Adafruit_SSD1351 tft = Adafruit_SSD1351(CsPin, DcPin, RstPin);
 23fa716:	2213      	movs	r2, #19
 23fa718:	b08c      	sub	sp, #48	; 0x30
Adafruit_SSD1351 tft = Adafruit_SSD1351(CsPin, DcPin, RstPin);
 23fa71a:	2112      	movs	r1, #18
 23fa71c:	230e      	movs	r3, #14
 23fa71e:	481f      	ldr	r0, [pc, #124]	; (23fa79c <_GLOBAL__sub_I_tft+0x88>)
 23fa720:	f000 f8e2 	bl	23fa8e8 <_ZN16Adafruit_SSD1351C1Ehhh>
        capacity_(0) {
 23fa724:	2300      	movs	r3, #0
 23fa726:	e9cd 3300 	strd	r3, r3, [sp]
 23fa72a:	9302      	str	r3, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fa72c:	f003 fafc 	bl	23fdd28 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23fa730:	4c1b      	ldr	r4, [pc, #108]	; (23fa7a0 <_GLOBAL__sub_I_tft+0x8c>)
 23fa732:	4605      	mov	r5, r0
 23fa734:	4626      	mov	r6, r4
 23fa736:	4669      	mov	r1, sp
 23fa738:	a803      	add	r0, sp, #12
 23fa73a:	f7ff ffb8 	bl	23fa6ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23fa73e:	a903      	add	r1, sp, #12
 23fa740:	a806      	add	r0, sp, #24
 23fa742:	f7ff ffb4 	bl	23fa6ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fa746:	4b17      	ldr	r3, [pc, #92]	; (23fa7a4 <_GLOBAL__sub_I_tft+0x90>)
 23fa748:	a906      	add	r1, sp, #24
 23fa74a:	f846 3b04 	str.w	r3, [r6], #4
 23fa74e:	a809      	add	r0, sp, #36	; 0x24
 23fa750:	f7ff ffad 	bl	23fa6ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fa754:	aa09      	add	r2, sp, #36	; 0x24
 23fa756:	2101      	movs	r1, #1
 23fa758:	4630      	mov	r0, r6
 23fa75a:	f002 fe35 	bl	23fd3c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa75e:	a809      	add	r0, sp, #36	; 0x24
 23fa760:	f7ff ff64 	bl	23fa62c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fa764:	a806      	add	r0, sp, #24
 23fa766:	f7ff ff61 	bl	23fa62c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa76a:	4b0f      	ldr	r3, [pc, #60]	; (23fa7a8 <_GLOBAL__sub_I_tft+0x94>)
 23fa76c:	a803      	add	r0, sp, #12
 23fa76e:	6023      	str	r3, [r4, #0]
 23fa770:	6225      	str	r5, [r4, #32]
 23fa772:	f7ff ff5b 	bl	23fa62c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa776:	4b0d      	ldr	r3, [pc, #52]	; (23fa7ac <_GLOBAL__sub_I_tft+0x98>)
 23fa778:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fa77a:	f003 fad5 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fa77e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fa782:	f003 fabf 	bl	23fdd04 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fa786:	f002 fb03 	bl	23fcd90 <_ZN5spark10LogManager8instanceEv>
 23fa78a:	4621      	mov	r1, r4
 23fa78c:	f002 fcf4 	bl	23fd178 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
 23fa790:	4668      	mov	r0, sp
 23fa792:	f7ff ff4b 	bl	23fa62c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa796:	b00c      	add	sp, #48	; 0x30
 23fa798:	bd70      	pop	{r4, r5, r6, pc}
 23fa79a:	bf00      	nop
 23fa79c:	1007ae08 	.word	0x1007ae08
 23fa7a0:	1007ade4 	.word	0x1007ade4
 23fa7a4:	023fed94 	.word	0x023fed94
 23fa7a8:	023ffbb4 	.word	0x023ffbb4
 23fa7ac:	023fedac 	.word	0x023fedac

023fa7b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fa7b0:	b513      	push	{r0, r1, r4, lr}
 23fa7b2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fa7b4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fa7b6:	b159      	cbz	r1, 23fa7d0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fa7b8:	9101      	str	r1, [sp, #4]
 23fa7ba:	f7ff fe37 	bl	23fa42c <strlen>
 23fa7be:	4602      	mov	r2, r0
 23fa7c0:	4620      	mov	r0, r4
 23fa7c2:	6823      	ldr	r3, [r4, #0]
 23fa7c4:	9901      	ldr	r1, [sp, #4]
 23fa7c6:	68db      	ldr	r3, [r3, #12]
    }
 23fa7c8:	b002      	add	sp, #8
 23fa7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fa7ce:	4718      	bx	r3
    }
 23fa7d0:	b002      	add	sp, #8
 23fa7d2:	bd10      	pop	{r4, pc}

023fa7d4 <_ZN16Adafruit_SSD1351D1Ev>:
#define SSD1351_CMD_HORIZSCROLL		0x96
#define SSD1351_CMD_STOPSCROLL		0x9E
#define SSD1351_CMD_STARTSCROLL		0x9F


class Adafruit_SSD1351  : public virtual Adafruit_GFX {
 23fa7d4:	4a03      	ldr	r2, [pc, #12]	; (23fa7e4 <_ZN16Adafruit_SSD1351D1Ev+0x10>)
 23fa7d6:	f102 010c 	add.w	r1, r2, #12
 23fa7da:	325c      	adds	r2, #92	; 0x5c
 23fa7dc:	6001      	str	r1, [r0, #0]
 23fa7de:	60c2      	str	r2, [r0, #12]
 23fa7e0:	4770      	bx	lr
 23fa7e2:	bf00      	nop
 23fa7e4:	023fedbc 	.word	0x023fedbc

023fa7e8 <_ZTv0_n12_N16Adafruit_SSD1351D1Ev>:
 23fa7e8:	b510      	push	{r4, lr}
 23fa7ea:	6803      	ldr	r3, [r0, #0]
 23fa7ec:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 23fa7f0:	4b04      	ldr	r3, [pc, #16]	; (23fa804 <_ZTv0_n12_N16Adafruit_SSD1351D1Ev+0x1c>)
 23fa7f2:	1842      	adds	r2, r0, r1
 23fa7f4:	f103 040c 	add.w	r4, r3, #12
 23fa7f8:	335c      	adds	r3, #92	; 0x5c
 23fa7fa:	5044      	str	r4, [r0, r1]
 23fa7fc:	60d3      	str	r3, [r2, #12]
 23fa7fe:	4610      	mov	r0, r2
 23fa800:	bd10      	pop	{r4, pc}
 23fa802:	bf00      	nop
 23fa804:	023fedbc 	.word	0x023fedbc

023fa808 <_ZN16Adafruit_SSD1351D0Ev>:
 23fa808:	b510      	push	{r4, lr}
 23fa80a:	4604      	mov	r4, r0
 23fa80c:	4b05      	ldr	r3, [pc, #20]	; (23fa824 <_ZN16Adafruit_SSD1351D0Ev+0x1c>)
 23fa80e:	2138      	movs	r1, #56	; 0x38
 23fa810:	f103 020c 	add.w	r2, r3, #12
 23fa814:	335c      	adds	r3, #92	; 0x5c
 23fa816:	6002      	str	r2, [r0, #0]
 23fa818:	60c3      	str	r3, [r0, #12]
 23fa81a:	f7ff fe32 	bl	23fa482 <_ZdlPvj>
 23fa81e:	4620      	mov	r0, r4
 23fa820:	bd10      	pop	{r4, pc}
 23fa822:	bf00      	nop
 23fa824:	023fedbc 	.word	0x023fedbc

023fa828 <_ZTv0_n12_N16Adafruit_SSD1351D0Ev>:
 23fa828:	f8d0 c000 	ldr.w	ip, [r0]
 23fa82c:	f1ac 0c0c 	sub.w	ip, ip, #12
 23fa830:	f8dc c000 	ldr.w	ip, [ip]
 23fa834:	4460      	add	r0, ip
 23fa836:	e7e7      	b.n	23fa808 <_ZN16Adafruit_SSD1351D0Ev>

023fa838 <digitalWriteFast>:
    #define pinResetFast(pin) digitalWrite(pin, LOW)

#endif

inline void digitalWriteFast(hal_pin_t pin, uint8_t value)
{
 23fa838:	b570      	push	{r4, r5, r6, lr}
 23fa83a:	4604      	mov	r4, r0
    if (value)
 23fa83c:	4d26      	ldr	r5, [pc, #152]	; (23fa8d8 <digitalWriteFast+0xa0>)
 23fa83e:	4e27      	ldr	r6, [pc, #156]	; (23fa8dc <digitalWriteFast+0xa4>)
 23fa840:	b351      	cbz	r1, 23fa898 <digitalWriteFast+0x60>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fa842:	e8d5 3f8f 	ldab	r3, [r5]
 23fa846:	07da      	lsls	r2, r3, #31
 23fa848:	d409      	bmi.n	23fa85e <digitalWriteFast+0x26>
 23fa84a:	4628      	mov	r0, r5
 23fa84c:	f7ff fe28 	bl	23fa4a0 <__cxa_guard_acquire>
 23fa850:	b128      	cbz	r0, 23fa85e <digitalWriteFast+0x26>
 23fa852:	f000 ff03 	bl	23fb65c <hal_pin_map>
 23fa856:	6030      	str	r0, [r6, #0]
 23fa858:	4628      	mov	r0, r5
 23fa85a:	f7ff fe26 	bl	23fa4aa <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa85e:	200c      	movs	r0, #12
 23fa860:	4344      	muls	r4, r0
 23fa862:	6833      	ldr	r3, [r6, #0]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa864:	4a1e      	ldr	r2, [pc, #120]	; (23fa8e0 <digitalWriteFast+0xa8>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa866:	1919      	adds	r1, r3, r4
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa868:	5d1c      	ldrb	r4, [r3, r4]
 23fa86a:	4b1e      	ldr	r3, [pc, #120]	; (23fa8e4 <digitalWriteFast+0xac>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa86c:	7848      	ldrb	r0, [r1, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa86e:	2c00      	cmp	r4, #0
 23fa870:	bf18      	it	ne
 23fa872:	4613      	movne	r3, r2
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23fa874:	2201      	movs	r2, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa876:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23fa878:	4082      	lsls	r2, r0
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23fa87a:	2905      	cmp	r1, #5
 23fa87c:	d001      	beq.n	23fa882 <digitalWriteFast+0x4a>
 23fa87e:	2908      	cmp	r1, #8
 23fa880:	d104      	bne.n	23fa88c <digitalWriteFast+0x54>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23fa882:	6859      	ldr	r1, [r3, #4]
 23fa884:	ea21 0202 	bic.w	r2, r1, r2
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23fa888:	605a      	str	r2, [r3, #4]
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
 23fa88a:	bd70      	pop	{r4, r5, r6, pc}
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23fa88c:	6819      	ldr	r1, [r3, #0]
 23fa88e:	4311      	orrs	r1, r2
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23fa890:	6019      	str	r1, [r3, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23fa892:	6859      	ldr	r1, [r3, #4]
 23fa894:	430a      	orrs	r2, r1
 23fa896:	e7f7      	b.n	23fa888 <digitalWriteFast+0x50>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fa898:	e8d5 3f8f 	ldab	r3, [r5]
 23fa89c:	07db      	lsls	r3, r3, #31
 23fa89e:	d409      	bmi.n	23fa8b4 <digitalWriteFast+0x7c>
 23fa8a0:	4628      	mov	r0, r5
 23fa8a2:	f7ff fdfd 	bl	23fa4a0 <__cxa_guard_acquire>
 23fa8a6:	b128      	cbz	r0, 23fa8b4 <digitalWriteFast+0x7c>
 23fa8a8:	f000 fed8 	bl	23fb65c <hal_pin_map>
 23fa8ac:	6030      	str	r0, [r6, #0]
 23fa8ae:	4628      	mov	r0, r5
 23fa8b0:	f7ff fdfb 	bl	23fa4aa <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa8b4:	200c      	movs	r0, #12
 23fa8b6:	4344      	muls	r4, r0
 23fa8b8:	6833      	ldr	r3, [r6, #0]
 23fa8ba:	191a      	adds	r2, r3, r4
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa8bc:	5d19      	ldrb	r1, [r3, r4]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa8be:	7850      	ldrb	r0, [r2, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa8c0:	4b08      	ldr	r3, [pc, #32]	; (23fa8e4 <digitalWriteFast+0xac>)
 23fa8c2:	4a07      	ldr	r2, [pc, #28]	; (23fa8e0 <digitalWriteFast+0xa8>)
 23fa8c4:	2900      	cmp	r1, #0
 23fa8c6:	bf18      	it	ne
 23fa8c8:	4613      	movne	r3, r2
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23fa8ca:	2201      	movs	r2, #1
 23fa8cc:	6819      	ldr	r1, [r3, #0]
 23fa8ce:	4082      	lsls	r2, r0
 23fa8d0:	ea21 0102 	bic.w	r1, r1, r2
 23fa8d4:	e7dc      	b.n	23fa890 <digitalWriteFast+0x58>
 23fa8d6:	bf00      	nop
 23fa8d8:	1007ae4c 	.word	0x1007ae4c
 23fa8dc:	1007ae50 	.word	0x1007ae50
 23fa8e0:	48014400 	.word	0x48014400
 23fa8e4:	48014000 	.word	0x48014000

023fa8e8 <_ZN16Adafruit_SSD1351C1Ehhh>:
    _sclk = sclk;
    _rst = rst;
}

// Hardware SPI
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23fa8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa8ea:	4616      	mov	r6, r2
 23fa8ec:	2280      	movs	r2, #128	; 0x80
 23fa8ee:	4604      	mov	r4, r0
 23fa8f0:	460f      	mov	r7, r1
 23fa8f2:	300c      	adds	r0, #12
 23fa8f4:	4611      	mov	r1, r2
 23fa8f6:	461d      	mov	r5, r3
 23fa8f8:	f000 fdc6 	bl	23fb488 <_ZN12Adafruit_GFXC1Ess>
 23fa8fc:	4806      	ldr	r0, [pc, #24]	; (23fa918 <_ZN16Adafruit_SSD1351C1Ehhh+0x30>)
    _cs = cs;
 23fa8fe:	7127      	strb	r7, [r4, #4]
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23fa900:	f100 030c 	add.w	r3, r0, #12
 23fa904:	6023      	str	r3, [r4, #0]
    _rs = rs;
    _sid = 0;
 23fa906:	2300      	movs	r3, #0
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23fa908:	305c      	adds	r0, #92	; 0x5c
 23fa90a:	60e0      	str	r0, [r4, #12]
    _rs = rs;
 23fa90c:	7166      	strb	r6, [r4, #5]
    _sclk = 0;
    _rst = rst;
}
 23fa90e:	4620      	mov	r0, r4
    _sid = 0;
 23fa910:	71e3      	strb	r3, [r4, #7]
    _sclk = 0;
 23fa912:	7223      	strb	r3, [r4, #8]
    _rst = rst;
 23fa914:	71a5      	strb	r5, [r4, #6]
}
 23fa916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fa918:	023fedbc 	.word	0x023fedbc

023fa91c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fa91c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fa91e:	4c0a      	ldr	r4, [pc, #40]	; (23fa948 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fa920:	e8d4 1f8f 	ldab	r1, [r4]
 23fa924:	f011 0101 	ands.w	r1, r1, #1
 23fa928:	d10b      	bne.n	23fa942 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fa92a:	4620      	mov	r0, r4
 23fa92c:	9101      	str	r1, [sp, #4]
 23fa92e:	f7ff fdb7 	bl	23fa4a0 <__cxa_guard_acquire>
 23fa932:	9901      	ldr	r1, [sp, #4]
 23fa934:	b128      	cbz	r0, 23fa942 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fa936:	4805      	ldr	r0, [pc, #20]	; (23fa94c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fa938:	f001 fba4 	bl	23fc084 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fa93c:	4620      	mov	r0, r4
 23fa93e:	f7ff fdb4 	bl	23fa4aa <__cxa_guard_release>
        return instance;
    }
 23fa942:	4802      	ldr	r0, [pc, #8]	; (23fa94c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fa944:	b002      	add	sp, #8
 23fa946:	bd10      	pop	{r4, pc}
 23fa948:	1007ae40 	.word	0x1007ae40
 23fa94c:	1007ae44 	.word	0x1007ae44

023fa950 <_ZN16Adafruit_SSD13518spiwriteEh>:
inline void Adafruit_SSD1351::spiwrite(uint8_t c) {
 23fa950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!_sid) {
 23fa954:	79c3      	ldrb	r3, [r0, #7]
inline void Adafruit_SSD1351::spiwrite(uint8_t c) {
 23fa956:	4607      	mov	r7, r0
 23fa958:	4689      	mov	r9, r1
    if (!_sid) {
 23fa95a:	b933      	cbnz	r3, 23fa96a <_ZN16Adafruit_SSD13518spiwriteEh+0x1a>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23fa95c:	f7ff ffde 	bl	23fa91c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fa960:	4649      	mov	r1, r9
}
 23fa962:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa966:	f001 bc2d 	b.w	23fc1c4 <_ZN8SPIClass8transferEh>
 23fa96a:	f04f 0807 	mov.w	r8, #7
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fa96e:	4c58      	ldr	r4, [pc, #352]	; (23faad0 <_ZN16Adafruit_SSD13518spiwriteEh+0x180>)
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa970:	f8df a164 	ldr.w	sl, [pc, #356]	; 23faad8 <_ZN16Adafruit_SSD13518spiwriteEh+0x188>
 23fa974:	f8df b164 	ldr.w	fp, [pc, #356]	; 23faadc <_ZN16Adafruit_SSD13518spiwriteEh+0x18c>
		pinResetFast(_sclk);
 23fa978:	7a3d      	ldrb	r5, [r7, #8]
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fa97a:	e8d4 3f8f 	ldab	r3, [r4]
 23fa97e:	f013 0f01 	tst.w	r3, #1
 23fa982:	4e54      	ldr	r6, [pc, #336]	; (23faad4 <_ZN16Adafruit_SSD13518spiwriteEh+0x184>)
 23fa984:	d109      	bne.n	23fa99a <_ZN16Adafruit_SSD13518spiwriteEh+0x4a>
 23fa986:	4620      	mov	r0, r4
 23fa988:	f7ff fd8a 	bl	23fa4a0 <__cxa_guard_acquire>
 23fa98c:	b128      	cbz	r0, 23fa99a <_ZN16Adafruit_SSD13518spiwriteEh+0x4a>
 23fa98e:	f000 fe65 	bl	23fb65c <hal_pin_map>
 23fa992:	6030      	str	r0, [r6, #0]
 23fa994:	4620      	mov	r0, r4
 23fa996:	f7ff fd88 	bl	23fa4aa <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa99a:	6832      	ldr	r2, [r6, #0]
 23fa99c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 23fa9a0:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 23fa9a4:	7858      	ldrb	r0, [r3, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa9a6:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
 23fa9aa:	2b00      	cmp	r3, #0
 23fa9ac:	bf0c      	ite	eq
 23fa9ae:	4652      	moveq	r2, sl
 23fa9b0:	465a      	movne	r2, fp
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23fa9b2:	2301      	movs	r3, #1
 23fa9b4:	6811      	ldr	r1, [r2, #0]
 23fa9b6:	4083      	lsls	r3, r0
 23fa9b8:	ea21 0103 	bic.w	r1, r1, r3
 23fa9bc:	6011      	str	r1, [r2, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23fa9be:	6851      	ldr	r1, [r2, #4]
 23fa9c0:	430b      	orrs	r3, r1
 23fa9c2:	6053      	str	r3, [r2, #4]
		if (c & (1 << (7-bit)))		// walk down mask from bit 7 to bit 0
 23fa9c4:	fa49 f308 	asr.w	r3, r9, r8
 23fa9c8:	f013 0f01 	tst.w	r3, #1
 23fa9cc:	79fd      	ldrb	r5, [r7, #7]
 23fa9ce:	d055      	beq.n	23faa7c <_ZN16Adafruit_SSD13518spiwriteEh+0x12c>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fa9d0:	e8d4 3f8f 	ldab	r3, [r4]
 23fa9d4:	07d9      	lsls	r1, r3, #31
 23fa9d6:	d409      	bmi.n	23fa9ec <_ZN16Adafruit_SSD13518spiwriteEh+0x9c>
 23fa9d8:	4620      	mov	r0, r4
 23fa9da:	f7ff fd61 	bl	23fa4a0 <__cxa_guard_acquire>
 23fa9de:	b128      	cbz	r0, 23fa9ec <_ZN16Adafruit_SSD13518spiwriteEh+0x9c>
 23fa9e0:	f000 fe3c 	bl	23fb65c <hal_pin_map>
 23fa9e4:	6030      	str	r0, [r6, #0]
 23fa9e6:	4620      	mov	r0, r4
 23fa9e8:	f7ff fd5f 	bl	23fa4aa <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa9ec:	6832      	ldr	r2, [r6, #0]
 23fa9ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa9f2:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fa9f6:	eb02 0185 	add.w	r1, r2, r5, lsl #2
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fa9fa:	2b00      	cmp	r3, #0
 23fa9fc:	bf0c      	ite	eq
 23fa9fe:	4652      	moveq	r2, sl
 23faa00:	465a      	movne	r2, fp
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23faa02:	2301      	movs	r3, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23faa04:	7848      	ldrb	r0, [r1, #1]
 23faa06:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23faa08:	4083      	lsls	r3, r0
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23faa0a:	2905      	cmp	r1, #5
 23faa0c:	d001      	beq.n	23faa12 <_ZN16Adafruit_SSD13518spiwriteEh+0xc2>
 23faa0e:	2908      	cmp	r1, #8
 23faa10:	d12e      	bne.n	23faa70 <_ZN16Adafruit_SSD13518spiwriteEh+0x120>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23faa12:	6851      	ldr	r1, [r2, #4]
 23faa14:	ea21 0303 	bic.w	r3, r1, r3
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23faa18:	6053      	str	r3, [r2, #4]
		pinSetFast(_sclk);
 23faa1a:	7a3d      	ldrb	r5, [r7, #8]
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23faa1c:	e8d4 3f8f 	ldab	r3, [r4]
 23faa20:	07db      	lsls	r3, r3, #31
 23faa22:	d409      	bmi.n	23faa38 <_ZN16Adafruit_SSD13518spiwriteEh+0xe8>
 23faa24:	4620      	mov	r0, r4
 23faa26:	f7ff fd3b 	bl	23fa4a0 <__cxa_guard_acquire>
 23faa2a:	b128      	cbz	r0, 23faa38 <_ZN16Adafruit_SSD13518spiwriteEh+0xe8>
 23faa2c:	f000 fe16 	bl	23fb65c <hal_pin_map>
 23faa30:	6030      	str	r0, [r6, #0]
 23faa32:	4620      	mov	r0, r4
 23faa34:	f7ff fd39 	bl	23fa4aa <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23faa38:	6830      	ldr	r0, [r6, #0]
 23faa3a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23faa3e:	f810 3022 	ldrb.w	r3, [r0, r2, lsl #2]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23faa42:	eb00 0182 	add.w	r1, r0, r2, lsl #2
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23faa46:	2b00      	cmp	r3, #0
 23faa48:	bf0c      	ite	eq
 23faa4a:	4652      	moveq	r2, sl
 23faa4c:	465a      	movne	r2, fp
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23faa4e:	2301      	movs	r3, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23faa50:	784d      	ldrb	r5, [r1, #1]
 23faa52:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23faa54:	40ab      	lsls	r3, r5
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23faa56:	2905      	cmp	r1, #5
 23faa58:	d001      	beq.n	23faa5e <_ZN16Adafruit_SSD13518spiwriteEh+0x10e>
 23faa5a:	2908      	cmp	r1, #8
 23faa5c:	d132      	bne.n	23faac4 <_ZN16Adafruit_SSD13518spiwriteEh+0x174>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23faa5e:	6851      	ldr	r1, [r2, #4]
 23faa60:	ea21 0303 	bic.w	r3, r1, r3
	for (uint8_t bit = 0; bit < 8; bit++)  {
 23faa64:	f1b8 0801 	subs.w	r8, r8, #1
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23faa68:	6053      	str	r3, [r2, #4]
 23faa6a:	d285      	bcs.n	23fa978 <_ZN16Adafruit_SSD13518spiwriteEh+0x28>
}
 23faa6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23faa70:	6811      	ldr	r1, [r2, #0]
 23faa72:	4319      	orrs	r1, r3
 23faa74:	6011      	str	r1, [r2, #0]
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23faa76:	6851      	ldr	r1, [r2, #4]
 23faa78:	430b      	orrs	r3, r1
 23faa7a:	e7cd      	b.n	23faa18 <_ZN16Adafruit_SSD13518spiwriteEh+0xc8>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23faa7c:	e8d4 3f8f 	ldab	r3, [r4]
 23faa80:	07da      	lsls	r2, r3, #31
 23faa82:	d409      	bmi.n	23faa98 <_ZN16Adafruit_SSD13518spiwriteEh+0x148>
 23faa84:	4620      	mov	r0, r4
 23faa86:	f7ff fd0b 	bl	23fa4a0 <__cxa_guard_acquire>
 23faa8a:	b128      	cbz	r0, 23faa98 <_ZN16Adafruit_SSD13518spiwriteEh+0x148>
 23faa8c:	f000 fde6 	bl	23fb65c <hal_pin_map>
 23faa90:	6030      	str	r0, [r6, #0]
 23faa92:	4620      	mov	r0, r4
 23faa94:	f7ff fd09 	bl	23fa4aa <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23faa98:	6832      	ldr	r2, [r6, #0]
 23faa9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 23faa9e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 23faaa2:	7858      	ldrb	r0, [r3, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23faaa4:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
 23faaa8:	2b00      	cmp	r3, #0
 23faaaa:	bf0c      	ite	eq
 23faaac:	4651      	moveq	r1, sl
 23faaae:	4659      	movne	r1, fp
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23faab0:	2301      	movs	r3, #1
 23faab2:	680a      	ldr	r2, [r1, #0]
 23faab4:	4083      	lsls	r3, r0
 23faab6:	ea22 0203 	bic.w	r2, r2, r3
 23faaba:	600a      	str	r2, [r1, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23faabc:	684a      	ldr	r2, [r1, #4]
 23faabe:	4313      	orrs	r3, r2
 23faac0:	604b      	str	r3, [r1, #4]
}
 23faac2:	e7aa      	b.n	23faa1a <_ZN16Adafruit_SSD13518spiwriteEh+0xca>
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23faac4:	6811      	ldr	r1, [r2, #0]
 23faac6:	4319      	orrs	r1, r3
 23faac8:	6011      	str	r1, [r2, #0]
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23faaca:	6851      	ldr	r1, [r2, #4]
 23faacc:	430b      	orrs	r3, r1
 23faace:	e7c9      	b.n	23faa64 <_ZN16Adafruit_SSD13518spiwriteEh+0x114>
 23faad0:	1007ae4c 	.word	0x1007ae4c
 23faad4:	1007ae50 	.word	0x1007ae50
 23faad8:	48014000 	.word	0x48014000
 23faadc:	48014400 	.word	0x48014400

023faae0 <_ZN16Adafruit_SSD135112writeCommandEh>:
void Adafruit_SSD1351::writeCommand(uint8_t c) {
 23faae0:	b538      	push	{r3, r4, r5, lr}
 23faae2:	4604      	mov	r4, r0
 23faae4:	460d      	mov	r5, r1
    digitalWriteFast(_rs, LOW);
 23faae6:	7940      	ldrb	r0, [r0, #5]
 23faae8:	2100      	movs	r1, #0
 23faaea:	f7ff fea5 	bl	23fa838 <digitalWriteFast>
    digitalWriteFast(_cs, LOW);
 23faaee:	7920      	ldrb	r0, [r4, #4]
 23faaf0:	2100      	movs	r1, #0
 23faaf2:	f7ff fea1 	bl	23fa838 <digitalWriteFast>
    spiwrite(c);
 23faaf6:	4629      	mov	r1, r5
 23faaf8:	4620      	mov	r0, r4
 23faafa:	f7ff ff29 	bl	23fa950 <_ZN16Adafruit_SSD13518spiwriteEh>
    digitalWriteFast(_cs, HIGH);
 23faafe:	2101      	movs	r1, #1
 23fab00:	7920      	ldrb	r0, [r4, #4]
 23fab02:	f7ff fe99 	bl	23fa838 <digitalWriteFast>
}
 23fab06:	bd38      	pop	{r3, r4, r5, pc}

023fab08 <_ZN16Adafruit_SSD13519writeDataEh>:
void Adafruit_SSD1351::writeData(uint8_t c) {
 23fab08:	b538      	push	{r3, r4, r5, lr}
 23fab0a:	4604      	mov	r4, r0
 23fab0c:	460d      	mov	r5, r1
    digitalWriteFast(_rs, HIGH);
 23fab0e:	7940      	ldrb	r0, [r0, #5]
 23fab10:	2101      	movs	r1, #1
 23fab12:	f7ff fe91 	bl	23fa838 <digitalWriteFast>
    digitalWriteFast(_cs, LOW);
 23fab16:	7920      	ldrb	r0, [r4, #4]
 23fab18:	2100      	movs	r1, #0
 23fab1a:	f7ff fe8d 	bl	23fa838 <digitalWriteFast>
    spiwrite(c);
 23fab1e:	4629      	mov	r1, r5
 23fab20:	4620      	mov	r0, r4
 23fab22:	f7ff ff15 	bl	23fa950 <_ZN16Adafruit_SSD13518spiwriteEh>
    digitalWriteFast(_cs, HIGH);
 23fab26:	2101      	movs	r1, #1
 23fab28:	7920      	ldrb	r0, [r4, #4]
 23fab2a:	f7ff fe85 	bl	23fa838 <digitalWriteFast>
}
 23fab2e:	bd38      	pop	{r3, r4, r5, pc}

023fab30 <_ZN16Adafruit_SSD13514goToEii>:
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23fab30:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::goTo(int x, int y) {
 23fab32:	b570      	push	{r4, r5, r6, lr}
 23fab34:	4604      	mov	r4, r0
 23fab36:	460e      	mov	r6, r1
 23fab38:	4615      	mov	r5, r2
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23fab3a:	dc1e      	bgt.n	23fab7a <_ZN16Adafruit_SSD13514goToEii+0x4a>
 23fab3c:	2a7f      	cmp	r2, #127	; 0x7f
 23fab3e:	dc1c      	bgt.n	23fab7a <_ZN16Adafruit_SSD13514goToEii+0x4a>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23fab40:	2115      	movs	r1, #21
 23fab42:	f7ff ffcd 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23fab46:	4620      	mov	r0, r4
 23fab48:	b2f1      	uxtb	r1, r6
 23fab4a:	f7ff ffdd 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(SSD1351WIDTH-1);
 23fab4e:	4620      	mov	r0, r4
 23fab50:	217f      	movs	r1, #127	; 0x7f
 23fab52:	f7ff ffd9 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_SETROW);
 23fab56:	4620      	mov	r0, r4
 23fab58:	2175      	movs	r1, #117	; 0x75
 23fab5a:	f7ff ffc1 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23fab5e:	4620      	mov	r0, r4
 23fab60:	b2e9      	uxtb	r1, r5
 23fab62:	f7ff ffd1 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(SSD1351HEIGHT-1);
 23fab66:	4620      	mov	r0, r4
 23fab68:	217f      	movs	r1, #127	; 0x7f
 23fab6a:	f7ff ffcd 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23fab6e:	4620      	mov	r0, r4
}
 23fab70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeCommand(SSD1351_CMD_WRITERAM);
 23fab74:	215c      	movs	r1, #92	; 0x5c
 23fab76:	f7ff bfb3 	b.w	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
}
 23fab7a:	bd70      	pop	{r4, r5, r6, pc}

023fab7c <_ZN16Adafruit_SSD135111rawFillRectEttttt>:
void Adafruit_SSD1351::rawFillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23fab7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23fab80:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23fab82:	4606      	mov	r6, r0
 23fab84:	460d      	mov	r5, r1
 23fab86:	4614      	mov	r4, r2
 23fab88:	461f      	mov	r7, r3
 23fab8a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 23fab8e:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23fab92:	d849      	bhi.n	23fac28 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
 23fab94:	2a7f      	cmp	r2, #127	; 0x7f
 23fab96:	d847      	bhi.n	23fac28 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
  if (y+h > SSD1351HEIGHT)
 23fab98:	eb02 0308 	add.w	r3, r2, r8
 23fab9c:	2b80      	cmp	r3, #128	; 0x80
    h = SSD1351HEIGHT - y - 1;
 23fab9e:	bfc8      	it	gt
 23faba0:	f1c2 087f 	rsbgt	r8, r2, #127	; 0x7f
  if (x+w > SSD1351WIDTH)
 23faba4:	eb01 0307 	add.w	r3, r1, r7
    h = SSD1351HEIGHT - y - 1;
 23faba8:	bfc8      	it	gt
 23fabaa:	fa1f f888 	uxthgt.w	r8, r8
  if (x+w > SSD1351WIDTH)
 23fabae:	2b80      	cmp	r3, #128	; 0x80
    w = SSD1351WIDTH - x - 1;
 23fabb0:	bfc8      	it	gt
 23fabb2:	f1c1 077f 	rsbgt	r7, r1, #127	; 0x7f
  writeData(x);
 23fabb6:	b2ed      	uxtb	r5, r5
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23fabb8:	f04f 0115 	mov.w	r1, #21
    w = SSD1351WIDTH - x - 1;
 23fabbc:	bfc8      	it	gt
 23fabbe:	b2bf      	uxthgt	r7, r7
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23fabc0:	f7ff ff8e 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23fabc4:	4629      	mov	r1, r5
 23fabc6:	4630      	mov	r0, r6
  writeData(x+w-1);
 23fabc8:	3d01      	subs	r5, #1
  writeData(x);
 23fabca:	f7ff ff9d 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x+w-1);
 23fabce:	19e9      	adds	r1, r5, r7
 23fabd0:	4630      	mov	r0, r6
 23fabd2:	b2c9      	uxtb	r1, r1
 23fabd4:	f7ff ff98 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23fabd8:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETROW);
 23fabda:	2175      	movs	r1, #117	; 0x75
 23fabdc:	4630      	mov	r0, r6
 23fabde:	f7ff ff7f 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23fabe2:	4621      	mov	r1, r4
  writeData(y+h-1);
 23fabe4:	3c01      	subs	r4, #1
  writeData(y);
 23fabe6:	4630      	mov	r0, r6
  writeData(y+h-1);
 23fabe8:	4444      	add	r4, r8
  writeData(y);
 23fabea:	f7ff ff8d 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y+h-1);
 23fabee:	b2e1      	uxtb	r1, r4
 23fabf0:	4630      	mov	r0, r6
 23fabf2:	f7ff ff89 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23fabf6:	215c      	movs	r1, #92	; 0x5c
 23fabf8:	4630      	mov	r0, r6
 23fabfa:	f7ff ff71 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(fillcolor >> 8);
 23fabfe:	2400      	movs	r4, #0
  for (uint16_t i=0; i < w*h; i++) {
 23fac00:	fb08 f707 	mul.w	r7, r8, r7
    writeData(fillcolor >> 8);
 23fac04:	ea4f 2519 	mov.w	r5, r9, lsr #8
    writeData(fillcolor);
 23fac08:	fa5f f989 	uxtb.w	r9, r9
  for (uint16_t i=0; i < w*h; i++) {
 23fac0c:	b2a3      	uxth	r3, r4
 23fac0e:	42bb      	cmp	r3, r7
 23fac10:	f104 0401 	add.w	r4, r4, #1
 23fac14:	da08      	bge.n	23fac28 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
    writeData(fillcolor >> 8);
 23fac16:	4629      	mov	r1, r5
 23fac18:	4630      	mov	r0, r6
 23fac1a:	f7ff ff75 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(fillcolor);
 23fac1e:	4649      	mov	r1, r9
 23fac20:	4630      	mov	r0, r6
 23fac22:	f7ff ff71 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < w*h; i++) {
 23fac26:	e7f1      	b.n	23fac0c <_ZN16Adafruit_SSD135111rawFillRectEttttt+0x90>
}
 23fac28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023fac2c <_ZN16Adafruit_SSD13518fillRectEttttt>:
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23fac2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fac30:	4604      	mov	r4, r0
 23fac32:	461f      	mov	r7, r3
  switch (getRotation()) {
 23fac34:	6803      	ldr	r3, [r0, #0]
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23fac36:	460e      	mov	r6, r1
  switch (getRotation()) {
 23fac38:	f853 0c0c 	ldr.w	r0, [r3, #-12]
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23fac3c:	4615      	mov	r5, r2
  switch (getRotation()) {
 23fac3e:	4420      	add	r0, r4
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23fac40:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 23fac44:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  switch (getRotation()) {
 23fac48:	f000 fce9 	bl	23fb61e <_ZN12Adafruit_GFX11getRotationEv>
 23fac4c:	2803      	cmp	r0, #3
 23fac4e:	d836      	bhi.n	23facbe <_ZN16Adafruit_SSD13518fillRectEttttt+0x92>
 23fac50:	e8df f000 	tbb	[pc, r0]
 23fac54:	28190c02 	.word	0x28190c02
    rawFillRect(x, y, w, h, fillcolor);
 23fac58:	463b      	mov	r3, r7
 23fac5a:	462a      	mov	r2, r5
 23fac5c:	4631      	mov	r1, r6
 23fac5e:	e9cd 8908 	strd	r8, r9, [sp, #32]
    rawFillRect(x, y, h, w, fillcolor);
 23fac62:	4620      	mov	r0, r4
}
 23fac64:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rawFillRect(x, y, h, w, fillcolor);
 23fac68:	f7ff bf88 	b.w	23fab7c <_ZN16Adafruit_SSD135111rawFillRectEttttt>
    x = WIDTH - x - h;
 23fac6c:	6823      	ldr	r3, [r4, #0]
    rawFillRect(x, y, h, w, fillcolor);
 23fac6e:	4632      	mov	r2, r6
    x = WIDTH - x - h;
 23fac70:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23fac74:	4445      	add	r5, r8
 23fac76:	4423      	add	r3, r4
 23fac78:	8919      	ldrh	r1, [r3, #8]
    rawFillRect(x, y, h, w, fillcolor);
 23fac7a:	4643      	mov	r3, r8
 23fac7c:	e9cd 7908 	strd	r7, r9, [sp, #32]
    x = WIDTH - x - h;
 23fac80:	1b49      	subs	r1, r1, r5
    rawFillRect(x, y, w, h, fillcolor);
 23fac82:	b289      	uxth	r1, r1
 23fac84:	e7ed      	b.n	23fac62 <_ZN16Adafruit_SSD13518fillRectEttttt+0x36>
    x = WIDTH - x - w;
 23fac86:	6823      	ldr	r3, [r4, #0]
    y = HEIGHT - y - h;
 23fac88:	4445      	add	r5, r8
    x = WIDTH - x - w;
 23fac8a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23fac8e:	443e      	add	r6, r7
 23fac90:	4423      	add	r3, r4
    y = HEIGHT - y - h;
 23fac92:	895a      	ldrh	r2, [r3, #10]
    x = WIDTH - x - w;
 23fac94:	8919      	ldrh	r1, [r3, #8]
    y = HEIGHT - y - h;
 23fac96:	1b52      	subs	r2, r2, r5
    rawFillRect(x, y, w, h, fillcolor);
 23fac98:	463b      	mov	r3, r7
 23fac9a:	e9cd 8908 	strd	r8, r9, [sp, #32]
    x = WIDTH - x - w;
 23fac9e:	1b89      	subs	r1, r1, r6
    rawFillRect(x, y, w, h, fillcolor);
 23faca0:	b292      	uxth	r2, r2
 23faca2:	e7ee      	b.n	23fac82 <_ZN16Adafruit_SSD13518fillRectEttttt+0x56>
    y = HEIGHT - y - w;
 23faca4:	6823      	ldr	r3, [r4, #0]
 23faca6:	443e      	add	r6, r7
 23faca8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    rawFillRect(x, y, h, w, fillcolor);
 23facac:	4629      	mov	r1, r5
    y = HEIGHT - y - w;
 23facae:	4423      	add	r3, r4
 23facb0:	895a      	ldrh	r2, [r3, #10]
    rawFillRect(x, y, h, w, fillcolor);
 23facb2:	4643      	mov	r3, r8
    y = HEIGHT - y - w;
 23facb4:	1b92      	subs	r2, r2, r6
    rawFillRect(x, y, h, w, fillcolor);
 23facb6:	e9cd 7908 	strd	r7, r9, [sp, #32]
 23facba:	b292      	uxth	r2, r2
 23facbc:	e7d1      	b.n	23fac62 <_ZN16Adafruit_SSD13518fillRectEttttt+0x36>
}
 23facbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023facc2 <_ZN16Adafruit_SSD135110fillScreenEt>:
void Adafruit_SSD1351::fillScreen(uint16_t fillcolor) {
 23facc2:	b507      	push	{r0, r1, r2, lr}
  fillRect(0, 0, SSD1351WIDTH, SSD1351HEIGHT, fillcolor);
 23facc4:	2380      	movs	r3, #128	; 0x80
 23facc6:	2200      	movs	r2, #0
 23facc8:	9101      	str	r1, [sp, #4]
 23facca:	9300      	str	r3, [sp, #0]
 23faccc:	4611      	mov	r1, r2
 23facce:	f7ff ffad 	bl	23fac2c <_ZN16Adafruit_SSD13518fillRectEttttt>
}
 23facd2:	b003      	add	sp, #12
 23facd4:	f85d fb04 	ldr.w	pc, [sp], #4

023facd8 <_ZTv0_n48_N16Adafruit_SSD135110fillScreenEt>:
  // drawing primitives!
  void drawPixel(int16_t x, int16_t y, uint16_t color);
  void fillRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t color);
  void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
  void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  void fillScreen(uint16_t fillcolor);
 23facd8:	f8d0 c000 	ldr.w	ip, [r0]
 23facdc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 23face0:	f8dc c000 	ldr.w	ip, [ip]
 23face4:	4460      	add	r0, ip
 23face6:	f7ff bfec 	b.w	23facc2 <_ZN16Adafruit_SSD135110fillScreenEt>

023facea <_ZN16Adafruit_SSD135112rawFastHLineEssst>:
void Adafruit_SSD1351::rawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23facea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23facee:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23facf0:	4605      	mov	r5, r0
 23facf2:	460c      	mov	r4, r1
 23facf4:	4617      	mov	r7, r2
 23facf6:	461e      	mov	r6, r3
 23facf8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23facfc:	dc3b      	bgt.n	23fad76 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
 23facfe:	2a7f      	cmp	r2, #127	; 0x7f
 23fad00:	dc39      	bgt.n	23fad76 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
  if (x+w > SSD1351WIDTH)
 23fad02:	18cb      	adds	r3, r1, r3
 23fad04:	2b80      	cmp	r3, #128	; 0x80
    w = SSD1351WIDTH - x - 1;
 23fad06:	bfc4      	itt	gt
 23fad08:	f1c1 067f 	rsbgt	r6, r1, #127	; 0x7f
 23fad0c:	b236      	sxthgt	r6, r6
  if (w < 0) return;
 23fad0e:	2e00      	cmp	r6, #0
 23fad10:	db31      	blt.n	23fad76 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23fad12:	2115      	movs	r1, #21
  writeData(x);
 23fad14:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23fad16:	f7ff fee3 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23fad1a:	4621      	mov	r1, r4
  writeData(x+w-1);
 23fad1c:	3c01      	subs	r4, #1
  writeData(x);
 23fad1e:	4628      	mov	r0, r5
  writeData(x+w-1);
 23fad20:	4434      	add	r4, r6
  writeData(x);
 23fad22:	f7ff fef1 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x+w-1);
 23fad26:	b2e1      	uxtb	r1, r4
 23fad28:	4628      	mov	r0, r5
 23fad2a:	f7ff feed 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_SETROW);
 23fad2e:	2175      	movs	r1, #117	; 0x75
 23fad30:	4628      	mov	r0, r5
 23fad32:	f7ff fed5 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23fad36:	b2f9      	uxtb	r1, r7
 23fad38:	4628      	mov	r0, r5
 23fad3a:	9101      	str	r1, [sp, #4]
 23fad3c:	f7ff fee4 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23fad40:	4628      	mov	r0, r5
 23fad42:	9901      	ldr	r1, [sp, #4]
 23fad44:	f7ff fee0 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23fad48:	215c      	movs	r1, #92	; 0x5c
 23fad4a:	4628      	mov	r0, r5
 23fad4c:	f7ff fec8 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(color >> 8);
 23fad50:	2400      	movs	r4, #0
 23fad52:	ea4f 2718 	mov.w	r7, r8, lsr #8
    writeData(color);
 23fad56:	fa5f f888 	uxtb.w	r8, r8
  for (uint16_t i=0; i < w; i++) {
 23fad5a:	b2a3      	uxth	r3, r4
 23fad5c:	42b3      	cmp	r3, r6
 23fad5e:	f104 0401 	add.w	r4, r4, #1
 23fad62:	da08      	bge.n	23fad76 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
    writeData(color >> 8);
 23fad64:	4639      	mov	r1, r7
 23fad66:	4628      	mov	r0, r5
 23fad68:	f7ff fece 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(color);
 23fad6c:	4641      	mov	r1, r8
 23fad6e:	4628      	mov	r0, r5
 23fad70:	f7ff feca 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < w; i++) {
 23fad74:	e7f1      	b.n	23fad5a <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x70>
}
 23fad76:	b002      	add	sp, #8
 23fad78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fad7c <_ZN16Adafruit_SSD135112rawFastVLineEssst>:
void Adafruit_SSD1351::rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fad7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23fad80:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fad82:	4605      	mov	r5, r0
 23fad84:	460f      	mov	r7, r1
 23fad86:	4614      	mov	r4, r2
 23fad88:	461e      	mov	r6, r3
 23fad8a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23fad8e:	dc3b      	bgt.n	23fae08 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
 23fad90:	2a7f      	cmp	r2, #127	; 0x7f
 23fad92:	dc39      	bgt.n	23fae08 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
  if (y+h > SSD1351HEIGHT)
 23fad94:	18d3      	adds	r3, r2, r3
 23fad96:	2b80      	cmp	r3, #128	; 0x80
    h = SSD1351HEIGHT - y - 1;
 23fad98:	bfc4      	itt	gt
 23fad9a:	f1c2 067f 	rsbgt	r6, r2, #127	; 0x7f
 23fad9e:	b236      	sxthgt	r6, r6
  if (h < 0) return;
 23fada0:	2e00      	cmp	r6, #0
 23fada2:	db31      	blt.n	23fae08 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23fada4:	2115      	movs	r1, #21
 23fada6:	f7ff fe9b 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23fadaa:	b2f9      	uxtb	r1, r7
 23fadac:	4628      	mov	r0, r5
 23fadae:	9101      	str	r1, [sp, #4]
 23fadb0:	f7ff feaa 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x);
 23fadb4:	4628      	mov	r0, r5
 23fadb6:	9901      	ldr	r1, [sp, #4]
 23fadb8:	f7ff fea6 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23fadbc:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETROW);
 23fadbe:	2175      	movs	r1, #117	; 0x75
 23fadc0:	4628      	mov	r0, r5
 23fadc2:	f7ff fe8d 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23fadc6:	4621      	mov	r1, r4
  writeData(y+h-1);
 23fadc8:	3c01      	subs	r4, #1
  writeData(y);
 23fadca:	4628      	mov	r0, r5
  writeData(y+h-1);
 23fadcc:	4434      	add	r4, r6
  writeData(y);
 23fadce:	f7ff fe9b 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y+h-1);
 23fadd2:	b2e1      	uxtb	r1, r4
 23fadd4:	4628      	mov	r0, r5
 23fadd6:	f7ff fe97 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23fadda:	215c      	movs	r1, #92	; 0x5c
 23faddc:	4628      	mov	r0, r5
 23fadde:	f7ff fe7f 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(color >> 8);
 23fade2:	2400      	movs	r4, #0
 23fade4:	ea4f 2718 	mov.w	r7, r8, lsr #8
    writeData(color);
 23fade8:	fa5f f888 	uxtb.w	r8, r8
  for (uint16_t i=0; i < h; i++) {
 23fadec:	b2a3      	uxth	r3, r4
 23fadee:	42b3      	cmp	r3, r6
 23fadf0:	f104 0401 	add.w	r4, r4, #1
 23fadf4:	da08      	bge.n	23fae08 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
    writeData(color >> 8);
 23fadf6:	4639      	mov	r1, r7
 23fadf8:	4628      	mov	r0, r5
 23fadfa:	f7ff fe85 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(color);
 23fadfe:	4641      	mov	r1, r8
 23fae00:	4628      	mov	r0, r5
 23fae02:	f7ff fe81 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < h; i++) {
 23fae06:	e7f1      	b.n	23fadec <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x70>
}
 23fae08:	b002      	add	sp, #8
 23fae0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fae0e <_ZN16Adafruit_SSD135113drawFastVLineEssst>:
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fae0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fae10:	4604      	mov	r4, r0
 23fae12:	4616      	mov	r6, r2
  switch (getRotation()) {
 23fae14:	6802      	ldr	r2, [r0, #0]
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fae16:	9301      	str	r3, [sp, #4]
  switch (getRotation()) {
 23fae18:	f852 0c0c 	ldr.w	r0, [r2, #-12]
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fae1c:	460d      	mov	r5, r1
  switch (getRotation()) {
 23fae1e:	4420      	add	r0, r4
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23fae20:	f8bd 7020 	ldrh.w	r7, [sp, #32]
  switch (getRotation()) {
 23fae24:	f000 fbfb 	bl	23fb61e <_ZN12Adafruit_GFX11getRotationEv>
 23fae28:	9b01      	ldr	r3, [sp, #4]
 23fae2a:	2803      	cmp	r0, #3
 23fae2c:	d835      	bhi.n	23fae9a <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x8c>
 23fae2e:	e8df f000 	tbb	[pc, r0]
 23fae32:	0b02      	.short	0x0b02
 23fae34:	291b      	.short	0x291b
    rawFastVLine(x, y, h, color);
 23fae36:	4632      	mov	r2, r6
 23fae38:	4629      	mov	r1, r5
 23fae3a:	9708      	str	r7, [sp, #32]
    rawFastVLine(x, y, h, color);
 23fae3c:	4620      	mov	r0, r4
}
 23fae3e:	b003      	add	sp, #12
 23fae40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastVLine(x, y, h, color);
 23fae44:	f7ff bf9a 	b.w	23fad7c <_ZN16Adafruit_SSD135112rawFastVLineEssst>
    x = WIDTH - x - h;
 23fae48:	6822      	ldr	r2, [r4, #0]
 23fae4a:	441e      	add	r6, r3
 23fae4c:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    rawFastHLine(x, y, h, color);
 23fae50:	462a      	mov	r2, r5
    x = WIDTH - x - h;
 23fae52:	4420      	add	r0, r4
 23fae54:	8901      	ldrh	r1, [r0, #8]
    rawFastHLine(x, y, h, color);
 23fae56:	9708      	str	r7, [sp, #32]
    x = WIDTH - x - h;
 23fae58:	1b89      	subs	r1, r1, r6
    rawFastHLine(x, y, h, color);
 23fae5a:	b209      	sxth	r1, r1
    rawFastHLine(x, y, h, color);
 23fae5c:	4620      	mov	r0, r4
}
 23fae5e:	b003      	add	sp, #12
 23fae60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastHLine(x, y, h, color);
 23fae64:	f7ff bf41 	b.w	23facea <_ZN16Adafruit_SSD135112rawFastHLineEssst>
    x = WIDTH - x - 1;
 23fae68:	43e9      	mvns	r1, r5
 23fae6a:	6822      	ldr	r2, [r4, #0]
    y = HEIGHT - y - h;
 23fae6c:	441e      	add	r6, r3
    x = WIDTH - x - 1;
 23fae6e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23fae72:	4420      	add	r0, r4
    y = HEIGHT - y - h;
 23fae74:	8942      	ldrh	r2, [r0, #10]
    x = WIDTH - x - 1;
 23fae76:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - h;
 23fae78:	1b92      	subs	r2, r2, r6
    x = WIDTH - x - 1;
 23fae7a:	4429      	add	r1, r5
    rawFastVLine(x, y, h, color);
 23fae7c:	9708      	str	r7, [sp, #32]
 23fae7e:	b212      	sxth	r2, r2
 23fae80:	b209      	sxth	r1, r1
 23fae82:	e7db      	b.n	23fae3c <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x2e>
    y = HEIGHT - y - 1;
 23fae84:	43ed      	mvns	r5, r5
 23fae86:	6822      	ldr	r2, [r4, #0]
    rawFastHLine(x, y, h, color);
 23fae88:	4631      	mov	r1, r6
    y = HEIGHT - y - 1;
 23fae8a:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23fae8e:	4422      	add	r2, r4
 23fae90:	8952      	ldrh	r2, [r2, #10]
    rawFastHLine(x, y, h, color);
 23fae92:	9708      	str	r7, [sp, #32]
    y = HEIGHT - y - 1;
 23fae94:	442a      	add	r2, r5
    rawFastHLine(x, y, h, color);
 23fae96:	b212      	sxth	r2, r2
 23fae98:	e7e0      	b.n	23fae5c <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x4e>
}
 23fae9a:	b003      	add	sp, #12
 23fae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fae9e <_ZTv0_n32_N16Adafruit_SSD135113drawFastVLineEssst>:
  void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
 23fae9e:	f8d0 c000 	ldr.w	ip, [r0]
 23faea2:	f1ac 0c20 	sub.w	ip, ip, #32
 23faea6:	f8dc c000 	ldr.w	ip, [ip]
 23faeaa:	4460      	add	r0, ip
 23faeac:	f7ff bfaf 	b.w	23fae0e <_ZN16Adafruit_SSD135113drawFastVLineEssst>

023faeb0 <_ZN16Adafruit_SSD135113drawFastHLineEssst>:
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23faeb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23faeb2:	4604      	mov	r4, r0
 23faeb4:	4615      	mov	r5, r2
  switch (getRotation()) {
 23faeb6:	6802      	ldr	r2, [r0, #0]
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23faeb8:	9301      	str	r3, [sp, #4]
  switch (getRotation()) {
 23faeba:	f852 0c0c 	ldr.w	r0, [r2, #-12]
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23faebe:	460e      	mov	r6, r1
  switch (getRotation()) {
 23faec0:	4420      	add	r0, r4
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23faec2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
  switch (getRotation()) {
 23faec6:	f000 fbaa 	bl	23fb61e <_ZN12Adafruit_GFX11getRotationEv>
 23faeca:	9b01      	ldr	r3, [sp, #4]
 23faecc:	2803      	cmp	r0, #3
 23faece:	d835      	bhi.n	23faf3c <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x8c>
 23faed0:	e8df f000 	tbb	[pc, r0]
 23faed4:	291b0b02 	.word	0x291b0b02
    rawFastHLine(x, y, w, color);
 23faed8:	462a      	mov	r2, r5
 23faeda:	4631      	mov	r1, r6
 23faedc:	9708      	str	r7, [sp, #32]
    rawFastHLine(x, y, w, color);
 23faede:	4620      	mov	r0, r4
}
 23faee0:	b003      	add	sp, #12
 23faee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastHLine(x, y, w, color);
 23faee6:	f7ff bf00 	b.w	23facea <_ZN16Adafruit_SSD135112rawFastHLineEssst>
    x = WIDTH - x - 1;
 23faeea:	6822      	ldr	r2, [r4, #0]
 23faeec:	43e9      	mvns	r1, r5
 23faeee:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23faef2:	4422      	add	r2, r4
 23faef4:	8915      	ldrh	r5, [r2, #8]
    rawFastVLine(x, y, w, color);
 23faef6:	4632      	mov	r2, r6
    x = WIDTH - x - 1;
 23faef8:	4429      	add	r1, r5
    rawFastVLine(x, y, w, color);
 23faefa:	9708      	str	r7, [sp, #32]
 23faefc:	b209      	sxth	r1, r1
    rawFastVLine(x, y, w, color);
 23faefe:	4620      	mov	r0, r4
}
 23faf00:	b003      	add	sp, #12
 23faf02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastVLine(x, y, w, color);
 23faf06:	f7ff bf39 	b.w	23fad7c <_ZN16Adafruit_SSD135112rawFastVLineEssst>
    x = WIDTH - x - w;
 23faf0a:	6822      	ldr	r2, [r4, #0]
 23faf0c:	441e      	add	r6, r3
 23faf0e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    y = HEIGHT - y - 1;
 23faf12:	43ea      	mvns	r2, r5
    x = WIDTH - x - w;
 23faf14:	4420      	add	r0, r4
    y = HEIGHT - y - 1;
 23faf16:	8945      	ldrh	r5, [r0, #10]
    x = WIDTH - x - w;
 23faf18:	8901      	ldrh	r1, [r0, #8]
    y = HEIGHT - y - 1;
 23faf1a:	442a      	add	r2, r5
    x = WIDTH - x - w;
 23faf1c:	1b89      	subs	r1, r1, r6
    rawFastHLine(x, y, w, color);
 23faf1e:	9708      	str	r7, [sp, #32]
 23faf20:	b212      	sxth	r2, r2
 23faf22:	b209      	sxth	r1, r1
 23faf24:	e7db      	b.n	23faede <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x2e>
    y = HEIGHT - y - w;
 23faf26:	6822      	ldr	r2, [r4, #0]
 23faf28:	441e      	add	r6, r3
 23faf2a:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    rawFastVLine(x, y, w, color);
 23faf2e:	4629      	mov	r1, r5
    y = HEIGHT - y - w;
 23faf30:	4422      	add	r2, r4
 23faf32:	8952      	ldrh	r2, [r2, #10]
    rawFastVLine(x, y, w, color);
 23faf34:	9708      	str	r7, [sp, #32]
    y = HEIGHT - y - w;
 23faf36:	1b92      	subs	r2, r2, r6
    rawFastVLine(x, y, w, color);
 23faf38:	b212      	sxth	r2, r2
 23faf3a:	e7e0      	b.n	23faefe <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x4e>
}
 23faf3c:	b003      	add	sp, #12
 23faf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023faf40 <_ZTv0_n36_N16Adafruit_SSD135113drawFastHLineEssst>:
  void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
 23faf40:	f8d0 c000 	ldr.w	ip, [r0]
 23faf44:	f1ac 0c24 	sub.w	ip, ip, #36	; 0x24
 23faf48:	f8dc c000 	ldr.w	ip, [ip]
 23faf4c:	4460      	add	r0, ip
 23faf4e:	f7ff bfaf 	b.w	23faeb0 <_ZN16Adafruit_SSD135113drawFastHLineEssst>

023faf52 <_ZN16Adafruit_SSD13515beginEv>:
void Adafruit_SSD1351::begin(void) {
 23faf52:	b510      	push	{r4, lr}
 23faf54:	4604      	mov	r4, r0
    pinMode(_rs, OUTPUT);
 23faf56:	2101      	movs	r1, #1
 23faf58:	7940      	ldrb	r0, [r0, #5]
 23faf5a:	f003 fab9 	bl	23fe4d0 <pinMode>
    if (_sclk) {
 23faf5e:	7a20      	ldrb	r0, [r4, #8]
 23faf60:	2800      	cmp	r0, #0
 23faf62:	f000 80da 	beq.w	23fb11a <_ZN16Adafruit_SSD13515beginEv+0x1c8>
        pinMode(_sclk, OUTPUT);
 23faf66:	2101      	movs	r1, #1
 23faf68:	f003 fab2 	bl	23fe4d0 <pinMode>
        pinMode(_sid, OUTPUT);
 23faf6c:	2101      	movs	r1, #1
 23faf6e:	79e0      	ldrb	r0, [r4, #7]
 23faf70:	f003 faae 	bl	23fe4d0 <pinMode>
    pinMode(_cs, OUTPUT);
 23faf74:	2101      	movs	r1, #1
 23faf76:	7920      	ldrb	r0, [r4, #4]
 23faf78:	f003 faaa 	bl	23fe4d0 <pinMode>
    digitalWrite(_cs, LOW);
 23faf7c:	7920      	ldrb	r0, [r4, #4]
 23faf7e:	2100      	movs	r1, #0
 23faf80:	f003 fab7 	bl	23fe4f2 <digitalWrite>
    if (_rst) {
 23faf84:	79a0      	ldrb	r0, [r4, #6]
 23faf86:	b1d0      	cbz	r0, 23fafbe <_ZN16Adafruit_SSD13515beginEv+0x6c>
        pinMode(_rst, OUTPUT);
 23faf88:	2101      	movs	r1, #1
 23faf8a:	f003 faa1 	bl	23fe4d0 <pinMode>
        digitalWrite(_rst, HIGH);
 23faf8e:	2101      	movs	r1, #1
 23faf90:	79a0      	ldrb	r0, [r4, #6]
 23faf92:	f003 faae 	bl	23fe4f2 <digitalWrite>
        delay(500);
 23faf96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23faf9a:	f002 fd37 	bl	23fda0c <delay>
        digitalWrite(_rst, LOW);
 23faf9e:	2100      	movs	r1, #0
 23fafa0:	79a0      	ldrb	r0, [r4, #6]
 23fafa2:	f003 faa6 	bl	23fe4f2 <digitalWrite>
        delay(500);
 23fafa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fafaa:	f002 fd2f 	bl	23fda0c <delay>
        digitalWrite(_rst, HIGH);
 23fafae:	79a0      	ldrb	r0, [r4, #6]
 23fafb0:	2101      	movs	r1, #1
 23fafb2:	f003 fa9e 	bl	23fe4f2 <digitalWrite>
        delay(500);
 23fafb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fafba:	f002 fd27 	bl	23fda0c <delay>
    writeCommand(SSD1351_CMD_COMMANDLOCK);  // set command lock
 23fafbe:	4620      	mov	r0, r4
 23fafc0:	21fd      	movs	r1, #253	; 0xfd
 23fafc2:	f7ff fd8d 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x12);
 23fafc6:	4620      	mov	r0, r4
 23fafc8:	2112      	movs	r1, #18
 23fafca:	f7ff fd9d 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_COMMANDLOCK);  // set command lock
 23fafce:	4620      	mov	r0, r4
 23fafd0:	21fd      	movs	r1, #253	; 0xfd
 23fafd2:	f7ff fd85 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xB1);
 23fafd6:	4620      	mov	r0, r4
 23fafd8:	21b1      	movs	r1, #177	; 0xb1
 23fafda:	f7ff fd95 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYOFF);  		// 0xAE
 23fafde:	4620      	mov	r0, r4
 23fafe0:	21ae      	movs	r1, #174	; 0xae
 23fafe2:	f7ff fd7d 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_CLOCKDIV);  		// 0xB3
 23fafe6:	4620      	mov	r0, r4
 23fafe8:	21b3      	movs	r1, #179	; 0xb3
 23fafea:	f7ff fd79 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0xF1);  						// 7:4 = Oscillator Frequency, 3:0 = CLK Div Ratio (A[3:0]+1 = 1..16)
 23fafee:	4620      	mov	r0, r4
 23faff0:	21f1      	movs	r1, #241	; 0xf1
 23faff2:	f7ff fd75 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_MUXRATIO);
 23faff6:	4620      	mov	r0, r4
 23faff8:	21ca      	movs	r1, #202	; 0xca
 23faffa:	f7ff fd71 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(127);
 23faffe:	4620      	mov	r0, r4
 23fb000:	217f      	movs	r1, #127	; 0x7f
 23fb002:	f7ff fd81 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETREMAP);
 23fb006:	4620      	mov	r0, r4
 23fb008:	21a0      	movs	r1, #160	; 0xa0
 23fb00a:	f7ff fd69 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x74);
 23fb00e:	4620      	mov	r0, r4
 23fb010:	2174      	movs	r1, #116	; 0x74
 23fb012:	f7ff fd79 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETCOLUMN);
 23fb016:	4620      	mov	r0, r4
 23fb018:	2115      	movs	r1, #21
 23fb01a:	f7ff fd61 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23fb01e:	4620      	mov	r0, r4
 23fb020:	2100      	movs	r1, #0
 23fb022:	f7ff fd71 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x7F);
 23fb026:	4620      	mov	r0, r4
 23fb028:	217f      	movs	r1, #127	; 0x7f
 23fb02a:	f7ff fd6d 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETROW);
 23fb02e:	4620      	mov	r0, r4
 23fb030:	2175      	movs	r1, #117	; 0x75
 23fb032:	f7ff fd55 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23fb036:	4620      	mov	r0, r4
 23fb038:	2100      	movs	r1, #0
 23fb03a:	f7ff fd65 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x7F);
 23fb03e:	4620      	mov	r0, r4
 23fb040:	217f      	movs	r1, #127	; 0x7f
 23fb042:	f7ff fd61 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_STARTLINE); 		// 0xA1
 23fb046:	4620      	mov	r0, r4
 23fb048:	21a1      	movs	r1, #161	; 0xa1
 23fb04a:	f7ff fd49 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
      writeData(0);
 23fb04e:	4620      	mov	r0, r4
 23fb050:	2100      	movs	r1, #0
 23fb052:	f7ff fd59 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYOFFSET); 	// 0xA2
 23fb056:	4620      	mov	r0, r4
 23fb058:	21a2      	movs	r1, #162	; 0xa2
 23fb05a:	f7ff fd41 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x0);
 23fb05e:	4620      	mov	r0, r4
 23fb060:	2100      	movs	r1, #0
 23fb062:	f7ff fd51 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETGPIO);
 23fb066:	4620      	mov	r0, r4
 23fb068:	21b5      	movs	r1, #181	; 0xb5
 23fb06a:	f7ff fd39 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23fb06e:	4620      	mov	r0, r4
 23fb070:	2100      	movs	r1, #0
 23fb072:	f7ff fd49 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_FUNCTIONSELECT);
 23fb076:	4620      	mov	r0, r4
 23fb078:	21ab      	movs	r1, #171	; 0xab
 23fb07a:	f7ff fd31 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x01); // internal (diode drop)
 23fb07e:	4620      	mov	r0, r4
 23fb080:	2101      	movs	r1, #1
 23fb082:	f7ff fd41 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_PRECHARGE);  		// 0xB1
 23fb086:	4620      	mov	r0, r4
 23fb088:	21b1      	movs	r1, #177	; 0xb1
 23fb08a:	f7ff fd29 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0x32);
 23fb08e:	4620      	mov	r0, r4
 23fb090:	2132      	movs	r1, #50	; 0x32
 23fb092:	f7ff fd25 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_VCOMH);  			// 0xBE
 23fb096:	4620      	mov	r0, r4
 23fb098:	21be      	movs	r1, #190	; 0xbe
 23fb09a:	f7ff fd21 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0x05);
 23fb09e:	4620      	mov	r0, r4
 23fb0a0:	2105      	movs	r1, #5
 23fb0a2:	f7ff fd1d 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_NORMALDISPLAY);  	// 0xA6
 23fb0a6:	4620      	mov	r0, r4
 23fb0a8:	21a6      	movs	r1, #166	; 0xa6
 23fb0aa:	f7ff fd19 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_CONTRASTABC);
 23fb0ae:	4620      	mov	r0, r4
 23fb0b0:	21c1      	movs	r1, #193	; 0xc1
 23fb0b2:	f7ff fd15 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xC8);
 23fb0b6:	4620      	mov	r0, r4
 23fb0b8:	21c8      	movs	r1, #200	; 0xc8
 23fb0ba:	f7ff fd25 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x80);
 23fb0be:	4620      	mov	r0, r4
 23fb0c0:	2180      	movs	r1, #128	; 0x80
 23fb0c2:	f7ff fd21 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0xC8);
 23fb0c6:	4620      	mov	r0, r4
 23fb0c8:	21c8      	movs	r1, #200	; 0xc8
 23fb0ca:	f7ff fd1d 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_CONTRASTMASTER);
 23fb0ce:	4620      	mov	r0, r4
 23fb0d0:	21c7      	movs	r1, #199	; 0xc7
 23fb0d2:	f7ff fd05 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x0F);
 23fb0d6:	4620      	mov	r0, r4
 23fb0d8:	210f      	movs	r1, #15
 23fb0da:	f7ff fd15 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETVSL );
 23fb0de:	4620      	mov	r0, r4
 23fb0e0:	21b4      	movs	r1, #180	; 0xb4
 23fb0e2:	f7ff fcfd 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xA0);
 23fb0e6:	4620      	mov	r0, r4
 23fb0e8:	21a0      	movs	r1, #160	; 0xa0
 23fb0ea:	f7ff fd0d 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0xB5);
 23fb0ee:	4620      	mov	r0, r4
 23fb0f0:	21b5      	movs	r1, #181	; 0xb5
 23fb0f2:	f7ff fd09 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x55);
 23fb0f6:	4620      	mov	r0, r4
 23fb0f8:	2155      	movs	r1, #85	; 0x55
 23fb0fa:	f7ff fd05 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_PRECHARGE2);
 23fb0fe:	4620      	mov	r0, r4
 23fb100:	21b6      	movs	r1, #182	; 0xb6
 23fb102:	f7ff fced 	bl	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x01);
 23fb106:	4620      	mov	r0, r4
 23fb108:	2101      	movs	r1, #1
 23fb10a:	f7ff fcfd 	bl	23fab08 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYON);		//--turn on oled panel
 23fb10e:	4620      	mov	r0, r4
}
 23fb110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeCommand(SSD1351_CMD_DISPLAYON);		//--turn on oled panel
 23fb114:	21af      	movs	r1, #175	; 0xaf
 23fb116:	f7ff bce3 	b.w	23faae0 <_ZN16Adafruit_SSD135112writeCommandEh>
        instance().begin();
 23fb11a:	f7ff fbff 	bl	23fa91c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb11e:	f000 ffbb 	bl	23fc098 <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
 23fb122:	f7ff fbfb 	bl	23fa91c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb126:	2110      	movs	r1, #16
 23fb128:	f001 f826 	bl	23fc178 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
 23fb12c:	f7ff fbf6 	bl	23fa91c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb130:	2103      	movs	r1, #3
 23fb132:	f000 ffc5 	bl	23fc0c0 <_ZN8SPIClass11setDataModeEh>
    }
 23fb136:	e71d      	b.n	23faf74 <_ZN16Adafruit_SSD13515beginEv+0x22>

023fb138 <_ZN16Adafruit_SSD13519drawPixelEsst>:
{
 23fb138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb13a:	4604      	mov	r4, r0
 23fb13c:	461f      	mov	r7, r3
  switch (getRotation()) {
 23fb13e:	6803      	ldr	r3, [r0, #0]
{
 23fb140:	460d      	mov	r5, r1
  switch (getRotation()) {
 23fb142:	f853 0c0c 	ldr.w	r0, [r3, #-12]
{
 23fb146:	4616      	mov	r6, r2
  switch (getRotation()) {
 23fb148:	4420      	add	r0, r4
 23fb14a:	f000 fa68 	bl	23fb61e <_ZN12Adafruit_GFX11getRotationEv>
 23fb14e:	2802      	cmp	r0, #2
 23fb150:	d02c      	beq.n	23fb1ac <_ZN16Adafruit_SSD13519drawPixelEsst+0x74>
 23fb152:	2803      	cmp	r0, #3
 23fb154:	d037      	beq.n	23fb1c6 <_ZN16Adafruit_SSD13519drawPixelEsst+0x8e>
 23fb156:	2801      	cmp	r0, #1
 23fb158:	d108      	bne.n	23fb16c <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>
    x = WIDTH - x - 1;
 23fb15a:	43f2      	mvns	r2, r6
 23fb15c:	6823      	ldr	r3, [r4, #0]
  void rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  template<typename T>
  void swap(T &x, T &y) {
    T tmp = x;
    x = y;
    y = tmp;
 23fb15e:	462e      	mov	r6, r5
 23fb160:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23fb164:	4423      	add	r3, r4
 23fb166:	891b      	ldrh	r3, [r3, #8]
 23fb168:	441a      	add	r2, r3
 23fb16a:	b215      	sxth	r5, r2
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23fb16c:	b2ab      	uxth	r3, r5
 23fb16e:	2b7f      	cmp	r3, #127	; 0x7f
 23fb170:	d81b      	bhi.n	23fb1aa <_ZN16Adafruit_SSD13519drawPixelEsst+0x72>
 23fb172:	b2b3      	uxth	r3, r6
 23fb174:	2b7f      	cmp	r3, #127	; 0x7f
 23fb176:	d818      	bhi.n	23fb1aa <_ZN16Adafruit_SSD13519drawPixelEsst+0x72>
  goTo(x, y);
 23fb178:	4632      	mov	r2, r6
 23fb17a:	4629      	mov	r1, r5
 23fb17c:	4620      	mov	r0, r4
 23fb17e:	f7ff fcd7 	bl	23fab30 <_ZN16Adafruit_SSD13514goToEii>
  digitalWriteFast(_rs, HIGH);
 23fb182:	2101      	movs	r1, #1
 23fb184:	7960      	ldrb	r0, [r4, #5]
 23fb186:	f7ff fb57 	bl	23fa838 <digitalWriteFast>
  digitalWriteFast(_cs, LOW);
 23fb18a:	2100      	movs	r1, #0
 23fb18c:	7920      	ldrb	r0, [r4, #4]
 23fb18e:	f7ff fb53 	bl	23fa838 <digitalWriteFast>
  spiwrite(color >> 8);
 23fb192:	4620      	mov	r0, r4
 23fb194:	0a39      	lsrs	r1, r7, #8
 23fb196:	f7ff fbdb 	bl	23fa950 <_ZN16Adafruit_SSD13518spiwriteEh>
  spiwrite(color);
 23fb19a:	4620      	mov	r0, r4
 23fb19c:	b2f9      	uxtb	r1, r7
 23fb19e:	f7ff fbd7 	bl	23fa950 <_ZN16Adafruit_SSD13518spiwriteEh>
  digitalWriteFast(_cs, HIGH);
 23fb1a2:	2101      	movs	r1, #1
 23fb1a4:	7920      	ldrb	r0, [r4, #4]
 23fb1a6:	f7ff fb47 	bl	23fa838 <digitalWriteFast>
}
 23fb1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
 23fb1ac:	43ed      	mvns	r5, r5
    y = HEIGHT - y - 1;
 23fb1ae:	43f6      	mvns	r6, r6
    x = WIDTH - x - 1;
 23fb1b0:	6823      	ldr	r3, [r4, #0]
 23fb1b2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23fb1b6:	4423      	add	r3, r4
 23fb1b8:	8919      	ldrh	r1, [r3, #8]
    y = HEIGHT - y - 1;
 23fb1ba:	895a      	ldrh	r2, [r3, #10]
    x = WIDTH - x - 1;
 23fb1bc:	440d      	add	r5, r1
    y = HEIGHT - y - 1;
 23fb1be:	4416      	add	r6, r2
    x = WIDTH - x - 1;
 23fb1c0:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 23fb1c2:	b236      	sxth	r6, r6
    break;
 23fb1c4:	e7d2      	b.n	23fb16c <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>
    y = HEIGHT - y - 1;
 23fb1c6:	43e9      	mvns	r1, r5
 23fb1c8:	6823      	ldr	r3, [r4, #0]
    x = y;
 23fb1ca:	4635      	mov	r5, r6
 23fb1cc:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23fb1d0:	4423      	add	r3, r4
 23fb1d2:	895b      	ldrh	r3, [r3, #10]
 23fb1d4:	4419      	add	r1, r3
 23fb1d6:	b20e      	sxth	r6, r1
    break;
 23fb1d8:	e7c8      	b.n	23fb16c <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>

023fb1da <_ZTv0_n24_N16Adafruit_SSD13519drawPixelEsst>:
  void drawPixel(int16_t x, int16_t y, uint16_t color);
 23fb1da:	f8d0 c000 	ldr.w	ip, [r0]
 23fb1de:	f1ac 0c18 	sub.w	ip, ip, #24
 23fb1e2:	f8dc c000 	ldr.w	ip, [ip]
 23fb1e6:	4460      	add	r0, ip
 23fb1e8:	f7ff bfa6 	b.w	23fb138 <_ZN16Adafruit_SSD13519drawPixelEsst>

023fb1ec <_ZN16Adafruit_SSD1351D2Ev>:
class Adafruit_SSD1351  : public virtual Adafruit_GFX {
 23fb1ec:	680a      	ldr	r2, [r1, #0]
 23fb1ee:	6002      	str	r2, [r0, #0]
 23fb1f0:	6849      	ldr	r1, [r1, #4]
 23fb1f2:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23fb1f6:	5081      	str	r1, [r0, r2]
 23fb1f8:	4770      	bx	lr

023fb1fa <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 23fb1fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb1fe:	461f      	mov	r7, r3
 23fb200:	b085      	sub	sp, #20
 23fb202:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fb206:	eba7 0a01 	sub.w	sl, r7, r1
 23fb20a:	eba8 0902 	sub.w	r9, r8, r2
 23fb20e:	f1b9 0f00 	cmp.w	r9, #0
 23fb212:	bfb8      	it	lt
 23fb214:	f1c9 0900 	rsblt	r9, r9, #0
 23fb218:	f1ba 0f00 	cmp.w	sl, #0
 23fb21c:	bfb8      	it	lt
 23fb21e:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23fb222:	45d1      	cmp	r9, sl
			    uint16_t color) {
 23fb224:	4683      	mov	fp, r0
 23fb226:	460c      	mov	r4, r1
 23fb228:	4615      	mov	r5, r2
 23fb22a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23fb22e:	dd04      	ble.n	23fb23a <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
 23fb230:	463a      	mov	r2, r7
    swap(x0, y0);
 23fb232:	462c      	mov	r4, r5
    swap(x1, y1);
 23fb234:	4647      	mov	r7, r8
    swap(x0, y0);
 23fb236:	460d      	mov	r5, r1
    swap(x1, y1);
 23fb238:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23fb23a:	42bc      	cmp	r4, r7
 23fb23c:	dd05      	ble.n	23fb24a <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
 23fb23e:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 23fb240:	4645      	mov	r5, r8
 23fb242:	4690      	mov	r8, r2
  if (x0 > x1) {
 23fb244:	4622      	mov	r2, r4
 23fb246:	463c      	mov	r4, r7
 23fb248:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23fb24a:	1b3e      	subs	r6, r7, r4
 23fb24c:	b2b2      	uxth	r2, r6
 23fb24e:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23fb250:	eba8 0205 	sub.w	r2, r8, r5
 23fb254:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fb258:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23fb25c:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fb260:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23fb264:	4545      	cmp	r5, r8
 23fb266:	bfb4      	ite	lt
 23fb268:	2201      	movlt	r2, #1
 23fb26a:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
 23fb26e:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23fb270:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23fb272:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 23fb274:	42bc      	cmp	r4, r7
 23fb276:	dc1c      	bgt.n	23fb2b2 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
 23fb278:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23fb27c:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
 23fb27e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 23fb282:	bfc7      	ittee	gt
 23fb284:	4629      	movgt	r1, r5
 23fb286:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
 23fb288:	462a      	movle	r2, r5
 23fb28a:	4621      	movle	r1, r4
      drawPixel(y0, x0, color);
 23fb28c:	9303      	str	r3, [sp, #12]
      drawPixel(x0, y0, color);
 23fb28e:	4658      	mov	r0, fp
 23fb290:	47c0      	blx	r8
    }
    err -= dy;
 23fb292:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
 23fb294:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23fb296:	1ab6      	subs	r6, r6, r2
 23fb298:	b2b1      	uxth	r1, r6
 23fb29a:	b236      	sxth	r6, r6
    if (err < 0) {
 23fb29c:	2e00      	cmp	r6, #0
 23fb29e:	da05      	bge.n	23fb2ac <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
 23fb2a0:	9a02      	ldr	r2, [sp, #8]
 23fb2a2:	4415      	add	r5, r2
      err += dx;
 23fb2a4:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23fb2a6:	b22d      	sxth	r5, r5
      err += dx;
 23fb2a8:	1856      	adds	r6, r2, r1
 23fb2aa:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
 23fb2ac:	3401      	adds	r4, #1
 23fb2ae:	b224      	sxth	r4, r4
 23fb2b0:	e7e0      	b.n	23fb274 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
 23fb2b2:	b005      	add	sp, #20
 23fb2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb2b8 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 23fb2b8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fb2bc:	4604      	mov	r4, r0
 23fb2be:	4616      	mov	r6, r2
 23fb2c0:	468a      	mov	sl, r1
 23fb2c2:	461d      	mov	r5, r3
 23fb2c4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 23fb2c8:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
 23fb2ca:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 23fb2ce:	f8cd 8000 	str.w	r8, [sp]
 23fb2d2:	69ff      	ldr	r7, [r7, #28]
 23fb2d4:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 23fb2d6:	6823      	ldr	r3, [r4, #0]
 23fb2d8:	f109 32ff 	add.w	r2, r9, #4294967295
 23fb2dc:	f8cd 8000 	str.w	r8, [sp]
 23fb2e0:	4432      	add	r2, r6
 23fb2e2:	4651      	mov	r1, sl
 23fb2e4:	4620      	mov	r0, r4
 23fb2e6:	69df      	ldr	r7, [r3, #28]
 23fb2e8:	b212      	sxth	r2, r2
 23fb2ea:	462b      	mov	r3, r5
 23fb2ec:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 23fb2ee:	6823      	ldr	r3, [r4, #0]
 23fb2f0:	f8cd 8000 	str.w	r8, [sp]
 23fb2f4:	4632      	mov	r2, r6
 23fb2f6:	4651      	mov	r1, sl
 23fb2f8:	4620      	mov	r0, r4
 23fb2fa:	699f      	ldr	r7, [r3, #24]
 23fb2fc:	464b      	mov	r3, r9
 23fb2fe:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 23fb300:	1e6b      	subs	r3, r5, #1
 23fb302:	eb03 010a 	add.w	r1, r3, sl
 23fb306:	6823      	ldr	r3, [r4, #0]
 23fb308:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 23fb30c:	699d      	ldr	r5, [r3, #24]
 23fb30e:	4632      	mov	r2, r6
 23fb310:	464b      	mov	r3, r9
 23fb312:	4620      	mov	r0, r4
 23fb314:	46ac      	mov	ip, r5
 23fb316:	b209      	sxth	r1, r1
}
 23fb318:	b002      	add	sp, #8
 23fb31a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
 23fb31e:	4760      	bx	ip

023fb320 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 23fb320:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 23fb322:	3b01      	subs	r3, #1
 23fb324:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23fb328:	4413      	add	r3, r2
 23fb32a:	6804      	ldr	r4, [r0, #0]
 23fb32c:	b21b      	sxth	r3, r3
 23fb32e:	9300      	str	r3, [sp, #0]
 23fb330:	9501      	str	r5, [sp, #4]
 23fb332:	460b      	mov	r3, r1
 23fb334:	6964      	ldr	r4, [r4, #20]
 23fb336:	47a0      	blx	r4
}
 23fb338:	b003      	add	sp, #12
 23fb33a:	bd30      	pop	{r4, r5, pc}

023fb33c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 23fb33c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 23fb33e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23fb342:	6804      	ldr	r4, [r0, #0]
 23fb344:	e9cd 2500 	strd	r2, r5, [sp]
 23fb348:	3b01      	subs	r3, #1
 23fb34a:	440b      	add	r3, r1
 23fb34c:	6964      	ldr	r4, [r4, #20]
 23fb34e:	b21b      	sxth	r3, r3
 23fb350:	47a0      	blx	r4
}
 23fb352:	b003      	add	sp, #12
 23fb354:	bd30      	pop	{r4, r5, pc}

023fb356 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 23fb356:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fb35a:	4605      	mov	r5, r0
 23fb35c:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 23fb35e:	460c      	mov	r4, r1
			    uint16_t color) {
 23fb360:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fb364:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  for (int16_t i=x; i<x+w; i++) {
 23fb368:	18ce      	adds	r6, r1, r3
 23fb36a:	42b4      	cmp	r4, r6
 23fb36c:	da0b      	bge.n	23fb386 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
 23fb36e:	682b      	ldr	r3, [r5, #0]
 23fb370:	f8cd 8000 	str.w	r8, [sp]
 23fb374:	4621      	mov	r1, r4
 23fb376:	699f      	ldr	r7, [r3, #24]
 23fb378:	4652      	mov	r2, sl
 23fb37a:	464b      	mov	r3, r9
 23fb37c:	4628      	mov	r0, r5
 23fb37e:	3401      	adds	r4, #1
 23fb380:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
 23fb382:	b224      	sxth	r4, r4
 23fb384:	e7f1      	b.n	23fb36a <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
 23fb386:	b002      	add	sp, #8
 23fb388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fb38c <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 23fb38c:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23fb38e:	9101      	str	r1, [sp, #4]
 23fb390:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fb394:	6802      	ldr	r2, [r0, #0]
 23fb396:	9100      	str	r1, [sp, #0]
 23fb398:	6a54      	ldr	r4, [r2, #36]	; 0x24
 23fb39a:	2200      	movs	r2, #0
 23fb39c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fb3a0:	4611      	mov	r1, r2
 23fb3a2:	47a0      	blx	r4
}
 23fb3a4:	b002      	add	sp, #8
 23fb3a6:	bd10      	pop	{r4, pc}

023fb3a8 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
 23fb3a8:	4770      	bx	lr

023fb3aa <_ZN12Adafruit_GFX5writeEh>:
  if (c == '\n') {
 23fb3aa:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
 23fb3ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23fb3b0:	4604      	mov	r4, r0
 23fb3b2:	460d      	mov	r5, r1
  if (c == '\n') {
 23fb3b4:	d10c      	bne.n	23fb3d0 <_ZN12Adafruit_GFX5writeEh+0x26>
    cursor_y += textsize*fontDesc[0].height;	//all chars are same height so use height of space char
 23fb3b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 23fb3b8:	7e02      	ldrb	r2, [r0, #24]
 23fb3ba:	7859      	ldrb	r1, [r3, #1]
 23fb3bc:	8a43      	ldrh	r3, [r0, #18]
 23fb3be:	fb01 3302 	mla	r3, r1, r2, r3
      cursor_y += textsize*h;
 23fb3c2:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 23fb3c4:	2300      	movs	r3, #0
 23fb3c6:	8223      	strh	r3, [r4, #16]
}
 23fb3c8:	2001      	movs	r0, #1
 23fb3ca:	b004      	add	sp, #16
 23fb3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (c == '\r') {
 23fb3d0:	290d      	cmp	r1, #13
 23fb3d2:	d0f9      	beq.n	23fb3c8 <_ZN12Adafruit_GFX5writeEh+0x1e>
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 23fb3d4:	7e02      	ldrb	r2, [r0, #24]
 23fb3d6:	6803      	ldr	r3, [r0, #0]
 23fb3d8:	9202      	str	r2, [sp, #8]
 23fb3da:	8ac2      	ldrh	r2, [r0, #22]
 23fb3dc:	9201      	str	r2, [sp, #4]
 23fb3de:	8a82      	ldrh	r2, [r0, #20]
 23fb3e0:	9200      	str	r2, [sp, #0]
 23fb3e2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 23fb3e4:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 23fb3e8:	460b      	mov	r3, r1
 23fb3ea:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 23fb3ee:	47b0      	blx	r6
	uint16_t w = fontDesc[c-fontStart].width;
 23fb3f0:	7ee3      	ldrb	r3, [r4, #27]
    if (fontKern > 0 && textcolor != textbgcolor) {
 23fb3f2:	f994 701d 	ldrsb.w	r7, [r4, #29]
	uint16_t w = fontDesc[c-fontStart].width;
 23fb3f6:	1aed      	subs	r5, r5, r3
 23fb3f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (fontKern > 0 && textcolor != textbgcolor) {
 23fb3fa:	2f00      	cmp	r7, #0
	uint16_t w = fontDesc[c-fontStart].width;
 23fb3fc:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 23fb400:	f813 6025 	ldrb.w	r6, [r3, r5, lsl #2]
	uint16_t h = fontDesc[c-fontStart].height;
 23fb404:	7855      	ldrb	r5, [r2, #1]
    if (fontKern > 0 && textcolor != textbgcolor) {
 23fb406:	dd15      	ble.n	23fb434 <_ZN12Adafruit_GFX5writeEh+0x8a>
 23fb408:	8ae2      	ldrh	r2, [r4, #22]
 23fb40a:	8aa3      	ldrh	r3, [r4, #20]
 23fb40c:	4293      	cmp	r3, r2
 23fb40e:	d011      	beq.n	23fb434 <_ZN12Adafruit_GFX5writeEh+0x8a>
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
 23fb410:	7e23      	ldrb	r3, [r4, #24]
 23fb412:	9201      	str	r2, [sp, #4]
 23fb414:	8a21      	ldrh	r1, [r4, #16]
 23fb416:	fb15 f203 	smulbb	r2, r5, r3
 23fb41a:	fb06 1103 	mla	r1, r6, r3, r1
 23fb41e:	6820      	ldr	r0, [r4, #0]
 23fb420:	b212      	sxth	r2, r2
 23fb422:	9200      	str	r2, [sp, #0]
 23fb424:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 23fb428:	437b      	muls	r3, r7
 23fb42a:	4620      	mov	r0, r4
 23fb42c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fb430:	b209      	sxth	r1, r1
 23fb432:	47c0      	blx	r8
    cursor_x += textsize*(w+fontKern);
 23fb434:	f994 301d 	ldrsb.w	r3, [r4, #29]
 23fb438:	7e27      	ldrb	r7, [r4, #24]
 23fb43a:	1999      	adds	r1, r3, r6
 23fb43c:	8a23      	ldrh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 23fb43e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    cursor_x += textsize*(w+fontKern);
 23fb442:	fb01 3307 	mla	r3, r1, r7, r3
 23fb446:	b21b      	sxth	r3, r3
 23fb448:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 23fb44a:	2a00      	cmp	r2, #0
 23fb44c:	d0bc      	beq.n	23fb3c8 <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fb44e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 23fb452:	fb06 2217 	mls	r2, r6, r7, r2
 23fb456:	4293      	cmp	r3, r2
 23fb458:	ddb6      	ble.n	23fb3c8 <_ZN12Adafruit_GFX5writeEh+0x1e>
      cursor_y += textsize*h;
 23fb45a:	8a63      	ldrh	r3, [r4, #18]
 23fb45c:	fb05 3307 	mla	r3, r5, r7, r3
 23fb460:	e7af      	b.n	23fb3c2 <_ZN12Adafruit_GFX5writeEh+0x18>
	...

023fb464 <_ZN12Adafruit_GFX7setFontEh>:
      font = GLCDFONT;
 23fb464:	2304      	movs	r3, #4
	  fontDesc = glcdfontDescriptors;
 23fb466:	4a06      	ldr	r2, [pc, #24]	; (23fb480 <_ZN12Adafruit_GFX7setFontEh+0x1c>)
      font = GLCDFONT;
 23fb468:	7683      	strb	r3, [r0, #26]
	  fontDesc = glcdfontDescriptors;
 23fb46a:	6242      	str	r2, [r0, #36]	; 0x24
      fontKern = 1;
 23fb46c:	2201      	movs	r2, #1
      fontData = glcdfontBitmaps;
 23fb46e:	4b05      	ldr	r3, [pc, #20]	; (23fb484 <_ZN12Adafruit_GFX7setFontEh+0x20>)
      fontKern = 1;
 23fb470:	7742      	strb	r2, [r0, #29]
      fontData = glcdfontBitmaps;
 23fb472:	6203      	str	r3, [r0, #32]
  fontStart = pgm_read_byte(fontData+FONT_START);
 23fb474:	781a      	ldrb	r2, [r3, #0]
 23fb476:	76c2      	strb	r2, [r0, #27]
  fontEnd = pgm_read_byte(fontData+FONT_END);
 23fb478:	785b      	ldrb	r3, [r3, #1]
 23fb47a:	7703      	strb	r3, [r0, #28]
}
 23fb47c:	4770      	bx	lr
 23fb47e:	bf00      	nop
 23fb480:	023ff682 	.word	0x023ff682
 23fb484:	023fee88 	.word	0x023fee88

023fb488 <_ZN12Adafruit_GFXC1Ess>:
  WIDTH(w), HEIGHT(h)
 23fb488:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
 23fb48a:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
 23fb48c:	f04f 32ff 	mov.w	r2, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fb490:	b538      	push	{r3, r4, r5, lr}
  textcolor = textbgcolor = 0xFFFF;
 23fb492:	6142      	str	r2, [r0, #20]
    Print() : write_error(0) {}
 23fb494:	2400      	movs	r4, #0
  textsize  = 1;
 23fb496:	2201      	movs	r2, #1
  WIDTH(w), HEIGHT(h)
 23fb498:	4d06      	ldr	r5, [pc, #24]	; (23fb4b4 <_ZN12Adafruit_GFXC1Ess+0x2c>)
 23fb49a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
 23fb49c:	8181      	strh	r1, [r0, #12]
 23fb49e:	6044      	str	r4, [r0, #4]
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 23fb4a0:	2104      	movs	r1, #4
  WIDTH(w), HEIGHT(h)
 23fb4a2:	6005      	str	r5, [r0, #0]
  cursor_y  = cursor_x    = 0;
 23fb4a4:	6104      	str	r4, [r0, #16]
  textsize  = 1;
 23fb4a6:	8302      	strh	r2, [r0, #24]
  wrap      = true;
 23fb4a8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 23fb4ac:	f7ff ffda 	bl	23fb464 <_ZN12Adafruit_GFX7setFontEh>
 }
 23fb4b0:	bd38      	pop	{r3, r4, r5, pc}
 23fb4b2:	bf00      	nop
 23fb4b4:	023fee54 	.word	0x023fee54

023fb4b8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fb4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb4bc:	ed2d 8b02 	vpush	{d8}
 23fb4c0:	b089      	sub	sp, #36	; 0x24
 23fb4c2:	4690      	mov	r8, r2
 23fb4c4:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 23fb4c8:	4682      	mov	sl, r0
 23fb4ca:	9204      	str	r2, [sp, #16]
 23fb4cc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 23fb4d0:	2500      	movs	r5, #0
 23fb4d2:	9205      	str	r2, [sp, #20]
  if (c < fontStart || c > fontEnd) {
 23fb4d4:	7ec2      	ldrb	r2, [r0, #27]
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fb4d6:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
  if (c < fontStart || c > fontEnd) {
 23fb4da:	429a      	cmp	r2, r3
 23fb4dc:	d863      	bhi.n	23fb5a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
 23fb4de:	7f04      	ldrb	r4, [r0, #28]
 23fb4e0:	429c      	cmp	r4, r3
 23fb4e2:	d360      	bcc.n	23fb5a6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
    c -= fontStart;
 23fb4e4:	1a9b      	subs	r3, r3, r2
 23fb4e6:	b2db      	uxtb	r3, r3
  if((x >= _width)            || // Clip right
 23fb4e8:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 23fb4ec:	428a      	cmp	r2, r1
 23fb4ee:	f340 8084 	ble.w	23fb5fa <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
 23fb4f2:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 23fb4f6:	4542      	cmp	r2, r8
 23fb4f8:	dd7f      	ble.n	23fb5fa <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 23fb4fa:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 23fb4fe:	009a      	lsls	r2, r3, #2
 23fb500:	9207      	str	r2, [sp, #28]
 23fb502:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 23fb506:	f814 3023 	ldrb.w	r3, [r4, r3, lsl #2]
 23fb50a:	fb03 1307 	mla	r3, r3, r7, r1
     (y >= _height)           || // Clip bottom
 23fb50e:	2b00      	cmp	r3, #0
 23fb510:	dd73      	ble.n	23fb5fa <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
 23fb512:	7853      	ldrb	r3, [r2, #1]
 23fb514:	fb03 8307 	mla	r3, r3, r7, r8
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 23fb518:	2b00      	cmp	r3, #0
 23fb51a:	dd6e      	ble.n	23fb5fa <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 23fb51c:	8853      	ldrh	r3, [r2, #2]
          drawPixel(x+j, y+i, color);
 23fb51e:	b28c      	uxth	r4, r1
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 23fb520:	3302      	adds	r3, #2
 23fb522:	b29b      	uxth	r3, r3
 23fb524:	9302      	str	r3, [sp, #8]
 23fb526:	2300      	movs	r3, #0
 23fb528:	9303      	str	r3, [sp, #12]
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fb52a:	b2bb      	uxth	r3, r7
 23fb52c:	9306      	str	r3, [sp, #24]
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 23fb52e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 23fb532:	9a07      	ldr	r2, [sp, #28]
 23fb534:	f99d 600c 	ldrsb.w	r6, [sp, #12]
 23fb538:	4413      	add	r3, r2
 23fb53a:	785b      	ldrb	r3, [r3, #1]
 23fb53c:	429e      	cmp	r6, r3
 23fb53e:	da5c      	bge.n	23fb5fa <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fb540:	9b06      	ldr	r3, [sp, #24]
 23fb542:	f04f 0900 	mov.w	r9, #0
 23fb546:	4373      	muls	r3, r6
 23fb548:	fa13 f388 	uxtah	r3, r3, r8
 23fb54c:	b21b      	sxth	r3, r3
 23fb54e:	ee08 3a10 	vmov	s16, r3
          drawPixel(x+j, y+i, bg);
 23fb552:	4446      	add	r6, r8
 23fb554:	b236      	sxth	r6, r6
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 23fb556:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 23fb55a:	9807      	ldr	r0, [sp, #28]
 23fb55c:	fa4f f189 	sxtb.w	r1, r9
 23fb560:	5c12      	ldrb	r2, [r2, r0]
 23fb562:	fa5f f389 	uxtb.w	r3, r9
 23fb566:	4291      	cmp	r1, r2
 23fb568:	da43      	bge.n	23fb5f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x13a>
      if (bitCount++%8 == 0) {
 23fb56a:	075a      	lsls	r2, r3, #29
 23fb56c:	d107      	bne.n	23fb57e <_ZN12Adafruit_GFX8drawCharEsshtth+0xc6>
        line = pgm_read_byte(fontData+fontIndex++);
 23fb56e:	9b02      	ldr	r3, [sp, #8]
 23fb570:	9802      	ldr	r0, [sp, #8]
 23fb572:	f8da 2020 	ldr.w	r2, [sl, #32]
 23fb576:	3301      	adds	r3, #1
 23fb578:	b29b      	uxth	r3, r3
 23fb57a:	5c15      	ldrb	r5, [r2, r0]
 23fb57c:	9302      	str	r3, [sp, #8]
      if (line & 0x80) {
 23fb57e:	062b      	lsls	r3, r5, #24
 23fb580:	d523      	bpl.n	23fb5ca <_ZN12Adafruit_GFX8drawCharEsshtth+0x112>
        if (size == 1) {// default sizeFast
 23fb582:	2f01      	cmp	r7, #1
          drawPixel(x+j, y+i, color);
 23fb584:	f8da 2000 	ldr.w	r2, [sl]
 23fb588:	b289      	uxth	r1, r1
        if (size == 1) {// default sizeFast
 23fb58a:	d10e      	bne.n	23fb5aa <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
          drawPixel(x+j, y+i, color);
 23fb58c:	f8d2 b010 	ldr.w	fp, [r2, #16]
 23fb590:	9b04      	ldr	r3, [sp, #16]
 23fb592:	4421      	add	r1, r4
          drawPixel(x+j, y+i, bg);
 23fb594:	4632      	mov	r2, r6
 23fb596:	4650      	mov	r0, sl
 23fb598:	b209      	sxth	r1, r1
 23fb59a:	47d8      	blx	fp
      line <<= 1;
 23fb59c:	006d      	lsls	r5, r5, #1
 23fb59e:	b2ed      	uxtb	r5, r5
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 23fb5a0:	f109 0901 	add.w	r9, r9, #1
 23fb5a4:	e7d7      	b.n	23fb556 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
    c = 0;
 23fb5a6:	462b      	mov	r3, r5
 23fb5a8:	e79e      	b.n	23fb4e8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x30>
          fillRect(x+(j*size), y+(i*size), size, size, color);
 23fb5aa:	9806      	ldr	r0, [sp, #24]
 23fb5ac:	b23b      	sxth	r3, r7
 23fb5ae:	fb10 f101 	smulbb	r1, r0, r1
 23fb5b2:	9804      	ldr	r0, [sp, #16]
 23fb5b4:	4421      	add	r1, r4
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fb5b6:	e9cd 3000 	strd	r3, r0, [sp]
 23fb5ba:	b209      	sxth	r1, r1
 23fb5bc:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 23fb5c0:	4650      	mov	r0, sl
 23fb5c2:	ee18 2a10 	vmov	r2, s16
 23fb5c6:	47d8      	blx	fp
 23fb5c8:	e7e8      	b.n	23fb59c <_ZN12Adafruit_GFX8drawCharEsshtth+0xe4>
      } else if (bg != color) {
 23fb5ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23fb5ce:	4293      	cmp	r3, r2
 23fb5d0:	d0e4      	beq.n	23fb59c <_ZN12Adafruit_GFX8drawCharEsshtth+0xe4>
        if (size == 1) // default size
 23fb5d2:	2f01      	cmp	r7, #1
          drawPixel(x+j, y+i, color);
 23fb5d4:	f8da 2000 	ldr.w	r2, [sl]
 23fb5d8:	b289      	uxth	r1, r1
        if (size == 1) // default size
 23fb5da:	d103      	bne.n	23fb5e4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12c>
          drawPixel(x+j, y+i, bg);
 23fb5dc:	f8d2 b010 	ldr.w	fp, [r2, #16]
 23fb5e0:	4421      	add	r1, r4
 23fb5e2:	e7d7      	b.n	23fb594 <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fb5e4:	9806      	ldr	r0, [sp, #24]
 23fb5e6:	b23b      	sxth	r3, r7
 23fb5e8:	fb10 f101 	smulbb	r1, r0, r1
 23fb5ec:	9805      	ldr	r0, [sp, #20]
 23fb5ee:	4421      	add	r1, r4
 23fb5f0:	e7e1      	b.n	23fb5b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xfe>
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 23fb5f2:	9b03      	ldr	r3, [sp, #12]
 23fb5f4:	3301      	adds	r3, #1
 23fb5f6:	9303      	str	r3, [sp, #12]
 23fb5f8:	e799      	b.n	23fb52e <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
}
 23fb5fa:	b009      	add	sp, #36	; 0x24
 23fb5fc:	ecbd 8b02 	vpop	{d8}
 23fb600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb604 <_ZN12Adafruit_GFX12drawFastCharEsshtth>:
                                    uint16_t color, uint16_t bg, uint8_t size) {
 23fb604:	b470      	push	{r4, r5, r6}
 23fb606:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 23fb60a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 23fb60e:	f89d 6014 	ldrb.w	r6, [sp, #20]
  drawChar(x,y,c,color,bg,size);
 23fb612:	9403      	str	r4, [sp, #12]
 23fb614:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 23fb618:	bc70      	pop	{r4, r5, r6}
  drawChar(x,y,c,color,bg,size);
 23fb61a:	f7ff bf4d 	b.w	23fb4b8 <_ZN12Adafruit_GFX8drawCharEsshtth>

023fb61e <_ZN12Adafruit_GFX11getRotationEv>:
}
 23fb61e:	7e40      	ldrb	r0, [r0, #25]
 23fb620:	4770      	bx	lr
	...

023fb624 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fb624:	b509      	push	{r0, r3, lr}
 23fb626:	4804      	ldr	r0, [pc, #16]	; (23fb638 <netdb_freeaddrinfo+0x14>)
 23fb628:	6800      	ldr	r0, [r0, #0]
 23fb62a:	4b04      	ldr	r3, [pc, #16]	; (23fb63c <netdb_freeaddrinfo+0x18>)
 23fb62c:	4403      	add	r3, r0
 23fb62e:	681b      	ldr	r3, [r3, #0]
 23fb630:	689b      	ldr	r3, [r3, #8]
 23fb632:	9302      	str	r3, [sp, #8]
 23fb634:	bd09      	pop	{r0, r3, pc}
 23fb636:	0000      	.short	0x0000
 23fb638:	1007ad6c 	.word	0x1007ad6c
 23fb63c:	00000050 	.word	0x00000050

023fb640 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fb640:	b509      	push	{r0, r3, lr}
 23fb642:	4804      	ldr	r0, [pc, #16]	; (23fb654 <netdb_getaddrinfo+0x14>)
 23fb644:	6800      	ldr	r0, [r0, #0]
 23fb646:	4b04      	ldr	r3, [pc, #16]	; (23fb658 <netdb_getaddrinfo+0x18>)
 23fb648:	4403      	add	r3, r0
 23fb64a:	681b      	ldr	r3, [r3, #0]
 23fb64c:	68db      	ldr	r3, [r3, #12]
 23fb64e:	9302      	str	r3, [sp, #8]
 23fb650:	bd09      	pop	{r0, r3, pc}
 23fb652:	0000      	.short	0x0000
 23fb654:	1007ad6c 	.word	0x1007ad6c
 23fb658:	00000050 	.word	0x00000050

023fb65c <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23fb65c:	b509      	push	{r0, r3, lr}
 23fb65e:	4804      	ldr	r0, [pc, #16]	; (23fb670 <hal_pin_map+0x14>)
 23fb660:	6800      	ldr	r0, [r0, #0]
 23fb662:	4b04      	ldr	r3, [pc, #16]	; (23fb674 <hal_pin_map+0x18>)
 23fb664:	4403      	add	r3, r0
 23fb666:	681b      	ldr	r3, [r3, #0]
 23fb668:	681b      	ldr	r3, [r3, #0]
 23fb66a:	9302      	str	r3, [sp, #8]
 23fb66c:	bd09      	pop	{r0, r3, pc}
 23fb66e:	0000      	.short	0x0000
 23fb670:	1007ad6c 	.word	0x1007ad6c
 23fb674:	00000014 	.word	0x00000014

023fb678 <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fb678:	b509      	push	{r0, r3, lr}
 23fb67a:	4804      	ldr	r0, [pc, #16]	; (23fb68c <hal_gpio_mode+0x14>)
 23fb67c:	6800      	ldr	r0, [r0, #0]
 23fb67e:	4b04      	ldr	r3, [pc, #16]	; (23fb690 <hal_gpio_mode+0x18>)
 23fb680:	4403      	add	r3, r0
 23fb682:	681b      	ldr	r3, [r3, #0]
 23fb684:	689b      	ldr	r3, [r3, #8]
 23fb686:	9302      	str	r3, [sp, #8]
 23fb688:	bd09      	pop	{r0, r3, pc}
 23fb68a:	0000      	.short	0x0000
 23fb68c:	1007ad6c 	.word	0x1007ad6c
 23fb690:	00000014 	.word	0x00000014

023fb694 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fb694:	b509      	push	{r0, r3, lr}
 23fb696:	4804      	ldr	r0, [pc, #16]	; (23fb6a8 <hal_gpio_get_mode+0x14>)
 23fb698:	6800      	ldr	r0, [r0, #0]
 23fb69a:	4b04      	ldr	r3, [pc, #16]	; (23fb6ac <hal_gpio_get_mode+0x18>)
 23fb69c:	4403      	add	r3, r0
 23fb69e:	681b      	ldr	r3, [r3, #0]
 23fb6a0:	68db      	ldr	r3, [r3, #12]
 23fb6a2:	9302      	str	r3, [sp, #8]
 23fb6a4:	bd09      	pop	{r0, r3, pc}
 23fb6a6:	0000      	.short	0x0000
 23fb6a8:	1007ad6c 	.word	0x1007ad6c
 23fb6ac:	00000014 	.word	0x00000014

023fb6b0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fb6b0:	b509      	push	{r0, r3, lr}
 23fb6b2:	4804      	ldr	r0, [pc, #16]	; (23fb6c4 <hal_gpio_write+0x14>)
 23fb6b4:	6800      	ldr	r0, [r0, #0]
 23fb6b6:	4b04      	ldr	r3, [pc, #16]	; (23fb6c8 <hal_gpio_write+0x18>)
 23fb6b8:	4403      	add	r3, r0
 23fb6ba:	681b      	ldr	r3, [r3, #0]
 23fb6bc:	691b      	ldr	r3, [r3, #16]
 23fb6be:	9302      	str	r3, [sp, #8]
 23fb6c0:	bd09      	pop	{r0, r3, pc}
 23fb6c2:	0000      	.short	0x0000
 23fb6c4:	1007ad6c 	.word	0x1007ad6c
 23fb6c8:	00000014 	.word	0x00000014

023fb6cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fb6cc:	b509      	push	{r0, r3, lr}
 23fb6ce:	4804      	ldr	r0, [pc, #16]	; (23fb6e0 <HAL_RNG_GetRandomNumber+0x14>)
 23fb6d0:	6800      	ldr	r0, [r0, #0]
 23fb6d2:	4b04      	ldr	r3, [pc, #16]	; (23fb6e4 <HAL_RNG_GetRandomNumber+0x18>)
 23fb6d4:	4403      	add	r3, r0
 23fb6d6:	681b      	ldr	r3, [r3, #0]
 23fb6d8:	685b      	ldr	r3, [r3, #4]
 23fb6da:	9302      	str	r3, [sp, #8]
 23fb6dc:	bd09      	pop	{r0, r3, pc}
 23fb6de:	0000      	.short	0x0000
 23fb6e0:	1007ad6c 	.word	0x1007ad6c
 23fb6e4:	00000000 	.word	0x00000000

023fb6e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fb6e8:	b509      	push	{r0, r3, lr}
 23fb6ea:	4804      	ldr	r0, [pc, #16]	; (23fb6fc <HAL_Delay_Microseconds+0x14>)
 23fb6ec:	6800      	ldr	r0, [r0, #0]
 23fb6ee:	4b04      	ldr	r3, [pc, #16]	; (23fb700 <HAL_Delay_Microseconds+0x18>)
 23fb6f0:	4403      	add	r3, r0
 23fb6f2:	681b      	ldr	r3, [r3, #0]
 23fb6f4:	68db      	ldr	r3, [r3, #12]
 23fb6f6:	9302      	str	r3, [sp, #8]
 23fb6f8:	bd09      	pop	{r0, r3, pc}
 23fb6fa:	0000      	.short	0x0000
 23fb6fc:	1007ad6c 	.word	0x1007ad6c
 23fb700:	00000000 	.word	0x00000000

023fb704 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fb704:	b509      	push	{r0, r3, lr}
 23fb706:	4804      	ldr	r0, [pc, #16]	; (23fb718 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fb708:	6800      	ldr	r0, [r0, #0]
 23fb70a:	4b04      	ldr	r3, [pc, #16]	; (23fb71c <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fb70c:	4403      	add	r3, r0
 23fb70e:	681b      	ldr	r3, [r3, #0]
 23fb710:	695b      	ldr	r3, [r3, #20]
 23fb712:	9302      	str	r3, [sp, #8]
 23fb714:	bd09      	pop	{r0, r3, pc}
 23fb716:	0000      	.short	0x0000
 23fb718:	1007ad6c 	.word	0x1007ad6c
 23fb71c:	00000000 	.word	0x00000000

023fb720 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fb720:	b509      	push	{r0, r3, lr}
 23fb722:	4804      	ldr	r0, [pc, #16]	; (23fb734 <hal_timer_millis+0x14>)
 23fb724:	6800      	ldr	r0, [r0, #0]
 23fb726:	4b04      	ldr	r3, [pc, #16]	; (23fb738 <hal_timer_millis+0x18>)
 23fb728:	4403      	add	r3, r0
 23fb72a:	681b      	ldr	r3, [r3, #0]
 23fb72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fb72e:	9302      	str	r3, [sp, #8]
 23fb730:	bd09      	pop	{r0, r3, pc}
 23fb732:	0000      	.short	0x0000
 23fb734:	1007ad6c 	.word	0x1007ad6c
 23fb738:	00000000 	.word	0x00000000

023fb73c <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
 23fb73c:	b509      	push	{r0, r3, lr}
 23fb73e:	4804      	ldr	r0, [pc, #16]	; (23fb750 <_open+0x14>)
 23fb740:	6800      	ldr	r0, [r0, #0]
 23fb742:	4b04      	ldr	r3, [pc, #16]	; (23fb754 <_open+0x18>)
 23fb744:	4403      	add	r3, r0
 23fb746:	681b      	ldr	r3, [r3, #0]
 23fb748:	681b      	ldr	r3, [r3, #0]
 23fb74a:	9302      	str	r3, [sp, #8]
 23fb74c:	bd09      	pop	{r0, r3, pc}
 23fb74e:	0000      	.short	0x0000
 23fb750:	1007ad6c 	.word	0x1007ad6c
 23fb754:	00000064 	.word	0x00000064

023fb758 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
 23fb758:	b509      	push	{r0, r3, lr}
 23fb75a:	4804      	ldr	r0, [pc, #16]	; (23fb76c <_write+0x14>)
 23fb75c:	6800      	ldr	r0, [r0, #0]
 23fb75e:	4b04      	ldr	r3, [pc, #16]	; (23fb770 <_write+0x18>)
 23fb760:	4403      	add	r3, r0
 23fb762:	681b      	ldr	r3, [r3, #0]
 23fb764:	685b      	ldr	r3, [r3, #4]
 23fb766:	9302      	str	r3, [sp, #8]
 23fb768:	bd09      	pop	{r0, r3, pc}
 23fb76a:	0000      	.short	0x0000
 23fb76c:	1007ad6c 	.word	0x1007ad6c
 23fb770:	00000064 	.word	0x00000064

023fb774 <_close>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
 23fb774:	b509      	push	{r0, r3, lr}
 23fb776:	4804      	ldr	r0, [pc, #16]	; (23fb788 <_close+0x14>)
 23fb778:	6800      	ldr	r0, [r0, #0]
 23fb77a:	4b04      	ldr	r3, [pc, #16]	; (23fb78c <_close+0x18>)
 23fb77c:	4403      	add	r3, r0
 23fb77e:	681b      	ldr	r3, [r3, #0]
 23fb780:	68db      	ldr	r3, [r3, #12]
 23fb782:	9302      	str	r3, [sp, #8]
 23fb784:	bd09      	pop	{r0, r3, pc}
 23fb786:	0000      	.short	0x0000
 23fb788:	1007ad6c 	.word	0x1007ad6c
 23fb78c:	00000064 	.word	0x00000064

023fb790 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fb790:	b509      	push	{r0, r3, lr}
 23fb792:	4804      	ldr	r0, [pc, #16]	; (23fb7a4 <os_mutex_recursive_create+0x14>)
 23fb794:	6800      	ldr	r0, [r0, #0]
 23fb796:	4b04      	ldr	r3, [pc, #16]	; (23fb7a8 <os_mutex_recursive_create+0x18>)
 23fb798:	4403      	add	r3, r0
 23fb79a:	681b      	ldr	r3, [r3, #0]
 23fb79c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb79e:	9302      	str	r3, [sp, #8]
 23fb7a0:	bd09      	pop	{r0, r3, pc}
 23fb7a2:	0000      	.short	0x0000
 23fb7a4:	1007ad6c 	.word	0x1007ad6c
 23fb7a8:	00000030 	.word	0x00000030

023fb7ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fb7ac:	b509      	push	{r0, r3, lr}
 23fb7ae:	4804      	ldr	r0, [pc, #16]	; (23fb7c0 <os_mutex_recursive_destroy+0x14>)
 23fb7b0:	6800      	ldr	r0, [r0, #0]
 23fb7b2:	4b04      	ldr	r3, [pc, #16]	; (23fb7c4 <os_mutex_recursive_destroy+0x18>)
 23fb7b4:	4403      	add	r3, r0
 23fb7b6:	681b      	ldr	r3, [r3, #0]
 23fb7b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fb7ba:	9302      	str	r3, [sp, #8]
 23fb7bc:	bd09      	pop	{r0, r3, pc}
 23fb7be:	0000      	.short	0x0000
 23fb7c0:	1007ad6c 	.word	0x1007ad6c
 23fb7c4:	00000030 	.word	0x00000030

023fb7c8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fb7c8:	b509      	push	{r0, r3, lr}
 23fb7ca:	4804      	ldr	r0, [pc, #16]	; (23fb7dc <os_mutex_recursive_lock+0x14>)
 23fb7cc:	6800      	ldr	r0, [r0, #0]
 23fb7ce:	4b04      	ldr	r3, [pc, #16]	; (23fb7e0 <os_mutex_recursive_lock+0x18>)
 23fb7d0:	4403      	add	r3, r0
 23fb7d2:	681b      	ldr	r3, [r3, #0]
 23fb7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb7d6:	9302      	str	r3, [sp, #8]
 23fb7d8:	bd09      	pop	{r0, r3, pc}
 23fb7da:	0000      	.short	0x0000
 23fb7dc:	1007ad6c 	.word	0x1007ad6c
 23fb7e0:	00000030 	.word	0x00000030

023fb7e4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fb7e4:	b509      	push	{r0, r3, lr}
 23fb7e6:	4804      	ldr	r0, [pc, #16]	; (23fb7f8 <os_mutex_recursive_unlock+0x14>)
 23fb7e8:	6800      	ldr	r0, [r0, #0]
 23fb7ea:	4b04      	ldr	r3, [pc, #16]	; (23fb7fc <os_mutex_recursive_unlock+0x18>)
 23fb7ec:	4403      	add	r3, r0
 23fb7ee:	681b      	ldr	r3, [r3, #0]
 23fb7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb7f2:	9302      	str	r3, [sp, #8]
 23fb7f4:	bd09      	pop	{r0, r3, pc}
 23fb7f6:	0000      	.short	0x0000
 23fb7f8:	1007ad6c 	.word	0x1007ad6c
 23fb7fc:	00000030 	.word	0x00000030

023fb800 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fb800:	b509      	push	{r0, r3, lr}
 23fb802:	4804      	ldr	r0, [pc, #16]	; (23fb814 <inet_inet_ntop+0x14>)
 23fb804:	6800      	ldr	r0, [r0, #0]
 23fb806:	4b04      	ldr	r3, [pc, #16]	; (23fb818 <inet_inet_ntop+0x18>)
 23fb808:	4403      	add	r3, r0
 23fb80a:	681b      	ldr	r3, [r3, #0]
 23fb80c:	695b      	ldr	r3, [r3, #20]
 23fb80e:	9302      	str	r3, [sp, #8]
 23fb810:	bd09      	pop	{r0, r3, pc}
 23fb812:	0000      	.short	0x0000
 23fb814:	1007ad6c 	.word	0x1007ad6c
 23fb818:	0000004c 	.word	0x0000004c

023fb81c <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fb81c:	b509      	push	{r0, r3, lr}
 23fb81e:	4804      	ldr	r0, [pc, #16]	; (23fb830 <hal_usart_end+0x14>)
 23fb820:	6800      	ldr	r0, [r0, #0]
 23fb822:	4b04      	ldr	r3, [pc, #16]	; (23fb834 <hal_usart_end+0x18>)
 23fb824:	4403      	add	r3, r0
 23fb826:	681b      	ldr	r3, [r3, #0]
 23fb828:	689b      	ldr	r3, [r3, #8]
 23fb82a:	9302      	str	r3, [sp, #8]
 23fb82c:	bd09      	pop	{r0, r3, pc}
 23fb82e:	0000      	.short	0x0000
 23fb830:	1007ad6c 	.word	0x1007ad6c
 23fb834:	00000024 	.word	0x00000024

023fb838 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fb838:	b509      	push	{r0, r3, lr}
 23fb83a:	4804      	ldr	r0, [pc, #16]	; (23fb84c <hal_usart_write+0x14>)
 23fb83c:	6800      	ldr	r0, [r0, #0]
 23fb83e:	4b04      	ldr	r3, [pc, #16]	; (23fb850 <hal_usart_write+0x18>)
 23fb840:	4403      	add	r3, r0
 23fb842:	681b      	ldr	r3, [r3, #0]
 23fb844:	68db      	ldr	r3, [r3, #12]
 23fb846:	9302      	str	r3, [sp, #8]
 23fb848:	bd09      	pop	{r0, r3, pc}
 23fb84a:	0000      	.short	0x0000
 23fb84c:	1007ad6c 	.word	0x1007ad6c
 23fb850:	00000024 	.word	0x00000024

023fb854 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fb854:	b509      	push	{r0, r3, lr}
 23fb856:	4804      	ldr	r0, [pc, #16]	; (23fb868 <hal_usart_available+0x14>)
 23fb858:	6800      	ldr	r0, [r0, #0]
 23fb85a:	4b04      	ldr	r3, [pc, #16]	; (23fb86c <hal_usart_available+0x18>)
 23fb85c:	4403      	add	r3, r0
 23fb85e:	681b      	ldr	r3, [r3, #0]
 23fb860:	691b      	ldr	r3, [r3, #16]
 23fb862:	9302      	str	r3, [sp, #8]
 23fb864:	bd09      	pop	{r0, r3, pc}
 23fb866:	0000      	.short	0x0000
 23fb868:	1007ad6c 	.word	0x1007ad6c
 23fb86c:	00000024 	.word	0x00000024

023fb870 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fb870:	b509      	push	{r0, r3, lr}
 23fb872:	4804      	ldr	r0, [pc, #16]	; (23fb884 <hal_usart_read+0x14>)
 23fb874:	6800      	ldr	r0, [r0, #0]
 23fb876:	4b04      	ldr	r3, [pc, #16]	; (23fb888 <hal_usart_read+0x18>)
 23fb878:	4403      	add	r3, r0
 23fb87a:	681b      	ldr	r3, [r3, #0]
 23fb87c:	695b      	ldr	r3, [r3, #20]
 23fb87e:	9302      	str	r3, [sp, #8]
 23fb880:	bd09      	pop	{r0, r3, pc}
 23fb882:	0000      	.short	0x0000
 23fb884:	1007ad6c 	.word	0x1007ad6c
 23fb888:	00000024 	.word	0x00000024

023fb88c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fb88c:	b509      	push	{r0, r3, lr}
 23fb88e:	4804      	ldr	r0, [pc, #16]	; (23fb8a0 <hal_usart_peek+0x14>)
 23fb890:	6800      	ldr	r0, [r0, #0]
 23fb892:	4b04      	ldr	r3, [pc, #16]	; (23fb8a4 <hal_usart_peek+0x18>)
 23fb894:	4403      	add	r3, r0
 23fb896:	681b      	ldr	r3, [r3, #0]
 23fb898:	699b      	ldr	r3, [r3, #24]
 23fb89a:	9302      	str	r3, [sp, #8]
 23fb89c:	bd09      	pop	{r0, r3, pc}
 23fb89e:	0000      	.short	0x0000
 23fb8a0:	1007ad6c 	.word	0x1007ad6c
 23fb8a4:	00000024 	.word	0x00000024

023fb8a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fb8a8:	b509      	push	{r0, r3, lr}
 23fb8aa:	4804      	ldr	r0, [pc, #16]	; (23fb8bc <hal_usart_flush+0x14>)
 23fb8ac:	6800      	ldr	r0, [r0, #0]
 23fb8ae:	4b04      	ldr	r3, [pc, #16]	; (23fb8c0 <hal_usart_flush+0x18>)
 23fb8b0:	4403      	add	r3, r0
 23fb8b2:	681b      	ldr	r3, [r3, #0]
 23fb8b4:	69db      	ldr	r3, [r3, #28]
 23fb8b6:	9302      	str	r3, [sp, #8]
 23fb8b8:	bd09      	pop	{r0, r3, pc}
 23fb8ba:	0000      	.short	0x0000
 23fb8bc:	1007ad6c 	.word	0x1007ad6c
 23fb8c0:	00000024 	.word	0x00000024

023fb8c4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fb8c4:	b509      	push	{r0, r3, lr}
 23fb8c6:	4804      	ldr	r0, [pc, #16]	; (23fb8d8 <hal_usart_is_enabled+0x14>)
 23fb8c8:	6800      	ldr	r0, [r0, #0]
 23fb8ca:	4b04      	ldr	r3, [pc, #16]	; (23fb8dc <hal_usart_is_enabled+0x18>)
 23fb8cc:	4403      	add	r3, r0
 23fb8ce:	681b      	ldr	r3, [r3, #0]
 23fb8d0:	6a1b      	ldr	r3, [r3, #32]
 23fb8d2:	9302      	str	r3, [sp, #8]
 23fb8d4:	bd09      	pop	{r0, r3, pc}
 23fb8d6:	0000      	.short	0x0000
 23fb8d8:	1007ad6c 	.word	0x1007ad6c
 23fb8dc:	00000024 	.word	0x00000024

023fb8e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fb8e0:	b509      	push	{r0, r3, lr}
 23fb8e2:	4804      	ldr	r0, [pc, #16]	; (23fb8f4 <hal_usart_available_data_for_write+0x14>)
 23fb8e4:	6800      	ldr	r0, [r0, #0]
 23fb8e6:	4b04      	ldr	r3, [pc, #16]	; (23fb8f8 <hal_usart_available_data_for_write+0x18>)
 23fb8e8:	4403      	add	r3, r0
 23fb8ea:	681b      	ldr	r3, [r3, #0]
 23fb8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb8ee:	9302      	str	r3, [sp, #8]
 23fb8f0:	bd09      	pop	{r0, r3, pc}
 23fb8f2:	0000      	.short	0x0000
 23fb8f4:	1007ad6c 	.word	0x1007ad6c
 23fb8f8:	00000024 	.word	0x00000024

023fb8fc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fb8fc:	b509      	push	{r0, r3, lr}
 23fb8fe:	4804      	ldr	r0, [pc, #16]	; (23fb910 <hal_usart_begin_config+0x14>)
 23fb900:	6800      	ldr	r0, [r0, #0]
 23fb902:	4b04      	ldr	r3, [pc, #16]	; (23fb914 <hal_usart_begin_config+0x18>)
 23fb904:	4403      	add	r3, r0
 23fb906:	681b      	ldr	r3, [r3, #0]
 23fb908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb90a:	9302      	str	r3, [sp, #8]
 23fb90c:	bd09      	pop	{r0, r3, pc}
 23fb90e:	0000      	.short	0x0000
 23fb910:	1007ad6c 	.word	0x1007ad6c
 23fb914:	00000024 	.word	0x00000024

023fb918 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fb918:	b509      	push	{r0, r3, lr}
 23fb91a:	4804      	ldr	r0, [pc, #16]	; (23fb92c <hal_usart_init_ex+0x14>)
 23fb91c:	6800      	ldr	r0, [r0, #0]
 23fb91e:	4b04      	ldr	r3, [pc, #16]	; (23fb930 <hal_usart_init_ex+0x18>)
 23fb920:	4403      	add	r3, r0
 23fb922:	681b      	ldr	r3, [r3, #0]
 23fb924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb926:	9302      	str	r3, [sp, #8]
 23fb928:	bd09      	pop	{r0, r3, pc}
 23fb92a:	0000      	.short	0x0000
 23fb92c:	1007ad6c 	.word	0x1007ad6c
 23fb930:	00000024 	.word	0x00000024

023fb934 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fb934:	b509      	push	{r0, r3, lr}
 23fb936:	4804      	ldr	r0, [pc, #16]	; (23fb948 <hal_i2c_write+0x14>)
 23fb938:	6800      	ldr	r0, [r0, #0]
 23fb93a:	4b04      	ldr	r3, [pc, #16]	; (23fb94c <hal_i2c_write+0x18>)
 23fb93c:	4403      	add	r3, r0
 23fb93e:	681b      	ldr	r3, [r3, #0]
 23fb940:	6a1b      	ldr	r3, [r3, #32]
 23fb942:	9302      	str	r3, [sp, #8]
 23fb944:	bd09      	pop	{r0, r3, pc}
 23fb946:	0000      	.short	0x0000
 23fb948:	1007ad6c 	.word	0x1007ad6c
 23fb94c:	00000010 	.word	0x00000010

023fb950 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fb950:	b509      	push	{r0, r3, lr}
 23fb952:	4804      	ldr	r0, [pc, #16]	; (23fb964 <hal_i2c_available+0x14>)
 23fb954:	6800      	ldr	r0, [r0, #0]
 23fb956:	4b04      	ldr	r3, [pc, #16]	; (23fb968 <hal_i2c_available+0x18>)
 23fb958:	4403      	add	r3, r0
 23fb95a:	681b      	ldr	r3, [r3, #0]
 23fb95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb95e:	9302      	str	r3, [sp, #8]
 23fb960:	bd09      	pop	{r0, r3, pc}
 23fb962:	0000      	.short	0x0000
 23fb964:	1007ad6c 	.word	0x1007ad6c
 23fb968:	00000010 	.word	0x00000010

023fb96c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fb96c:	b509      	push	{r0, r3, lr}
 23fb96e:	4804      	ldr	r0, [pc, #16]	; (23fb980 <hal_i2c_read+0x14>)
 23fb970:	6800      	ldr	r0, [r0, #0]
 23fb972:	4b04      	ldr	r3, [pc, #16]	; (23fb984 <hal_i2c_read+0x18>)
 23fb974:	4403      	add	r3, r0
 23fb976:	681b      	ldr	r3, [r3, #0]
 23fb978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb97a:	9302      	str	r3, [sp, #8]
 23fb97c:	bd09      	pop	{r0, r3, pc}
 23fb97e:	0000      	.short	0x0000
 23fb980:	1007ad6c 	.word	0x1007ad6c
 23fb984:	00000010 	.word	0x00000010

023fb988 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fb988:	b509      	push	{r0, r3, lr}
 23fb98a:	4804      	ldr	r0, [pc, #16]	; (23fb99c <hal_i2c_peek+0x14>)
 23fb98c:	6800      	ldr	r0, [r0, #0]
 23fb98e:	4b04      	ldr	r3, [pc, #16]	; (23fb9a0 <hal_i2c_peek+0x18>)
 23fb990:	4403      	add	r3, r0
 23fb992:	681b      	ldr	r3, [r3, #0]
 23fb994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb996:	9302      	str	r3, [sp, #8]
 23fb998:	bd09      	pop	{r0, r3, pc}
 23fb99a:	0000      	.short	0x0000
 23fb99c:	1007ad6c 	.word	0x1007ad6c
 23fb9a0:	00000010 	.word	0x00000010

023fb9a4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fb9a4:	b509      	push	{r0, r3, lr}
 23fb9a6:	4804      	ldr	r0, [pc, #16]	; (23fb9b8 <hal_i2c_flush+0x14>)
 23fb9a8:	6800      	ldr	r0, [r0, #0]
 23fb9aa:	4b04      	ldr	r3, [pc, #16]	; (23fb9bc <hal_i2c_flush+0x18>)
 23fb9ac:	4403      	add	r3, r0
 23fb9ae:	681b      	ldr	r3, [r3, #0]
 23fb9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb9b2:	9302      	str	r3, [sp, #8]
 23fb9b4:	bd09      	pop	{r0, r3, pc}
 23fb9b6:	0000      	.short	0x0000
 23fb9b8:	1007ad6c 	.word	0x1007ad6c
 23fb9bc:	00000010 	.word	0x00000010

023fb9c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fb9c0:	b509      	push	{r0, r3, lr}
 23fb9c2:	4804      	ldr	r0, [pc, #16]	; (23fb9d4 <hal_i2c_is_enabled+0x14>)
 23fb9c4:	6800      	ldr	r0, [r0, #0]
 23fb9c6:	4b04      	ldr	r3, [pc, #16]	; (23fb9d8 <hal_i2c_is_enabled+0x18>)
 23fb9c8:	4403      	add	r3, r0
 23fb9ca:	681b      	ldr	r3, [r3, #0]
 23fb9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb9ce:	9302      	str	r3, [sp, #8]
 23fb9d0:	bd09      	pop	{r0, r3, pc}
 23fb9d2:	0000      	.short	0x0000
 23fb9d4:	1007ad6c 	.word	0x1007ad6c
 23fb9d8:	00000010 	.word	0x00000010

023fb9dc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fb9dc:	b509      	push	{r0, r3, lr}
 23fb9de:	4804      	ldr	r0, [pc, #16]	; (23fb9f0 <hal_i2c_init+0x14>)
 23fb9e0:	6800      	ldr	r0, [r0, #0]
 23fb9e2:	4b04      	ldr	r3, [pc, #16]	; (23fb9f4 <hal_i2c_init+0x18>)
 23fb9e4:	4403      	add	r3, r0
 23fb9e6:	681b      	ldr	r3, [r3, #0]
 23fb9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb9ea:	9302      	str	r3, [sp, #8]
 23fb9ec:	bd09      	pop	{r0, r3, pc}
 23fb9ee:	0000      	.short	0x0000
 23fb9f0:	1007ad6c 	.word	0x1007ad6c
 23fb9f4:	00000010 	.word	0x00000010

023fb9f8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fb9f8:	b509      	push	{r0, r3, lr}
 23fb9fa:	4804      	ldr	r0, [pc, #16]	; (23fba0c <hal_spi_begin+0x14>)
 23fb9fc:	6800      	ldr	r0, [r0, #0]
 23fb9fe:	4b04      	ldr	r3, [pc, #16]	; (23fba10 <hal_spi_begin+0x18>)
 23fba00:	4403      	add	r3, r0
 23fba02:	681b      	ldr	r3, [r3, #0]
 23fba04:	681b      	ldr	r3, [r3, #0]
 23fba06:	9302      	str	r3, [sp, #8]
 23fba08:	bd09      	pop	{r0, r3, pc}
 23fba0a:	0000      	.short	0x0000
 23fba0c:	1007ad6c 	.word	0x1007ad6c
 23fba10:	00000018 	.word	0x00000018

023fba14 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fba14:	b509      	push	{r0, r3, lr}
 23fba16:	4804      	ldr	r0, [pc, #16]	; (23fba28 <hal_spi_set_data_mode+0x14>)
 23fba18:	6800      	ldr	r0, [r0, #0]
 23fba1a:	4b04      	ldr	r3, [pc, #16]	; (23fba2c <hal_spi_set_data_mode+0x18>)
 23fba1c:	4403      	add	r3, r0
 23fba1e:	681b      	ldr	r3, [r3, #0]
 23fba20:	68db      	ldr	r3, [r3, #12]
 23fba22:	9302      	str	r3, [sp, #8]
 23fba24:	bd09      	pop	{r0, r3, pc}
 23fba26:	0000      	.short	0x0000
 23fba28:	1007ad6c 	.word	0x1007ad6c
 23fba2c:	00000018 	.word	0x00000018

023fba30 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fba30:	b509      	push	{r0, r3, lr}
 23fba32:	4804      	ldr	r0, [pc, #16]	; (23fba44 <hal_spi_set_clock_divider+0x14>)
 23fba34:	6800      	ldr	r0, [r0, #0]
 23fba36:	4b04      	ldr	r3, [pc, #16]	; (23fba48 <hal_spi_set_clock_divider+0x18>)
 23fba38:	4403      	add	r3, r0
 23fba3a:	681b      	ldr	r3, [r3, #0]
 23fba3c:	691b      	ldr	r3, [r3, #16]
 23fba3e:	9302      	str	r3, [sp, #8]
 23fba40:	bd09      	pop	{r0, r3, pc}
 23fba42:	0000      	.short	0x0000
 23fba44:	1007ad6c 	.word	0x1007ad6c
 23fba48:	00000018 	.word	0x00000018

023fba4c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fba4c:	b509      	push	{r0, r3, lr}
 23fba4e:	4804      	ldr	r0, [pc, #16]	; (23fba60 <hal_spi_transfer+0x14>)
 23fba50:	6800      	ldr	r0, [r0, #0]
 23fba52:	4b04      	ldr	r3, [pc, #16]	; (23fba64 <hal_spi_transfer+0x18>)
 23fba54:	4403      	add	r3, r0
 23fba56:	681b      	ldr	r3, [r3, #0]
 23fba58:	695b      	ldr	r3, [r3, #20]
 23fba5a:	9302      	str	r3, [sp, #8]
 23fba5c:	bd09      	pop	{r0, r3, pc}
 23fba5e:	0000      	.short	0x0000
 23fba60:	1007ad6c 	.word	0x1007ad6c
 23fba64:	00000018 	.word	0x00000018

023fba68 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fba68:	b509      	push	{r0, r3, lr}
 23fba6a:	4804      	ldr	r0, [pc, #16]	; (23fba7c <hal_spi_init+0x14>)
 23fba6c:	6800      	ldr	r0, [r0, #0]
 23fba6e:	4b04      	ldr	r3, [pc, #16]	; (23fba80 <hal_spi_init+0x18>)
 23fba70:	4403      	add	r3, r0
 23fba72:	681b      	ldr	r3, [r3, #0]
 23fba74:	69db      	ldr	r3, [r3, #28]
 23fba76:	9302      	str	r3, [sp, #8]
 23fba78:	bd09      	pop	{r0, r3, pc}
 23fba7a:	0000      	.short	0x0000
 23fba7c:	1007ad6c 	.word	0x1007ad6c
 23fba80:	00000018 	.word	0x00000018

023fba84 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fba84:	b509      	push	{r0, r3, lr}
 23fba86:	4804      	ldr	r0, [pc, #16]	; (23fba98 <hal_spi_is_enabled+0x14>)
 23fba88:	6800      	ldr	r0, [r0, #0]
 23fba8a:	4b04      	ldr	r3, [pc, #16]	; (23fba9c <hal_spi_is_enabled+0x18>)
 23fba8c:	4403      	add	r3, r0
 23fba8e:	681b      	ldr	r3, [r3, #0]
 23fba90:	6a1b      	ldr	r3, [r3, #32]
 23fba92:	9302      	str	r3, [sp, #8]
 23fba94:	bd09      	pop	{r0, r3, pc}
 23fba96:	0000      	.short	0x0000
 23fba98:	1007ad6c 	.word	0x1007ad6c
 23fba9c:	00000018 	.word	0x00000018

023fbaa0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fbaa0:	b509      	push	{r0, r3, lr}
 23fbaa2:	4804      	ldr	r0, [pc, #16]	; (23fbab4 <hal_spi_info+0x14>)
 23fbaa4:	6800      	ldr	r0, [r0, #0]
 23fbaa6:	4b04      	ldr	r3, [pc, #16]	; (23fbab8 <hal_spi_info+0x18>)
 23fbaa8:	4403      	add	r3, r0
 23fbaaa:	681b      	ldr	r3, [r3, #0]
 23fbaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbaae:	9302      	str	r3, [sp, #8]
 23fbab0:	bd09      	pop	{r0, r3, pc}
 23fbab2:	0000      	.short	0x0000
 23fbab4:	1007ad6c 	.word	0x1007ad6c
 23fbab8:	00000018 	.word	0x00000018

023fbabc <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fbabc:	b509      	push	{r0, r3, lr}
 23fbabe:	4804      	ldr	r0, [pc, #16]	; (23fbad0 <hal_spi_acquire+0x14>)
 23fbac0:	6800      	ldr	r0, [r0, #0]
 23fbac2:	4b04      	ldr	r3, [pc, #16]	; (23fbad4 <hal_spi_acquire+0x18>)
 23fbac4:	4403      	add	r3, r0
 23fbac6:	681b      	ldr	r3, [r3, #0]
 23fbac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbaca:	9302      	str	r3, [sp, #8]
 23fbacc:	bd09      	pop	{r0, r3, pc}
 23fbace:	0000      	.short	0x0000
 23fbad0:	1007ad6c 	.word	0x1007ad6c
 23fbad4:	00000018 	.word	0x00000018

023fbad8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fbad8:	b509      	push	{r0, r3, lr}
 23fbada:	4804      	ldr	r0, [pc, #16]	; (23fbaec <hal_spi_release+0x14>)
 23fbadc:	6800      	ldr	r0, [r0, #0]
 23fbade:	4b04      	ldr	r3, [pc, #16]	; (23fbaf0 <hal_spi_release+0x18>)
 23fbae0:	4403      	add	r3, r0
 23fbae2:	681b      	ldr	r3, [r3, #0]
 23fbae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbae6:	9302      	str	r3, [sp, #8]
 23fbae8:	bd09      	pop	{r0, r3, pc}
 23fbaea:	0000      	.short	0x0000
 23fbaec:	1007ad6c 	.word	0x1007ad6c
 23fbaf0:	00000018 	.word	0x00000018

023fbaf4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fbaf4:	b509      	push	{r0, r3, lr}
 23fbaf6:	4804      	ldr	r0, [pc, #16]	; (23fbb08 <HAL_USB_USART_Init+0x14>)
 23fbaf8:	6800      	ldr	r0, [r0, #0]
 23fbafa:	4b04      	ldr	r3, [pc, #16]	; (23fbb0c <HAL_USB_USART_Init+0x18>)
 23fbafc:	4403      	add	r3, r0
 23fbafe:	681b      	ldr	r3, [r3, #0]
 23fbb00:	681b      	ldr	r3, [r3, #0]
 23fbb02:	9302      	str	r3, [sp, #8]
 23fbb04:	bd09      	pop	{r0, r3, pc}
 23fbb06:	0000      	.short	0x0000
 23fbb08:	1007ad6c 	.word	0x1007ad6c
 23fbb0c:	00000034 	.word	0x00000034

023fbb10 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fbb10:	b509      	push	{r0, r3, lr}
 23fbb12:	4804      	ldr	r0, [pc, #16]	; (23fbb24 <HAL_USB_USART_Begin+0x14>)
 23fbb14:	6800      	ldr	r0, [r0, #0]
 23fbb16:	4b04      	ldr	r3, [pc, #16]	; (23fbb28 <HAL_USB_USART_Begin+0x18>)
 23fbb18:	4403      	add	r3, r0
 23fbb1a:	681b      	ldr	r3, [r3, #0]
 23fbb1c:	685b      	ldr	r3, [r3, #4]
 23fbb1e:	9302      	str	r3, [sp, #8]
 23fbb20:	bd09      	pop	{r0, r3, pc}
 23fbb22:	0000      	.short	0x0000
 23fbb24:	1007ad6c 	.word	0x1007ad6c
 23fbb28:	00000034 	.word	0x00000034

023fbb2c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fbb2c:	b509      	push	{r0, r3, lr}
 23fbb2e:	4804      	ldr	r0, [pc, #16]	; (23fbb40 <HAL_USB_USART_End+0x14>)
 23fbb30:	6800      	ldr	r0, [r0, #0]
 23fbb32:	4b04      	ldr	r3, [pc, #16]	; (23fbb44 <HAL_USB_USART_End+0x18>)
 23fbb34:	4403      	add	r3, r0
 23fbb36:	681b      	ldr	r3, [r3, #0]
 23fbb38:	689b      	ldr	r3, [r3, #8]
 23fbb3a:	9302      	str	r3, [sp, #8]
 23fbb3c:	bd09      	pop	{r0, r3, pc}
 23fbb3e:	0000      	.short	0x0000
 23fbb40:	1007ad6c 	.word	0x1007ad6c
 23fbb44:	00000034 	.word	0x00000034

023fbb48 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fbb48:	b509      	push	{r0, r3, lr}
 23fbb4a:	4804      	ldr	r0, [pc, #16]	; (23fbb5c <HAL_USB_USART_Available_Data+0x14>)
 23fbb4c:	6800      	ldr	r0, [r0, #0]
 23fbb4e:	4b04      	ldr	r3, [pc, #16]	; (23fbb60 <HAL_USB_USART_Available_Data+0x18>)
 23fbb50:	4403      	add	r3, r0
 23fbb52:	681b      	ldr	r3, [r3, #0]
 23fbb54:	691b      	ldr	r3, [r3, #16]
 23fbb56:	9302      	str	r3, [sp, #8]
 23fbb58:	bd09      	pop	{r0, r3, pc}
 23fbb5a:	0000      	.short	0x0000
 23fbb5c:	1007ad6c 	.word	0x1007ad6c
 23fbb60:	00000034 	.word	0x00000034

023fbb64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fbb64:	b509      	push	{r0, r3, lr}
 23fbb66:	4804      	ldr	r0, [pc, #16]	; (23fbb78 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fbb68:	6800      	ldr	r0, [r0, #0]
 23fbb6a:	4b04      	ldr	r3, [pc, #16]	; (23fbb7c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fbb6c:	4403      	add	r3, r0
 23fbb6e:	681b      	ldr	r3, [r3, #0]
 23fbb70:	695b      	ldr	r3, [r3, #20]
 23fbb72:	9302      	str	r3, [sp, #8]
 23fbb74:	bd09      	pop	{r0, r3, pc}
 23fbb76:	0000      	.short	0x0000
 23fbb78:	1007ad6c 	.word	0x1007ad6c
 23fbb7c:	00000034 	.word	0x00000034

023fbb80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbb80:	b509      	push	{r0, r3, lr}
 23fbb82:	4804      	ldr	r0, [pc, #16]	; (23fbb94 <HAL_USB_USART_Receive_Data+0x14>)
 23fbb84:	6800      	ldr	r0, [r0, #0]
 23fbb86:	4b04      	ldr	r3, [pc, #16]	; (23fbb98 <HAL_USB_USART_Receive_Data+0x18>)
 23fbb88:	4403      	add	r3, r0
 23fbb8a:	681b      	ldr	r3, [r3, #0]
 23fbb8c:	699b      	ldr	r3, [r3, #24]
 23fbb8e:	9302      	str	r3, [sp, #8]
 23fbb90:	bd09      	pop	{r0, r3, pc}
 23fbb92:	0000      	.short	0x0000
 23fbb94:	1007ad6c 	.word	0x1007ad6c
 23fbb98:	00000034 	.word	0x00000034

023fbb9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbb9c:	b509      	push	{r0, r3, lr}
 23fbb9e:	4804      	ldr	r0, [pc, #16]	; (23fbbb0 <HAL_USB_USART_Send_Data+0x14>)
 23fbba0:	6800      	ldr	r0, [r0, #0]
 23fbba2:	4b04      	ldr	r3, [pc, #16]	; (23fbbb4 <HAL_USB_USART_Send_Data+0x18>)
 23fbba4:	4403      	add	r3, r0
 23fbba6:	681b      	ldr	r3, [r3, #0]
 23fbba8:	69db      	ldr	r3, [r3, #28]
 23fbbaa:	9302      	str	r3, [sp, #8]
 23fbbac:	bd09      	pop	{r0, r3, pc}
 23fbbae:	0000      	.short	0x0000
 23fbbb0:	1007ad6c 	.word	0x1007ad6c
 23fbbb4:	00000034 	.word	0x00000034

023fbbb8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fbbb8:	b509      	push	{r0, r3, lr}
 23fbbba:	4804      	ldr	r0, [pc, #16]	; (23fbbcc <HAL_USB_USART_Flush_Data+0x14>)
 23fbbbc:	6800      	ldr	r0, [r0, #0]
 23fbbbe:	4b04      	ldr	r3, [pc, #16]	; (23fbbd0 <HAL_USB_USART_Flush_Data+0x18>)
 23fbbc0:	4403      	add	r3, r0
 23fbbc2:	681b      	ldr	r3, [r3, #0]
 23fbbc4:	6a1b      	ldr	r3, [r3, #32]
 23fbbc6:	9302      	str	r3, [sp, #8]
 23fbbc8:	bd09      	pop	{r0, r3, pc}
 23fbbca:	0000      	.short	0x0000
 23fbbcc:	1007ad6c 	.word	0x1007ad6c
 23fbbd0:	00000034 	.word	0x00000034

023fbbd4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fbbd4:	b509      	push	{r0, r3, lr}
 23fbbd6:	4804      	ldr	r0, [pc, #16]	; (23fbbe8 <HAL_USB_USART_Is_Connected+0x14>)
 23fbbd8:	6800      	ldr	r0, [r0, #0]
 23fbbda:	4b04      	ldr	r3, [pc, #16]	; (23fbbec <HAL_USB_USART_Is_Connected+0x18>)
 23fbbdc:	4403      	add	r3, r0
 23fbbde:	681b      	ldr	r3, [r3, #0]
 23fbbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbbe2:	9302      	str	r3, [sp, #8]
 23fbbe4:	bd09      	pop	{r0, r3, pc}
 23fbbe6:	0000      	.short	0x0000
 23fbbe8:	1007ad6c 	.word	0x1007ad6c
 23fbbec:	00000034 	.word	0x00000034

023fbbf0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fbbf0:	b509      	push	{r0, r3, lr}
 23fbbf2:	4804      	ldr	r0, [pc, #16]	; (23fbc04 <panic_+0x14>)
 23fbbf4:	6800      	ldr	r0, [r0, #0]
 23fbbf6:	4b04      	ldr	r3, [pc, #16]	; (23fbc08 <panic_+0x18>)
 23fbbf8:	4403      	add	r3, r0
 23fbbfa:	681b      	ldr	r3, [r3, #0]
 23fbbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbbfe:	9302      	str	r3, [sp, #8]
 23fbc00:	bd09      	pop	{r0, r3, pc}
 23fbc02:	0000      	.short	0x0000
 23fbc04:	1007ad6c 	.word	0x1007ad6c
 23fbc08:	00000048 	.word	0x00000048

023fbc0c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fbc0c:	b509      	push	{r0, r3, lr}
 23fbc0e:	4804      	ldr	r0, [pc, #16]	; (23fbc20 <log_level_name+0x14>)
 23fbc10:	6800      	ldr	r0, [r0, #0]
 23fbc12:	4b04      	ldr	r3, [pc, #16]	; (23fbc24 <log_level_name+0x18>)
 23fbc14:	4403      	add	r3, r0
 23fbc16:	681b      	ldr	r3, [r3, #0]
 23fbc18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fbc1a:	9302      	str	r3, [sp, #8]
 23fbc1c:	bd09      	pop	{r0, r3, pc}
 23fbc1e:	0000      	.short	0x0000
 23fbc20:	1007ad6c 	.word	0x1007ad6c
 23fbc24:	00000048 	.word	0x00000048

023fbc28 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fbc28:	b509      	push	{r0, r3, lr}
 23fbc2a:	4804      	ldr	r0, [pc, #16]	; (23fbc3c <log_set_callbacks+0x14>)
 23fbc2c:	6800      	ldr	r0, [r0, #0]
 23fbc2e:	4b04      	ldr	r3, [pc, #16]	; (23fbc40 <log_set_callbacks+0x18>)
 23fbc30:	4403      	add	r3, r0
 23fbc32:	681b      	ldr	r3, [r3, #0]
 23fbc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fbc36:	9302      	str	r3, [sp, #8]
 23fbc38:	bd09      	pop	{r0, r3, pc}
 23fbc3a:	0000      	.short	0x0000
 23fbc3c:	1007ad6c 	.word	0x1007ad6c
 23fbc40:	00000048 	.word	0x00000048

023fbc44 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fbc44:	b509      	push	{r0, r3, lr}
 23fbc46:	4804      	ldr	r0, [pc, #16]	; (23fbc58 <set_system_mode+0x14>)
 23fbc48:	6800      	ldr	r0, [r0, #0]
 23fbc4a:	4b04      	ldr	r3, [pc, #16]	; (23fbc5c <set_system_mode+0x18>)
 23fbc4c:	4403      	add	r3, r0
 23fbc4e:	681b      	ldr	r3, [r3, #0]
 23fbc50:	685b      	ldr	r3, [r3, #4]
 23fbc52:	9302      	str	r3, [sp, #8]
 23fbc54:	bd09      	pop	{r0, r3, pc}
 23fbc56:	0000      	.short	0x0000
 23fbc58:	1007ad6c 	.word	0x1007ad6c
 23fbc5c:	00000008 	.word	0x00000008

023fbc60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fbc60:	b509      	push	{r0, r3, lr}
 23fbc62:	4804      	ldr	r0, [pc, #16]	; (23fbc74 <system_delay_ms+0x14>)
 23fbc64:	6800      	ldr	r0, [r0, #0]
 23fbc66:	4b04      	ldr	r3, [pc, #16]	; (23fbc78 <system_delay_ms+0x18>)
 23fbc68:	4403      	add	r3, r0
 23fbc6a:	681b      	ldr	r3, [r3, #0]
 23fbc6c:	695b      	ldr	r3, [r3, #20]
 23fbc6e:	9302      	str	r3, [sp, #8]
 23fbc70:	bd09      	pop	{r0, r3, pc}
 23fbc72:	0000      	.short	0x0000
 23fbc74:	1007ad6c 	.word	0x1007ad6c
 23fbc78:	00000008 	.word	0x00000008

023fbc7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fbc7c:	b509      	push	{r0, r3, lr}
 23fbc7e:	4804      	ldr	r0, [pc, #16]	; (23fbc90 <system_ctrl_set_app_request_handler+0x14>)
 23fbc80:	6800      	ldr	r0, [r0, #0]
 23fbc82:	4b04      	ldr	r3, [pc, #16]	; (23fbc94 <system_ctrl_set_app_request_handler+0x18>)
 23fbc84:	4403      	add	r3, r0
 23fbc86:	681b      	ldr	r3, [r3, #0]
 23fbc88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fbc8c:	9302      	str	r3, [sp, #8]
 23fbc8e:	bd09      	pop	{r0, r3, pc}
 23fbc90:	1007ad6c 	.word	0x1007ad6c
 23fbc94:	00000008 	.word	0x00000008

023fbc98 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fbc98:	b509      	push	{r0, r3, lr}
 23fbc9a:	4804      	ldr	r0, [pc, #16]	; (23fbcac <system_ctrl_set_result+0x14>)
 23fbc9c:	6800      	ldr	r0, [r0, #0]
 23fbc9e:	4b04      	ldr	r3, [pc, #16]	; (23fbcb0 <system_ctrl_set_result+0x18>)
 23fbca0:	4403      	add	r3, r0
 23fbca2:	681b      	ldr	r3, [r3, #0]
 23fbca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fbca8:	9302      	str	r3, [sp, #8]
 23fbcaa:	bd09      	pop	{r0, r3, pc}
 23fbcac:	1007ad6c 	.word	0x1007ad6c
 23fbcb0:	00000008 	.word	0x00000008

023fbcb4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbcb4:	b509      	push	{r0, r3, lr}
 23fbcb6:	4804      	ldr	r0, [pc, #16]	; (23fbcc8 <network_connect+0x14>)
 23fbcb8:	6800      	ldr	r0, [r0, #0]
 23fbcba:	4b04      	ldr	r3, [pc, #16]	; (23fbccc <network_connect+0x18>)
 23fbcbc:	4403      	add	r3, r0
 23fbcbe:	681b      	ldr	r3, [r3, #0]
 23fbcc0:	685b      	ldr	r3, [r3, #4]
 23fbcc2:	9302      	str	r3, [sp, #8]
 23fbcc4:	bd09      	pop	{r0, r3, pc}
 23fbcc6:	0000      	.short	0x0000
 23fbcc8:	1007ad6c 	.word	0x1007ad6c
 23fbccc:	00000028 	.word	0x00000028

023fbcd0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fbcd0:	b509      	push	{r0, r3, lr}
 23fbcd2:	4804      	ldr	r0, [pc, #16]	; (23fbce4 <network_connecting+0x14>)
 23fbcd4:	6800      	ldr	r0, [r0, #0]
 23fbcd6:	4b04      	ldr	r3, [pc, #16]	; (23fbce8 <network_connecting+0x18>)
 23fbcd8:	4403      	add	r3, r0
 23fbcda:	681b      	ldr	r3, [r3, #0]
 23fbcdc:	689b      	ldr	r3, [r3, #8]
 23fbcde:	9302      	str	r3, [sp, #8]
 23fbce0:	bd09      	pop	{r0, r3, pc}
 23fbce2:	0000      	.short	0x0000
 23fbce4:	1007ad6c 	.word	0x1007ad6c
 23fbce8:	00000028 	.word	0x00000028

023fbcec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fbcec:	b509      	push	{r0, r3, lr}
 23fbcee:	4804      	ldr	r0, [pc, #16]	; (23fbd00 <network_disconnect+0x14>)
 23fbcf0:	6800      	ldr	r0, [r0, #0]
 23fbcf2:	4b04      	ldr	r3, [pc, #16]	; (23fbd04 <network_disconnect+0x18>)
 23fbcf4:	4403      	add	r3, r0
 23fbcf6:	681b      	ldr	r3, [r3, #0]
 23fbcf8:	68db      	ldr	r3, [r3, #12]
 23fbcfa:	9302      	str	r3, [sp, #8]
 23fbcfc:	bd09      	pop	{r0, r3, pc}
 23fbcfe:	0000      	.short	0x0000
 23fbd00:	1007ad6c 	.word	0x1007ad6c
 23fbd04:	00000028 	.word	0x00000028

023fbd08 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fbd08:	b509      	push	{r0, r3, lr}
 23fbd0a:	4804      	ldr	r0, [pc, #16]	; (23fbd1c <network_ready+0x14>)
 23fbd0c:	6800      	ldr	r0, [r0, #0]
 23fbd0e:	4b04      	ldr	r3, [pc, #16]	; (23fbd20 <network_ready+0x18>)
 23fbd10:	4403      	add	r3, r0
 23fbd12:	681b      	ldr	r3, [r3, #0]
 23fbd14:	691b      	ldr	r3, [r3, #16]
 23fbd16:	9302      	str	r3, [sp, #8]
 23fbd18:	bd09      	pop	{r0, r3, pc}
 23fbd1a:	0000      	.short	0x0000
 23fbd1c:	1007ad6c 	.word	0x1007ad6c
 23fbd20:	00000028 	.word	0x00000028

023fbd24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbd24:	b509      	push	{r0, r3, lr}
 23fbd26:	4804      	ldr	r0, [pc, #16]	; (23fbd38 <network_on+0x14>)
 23fbd28:	6800      	ldr	r0, [r0, #0]
 23fbd2a:	4b04      	ldr	r3, [pc, #16]	; (23fbd3c <network_on+0x18>)
 23fbd2c:	4403      	add	r3, r0
 23fbd2e:	681b      	ldr	r3, [r3, #0]
 23fbd30:	695b      	ldr	r3, [r3, #20]
 23fbd32:	9302      	str	r3, [sp, #8]
 23fbd34:	bd09      	pop	{r0, r3, pc}
 23fbd36:	0000      	.short	0x0000
 23fbd38:	1007ad6c 	.word	0x1007ad6c
 23fbd3c:	00000028 	.word	0x00000028

023fbd40 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbd40:	b509      	push	{r0, r3, lr}
 23fbd42:	4804      	ldr	r0, [pc, #16]	; (23fbd54 <network_off+0x14>)
 23fbd44:	6800      	ldr	r0, [r0, #0]
 23fbd46:	4b04      	ldr	r3, [pc, #16]	; (23fbd58 <network_off+0x18>)
 23fbd48:	4403      	add	r3, r0
 23fbd4a:	681b      	ldr	r3, [r3, #0]
 23fbd4c:	699b      	ldr	r3, [r3, #24]
 23fbd4e:	9302      	str	r3, [sp, #8]
 23fbd50:	bd09      	pop	{r0, r3, pc}
 23fbd52:	0000      	.short	0x0000
 23fbd54:	1007ad6c 	.word	0x1007ad6c
 23fbd58:	00000028 	.word	0x00000028

023fbd5c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fbd5c:	b509      	push	{r0, r3, lr}
 23fbd5e:	4804      	ldr	r0, [pc, #16]	; (23fbd70 <network_listen+0x14>)
 23fbd60:	6800      	ldr	r0, [r0, #0]
 23fbd62:	4b04      	ldr	r3, [pc, #16]	; (23fbd74 <network_listen+0x18>)
 23fbd64:	4403      	add	r3, r0
 23fbd66:	681b      	ldr	r3, [r3, #0]
 23fbd68:	69db      	ldr	r3, [r3, #28]
 23fbd6a:	9302      	str	r3, [sp, #8]
 23fbd6c:	bd09      	pop	{r0, r3, pc}
 23fbd6e:	0000      	.short	0x0000
 23fbd70:	1007ad6c 	.word	0x1007ad6c
 23fbd74:	00000028 	.word	0x00000028

023fbd78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fbd78:	b509      	push	{r0, r3, lr}
 23fbd7a:	4804      	ldr	r0, [pc, #16]	; (23fbd8c <network_listening+0x14>)
 23fbd7c:	6800      	ldr	r0, [r0, #0]
 23fbd7e:	4b04      	ldr	r3, [pc, #16]	; (23fbd90 <network_listening+0x18>)
 23fbd80:	4403      	add	r3, r0
 23fbd82:	681b      	ldr	r3, [r3, #0]
 23fbd84:	6a1b      	ldr	r3, [r3, #32]
 23fbd86:	9302      	str	r3, [sp, #8]
 23fbd88:	bd09      	pop	{r0, r3, pc}
 23fbd8a:	0000      	.short	0x0000
 23fbd8c:	1007ad6c 	.word	0x1007ad6c
 23fbd90:	00000028 	.word	0x00000028

023fbd94 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fbd94:	b509      	push	{r0, r3, lr}
 23fbd96:	4804      	ldr	r0, [pc, #16]	; (23fbda8 <network_set_listen_timeout+0x14>)
 23fbd98:	6800      	ldr	r0, [r0, #0]
 23fbd9a:	4b04      	ldr	r3, [pc, #16]	; (23fbdac <network_set_listen_timeout+0x18>)
 23fbd9c:	4403      	add	r3, r0
 23fbd9e:	681b      	ldr	r3, [r3, #0]
 23fbda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbda2:	9302      	str	r3, [sp, #8]
 23fbda4:	bd09      	pop	{r0, r3, pc}
 23fbda6:	0000      	.short	0x0000
 23fbda8:	1007ad6c 	.word	0x1007ad6c
 23fbdac:	00000028 	.word	0x00000028

023fbdb0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fbdb0:	b509      	push	{r0, r3, lr}
 23fbdb2:	4804      	ldr	r0, [pc, #16]	; (23fbdc4 <network_get_listen_timeout+0x14>)
 23fbdb4:	6800      	ldr	r0, [r0, #0]
 23fbdb6:	4b04      	ldr	r3, [pc, #16]	; (23fbdc8 <network_get_listen_timeout+0x18>)
 23fbdb8:	4403      	add	r3, r0
 23fbdba:	681b      	ldr	r3, [r3, #0]
 23fbdbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbdbe:	9302      	str	r3, [sp, #8]
 23fbdc0:	bd09      	pop	{r0, r3, pc}
 23fbdc2:	0000      	.short	0x0000
 23fbdc4:	1007ad6c 	.word	0x1007ad6c
 23fbdc8:	00000028 	.word	0x00000028

023fbdcc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fbdcc:	b509      	push	{r0, r3, lr}
 23fbdce:	4804      	ldr	r0, [pc, #16]	; (23fbde0 <network_is_on+0x14>)
 23fbdd0:	6800      	ldr	r0, [r0, #0]
 23fbdd2:	4b04      	ldr	r3, [pc, #16]	; (23fbde4 <network_is_on+0x18>)
 23fbdd4:	4403      	add	r3, r0
 23fbdd6:	681b      	ldr	r3, [r3, #0]
 23fbdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbdda:	9302      	str	r3, [sp, #8]
 23fbddc:	bd09      	pop	{r0, r3, pc}
 23fbdde:	0000      	.short	0x0000
 23fbde0:	1007ad6c 	.word	0x1007ad6c
 23fbde4:	00000028 	.word	0x00000028

023fbde8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fbde8:	b509      	push	{r0, r3, lr}
 23fbdea:	4804      	ldr	r0, [pc, #16]	; (23fbdfc <network_is_off+0x14>)
 23fbdec:	6800      	ldr	r0, [r0, #0]
 23fbdee:	4b04      	ldr	r3, [pc, #16]	; (23fbe00 <network_is_off+0x18>)
 23fbdf0:	4403      	add	r3, r0
 23fbdf2:	681b      	ldr	r3, [r3, #0]
 23fbdf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbdf6:	9302      	str	r3, [sp, #8]
 23fbdf8:	bd09      	pop	{r0, r3, pc}
 23fbdfa:	0000      	.short	0x0000
 23fbdfc:	1007ad6c 	.word	0x1007ad6c
 23fbe00:	00000028 	.word	0x00000028

023fbe04 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fbe04:	b509      	push	{r0, r3, lr}
 23fbe06:	4804      	ldr	r0, [pc, #16]	; (23fbe18 <spark_process+0x14>)
 23fbe08:	6800      	ldr	r0, [r0, #0]
 23fbe0a:	4b04      	ldr	r3, [pc, #16]	; (23fbe1c <spark_process+0x18>)
 23fbe0c:	4403      	add	r3, r0
 23fbe0e:	681b      	ldr	r3, [r3, #0]
 23fbe10:	689b      	ldr	r3, [r3, #8]
 23fbe12:	9302      	str	r3, [sp, #8]
 23fbe14:	bd09      	pop	{r0, r3, pc}
 23fbe16:	0000      	.short	0x0000
 23fbe18:	1007ad6c 	.word	0x1007ad6c
 23fbe1c:	0000002c 	.word	0x0000002c

023fbe20 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fbe20:	b509      	push	{r0, r3, lr}
 23fbe22:	4804      	ldr	r0, [pc, #16]	; (23fbe34 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fbe24:	6800      	ldr	r0, [r0, #0]
 23fbe26:	4b04      	ldr	r3, [pc, #16]	; (23fbe38 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fbe28:	4403      	add	r3, r0
 23fbe2a:	681b      	ldr	r3, [r3, #0]
 23fbe2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbe2e:	9302      	str	r3, [sp, #8]
 23fbe30:	bd09      	pop	{r0, r3, pc}
 23fbe32:	0000      	.short	0x0000
 23fbe34:	1007ad6c 	.word	0x1007ad6c
 23fbe38:	0000002c 	.word	0x0000002c

023fbe3c <asset_manager_get_info>:
#endif // DYNALIB_EXPORT

DYNALIB_BEGIN(system_asset_manager)

DYNALIB_FN(0, system_asset_manager, asset_manager_set_notify_hook, int(asset_manager_notify_hook, void*, void*))
DYNALIB_FN(1, system_asset_manager, asset_manager_get_info, int(asset_manager_info*, void*))
 23fbe3c:	b509      	push	{r0, r3, lr}
 23fbe3e:	4804      	ldr	r0, [pc, #16]	; (23fbe50 <asset_manager_get_info+0x14>)
 23fbe40:	6800      	ldr	r0, [r0, #0]
 23fbe42:	4b04      	ldr	r3, [pc, #16]	; (23fbe54 <asset_manager_get_info+0x18>)
 23fbe44:	4403      	add	r3, r0
 23fbe46:	681b      	ldr	r3, [r3, #0]
 23fbe48:	685b      	ldr	r3, [r3, #4]
 23fbe4a:	9302      	str	r3, [sp, #8]
 23fbe4c:	bd09      	pop	{r0, r3, pc}
 23fbe4e:	0000      	.short	0x0000
 23fbe50:	1007ad6c 	.word	0x1007ad6c
 23fbe54:	00000074 	.word	0x00000074

023fbe58 <asset_manager_free_info>:
DYNALIB_FN(2, system_asset_manager, asset_manager_free_info, void(asset_manager_info*, void*))
 23fbe58:	b509      	push	{r0, r3, lr}
 23fbe5a:	4804      	ldr	r0, [pc, #16]	; (23fbe6c <asset_manager_free_info+0x14>)
 23fbe5c:	6800      	ldr	r0, [r0, #0]
 23fbe5e:	4b04      	ldr	r3, [pc, #16]	; (23fbe70 <asset_manager_free_info+0x18>)
 23fbe60:	4403      	add	r3, r0
 23fbe62:	681b      	ldr	r3, [r3, #0]
 23fbe64:	689b      	ldr	r3, [r3, #8]
 23fbe66:	9302      	str	r3, [sp, #8]
 23fbe68:	bd09      	pop	{r0, r3, pc}
 23fbe6a:	0000      	.short	0x0000
 23fbe6c:	1007ad6c 	.word	0x1007ad6c
 23fbe70:	00000074 	.word	0x00000074

023fbe74 <asset_manager_set_consumer_state>:
DYNALIB_FN(3, system_asset_manager, asset_manager_set_consumer_state, int(asset_manager_consumer_state, void*))
 23fbe74:	b509      	push	{r0, r3, lr}
 23fbe76:	4804      	ldr	r0, [pc, #16]	; (23fbe88 <asset_manager_set_consumer_state+0x14>)
 23fbe78:	6800      	ldr	r0, [r0, #0]
 23fbe7a:	4b04      	ldr	r3, [pc, #16]	; (23fbe8c <asset_manager_set_consumer_state+0x18>)
 23fbe7c:	4403      	add	r3, r0
 23fbe7e:	681b      	ldr	r3, [r3, #0]
 23fbe80:	68db      	ldr	r3, [r3, #12]
 23fbe82:	9302      	str	r3, [sp, #8]
 23fbe84:	bd09      	pop	{r0, r3, pc}
 23fbe86:	0000      	.short	0x0000
 23fbe88:	1007ad6c 	.word	0x1007ad6c
 23fbe8c:	00000074 	.word	0x00000074

023fbe90 <asset_manager_open>:
DYNALIB_FN(4, system_asset_manager, asset_manager_open, int(asset_manager_stream**, const asset_manager_asset*, void*))
 23fbe90:	b509      	push	{r0, r3, lr}
 23fbe92:	4804      	ldr	r0, [pc, #16]	; (23fbea4 <asset_manager_open+0x14>)
 23fbe94:	6800      	ldr	r0, [r0, #0]
 23fbe96:	4b04      	ldr	r3, [pc, #16]	; (23fbea8 <asset_manager_open+0x18>)
 23fbe98:	4403      	add	r3, r0
 23fbe9a:	681b      	ldr	r3, [r3, #0]
 23fbe9c:	691b      	ldr	r3, [r3, #16]
 23fbe9e:	9302      	str	r3, [sp, #8]
 23fbea0:	bd09      	pop	{r0, r3, pc}
 23fbea2:	0000      	.short	0x0000
 23fbea4:	1007ad6c 	.word	0x1007ad6c
 23fbea8:	00000074 	.word	0x00000074

023fbeac <asset_manager_available>:
DYNALIB_FN(5, system_asset_manager, asset_manager_available, int(asset_manager_stream*, void*))
 23fbeac:	b509      	push	{r0, r3, lr}
 23fbeae:	4804      	ldr	r0, [pc, #16]	; (23fbec0 <asset_manager_available+0x14>)
 23fbeb0:	6800      	ldr	r0, [r0, #0]
 23fbeb2:	4b04      	ldr	r3, [pc, #16]	; (23fbec4 <asset_manager_available+0x18>)
 23fbeb4:	4403      	add	r3, r0
 23fbeb6:	681b      	ldr	r3, [r3, #0]
 23fbeb8:	695b      	ldr	r3, [r3, #20]
 23fbeba:	9302      	str	r3, [sp, #8]
 23fbebc:	bd09      	pop	{r0, r3, pc}
 23fbebe:	0000      	.short	0x0000
 23fbec0:	1007ad6c 	.word	0x1007ad6c
 23fbec4:	00000074 	.word	0x00000074

023fbec8 <asset_manager_read>:
DYNALIB_FN(6, system_asset_manager, asset_manager_read, int(asset_manager_stream*, char*, size_t, void*))
 23fbec8:	b509      	push	{r0, r3, lr}
 23fbeca:	4804      	ldr	r0, [pc, #16]	; (23fbedc <asset_manager_read+0x14>)
 23fbecc:	6800      	ldr	r0, [r0, #0]
 23fbece:	4b04      	ldr	r3, [pc, #16]	; (23fbee0 <asset_manager_read+0x18>)
 23fbed0:	4403      	add	r3, r0
 23fbed2:	681b      	ldr	r3, [r3, #0]
 23fbed4:	699b      	ldr	r3, [r3, #24]
 23fbed6:	9302      	str	r3, [sp, #8]
 23fbed8:	bd09      	pop	{r0, r3, pc}
 23fbeda:	0000      	.short	0x0000
 23fbedc:	1007ad6c 	.word	0x1007ad6c
 23fbee0:	00000074 	.word	0x00000074

023fbee4 <asset_manager_peek>:
DYNALIB_FN(7, system_asset_manager, asset_manager_peek, int(asset_manager_stream*, char*, size_t, void*))
 23fbee4:	b509      	push	{r0, r3, lr}
 23fbee6:	4804      	ldr	r0, [pc, #16]	; (23fbef8 <asset_manager_peek+0x14>)
 23fbee8:	6800      	ldr	r0, [r0, #0]
 23fbeea:	4b04      	ldr	r3, [pc, #16]	; (23fbefc <asset_manager_peek+0x18>)
 23fbeec:	4403      	add	r3, r0
 23fbeee:	681b      	ldr	r3, [r3, #0]
 23fbef0:	69db      	ldr	r3, [r3, #28]
 23fbef2:	9302      	str	r3, [sp, #8]
 23fbef4:	bd09      	pop	{r0, r3, pc}
 23fbef6:	0000      	.short	0x0000
 23fbef8:	1007ad6c 	.word	0x1007ad6c
 23fbefc:	00000074 	.word	0x00000074

023fbf00 <asset_manager_skip>:
DYNALIB_FN(8, system_asset_manager, asset_manager_skip, int(asset_manager_stream*, size_t, void*))
 23fbf00:	b509      	push	{r0, r3, lr}
 23fbf02:	4804      	ldr	r0, [pc, #16]	; (23fbf14 <asset_manager_skip+0x14>)
 23fbf04:	6800      	ldr	r0, [r0, #0]
 23fbf06:	4b04      	ldr	r3, [pc, #16]	; (23fbf18 <asset_manager_skip+0x18>)
 23fbf08:	4403      	add	r3, r0
 23fbf0a:	681b      	ldr	r3, [r3, #0]
 23fbf0c:	6a1b      	ldr	r3, [r3, #32]
 23fbf0e:	9302      	str	r3, [sp, #8]
 23fbf10:	bd09      	pop	{r0, r3, pc}
 23fbf12:	0000      	.short	0x0000
 23fbf14:	1007ad6c 	.word	0x1007ad6c
 23fbf18:	00000074 	.word	0x00000074

023fbf1c <asset_manager_close>:
DYNALIB_FN(9, system_asset_manager, asset_manager_seek, int(asset_manager_stream*, size_t, void*))
DYNALIB_FN(10, system_asset_manager, asset_manager_close, void(asset_manager_stream*, void*))
 23fbf1c:	b509      	push	{r0, r3, lr}
 23fbf1e:	4804      	ldr	r0, [pc, #16]	; (23fbf30 <asset_manager_close+0x14>)
 23fbf20:	6800      	ldr	r0, [r0, #0]
 23fbf22:	4b04      	ldr	r3, [pc, #16]	; (23fbf34 <asset_manager_close+0x18>)
 23fbf24:	4403      	add	r3, r0
 23fbf26:	681b      	ldr	r3, [r3, #0]
 23fbf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbf2a:	9302      	str	r3, [sp, #8]
 23fbf2c:	bd09      	pop	{r0, r3, pc}
 23fbf2e:	0000      	.short	0x0000
 23fbf30:	1007ad6c 	.word	0x1007ad6c
 23fbf34:	00000074 	.word	0x00000074

023fbf38 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fbf38:	b509      	push	{r0, r3, lr}
 23fbf3a:	4804      	ldr	r0, [pc, #16]	; (23fbf4c <malloc+0x14>)
 23fbf3c:	6800      	ldr	r0, [r0, #0]
 23fbf3e:	4b04      	ldr	r3, [pc, #16]	; (23fbf50 <malloc+0x18>)
 23fbf40:	4403      	add	r3, r0
 23fbf42:	681b      	ldr	r3, [r3, #0]
 23fbf44:	681b      	ldr	r3, [r3, #0]
 23fbf46:	9302      	str	r3, [sp, #8]
 23fbf48:	bd09      	pop	{r0, r3, pc}
 23fbf4a:	0000      	.short	0x0000
 23fbf4c:	1007ad6c 	.word	0x1007ad6c
 23fbf50:	00000004 	.word	0x00000004

023fbf54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fbf54:	b509      	push	{r0, r3, lr}
 23fbf56:	4804      	ldr	r0, [pc, #16]	; (23fbf68 <free+0x14>)
 23fbf58:	6800      	ldr	r0, [r0, #0]
 23fbf5a:	4b04      	ldr	r3, [pc, #16]	; (23fbf6c <free+0x18>)
 23fbf5c:	4403      	add	r3, r0
 23fbf5e:	681b      	ldr	r3, [r3, #0]
 23fbf60:	685b      	ldr	r3, [r3, #4]
 23fbf62:	9302      	str	r3, [sp, #8]
 23fbf64:	bd09      	pop	{r0, r3, pc}
 23fbf66:	0000      	.short	0x0000
 23fbf68:	1007ad6c 	.word	0x1007ad6c
 23fbf6c:	00000004 	.word	0x00000004

023fbf70 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fbf70:	b509      	push	{r0, r3, lr}
 23fbf72:	4804      	ldr	r0, [pc, #16]	; (23fbf84 <realloc+0x14>)
 23fbf74:	6800      	ldr	r0, [r0, #0]
 23fbf76:	4b04      	ldr	r3, [pc, #16]	; (23fbf88 <realloc+0x18>)
 23fbf78:	4403      	add	r3, r0
 23fbf7a:	681b      	ldr	r3, [r3, #0]
 23fbf7c:	689b      	ldr	r3, [r3, #8]
 23fbf7e:	9302      	str	r3, [sp, #8]
 23fbf80:	bd09      	pop	{r0, r3, pc}
 23fbf82:	0000      	.short	0x0000
 23fbf84:	1007ad6c 	.word	0x1007ad6c
 23fbf88:	00000004 	.word	0x00000004

023fbf8c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fbf8c:	b509      	push	{r0, r3, lr}
 23fbf8e:	4804      	ldr	r0, [pc, #16]	; (23fbfa0 <vsnprintf+0x14>)
 23fbf90:	6800      	ldr	r0, [r0, #0]
 23fbf92:	4b04      	ldr	r3, [pc, #16]	; (23fbfa4 <vsnprintf+0x18>)
 23fbf94:	4403      	add	r3, r0
 23fbf96:	681b      	ldr	r3, [r3, #0]
 23fbf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbf9a:	9302      	str	r3, [sp, #8]
 23fbf9c:	bd09      	pop	{r0, r3, pc}
 23fbf9e:	0000      	.short	0x0000
 23fbfa0:	1007ad6c 	.word	0x1007ad6c
 23fbfa4:	00000004 	.word	0x00000004

023fbfa8 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fbfa8:	b509      	push	{r0, r3, lr}
 23fbfaa:	4804      	ldr	r0, [pc, #16]	; (23fbfbc <__errno+0x14>)
 23fbfac:	6800      	ldr	r0, [r0, #0]
 23fbfae:	4b04      	ldr	r3, [pc, #16]	; (23fbfc0 <__errno+0x18>)
 23fbfb0:	4403      	add	r3, r0
 23fbfb2:	681b      	ldr	r3, [r3, #0]
 23fbfb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbfb6:	9302      	str	r3, [sp, #8]
 23fbfb8:	bd09      	pop	{r0, r3, pc}
 23fbfba:	0000      	.short	0x0000
 23fbfbc:	1007ad6c 	.word	0x1007ad6c
 23fbfc0:	00000004 	.word	0x00000004

023fbfc4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fbfc4:	b509      	push	{r0, r3, lr}
 23fbfc6:	4804      	ldr	r0, [pc, #16]	; (23fbfd8 <__assert_func+0x14>)
 23fbfc8:	6800      	ldr	r0, [r0, #0]
 23fbfca:	4b04      	ldr	r3, [pc, #16]	; (23fbfdc <__assert_func+0x18>)
 23fbfcc:	4403      	add	r3, r0
 23fbfce:	681b      	ldr	r3, [r3, #0]
 23fbfd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbfd2:	9302      	str	r3, [sp, #8]
 23fbfd4:	bd09      	pop	{r0, r3, pc}
 23fbfd6:	0000      	.short	0x0000
 23fbfd8:	1007ad6c 	.word	0x1007ad6c
 23fbfdc:	00000004 	.word	0x00000004

023fbfe0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fbfe0:	b509      	push	{r0, r3, lr}
 23fbfe2:	4804      	ldr	r0, [pc, #16]	; (23fbff4 <newlib_impure_ptr_callback+0x14>)
 23fbfe4:	6800      	ldr	r0, [r0, #0]
 23fbfe6:	4b04      	ldr	r3, [pc, #16]	; (23fbff8 <newlib_impure_ptr_callback+0x18>)
 23fbfe8:	4403      	add	r3, r0
 23fbfea:	681b      	ldr	r3, [r3, #0]
 23fbfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbfee:	9302      	str	r3, [sp, #8]
 23fbff0:	bd09      	pop	{r0, r3, pc}
 23fbff2:	0000      	.short	0x0000
 23fbff4:	1007ad6c 	.word	0x1007ad6c
 23fbff8:	00000004 	.word	0x00000004

023fbffc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fbffc:	2200      	movs	r2, #0
 23fbffe:	6840      	ldr	r0, [r0, #4]
 23fc000:	4611      	mov	r1, r2
 23fc002:	f7ff beb9 	b.w	23fbd78 <network_listening>

023fc006 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc006:	2200      	movs	r2, #0
 23fc008:	6840      	ldr	r0, [r0, #4]
 23fc00a:	4611      	mov	r1, r2
 23fc00c:	f7ff bed0 	b.w	23fbdb0 <network_get_listen_timeout>

023fc010 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc010:	2200      	movs	r2, #0
 23fc012:	6840      	ldr	r0, [r0, #4]
 23fc014:	f7ff bebe 	b.w	23fbd94 <network_set_listen_timeout>

023fc018 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc018:	2200      	movs	r2, #0
 23fc01a:	6840      	ldr	r0, [r0, #4]
 23fc01c:	f081 0101 	eor.w	r1, r1, #1
 23fc020:	f7ff be9c 	b.w	23fbd5c <network_listen>

023fc024 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc024:	2300      	movs	r3, #0
 23fc026:	6840      	ldr	r0, [r0, #4]
 23fc028:	461a      	mov	r2, r3
 23fc02a:	4619      	mov	r1, r3
 23fc02c:	f7ff be88 	b.w	23fbd40 <network_off>

023fc030 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc030:	2300      	movs	r3, #0
 23fc032:	6840      	ldr	r0, [r0, #4]
 23fc034:	461a      	mov	r2, r3
 23fc036:	4619      	mov	r1, r3
 23fc038:	f7ff be74 	b.w	23fbd24 <network_on>

023fc03c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fc03c:	2200      	movs	r2, #0
 23fc03e:	6840      	ldr	r0, [r0, #4]
 23fc040:	4611      	mov	r1, r2
 23fc042:	f7ff be61 	b.w	23fbd08 <network_ready>

023fc046 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc046:	2200      	movs	r2, #0
 23fc048:	6840      	ldr	r0, [r0, #4]
 23fc04a:	4611      	mov	r1, r2
 23fc04c:	f7ff be40 	b.w	23fbcd0 <network_connecting>

023fc050 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc050:	2200      	movs	r2, #0
 23fc052:	2102      	movs	r1, #2
 23fc054:	6840      	ldr	r0, [r0, #4]
 23fc056:	f7ff be49 	b.w	23fbcec <network_disconnect>

023fc05a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc05a:	2300      	movs	r3, #0
 23fc05c:	6840      	ldr	r0, [r0, #4]
 23fc05e:	461a      	mov	r2, r3
 23fc060:	f7ff be28 	b.w	23fbcb4 <network_connect>

023fc064 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc064:	2203      	movs	r2, #3
 23fc066:	4b02      	ldr	r3, [pc, #8]	; (23fc070 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fc068:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fc06a:	4a02      	ldr	r2, [pc, #8]	; (23fc074 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fc06c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fc06e:	4770      	bx	lr
 23fc070:	1007ae54 	.word	0x1007ae54
 23fc074:	023ffa8c 	.word	0x023ffa8c

023fc078 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fc078:	2100      	movs	r1, #0
 23fc07a:	f7ff bd2d 	b.w	23fbad8 <hal_spi_release>

023fc07e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fc07e:	2100      	movs	r1, #0
 23fc080:	f7ff bd1c 	b.w	23fbabc <hal_spi_acquire>

023fc084 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fc084:	b510      	push	{r4, lr}
 23fc086:	4604      	mov	r4, r0
 23fc088:	4608      	mov	r0, r1
{
    _spi = spi;
 23fc08a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fc08c:	f7ff fcec 	bl	23fba68 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fc090:	2300      	movs	r3, #0
}
 23fc092:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fc094:	6063      	str	r3, [r4, #4]
}
 23fc096:	bd10      	pop	{r4, pc}

023fc098 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fc098:	b513      	push	{r0, r1, r4, lr}
 23fc09a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fc09c:	7800      	ldrb	r0, [r0, #0]
 23fc09e:	f7ff ffee 	bl	23fc07e <_ZN8SPIClass4lockEv.isra.0>
 23fc0a2:	b958      	cbnz	r0, 23fc0bc <_ZN8SPIClass5beginEv+0x24>
 23fc0a4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fc0a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fc0aa:	9001      	str	r0, [sp, #4]
 23fc0ac:	f7ff fca4 	bl	23fb9f8 <hal_spi_begin>
        unlock();
 23fc0b0:	9801      	ldr	r0, [sp, #4]
    }
}
 23fc0b2:	b002      	add	sp, #8
 23fc0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc0b8:	f7ff bfde 	b.w	23fc078 <_ZN8SPIClass6unlockEv.isra.0>
 23fc0bc:	b002      	add	sp, #8
 23fc0be:	bd10      	pop	{r4, pc}

023fc0c0 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23fc0c0:	b513      	push	{r0, r1, r4, lr}
 23fc0c2:	4604      	mov	r4, r0
    if (!lock())
 23fc0c4:	7800      	ldrb	r0, [r0, #0]
{
 23fc0c6:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fc0c8:	f7ff ffd9 	bl	23fc07e <_ZN8SPIClass4lockEv.isra.0>
 23fc0cc:	9901      	ldr	r1, [sp, #4]
 23fc0ce:	b948      	cbnz	r0, 23fc0e4 <_ZN8SPIClass11setDataModeEh+0x24>
 23fc0d0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fc0d2:	9001      	str	r0, [sp, #4]
 23fc0d4:	f7ff fc9e 	bl	23fba14 <hal_spi_set_data_mode>
        unlock();
 23fc0d8:	9801      	ldr	r0, [sp, #4]
    }
}
 23fc0da:	b002      	add	sp, #8
 23fc0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc0e0:	f7ff bfca 	b.w	23fc078 <_ZN8SPIClass6unlockEv.isra.0>
 23fc0e4:	b002      	add	sp, #8
 23fc0e6:	bd10      	pop	{r4, pc}

023fc0e8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fc0e8:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fc0ea:	2400      	movs	r4, #0
 23fc0ec:	0840      	lsrs	r0, r0, #1
 23fc0ee:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fc0f0:	6818      	ldr	r0, [r3, #0]
 23fc0f2:	b2e5      	uxtb	r5, r4
 23fc0f4:	4288      	cmp	r0, r1
 23fc0f6:	d906      	bls.n	23fc106 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fc0f8:	3401      	adds	r4, #1
 23fc0fa:	2c08      	cmp	r4, #8
 23fc0fc:	d002      	beq.n	23fc104 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fc0fe:	0840      	lsrs	r0, r0, #1
 23fc100:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fc102:	e7f5      	b.n	23fc0f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fc104:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fc106:	4b02      	ldr	r3, [pc, #8]	; (23fc110 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fc108:	5d5b      	ldrb	r3, [r3, r5]
 23fc10a:	7013      	strb	r3, [r2, #0]
}
 23fc10c:	bd30      	pop	{r4, r5, pc}
 23fc10e:	bf00      	nop
 23fc110:	023ffac0 	.word	0x023ffac0

023fc114 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fc114:	2300      	movs	r3, #0
{
 23fc116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc11a:	4604      	mov	r4, r0
 23fc11c:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fc11e:	7800      	ldrb	r0, [r0, #0]
{
 23fc120:	460e      	mov	r6, r1
 23fc122:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fc124:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fc126:	f7ff ffaa 	bl	23fc07e <_ZN8SPIClass4lockEv.isra.0>
 23fc12a:	4605      	mov	r5, r0
 23fc12c:	bb00      	cbnz	r0, 23fc170 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fc12e:	4601      	mov	r1, r0
 23fc130:	2214      	movs	r2, #20
 23fc132:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fc134:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fc138:	f002 fc3f 	bl	23fe9ba <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fc13c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fc13e:	462a      	mov	r2, r5
 23fc140:	4640      	mov	r0, r8
 23fc142:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fc144:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fc148:	f7ff fcaa 	bl	23fbaa0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fc14c:	fb07 f106 	mul.w	r1, r7, r6
 23fc150:	9804      	ldr	r0, [sp, #16]
 23fc152:	ab02      	add	r3, sp, #8
 23fc154:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fc158:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fc15c:	f7ff ffc4 	bl	23fc0e8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fc160:	7820      	ldrb	r0, [r4, #0]
 23fc162:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fc166:	f7ff fc63 	bl	23fba30 <hal_spi_set_clock_divider>
        unlock();
 23fc16a:	7820      	ldrb	r0, [r4, #0]
 23fc16c:	f7ff ff84 	bl	23fc078 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23fc170:	9802      	ldr	r0, [sp, #8]
 23fc172:	b008      	add	sp, #32
 23fc174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc178 <_ZN8SPIClass15setClockDividerEh>:
{
 23fc178:	b538      	push	{r3, r4, r5, lr}
 23fc17a:	4604      	mov	r4, r0
    if (!lock())
 23fc17c:	7800      	ldrb	r0, [r0, #0]
{
 23fc17e:	460d      	mov	r5, r1
    if (!lock())
 23fc180:	f7ff ff7d 	bl	23fc07e <_ZN8SPIClass4lockEv.isra.0>
 23fc184:	4603      	mov	r3, r0
 23fc186:	b9d0      	cbnz	r0, 23fc1be <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
 23fc188:	6861      	ldr	r1, [r4, #4]
 23fc18a:	b199      	cbz	r1, 23fc1b4 <_ZN8SPIClass15setClockDividerEh+0x3c>
 23fc18c:	4a0c      	ldr	r2, [pc, #48]	; (23fc1c0 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
 23fc18e:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fc192:	4285      	cmp	r5, r0
 23fc194:	d002      	beq.n	23fc19c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
 23fc196:	3301      	adds	r3, #1
 23fc198:	2b08      	cmp	r3, #8
 23fc19a:	d1f8      	bne.n	23fc18e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
 23fc19c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 23fc19e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 23fc1a0:	2201      	movs	r2, #1
 23fc1a2:	4620      	mov	r0, r4
 23fc1a4:	40d9      	lsrs	r1, r3
 23fc1a6:	f7ff ffb5 	bl	23fc114 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 23fc1aa:	7820      	ldrb	r0, [r4, #0]
}
 23fc1ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
 23fc1b0:	f7ff bf62 	b.w	23fc078 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
 23fc1b4:	4629      	mov	r1, r5
 23fc1b6:	7820      	ldrb	r0, [r4, #0]
 23fc1b8:	f7ff fc3a 	bl	23fba30 <hal_spi_set_clock_divider>
 23fc1bc:	e7f5      	b.n	23fc1aa <_ZN8SPIClass15setClockDividerEh+0x32>
}
 23fc1be:	bd38      	pop	{r3, r4, r5, pc}
 23fc1c0:	023ffac0 	.word	0x023ffac0

023fc1c4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 23fc1c4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fc1c6:	7800      	ldrb	r0, [r0, #0]
 23fc1c8:	f7ff fc40 	bl	23fba4c <hal_spi_transfer>
}
 23fc1cc:	b2c0      	uxtb	r0, r0
 23fc1ce:	bd08      	pop	{r3, pc}

023fc1d0 <_ZN11SystemClass13assetsHandledEb>:
    }
    return assets;
}

int SystemClass::assetsHandled(bool state) {
    return asset_manager_set_consumer_state(state ? ASSET_MANAGER_CONSUMER_STATE_HANDLED : ASSET_MANAGER_CONSUMER_STATE_WANT, nullptr);
 23fc1d0:	2800      	cmp	r0, #0
 23fc1d2:	f04f 0100 	mov.w	r1, #0
 23fc1d6:	bf14      	ite	ne
 23fc1d8:	2001      	movne	r0, #1
 23fc1da:	2002      	moveq	r0, #2
 23fc1dc:	f7ff be4a 	b.w	23fbe74 <asset_manager_set_consumer_state>

023fc1e0 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 23fc1e0:	b510      	push	{r4, lr}
 23fc1e2:	4604      	mov	r4, r0
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23fc1e4:	6800      	ldr	r0, [r0, #0]
 23fc1e6:	b108      	cbz	r0, 23fc1ec <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev+0xc>
	  delete [] __ptr;
 23fc1e8:	f7fe f949 	bl	23fa47e <_ZdaPv>
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
 23fc1ec:	4620      	mov	r0, r4
 23fc1ee:	bd10      	pop	{r4, pc}

023fc1f0 <_ZN8particle6BufferC1Ej>:
private:
    std::unique_ptr<char[]> buffer_;
    size_t size_;
};

inline Buffer::Buffer(size_t size)
 23fc1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 23fc1f2:	2700      	movs	r7, #0
 23fc1f4:	4604      	mov	r4, r0
 23fc1f6:	460d      	mov	r5, r1
        : size_(size) {
 23fc1f8:	e9c0 7100 	strd	r7, r1, [r0]
    if (size_ > 0) {
 23fc1fc:	b1c9      	cbz	r1, 23fc232 <_ZN8particle6BufferC1Ej+0x42>

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 23fc1fe:	4608      	mov	r0, r1
 23fc200:	f7fe f93b 	bl	23fa47a <_Znaj>
 23fc204:	4606      	mov	r6, r0
 23fc206:	b138      	cbz	r0, 23fc218 <_ZN8particle6BufferC1Ej+0x28>
 23fc208:	1e6b      	subs	r3, r5, #1
 23fc20a:	3301      	adds	r3, #1
 23fc20c:	bfac      	ite	ge
 23fc20e:	462a      	movge	r2, r5
 23fc210:	463a      	movlt	r2, r7
 23fc212:	4639      	mov	r1, r7
 23fc214:	f002 fbd1 	bl	23fe9ba <memset>
	_M_ptr() = nullptr;
 23fc218:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 23fc21a:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = nullptr;
 23fc21c:	9301      	str	r3, [sp, #4]
	_M_ptr() = __p;
 23fc21e:	6026      	str	r6, [r4, #0]
	if (__old_p)
 23fc220:	b108      	cbz	r0, 23fc226 <_ZN8particle6BufferC1Ej+0x36>
	  delete [] __ptr;
 23fc222:	f7fe f92c 	bl	23fa47e <_ZdaPv>
        buffer_ = std::make_unique<char[]>(size_);
 23fc226:	a801      	add	r0, sp, #4
 23fc228:	f7ff ffda 	bl	23fc1e0 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
        if (!buffer_) {
 23fc22c:	6823      	ldr	r3, [r4, #0]
 23fc22e:	b903      	cbnz	r3, 23fc232 <_ZN8particle6BufferC1Ej+0x42>
            size_ = 0;
 23fc230:	6063      	str	r3, [r4, #4]
        }
    }
}
 23fc232:	4620      	mov	r0, r4
 23fc234:	b003      	add	sp, #12
 23fc236:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc238 <_ZN8particle16ApplicationAssetC1ERKS0_>:
/**
 * Application asset.
 * 
 * Instances of this class are returned in `System.assetsAvailable()` and `System.assetsRequired()`
 */
class ApplicationAsset: public Stream {
 23fc238:	b538      	push	{r3, r4, r5, lr}
 23fc23a:	460d      	mov	r5, r1
 23fc23c:	4604      	mov	r4, r0
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 23fc23e:	684b      	ldr	r3, [r1, #4]
 23fc240:	3110      	adds	r1, #16
 23fc242:	6043      	str	r3, [r0, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 23fc244:	f851 3c08 	ldr.w	r3, [r1, #-8]
 23fc248:	6083      	str	r3, [r0, #8]
 23fc24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 23fc24e:	60c3      	str	r3, [r0, #12]
 23fc250:	4b13      	ldr	r3, [pc, #76]	; (23fc2a0 <_ZN8particle16ApplicationAssetC1ERKS0_+0x68>)
 23fc252:	f840 3b10 	str.w	r3, [r0], #16
 23fc256:	f000 f99a 	bl	23fc58e <_ZN6StringC1ERKS_>
    /**
     * Copy cosntructor.
     * 
     * @param other Asset Hash object to copy from.
     */
    AssetHash(const AssetHash& other) = default;
 23fc25a:	f895 3020 	ldrb.w	r3, [r5, #32]
inline Buffer::Buffer(const uint8_t* data, size_t size)
        : Buffer((const char*)data, size) {

}
inline Buffer::Buffer(const Buffer& other)
        : Buffer(other.size()) {
 23fc25e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fc262:	f884 3020 	strb.w	r3, [r4, #32]
 23fc266:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 23fc268:	f7ff ffc2 	bl	23fc1f0 <_ZN8particle6BufferC1Ej>
    if (size_ > 0 && other.size() > 0) {
 23fc26c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23fc26e:	b12a      	cbz	r2, 23fc27c <_ZN8particle16ApplicationAssetC1ERKS0_+0x44>
 23fc270:	6aab      	ldr	r3, [r5, #40]	; 0x28
 23fc272:	b11b      	cbz	r3, 23fc27c <_ZN8particle16ApplicationAssetC1ERKS0_+0x44>
        memcpy(buffer_.get(), other.buffer_.get(), size_);
 23fc274:	6a69      	ldr	r1, [r5, #36]	; 0x24
 23fc276:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc278:	f002 fb78 	bl	23fe96c <memcpy>
 23fc27c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 23fc27e:	62e3      	str	r3, [r4, #44]	; 0x2c
 23fc280:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 23fc282:	6323      	str	r3, [r4, #48]	; 0x30
 23fc284:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23fc288:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc28c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc28e:	63a3      	str	r3, [r4, #56]	; 0x38
      : _M_pi(__r._M_pi)
 23fc290:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23fc292:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (_M_pi != 0)
 23fc294:	b113      	cbz	r3, 23fc29c <_ZN8particle16ApplicationAssetC1ERKS0_+0x64>
    { ++_M_use_count; }
 23fc296:	685a      	ldr	r2, [r3, #4]
 23fc298:	3201      	adds	r2, #1
 23fc29a:	605a      	str	r2, [r3, #4]
 23fc29c:	4620      	mov	r0, r4
 23fc29e:	bd38      	pop	{r3, r4, r5, pc}
 23fc2a0:	023ffaf4 	.word	0x023ffaf4

023fc2a4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 23fc2a4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc2a8:	4606      	mov	r6, r0
 23fc2aa:	460c      	mov	r4, r1
 23fc2ac:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 23fc2ae:	d915      	bls.n	23fc2dc <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
 23fc2b0:	4290      	cmp	r0, r2
 23fc2b2:	d214      	bcs.n	23fc2de <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3a>
            // Move elements in reverse order
            --p;
            --end;
 23fc2b4:	f1a2 0540 	sub.w	r5, r2, #64	; 0x40
            dest += end - p - 1;
 23fc2b8:	1a6b      	subs	r3, r5, r1
 23fc2ba:	f1a1 0740 	sub.w	r7, r1, #64	; 0x40
 23fc2be:	441e      	add	r6, r3
            for (; end != p; --end, --dest) {
 23fc2c0:	42af      	cmp	r7, r5
 23fc2c2:	d01a      	beq.n	23fc2fa <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
                new(dest) T(std::move(*end));
 23fc2c4:	b11e      	cbz	r6, 23fc2ce <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fc2c6:	4629      	mov	r1, r5
 23fc2c8:	4630      	mov	r0, r6
 23fc2ca:	f7ff ffb5 	bl	23fc238 <_ZN8particle16ApplicationAssetC1ERKS0_>
                end->~T();
 23fc2ce:	682b      	ldr	r3, [r5, #0]
 23fc2d0:	4628      	mov	r0, r5
 23fc2d2:	681b      	ldr	r3, [r3, #0]
 23fc2d4:	4798      	blx	r3
            for (; end != p; --end, --dest) {
 23fc2d6:	3d40      	subs	r5, #64	; 0x40
 23fc2d8:	3e40      	subs	r6, #64	; 0x40
 23fc2da:	e7f1      	b.n	23fc2c0 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
            }
        } else if (dest != p) {
 23fc2dc:	d00d      	beq.n	23fc2fa <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
            for (; p != end; ++p, ++dest) {
 23fc2de:	42ac      	cmp	r4, r5
 23fc2e0:	d00b      	beq.n	23fc2fa <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
                new(dest) T(std::move(*p));
 23fc2e2:	b11e      	cbz	r6, 23fc2ec <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x48>
 23fc2e4:	4621      	mov	r1, r4
 23fc2e6:	4630      	mov	r0, r6
 23fc2e8:	f7ff ffa6 	bl	23fc238 <_ZN8particle16ApplicationAssetC1ERKS0_>
                p->~T();
 23fc2ec:	6823      	ldr	r3, [r4, #0]
 23fc2ee:	4620      	mov	r0, r4
 23fc2f0:	681b      	ldr	r3, [r3, #0]
 23fc2f2:	4798      	blx	r3
            for (; p != end; ++p, ++dest) {
 23fc2f4:	3440      	adds	r4, #64	; 0x40
 23fc2f6:	3640      	adds	r6, #64	; 0x40
 23fc2f8:	e7f1      	b.n	23fc2de <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3a>
            }
        }
    }
 23fc2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc2fc <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fc2fc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fc2fe:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fc300:	4605      	mov	r5, r0
        if (n > 0) {
 23fc302:	dd11      	ble.n	23fc328 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 23fc304:	01b0      	lsls	r0, r6, #6
 23fc306:	f7ff fe17 	bl	23fbf38 <malloc>
            if (!d) {
 23fc30a:	4604      	mov	r4, r0
 23fc30c:	b158      	cbz	r0, 23fc326 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fc30e:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fc312:	eb01 1282 	add.w	r2, r1, r2, lsl #6
 23fc316:	f7ff ffc5 	bl	23fc2a4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 23fc31a:	6828      	ldr	r0, [r5, #0]
 23fc31c:	f7ff fe1a 	bl	23fbf54 <free>
        return true;
 23fc320:	2001      	movs	r0, #1
        data_ = d;
 23fc322:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fc324:	60ae      	str	r6, [r5, #8]
    }
 23fc326:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fc328:	2400      	movs	r4, #0
 23fc32a:	e7f6      	b.n	23fc31a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fc32c <_ZN8particle16ApplicationAssetD1Ev>:

    /**
     * Destroy the Application Asset object.
     * 
     */
    virtual ~ApplicationAsset() = default;
 23fc32c:	b538      	push	{r3, r4, r5, lr}
 23fc32e:	4b0f      	ldr	r3, [pc, #60]	; (23fc36c <_ZN8particle16ApplicationAssetD1Ev+0x40>)
	if (_M_pi != nullptr)
 23fc330:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 23fc332:	4605      	mov	r5, r0
 23fc334:	6003      	str	r3, [r0, #0]
 23fc336:	b17c      	cbz	r4, 23fc358 <_ZN8particle16ApplicationAssetD1Ev+0x2c>
      if (--_M_use_count == 0)
 23fc338:	6863      	ldr	r3, [r4, #4]
 23fc33a:	3b01      	subs	r3, #1
 23fc33c:	6063      	str	r3, [r4, #4]
 23fc33e:	b95b      	cbnz	r3, 23fc358 <_ZN8particle16ApplicationAssetD1Ev+0x2c>
          _M_dispose();
 23fc340:	6823      	ldr	r3, [r4, #0]
 23fc342:	4620      	mov	r0, r4
 23fc344:	689b      	ldr	r3, [r3, #8]
 23fc346:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc348:	68a3      	ldr	r3, [r4, #8]
 23fc34a:	3b01      	subs	r3, #1
 23fc34c:	60a3      	str	r3, [r4, #8]
 23fc34e:	b91b      	cbnz	r3, 23fc358 <_ZN8particle16ApplicationAssetD1Ev+0x2c>
            _M_destroy();
 23fc350:	6823      	ldr	r3, [r4, #0]
 23fc352:	4620      	mov	r0, r4
 23fc354:	68db      	ldr	r3, [r3, #12]
 23fc356:	4798      	blx	r3
class Buffer {
 23fc358:	f105 0024 	add.w	r0, r5, #36	; 0x24
 23fc35c:	f7ff ff40 	bl	23fc1e0 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
 23fc360:	f105 0010 	add.w	r0, r5, #16
 23fc364:	f000 f87c 	bl	23fc460 <_ZN6StringD1Ev>
 23fc368:	4628      	mov	r0, r5
 23fc36a:	bd38      	pop	{r3, r4, r5, pc}
 23fc36c:	023ffaf4 	.word	0x023ffaf4

023fc370 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc370:	b530      	push	{r4, r5, lr}
 23fc372:	4604      	mov	r4, r0
 23fc374:	b091      	sub	sp, #68	; 0x44
    return insert(size_, std::move(value));
 23fc376:	6845      	ldr	r5, [r0, #4]
 23fc378:	4668      	mov	r0, sp
 23fc37a:	f7ff ff5d 	bl	23fc238 <_ZN8particle16ApplicationAssetC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc37e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fc382:	4299      	cmp	r1, r3
 23fc384:	da0f      	bge.n	23fc3a6 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x36>
        return false;
    }
    T* const p = data_ + i;
 23fc386:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc388:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc38a:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    move(p + 1, p, data_ + size_);
 23fc38e:	4629      	mov	r1, r5
 23fc390:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 23fc394:	f105 0040 	add.w	r0, r5, #64	; 0x40
 23fc398:	f7ff ff84 	bl	23fc2a4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fc39c:	b975      	cbnz	r5, 23fc3bc <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x4c>
    ++size_;
 23fc39e:	6863      	ldr	r3, [r4, #4]
 23fc3a0:	3301      	adds	r3, #1
 23fc3a2:	6063      	str	r3, [r4, #4]
    return true;
 23fc3a4:	e005      	b.n	23fc3b2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x42>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc3a6:	4620      	mov	r0, r4
 23fc3a8:	3101      	adds	r1, #1
 23fc3aa:	f7ff ffa7 	bl	23fc2fc <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fc3ae:	2800      	cmp	r0, #0
 23fc3b0:	d1e9      	bne.n	23fc386 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x16>
    return insert(size_, std::move(value));
 23fc3b2:	4668      	mov	r0, sp
 23fc3b4:	f7ff ffba 	bl	23fc32c <_ZN8particle16ApplicationAssetD1Ev>
}
 23fc3b8:	b011      	add	sp, #68	; 0x44
 23fc3ba:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
 23fc3bc:	4669      	mov	r1, sp
 23fc3be:	4628      	mov	r0, r5
 23fc3c0:	f7ff ff3a 	bl	23fc238 <_ZN8particle16ApplicationAssetC1ERKS0_>
 23fc3c4:	e7eb      	b.n	23fc39e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x2e>

023fc3c6 <_ZN11SystemClass15assetsAvailableEv>:
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fc3c6:	b570      	push	{r4, r5, r6, lr}
        capacity_(0) {
 23fc3c8:	2400      	movs	r4, #0
    asset_manager_info info = {};
 23fc3ca:	261c      	movs	r6, #28
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fc3cc:	b098      	sub	sp, #96	; 0x60
    asset_manager_info info = {};
 23fc3ce:	4621      	mov	r1, r4
 23fc3d0:	e9c0 4400 	strd	r4, r4, [r0]
 23fc3d4:	6084      	str	r4, [r0, #8]
 23fc3d6:	4632      	mov	r2, r6
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fc3d8:	4605      	mov	r5, r0
    asset_manager_info info = {};
 23fc3da:	a801      	add	r0, sp, #4
 23fc3dc:	f002 faed 	bl	23fe9ba <memset>
    int r = asset_manager_get_info(&info, nullptr);
 23fc3e0:	4621      	mov	r1, r4
 23fc3e2:	a801      	add	r0, sp, #4
    info.size = sizeof(info);
 23fc3e4:	f8ad 6004 	strh.w	r6, [sp, #4]
    int r = asset_manager_get_info(&info, nullptr);
 23fc3e8:	f7ff fd28 	bl	23fbe3c <asset_manager_get_info>
    if (r) {
 23fc3ec:	4604      	mov	r4, r0
 23fc3ee:	b9c0      	cbnz	r0, 23fc422 <_ZN11SystemClass15assetsAvailableEv+0x5c>
    for (size_t i = 0; i < info.available_count; i++) {
 23fc3f0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 23fc3f4:	42a3      	cmp	r3, r4
 23fc3f6:	d910      	bls.n	23fc41a <_ZN11SystemClass15assetsAvailableEv+0x54>
        assets.append(ApplicationAsset(a));
 23fc3f8:	9b06      	ldr	r3, [sp, #24]
        asset_manager_asset* a = (asset_manager_asset*)(((uint8_t*)info.available) + info.asset_size * i);
 23fc3fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        assets.append(ApplicationAsset(a));
 23fc3fe:	a808      	add	r0, sp, #32
 23fc400:	fb04 3101 	mla	r1, r4, r1, r3
 23fc404:	f000 f9e4 	bl	23fc7d0 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset>
 23fc408:	4628      	mov	r0, r5
 23fc40a:	a908      	add	r1, sp, #32
 23fc40c:	f7ff ffb0 	bl	23fc370 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0>
 23fc410:	a808      	add	r0, sp, #32
 23fc412:	f7ff ff8b 	bl	23fc32c <_ZN8particle16ApplicationAssetD1Ev>
    for (size_t i = 0; i < info.available_count; i++) {
 23fc416:	3401      	adds	r4, #1
 23fc418:	e7ea      	b.n	23fc3f0 <_ZN11SystemClass15assetsAvailableEv+0x2a>
    SCOPE_GUARD({
 23fc41a:	2100      	movs	r1, #0
 23fc41c:	a801      	add	r0, sp, #4
 23fc41e:	f7ff fd1b 	bl	23fbe58 <asset_manager_free_info>
}
 23fc422:	4628      	mov	r0, r5
 23fc424:	b018      	add	sp, #96	; 0x60
 23fc426:	bd70      	pop	{r4, r5, r6, pc}

023fc428 <_ZN8particle16ApplicationAssetD0Ev>:
 23fc428:	b510      	push	{r4, lr}
 23fc42a:	4604      	mov	r4, r0
 23fc42c:	f7ff ff7e 	bl	23fc32c <_ZN8particle16ApplicationAssetD1Ev>
 23fc430:	4620      	mov	r0, r4
 23fc432:	2140      	movs	r1, #64	; 0x40
 23fc434:	f7fe f825 	bl	23fa482 <_ZdlPvj>
 23fc438:	4620      	mov	r0, r4
 23fc43a:	bd10      	pop	{r4, pc}

023fc43c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fc43c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fc43e:	2000      	movs	r0, #0
 23fc440:	4b04      	ldr	r3, [pc, #16]	; (23fc454 <_GLOBAL__sub_I_System+0x18>)
 23fc442:	601a      	str	r2, [r3, #0]
 23fc444:	4b04      	ldr	r3, [pc, #16]	; (23fc458 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fc446:	4a05      	ldr	r2, [pc, #20]	; (23fc45c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fc448:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fc44c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fc44e:	f7ff bbf9 	b.w	23fbc44 <set_system_mode>
 23fc452:	bf00      	nop
 23fc454:	1007ae68 	.word	0x1007ae68
 23fc458:	1007ae5c 	.word	0x1007ae5c
 23fc45c:	ffff0000 	.word	0xffff0000

023fc460 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fc460:	b510      	push	{r4, lr}
 23fc462:	4604      	mov	r4, r0
{
	free(buffer);
 23fc464:	6800      	ldr	r0, [r0, #0]
 23fc466:	f7ff fd75 	bl	23fbf54 <free>
}
 23fc46a:	4620      	mov	r0, r4
 23fc46c:	bd10      	pop	{r4, pc}

023fc46e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fc46e:	b510      	push	{r4, lr}
 23fc470:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fc472:	6800      	ldr	r0, [r0, #0]
 23fc474:	b108      	cbz	r0, 23fc47a <_ZN6String10invalidateEv+0xc>
 23fc476:	f7ff fd6d 	bl	23fbf54 <free>
	buffer = NULL;
 23fc47a:	2300      	movs	r3, #0
	capacity = len = 0;
 23fc47c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fc480:	6023      	str	r3, [r4, #0]
}
 23fc482:	bd10      	pop	{r4, pc}

023fc484 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fc484:	b538      	push	{r3, r4, r5, lr}
 23fc486:	4604      	mov	r4, r0
 23fc488:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fc48a:	6800      	ldr	r0, [r0, #0]
 23fc48c:	3101      	adds	r1, #1
 23fc48e:	f7ff fd6f 	bl	23fbf70 <realloc>
	if (newbuffer) {
 23fc492:	b110      	cbz	r0, 23fc49a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fc494:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fc498:	2001      	movs	r0, #1
	}
	return 0;
}
 23fc49a:	bd38      	pop	{r3, r4, r5, pc}

023fc49c <_ZN6String7reserveEj>:
{
 23fc49c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fc49e:	6803      	ldr	r3, [r0, #0]
{
 23fc4a0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fc4a2:	b123      	cbz	r3, 23fc4ae <_ZN6String7reserveEj+0x12>
 23fc4a4:	6843      	ldr	r3, [r0, #4]
 23fc4a6:	428b      	cmp	r3, r1
 23fc4a8:	d301      	bcc.n	23fc4ae <_ZN6String7reserveEj+0x12>
 23fc4aa:	2001      	movs	r0, #1
}
 23fc4ac:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fc4ae:	4620      	mov	r0, r4
 23fc4b0:	f7ff ffe8 	bl	23fc484 <_ZN6String12changeBufferEj>
 23fc4b4:	2800      	cmp	r0, #0
 23fc4b6:	d0f9      	beq.n	23fc4ac <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fc4b8:	68a3      	ldr	r3, [r4, #8]
 23fc4ba:	2b00      	cmp	r3, #0
 23fc4bc:	d1f5      	bne.n	23fc4aa <_ZN6String7reserveEj+0xe>
 23fc4be:	6822      	ldr	r2, [r4, #0]
 23fc4c0:	7013      	strb	r3, [r2, #0]
 23fc4c2:	e7f2      	b.n	23fc4aa <_ZN6String7reserveEj+0xe>

023fc4c4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fc4c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc4c6:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fc4c8:	4611      	mov	r1, r2
 23fc4ca:	9201      	str	r2, [sp, #4]
{
 23fc4cc:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fc4ce:	f7ff ffe5 	bl	23fc49c <_ZN6String7reserveEj>
 23fc4d2:	9a01      	ldr	r2, [sp, #4]
 23fc4d4:	b928      	cbnz	r0, 23fc4e2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fc4d6:	4620      	mov	r0, r4
 23fc4d8:	f7ff ffc9 	bl	23fc46e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fc4dc:	4620      	mov	r0, r4
 23fc4de:	b003      	add	sp, #12
 23fc4e0:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fc4e2:	4629      	mov	r1, r5
	len = length;
 23fc4e4:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fc4e6:	6820      	ldr	r0, [r4, #0]
 23fc4e8:	f002 fa40 	bl	23fe96c <memcpy>
	buffer[len] = 0;
 23fc4ec:	2100      	movs	r1, #0
 23fc4ee:	6822      	ldr	r2, [r4, #0]
 23fc4f0:	68a3      	ldr	r3, [r4, #8]
 23fc4f2:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fc4f4:	e7f2      	b.n	23fc4dc <_ZN6String4copyEPKcj+0x18>

023fc4f6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fc4f6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fc4f8:	b513      	push	{r0, r1, r4, lr}
 23fc4fa:	4604      	mov	r4, r0
	capacity = 0;
 23fc4fc:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fc500:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fc502:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fc504:	b141      	cbz	r1, 23fc518 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fc506:	4608      	mov	r0, r1
 23fc508:	9101      	str	r1, [sp, #4]
 23fc50a:	f7fd ff8f 	bl	23fa42c <strlen>
 23fc50e:	9901      	ldr	r1, [sp, #4]
 23fc510:	4602      	mov	r2, r0
 23fc512:	4620      	mov	r0, r4
 23fc514:	f7ff ffd6 	bl	23fc4c4 <_ZN6String4copyEPKcj>
}
 23fc518:	4620      	mov	r0, r4
 23fc51a:	b002      	add	sp, #8
 23fc51c:	bd10      	pop	{r4, pc}

023fc51e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fc51e:	b538      	push	{r3, r4, r5, lr}
 23fc520:	4605      	mov	r5, r0
	if (buffer) {
 23fc522:	6800      	ldr	r0, [r0, #0]
{
 23fc524:	460c      	mov	r4, r1
	if (buffer) {
 23fc526:	b170      	cbz	r0, 23fc546 <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fc528:	686a      	ldr	r2, [r5, #4]
 23fc52a:	688b      	ldr	r3, [r1, #8]
 23fc52c:	429a      	cmp	r2, r3
 23fc52e:	d308      	bcc.n	23fc542 <_ZN6String4moveERS_+0x24>
 23fc530:	6809      	ldr	r1, [r1, #0]
 23fc532:	b131      	cbz	r1, 23fc542 <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fc534:	f002 fa8f 	bl	23fea56 <strcpy>
			len = rhs.len;
 23fc538:	68a3      	ldr	r3, [r4, #8]
 23fc53a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fc53c:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fc53e:	60a3      	str	r3, [r4, #8]
}
 23fc540:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fc542:	f7ff fd07 	bl	23fbf54 <free>
	buffer = rhs.buffer;
 23fc546:	6823      	ldr	r3, [r4, #0]
 23fc548:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fc54a:	6863      	ldr	r3, [r4, #4]
 23fc54c:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fc54e:	68a3      	ldr	r3, [r4, #8]
 23fc550:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fc552:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fc554:	e9c4 3300 	strd	r3, r3, [r4]
 23fc558:	e7f1      	b.n	23fc53e <_ZN6String4moveERS_+0x20>

023fc55a <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fc55a:	2300      	movs	r3, #0
String::String(String &&rval)
 23fc55c:	b510      	push	{r4, lr}
 23fc55e:	4604      	mov	r4, r0
	capacity = 0;
 23fc560:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fc564:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fc566:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fc568:	f7ff ffd9 	bl	23fc51e <_ZN6String4moveERS_>
}
 23fc56c:	4620      	mov	r0, r4
 23fc56e:	bd10      	pop	{r4, pc}

023fc570 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fc570:	4288      	cmp	r0, r1
{
 23fc572:	b510      	push	{r4, lr}
 23fc574:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fc576:	d005      	beq.n	23fc584 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fc578:	680b      	ldr	r3, [r1, #0]
 23fc57a:	b12b      	cbz	r3, 23fc588 <_ZN6StringaSERKS_+0x18>
 23fc57c:	688a      	ldr	r2, [r1, #8]
 23fc57e:	4619      	mov	r1, r3
 23fc580:	f7ff ffa0 	bl	23fc4c4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fc584:	4620      	mov	r0, r4
 23fc586:	bd10      	pop	{r4, pc}
	else invalidate();
 23fc588:	f7ff ff71 	bl	23fc46e <_ZN6String10invalidateEv>
 23fc58c:	e7fa      	b.n	23fc584 <_ZN6StringaSERKS_+0x14>

023fc58e <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fc58e:	2300      	movs	r3, #0
String::String(const String &value)
 23fc590:	b510      	push	{r4, lr}
 23fc592:	4604      	mov	r4, r0
	capacity = 0;
 23fc594:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fc598:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fc59a:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fc59c:	f7ff ffe8 	bl	23fc570 <_ZN6StringaSERKS_>
}
 23fc5a0:	4620      	mov	r0, r4
 23fc5a2:	bd10      	pop	{r4, pc}

023fc5a4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 23fc5a4:	4288      	cmp	r0, r1
{
 23fc5a6:	b510      	push	{r4, lr}
 23fc5a8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 23fc5aa:	d001      	beq.n	23fc5b0 <_ZN6StringaSEOS_+0xc>
 23fc5ac:	f7ff ffb7 	bl	23fc51e <_ZN6String4moveERS_>
	return *this;
}
 23fc5b0:	4620      	mov	r0, r4
 23fc5b2:	bd10      	pop	{r4, pc}

023fc5b4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 23fc5b4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23fc5b6:	6882      	ldr	r2, [r0, #8]
 23fc5b8:	b93a      	cbnz	r2, 23fc5ca <_ZNK6String6equalsEPKc+0x16>
 23fc5ba:	b121      	cbz	r1, 23fc5c6 <_ZNK6String6equalsEPKc+0x12>
 23fc5bc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 23fc5be:	fab0 f080 	clz	r0, r0
 23fc5c2:	0940      	lsrs	r0, r0, #5
 23fc5c4:	e000      	b.n	23fc5c8 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23fc5c6:	2001      	movs	r0, #1
}
 23fc5c8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 23fc5ca:	6800      	ldr	r0, [r0, #0]
 23fc5cc:	b909      	cbnz	r1, 23fc5d2 <_ZNK6String6equalsEPKc+0x1e>
 23fc5ce:	7800      	ldrb	r0, [r0, #0]
 23fc5d0:	e7f5      	b.n	23fc5be <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 23fc5d2:	f7fd ff21 	bl	23fa418 <strcmp>
 23fc5d6:	e7f2      	b.n	23fc5be <_ZNK6String6equalsEPKc+0xa>

023fc5d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fc5d8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fc5da:	6843      	ldr	r3, [r0, #4]
    {
 23fc5dc:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fc5de:	3b01      	subs	r3, #1
 23fc5e0:	6043      	str	r3, [r0, #4]
 23fc5e2:	b963      	cbnz	r3, 23fc5fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fc5e4:	6803      	ldr	r3, [r0, #0]
 23fc5e6:	689b      	ldr	r3, [r3, #8]
 23fc5e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fc5ea:	68a3      	ldr	r3, [r4, #8]
 23fc5ec:	3b01      	subs	r3, #1
 23fc5ee:	60a3      	str	r3, [r4, #8]
 23fc5f0:	b92b      	cbnz	r3, 23fc5fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fc5f2:	6823      	ldr	r3, [r4, #0]
 23fc5f4:	4620      	mov	r0, r4
    }
 23fc5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fc5fa:	68db      	ldr	r3, [r3, #12]
 23fc5fc:	4718      	bx	r3
    }
 23fc5fe:	bd10      	pop	{r4, pc}

023fc600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc600:	b570      	push	{r4, r5, r6, lr}
 23fc602:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc604:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fc608:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fc60c:	42ae      	cmp	r6, r5
 23fc60e:	d004      	beq.n	23fc61a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fc610:	4628      	mov	r0, r5
 23fc612:	f7ff ff25 	bl	23fc460 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fc616:	3510      	adds	r5, #16
 23fc618:	e7f8      	b.n	23fc60c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fc61a:	6820      	ldr	r0, [r4, #0]
 23fc61c:	f7ff fc9a 	bl	23fbf54 <free>
}
 23fc620:	4620      	mov	r0, r4
 23fc622:	bd70      	pop	{r4, r5, r6, pc}

023fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fc624:	b510      	push	{r4, lr}
 23fc626:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
 23fc628:	6800      	ldr	r0, [r0, #0]
 23fc62a:	b108      	cbz	r0, 23fc630 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
 23fc62c:	f7ff ffd4 	bl	23fc5d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
 23fc630:	4620      	mov	r0, r4
 23fc632:	bd10      	pop	{r4, pc}

023fc634 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fc634:	2300      	movs	r3, #0
 23fc636:	4802      	ldr	r0, [pc, #8]	; (23fc640 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fc638:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fc63a:	f7ff b8a9 	b.w	23fb790 <os_mutex_recursive_create>
 23fc63e:	bf00      	nop
 23fc640:	1007ae6c 	.word	0x1007ae6c

023fc644 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fc644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc646:	4606      	mov	r6, r0
 23fc648:	460d      	mov	r5, r1
  size_t n = 0;
 23fc64a:	2400      	movs	r4, #0
 23fc64c:	188f      	adds	r7, r1, r2
  while (size--) {
 23fc64e:	42bd      	cmp	r5, r7
 23fc650:	d00c      	beq.n	23fc66c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fc652:	6833      	ldr	r3, [r6, #0]
 23fc654:	4630      	mov	r0, r6
 23fc656:	689b      	ldr	r3, [r3, #8]
 23fc658:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fc65c:	4798      	blx	r3
     if (chunk>=0)
 23fc65e:	1e03      	subs	r3, r0, #0
 23fc660:	db01      	blt.n	23fc666 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fc662:	441c      	add	r4, r3
  while (size--) {
 23fc664:	e7f3      	b.n	23fc64e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fc666:	2c00      	cmp	r4, #0
 23fc668:	bf08      	it	eq
 23fc66a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fc66c:	4620      	mov	r0, r4
 23fc66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc670 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fc670:	6803      	ldr	r3, [r0, #0]
 23fc672:	689b      	ldr	r3, [r3, #8]
 23fc674:	4718      	bx	r3

023fc676 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fc676:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fc678:	2a01      	cmp	r2, #1
 23fc67a:	bf98      	it	ls
 23fc67c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fc67e:	b530      	push	{r4, r5, lr}
 23fc680:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fc682:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fc686:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fc688:	460d      	mov	r5, r1
 23fc68a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fc68e:	fb01 5312 	mls	r3, r1, r2, r5
 23fc692:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fc696:	2b09      	cmp	r3, #9
 23fc698:	bf94      	ite	ls
 23fc69a:	3330      	addls	r3, #48	; 0x30
 23fc69c:	3337      	addhi	r3, #55	; 0x37
 23fc69e:	b2db      	uxtb	r3, r3
  } while(n);
 23fc6a0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fc6a2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fc6a6:	d9ef      	bls.n	23fc688 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fc6a8:	4621      	mov	r1, r4
 23fc6aa:	f7fe f881 	bl	23fa7b0 <_ZN5Print5writeEPKc>
}
 23fc6ae:	b00b      	add	sp, #44	; 0x2c
 23fc6b0:	bd30      	pop	{r4, r5, pc}

023fc6b2 <_ZN8particle16ApplicationAsset4readEv>:
        return r;
    }
    return 0;
}

int ApplicationAsset::read() {
 23fc6b2:	b507      	push	{r0, r1, r2, lr}
    char c;
    int r = read(&c, sizeof(c));
 23fc6b4:	6803      	ldr	r3, [r0, #0]
 23fc6b6:	2201      	movs	r2, #1
 23fc6b8:	6a1b      	ldr	r3, [r3, #32]
 23fc6ba:	f10d 0107 	add.w	r1, sp, #7
 23fc6be:	4798      	blx	r3
    if (r == 1) {
 23fc6c0:	2801      	cmp	r0, #1
        return c;
 23fc6c2:	bf08      	it	eq
 23fc6c4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
    return r;
}
 23fc6c8:	b003      	add	sp, #12
 23fc6ca:	f85d fb04 	ldr.w	pc, [sp], #4

023fc6ce <_ZN8particle16ApplicationAsset4peekEv>:
        size -= actuallyRead;
    }
    return pos;
}

int ApplicationAsset::peek() {
 23fc6ce:	b507      	push	{r0, r1, r2, lr}
    char c;
    int r = peek(&c, sizeof(c));
 23fc6d0:	6803      	ldr	r3, [r0, #0]
 23fc6d2:	2201      	movs	r2, #1
 23fc6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc6d6:	f10d 0107 	add.w	r1, sp, #7
 23fc6da:	4798      	blx	r3
    if (r == 1) {
 23fc6dc:	2801      	cmp	r0, #1
        return c;
 23fc6de:	bf08      	it	eq
 23fc6e0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
    return r;
}
 23fc6e4:	b003      	add	sp, #12
 23fc6e6:	f85d fb04 	ldr.w	pc, [sp], #4

023fc6ea <_ZN8particle16ApplicationAsset5flushEv>:
    return asset_manager_skip(data_->stream, size, nullptr);
}

void ApplicationAsset::flush() {
    return;
}
 23fc6ea:	4770      	bx	lr

023fc6ec <_ZN8particle16ApplicationAsset5writeEh>:
    data_.reset();
}

size_t ApplicationAsset::write(uint8_t c) {
    return 0;
}
 23fc6ec:	2000      	movs	r0, #0
 23fc6ee:	4770      	bx	lr

023fc6f0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fc6f0:	4770      	bx	lr
	...

023fc6f4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fc6f4:	4b06      	ldr	r3, [pc, #24]	; (23fc710 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fc6f6:	b510      	push	{r4, lr}
	    ||
 23fc6f8:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fc6fa:	f100 040c 	add.w	r4, r0, #12
 23fc6fe:	d005      	beq.n	23fc70c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fc700:	4608      	mov	r0, r1
 23fc702:	f002 f813 	bl	23fe72c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fc706:	2800      	cmp	r0, #0
 23fc708:	bf08      	it	eq
 23fc70a:	2400      	moveq	r4, #0
      }
 23fc70c:	4620      	mov	r0, r4
 23fc70e:	bd10      	pop	{r4, pc}
 23fc710:	023ffac8 	.word	0x023ffac8

023fc714 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fc714:	b510      	push	{r4, lr}
 23fc716:	4604      	mov	r4, r0
 23fc718:	2110      	movs	r1, #16
 23fc71a:	f7fd feb2 	bl	23fa482 <_ZdlPvj>
 23fc71e:	4620      	mov	r0, r4
 23fc720:	bd10      	pop	{r4, pc}

023fc722 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 23fc722:	2110      	movs	r1, #16
 23fc724:	f7fd bead 	b.w	23fa482 <_ZdlPvj>

023fc728 <_ZNK8particle16ApplicationAsset4nameEv>:
String ApplicationAsset::name() const {
 23fc728:	b510      	push	{r4, lr}
 23fc72a:	4604      	mov	r4, r0
    return name_;
 23fc72c:	3110      	adds	r1, #16
 23fc72e:	f7ff ff2e 	bl	23fc58e <_ZN6StringC1ERKS_>
}
 23fc732:	4620      	mov	r0, r4
 23fc734:	bd10      	pop	{r4, pc}

023fc736 <_ZNK8particle16ApplicationAsset4sizeEv>:
}
 23fc736:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23fc738:	4770      	bx	lr

023fc73a <_ZNK8particle16ApplicationAsset7isValidEv>:
    return name_.length() > 0 && hash_.isValid();
 23fc73a:	6983      	ldr	r3, [r0, #24]
 23fc73c:	b143      	cbz	r3, 23fc750 <_ZNK8particle16ApplicationAsset7isValidEv+0x16>
inline const Buffer& AssetHash::hash() const {
    return hash_;
}

inline bool AssetHash::isValid() const {
    return type_ != Type::INVALID && hash_.size() > 0;
 23fc73e:	f990 3020 	ldrsb.w	r3, [r0, #32]
 23fc742:	3301      	adds	r3, #1
 23fc744:	d004      	beq.n	23fc750 <_ZNK8particle16ApplicationAsset7isValidEv+0x16>
 23fc746:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23fc748:	3800      	subs	r0, #0
 23fc74a:	bf18      	it	ne
 23fc74c:	2001      	movne	r0, #1
 23fc74e:	4770      	bx	lr
 23fc750:	2000      	movs	r0, #0
}
 23fc752:	4770      	bx	lr

023fc754 <_ZN8particle16ApplicationAsset4DataD1Ev>:

ApplicationAsset::Data::Data(asset_manager_stream* s)
        : stream(s) {
}

ApplicationAsset::Data::~Data() {
 23fc754:	b510      	push	{r4, lr}
 23fc756:	4604      	mov	r4, r0
    if (stream) {
 23fc758:	6800      	ldr	r0, [r0, #0]
 23fc75a:	b110      	cbz	r0, 23fc762 <_ZN8particle16ApplicationAsset4DataD1Ev+0xe>
        asset_manager_close(stream, nullptr);
 23fc75c:	2100      	movs	r1, #0
 23fc75e:	f7ff fbdd 	bl	23fbf1c <asset_manager_close>
        stream = nullptr;
    }
}
 23fc762:	4620      	mov	r0, r4
 23fc764:	bd10      	pop	{r4, pc}

023fc766 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fc766:	300c      	adds	r0, #12
 23fc768:	f7ff bff4 	b.w	23fc754 <_ZN8particle16ApplicationAsset4DataD1Ev>

023fc76c <_ZN8particle6BufferC1ERKS0_>:
inline Buffer::Buffer(const Buffer& other)
 23fc76c:	b538      	push	{r3, r4, r5, lr}
 23fc76e:	4604      	mov	r4, r0
 23fc770:	460d      	mov	r5, r1
        : Buffer(other.size()) {
 23fc772:	6849      	ldr	r1, [r1, #4]
 23fc774:	f7ff fd3c 	bl	23fc1f0 <_ZN8particle6BufferC1Ej>
    if (size_ > 0 && other.size() > 0) {
 23fc778:	6862      	ldr	r2, [r4, #4]
 23fc77a:	b12a      	cbz	r2, 23fc788 <_ZN8particle6BufferC1ERKS0_+0x1c>
 23fc77c:	686b      	ldr	r3, [r5, #4]
 23fc77e:	b11b      	cbz	r3, 23fc788 <_ZN8particle6BufferC1ERKS0_+0x1c>
        memcpy(buffer_.get(), other.buffer_.get(), size_);
 23fc780:	6829      	ldr	r1, [r5, #0]
 23fc782:	6820      	ldr	r0, [r4, #0]
 23fc784:	f002 f8f2 	bl	23fe96c <memcpy>
    }
}
 23fc788:	4620      	mov	r0, r4
 23fc78a:	bd38      	pop	{r3, r4, r5, pc}

023fc78c <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE>:
        : type_(Type::INVALID) {
 23fc78c:	23ff      	movs	r3, #255	; 0xff
inline AssetHash::AssetHash(const Buffer& hash, Type type)
 23fc78e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc790:	4615      	mov	r5, r2
 23fc792:	4604      	mov	r4, r0
 23fc794:	460e      	mov	r6, r1
        : type_(Type::INVALID) {
 23fc796:	f800 3b04 	strb.w	r3, [r0], #4
 23fc79a:	2100      	movs	r1, #0
 23fc79c:	f7ff fd28 	bl	23fc1f0 <_ZN8particle6BufferC1Ej>
    if (type == Type::SHA256 && hash.size() == SHA256_HASH_SIZE) {
 23fc7a0:	b995      	cbnz	r5, 23fc7c8 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE+0x3c>
 23fc7a2:	6873      	ldr	r3, [r6, #4]
 23fc7a4:	2b20      	cmp	r3, #32
 23fc7a6:	d10f      	bne.n	23fc7c8 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE+0x3c>
        hash_ = hash;
 23fc7a8:	4631      	mov	r1, r6
 23fc7aa:	4668      	mov	r0, sp
 23fc7ac:	f7ff ffde 	bl	23fc76c <_ZN8particle6BufferC1ERKS0_>
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fc7b0:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc7b2:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc7b4:	6062      	str	r2, [r4, #4]
 23fc7b6:	9a01      	ldr	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc7b8:	9300      	str	r3, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc7ba:	68a3      	ldr	r3, [r4, #8]
class Buffer {
 23fc7bc:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23fc7be:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc7c0:	9301      	str	r3, [sp, #4]
 23fc7c2:	f7ff fd0d 	bl	23fc1e0 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
        type_ = type;
 23fc7c6:	7025      	strb	r5, [r4, #0]
}
 23fc7c8:	4620      	mov	r0, r4
 23fc7ca:	b002      	add	sp, #8
 23fc7cc:	bd70      	pop	{r4, r5, r6, pc}
	...

023fc7d0 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset>:
ApplicationAsset::ApplicationAsset(const asset_manager_asset* asset)
 23fc7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fc7d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc7d6:	2600      	movs	r6, #0
    ApplicationAsset() = default;
 23fc7d8:	4607      	mov	r7, r0
 23fc7da:	e9c0 6301 	strd	r6, r3, [r0, #4]
 23fc7de:	4b31      	ldr	r3, [pc, #196]	; (23fc8a4 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xd4>)
 23fc7e0:	4604      	mov	r4, r0
 23fc7e2:	f847 3b10 	str.w	r3, [r7], #16
 23fc7e6:	b089      	sub	sp, #36	; 0x24
 23fc7e8:	460d      	mov	r5, r1
 23fc7ea:	4638      	mov	r0, r7
 23fc7ec:	492e      	ldr	r1, [pc, #184]	; (23fc8a8 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xd8>)
 23fc7ee:	f7ff fe82 	bl	23fc4f6 <_ZN6StringC1EPK19__FlashStringHelper>
        : type_(Type::INVALID) {
 23fc7f2:	23ff      	movs	r3, #255	; 0xff
 23fc7f4:	4631      	mov	r1, r6
 23fc7f6:	f884 3020 	strb.w	r3, [r4, #32]
 23fc7fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fc7fe:	f7ff fcf7 	bl	23fc1f0 <_ZN8particle6BufferC1Ej>
 23fc802:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc806:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
 23fc80a:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    if (!asset) {
 23fc80e:	2d00      	cmp	r5, #0
 23fc810:	d045      	beq.n	23fc89e <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xce>
    if (asset->name) {
 23fc812:	6829      	ldr	r1, [r5, #0]
 23fc814:	b149      	cbz	r1, 23fc82a <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0x5a>
        name_ = String(asset->name);
 23fc816:	a804      	add	r0, sp, #16
 23fc818:	f7ff fe6d 	bl	23fc4f6 <_ZN6StringC1EPK19__FlashStringHelper>
 23fc81c:	4638      	mov	r0, r7
 23fc81e:	a904      	add	r1, sp, #16
 23fc820:	f7ff fec0 	bl	23fc5a4 <_ZN6StringaSEOS_>
 23fc824:	a804      	add	r0, sp, #16
 23fc826:	f7ff fe1b 	bl	23fc460 <_ZN6StringD1Ev>
    if (asset->hash && asset->hash_length) {
 23fc82a:	686e      	ldr	r6, [r5, #4]
 23fc82c:	2e00      	cmp	r6, #0
 23fc82e:	d031      	beq.n	23fc894 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xc4>
 23fc830:	892a      	ldrh	r2, [r5, #8]
 23fc832:	2a00      	cmp	r2, #0
 23fc834:	d02e      	beq.n	23fc894 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xc4>
        : Buffer(size) {
 23fc836:	4611      	mov	r1, r2
 23fc838:	a802      	add	r0, sp, #8
        hash_ = AssetHash(asset->hash, asset->hash_length, (AssetHash::Type)asset->hash_type);
 23fc83a:	f995 700a 	ldrsb.w	r7, [r5, #10]
 23fc83e:	9201      	str	r2, [sp, #4]
 23fc840:	f7ff fcd6 	bl	23fc1f0 <_ZN8particle6BufferC1Ej>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fc844:	9802      	ldr	r0, [sp, #8]
    if (buffer_ && data && size > 0) {
 23fc846:	b118      	cbz	r0, 23fc850 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0x80>
        memcpy(buffer_.get(), data, size);
 23fc848:	4631      	mov	r1, r6
 23fc84a:	9a01      	ldr	r2, [sp, #4]
 23fc84c:	f002 f88e 	bl	23fe96c <memcpy>
        : AssetHash(Buffer(hash, length), type) {
 23fc850:	463a      	mov	r2, r7
 23fc852:	a902      	add	r1, sp, #8
 23fc854:	a804      	add	r0, sp, #16
 23fc856:	f7ff ff99 	bl	23fc78c <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE>
class Buffer {
 23fc85a:	a802      	add	r0, sp, #8
 23fc85c:	f7ff fcc0 	bl	23fc1e0 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
    AssetHash& operator=(AssetHash&& other) = default;
 23fc860:	f89d 3010 	ldrb.w	r3, [sp, #16]

inline Buffer::Buffer(Buffer&& other)
        : Buffer() {
 23fc864:	2100      	movs	r1, #0
 23fc866:	f884 3020 	strb.w	r3, [r4, #32]
 23fc86a:	a802      	add	r0, sp, #8
 23fc86c:	f7ff fcc0 	bl	23fc1f0 <_ZN8particle6BufferC1Ej>
 23fc870:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc872:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc874:	9305      	str	r3, [sp, #20]
 23fc876:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc878:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc87a:	9306      	str	r3, [sp, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc87c:	6a63      	ldr	r3, [r4, #36]	; 0x24
class Buffer {
 23fc87e:	a802      	add	r0, sp, #8
      __b = _GLIBCXX_MOVE(__tmp);
 23fc880:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc882:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 23fc884:	6261      	str	r1, [r4, #36]	; 0x24
 23fc886:	62a2      	str	r2, [r4, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fc888:	9303      	str	r3, [sp, #12]
 23fc88a:	f7ff fca9 	bl	23fc1e0 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
 23fc88e:	a805      	add	r0, sp, #20
 23fc890:	f7ff fca6 	bl	23fc1e0 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
    if (asset->size) {
 23fc894:	68eb      	ldr	r3, [r5, #12]
 23fc896:	b103      	cbz	r3, 23fc89a <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xca>
        size_ = asset->size;
 23fc898:	62e3      	str	r3, [r4, #44]	; 0x2c
    storageSize_ = asset->storage_size;
 23fc89a:	692b      	ldr	r3, [r5, #16]
 23fc89c:	6323      	str	r3, [r4, #48]	; 0x30
}
 23fc89e:	4620      	mov	r0, r4
 23fc8a0:	b009      	add	sp, #36	; 0x24
 23fc8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc8a4:	023ffaf4 	.word	0x023ffaf4
 23fc8a8:	023ffb7d 	.word	0x023ffb7d

023fc8ac <_ZN8particle16ApplicationAsset17prepareForReadingEb>:
int ApplicationAsset::prepareForReading(bool keepOpen) {
 23fc8ac:	b570      	push	{r4, r5, r6, lr}
 23fc8ae:	b08a      	sub	sp, #40	; 0x28
 23fc8b0:	4604      	mov	r4, r0
 23fc8b2:	460e      	mov	r6, r1
    if (!isValid()) {
 23fc8b4:	f7ff ff41 	bl	23fc73a <_ZNK8particle16ApplicationAsset7isValidEv>
 23fc8b8:	2800      	cmp	r0, #0
 23fc8ba:	d04e      	beq.n	23fc95a <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xae>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const // never throws
      { return _M_ptr == 0 ? false : true; }
 23fc8bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (data_ && data_->stream) {
 23fc8be:	b113      	cbz	r3, 23fc8c6 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x1a>
 23fc8c0:	681b      	ldr	r3, [r3, #0]
 23fc8c2:	2b00      	cmp	r3, #0
 23fc8c4:	d13c      	bne.n	23fc940 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
    } else if (eof_) {
 23fc8c6:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 23fc8ca:	2d00      	cmp	r5, #0
 23fc8cc:	d148      	bne.n	23fc960 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xb4>
    if (size() == 0) {
 23fc8ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fc8d0:	2b00      	cmp	r3, #0
 23fc8d2:	d048      	beq.n	23fc966 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xba>
    a.name = name_.c_str();
 23fc8d4:	6923      	ldr	r3, [r4, #16]
    asset_manager_asset a = {};
 23fc8d6:	e9cd 5507 	strd	r5, r5, [sp, #28]
    a.name = name_.c_str();
 23fc8da:	9305      	str	r3, [sp, #20]
    a.hash = hash_.hash().data();
 23fc8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc8de:	462a      	mov	r2, r5
    a.hash = hash_.hash().data();
 23fc8e0:	9306      	str	r3, [sp, #24]
    a.hash_length = hash_.hash().size();
 23fc8e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc8e4:	4668      	mov	r0, sp
    a.hash_length = hash_.hash().size();
 23fc8e6:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.hash_type = hash_.type();
 23fc8ea:	f894 3020 	ldrb.w	r3, [r4, #32]
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc8ee:	a905      	add	r1, sp, #20
    asset_manager_stream* stream = nullptr;
 23fc8f0:	9500      	str	r5, [sp, #0]
    asset_manager_asset a = {};
 23fc8f2:	9509      	str	r5, [sp, #36]	; 0x24
    a.hash_type = hash_.type();
 23fc8f4:	f88d 301e 	strb.w	r3, [sp, #30]
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc8f8:	f7ff faca 	bl	23fbe90 <asset_manager_open>
 23fc8fc:	2800      	cmp	r0, #0
 23fc8fe:	db2a      	blt.n	23fc956 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
    if (keepOpen) {
 23fc900:	b1e6      	cbz	r6, 23fc93c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x90>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fc902:	2010      	movs	r0, #16

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fc904:	9501      	str	r5, [sp, #4]
 23fc906:	f7fd fdb6 	bl	23fa476 <_Znwj>
	  auto __pi = ::new (__mem)
 23fc90a:	b130      	cbz	r0, 23fc91a <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x6e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fc90c:	2301      	movs	r3, #1
 23fc90e:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fc912:	4b16      	ldr	r3, [pc, #88]	; (23fc96c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xc0>)
 23fc914:	6003      	str	r3, [r0, #0]
        : stream(s) {
 23fc916:	9b00      	ldr	r3, [sp, #0]
 23fc918:	60c3      	str	r3, [r0, #12]
	__r._M_pi = _M_pi;
 23fc91a:	2300      	movs	r3, #0
	__r._M_ptr = 0;
 23fc91c:	e9cd 3301 	strd	r3, r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc920:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fc922:	9303      	str	r3, [sp, #12]
 23fc924:	f100 030c 	add.w	r3, r0, #12
      __b = _GLIBCXX_MOVE(__tmp);
 23fc928:	63a3      	str	r3, [r4, #56]	; 0x38
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fc92a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	__r._M_pi = _M_pi;
 23fc92c:	63e0      	str	r0, [r4, #60]	; 0x3c
      ~__shared_ptr() = default;
 23fc92e:	a804      	add	r0, sp, #16
	_M_pi = __tmp;
 23fc930:	9304      	str	r3, [sp, #16]
      ~__shared_ptr() = default;
 23fc932:	f7ff fe77 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc936:	a802      	add	r0, sp, #8
 23fc938:	f7ff fe74 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!data_) {
 23fc93c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 23fc93e:	b109      	cbz	r1, 23fc944 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x98>
        return 0;
 23fc940:	2000      	movs	r0, #0
 23fc942:	e008      	b.n	23fc956 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        asset_manager_close(stream, nullptr);
 23fc944:	9800      	ldr	r0, [sp, #0]
 23fc946:	f7ff fae9 	bl	23fbf1c <asset_manager_close>
    if (keepOpen && !data_) {
 23fc94a:	2e00      	cmp	r6, #0
 23fc94c:	d0f8      	beq.n	23fc940 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
 23fc94e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fc950:	2b00      	cmp	r3, #0
 23fc952:	d1f5      	bne.n	23fc940 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
        return SYSTEM_ERROR_NO_MEMORY;
 23fc954:	4806      	ldr	r0, [pc, #24]	; (23fc970 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xc4>)
}
 23fc956:	b00a      	add	sp, #40	; 0x28
 23fc958:	bd70      	pop	{r4, r5, r6, pc}
        return SYSTEM_ERROR_INVALID_STATE;
 23fc95a:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fc95e:	e7fa      	b.n	23fc956 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        return SYSTEM_ERROR_END_OF_STREAM;
 23fc960:	f06f 00c8 	mvn.w	r0, #200	; 0xc8
 23fc964:	e7f7      	b.n	23fc956 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        return SYSTEM_ERROR_NOT_ENOUGH_DATA;
 23fc966:	f06f 00be 	mvn.w	r0, #190	; 0xbe
 23fc96a:	e7f4      	b.n	23fc956 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
 23fc96c:	023ffad8 	.word	0x023ffad8
 23fc970:	fffffefc 	.word	0xfffffefc

023fc974 <_ZN8particle16ApplicationAsset4peekEPcj>:
int ApplicationAsset::peek(char* buffer, size_t size) {
 23fc974:	b570      	push	{r4, r5, r6, lr}
 23fc976:	460c      	mov	r4, r1
    CHECK(prepareForReading());
 23fc978:	2101      	movs	r1, #1
int ApplicationAsset::peek(char* buffer, size_t size) {
 23fc97a:	4606      	mov	r6, r0
 23fc97c:	4615      	mov	r5, r2
    CHECK(prepareForReading());
 23fc97e:	f7ff ff95 	bl	23fc8ac <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fc982:	2800      	cmp	r0, #0
 23fc984:	db0b      	blt.n	23fc99e <_ZN8particle16ApplicationAsset4peekEPcj+0x2a>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc986:	b14c      	cbz	r4, 23fc99c <_ZN8particle16ApplicationAsset4peekEPcj+0x28>
 23fc988:	b145      	cbz	r5, 23fc99c <_ZN8particle16ApplicationAsset4peekEPcj+0x28>
    return asset_manager_peek(data_->stream, buffer, size, nullptr);
 23fc98a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 23fc98c:	462a      	mov	r2, r5
 23fc98e:	4621      	mov	r1, r4
}
 23fc990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return asset_manager_peek(data_->stream, buffer, size, nullptr);
 23fc994:	2300      	movs	r3, #0
 23fc996:	6800      	ldr	r0, [r0, #0]
 23fc998:	f7ff baa4 	b.w	23fbee4 <asset_manager_peek>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc99c:	4800      	ldr	r0, [pc, #0]	; (23fc9a0 <_ZN8particle16ApplicationAsset4peekEPcj+0x2c>)
}
 23fc99e:	bd70      	pop	{r4, r5, r6, pc}
 23fc9a0:	fffffef2 	.word	0xfffffef2

023fc9a4 <_ZN8particle16ApplicationAsset4skipEj>:
int ApplicationAsset::skip(size_t size) {
 23fc9a4:	b538      	push	{r3, r4, r5, lr}
 23fc9a6:	460c      	mov	r4, r1
    CHECK(prepareForReading());
 23fc9a8:	2101      	movs	r1, #1
int ApplicationAsset::skip(size_t size) {
 23fc9aa:	4605      	mov	r5, r0
    CHECK(prepareForReading());
 23fc9ac:	f7ff ff7e 	bl	23fc8ac <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fc9b0:	2800      	cmp	r0, #0
 23fc9b2:	db07      	blt.n	23fc9c4 <_ZN8particle16ApplicationAsset4skipEj+0x20>
    return asset_manager_skip(data_->stream, size, nullptr);
 23fc9b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc9b6:	4621      	mov	r1, r4
 23fc9b8:	6818      	ldr	r0, [r3, #0]
 23fc9ba:	2200      	movs	r2, #0
}
 23fc9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return asset_manager_skip(data_->stream, size, nullptr);
 23fc9c0:	f7ff ba9e 	b.w	23fbf00 <asset_manager_skip>
}
 23fc9c4:	bd38      	pop	{r3, r4, r5, pc}

023fc9c6 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>:
      reset() noexcept
 23fc9c6:	b507      	push	{r0, r1, r2, lr}
      __a = _GLIBCXX_MOVE(__b);
 23fc9c8:	6803      	ldr	r3, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fc9ca:	6842      	ldr	r2, [r0, #4]
 23fc9cc:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc9ce:	2300      	movs	r3, #0
 23fc9d0:	6003      	str	r3, [r0, #0]
	__r._M_pi = _M_pi;
 23fc9d2:	6043      	str	r3, [r0, #4]
      ~__shared_ptr() = default;
 23fc9d4:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
 23fc9d6:	9201      	str	r2, [sp, #4]
      ~__shared_ptr() = default;
 23fc9d8:	f7ff fe24 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      { __shared_ptr().swap(*this); }
 23fc9dc:	b003      	add	sp, #12
 23fc9de:	f85d fb04 	ldr.w	pc, [sp], #4

023fc9e2 <_ZN8particle16ApplicationAsset9availableEv>:
int ApplicationAsset::available() {
 23fc9e2:	b538      	push	{r3, r4, r5, lr}
    int r = prepareForReading();
 23fc9e4:	2101      	movs	r1, #1
int ApplicationAsset::available() {
 23fc9e6:	4605      	mov	r5, r0
    int r = prepareForReading();
 23fc9e8:	f7ff ff60 	bl	23fc8ac <_ZN8particle16ApplicationAsset17prepareForReadingEb>
    if (!r) {
 23fc9ec:	4604      	mov	r4, r0
 23fc9ee:	b928      	cbnz	r0, 23fc9fc <_ZN8particle16ApplicationAsset9availableEv+0x1a>
        r = asset_manager_available(data_->stream, nullptr);
 23fc9f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc9f2:	4601      	mov	r1, r0
 23fc9f4:	6818      	ldr	r0, [r3, #0]
 23fc9f6:	f7ff fa59 	bl	23fbeac <asset_manager_available>
 23fc9fa:	4604      	mov	r4, r0
    if (r == SYSTEM_ERROR_END_OF_STREAM && !eof_) {
 23fc9fc:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fca00:	d109      	bne.n	23fca16 <_ZN8particle16ApplicationAsset9availableEv+0x34>
 23fca02:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23fca06:	b933      	cbnz	r3, 23fca16 <_ZN8particle16ApplicationAsset9availableEv+0x34>
        data_.reset();
 23fca08:	f105 0038 	add.w	r0, r5, #56	; 0x38
 23fca0c:	f7ff ffdb 	bl	23fc9c6 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>
        eof_ = true;
 23fca10:	2301      	movs	r3, #1
 23fca12:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 23fca16:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 23fca1a:	bd38      	pop	{r3, r4, r5, pc}

023fca1c <_ZN8particle16ApplicationAsset4readEPcj>:
int ApplicationAsset::read(char* buffer, size_t size) {
 23fca1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fca20:	4688      	mov	r8, r1
    CHECK(prepareForReading());
 23fca22:	2101      	movs	r1, #1
int ApplicationAsset::read(char* buffer, size_t size) {
 23fca24:	4607      	mov	r7, r0
 23fca26:	4615      	mov	r5, r2
    CHECK(prepareForReading());
 23fca28:	f7ff ff40 	bl	23fc8ac <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fca2c:	1e04      	subs	r4, r0, #0
 23fca2e:	db1b      	blt.n	23fca68 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fca30:	f1b8 0f00 	cmp.w	r8, #0
 23fca34:	d020      	beq.n	23fca78 <_ZN8particle16ApplicationAsset4readEPcj+0x5c>
 23fca36:	b1fd      	cbz	r5, 23fca78 <_ZN8particle16ApplicationAsset4readEPcj+0x5c>
 23fca38:	2600      	movs	r6, #0
        int actuallyRead = asset_manager_read(data_->stream, buffer + pos, size, nullptr);
 23fca3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 23fca3c:	2300      	movs	r3, #0
 23fca3e:	462a      	mov	r2, r5
 23fca40:	6800      	ldr	r0, [r0, #0]
 23fca42:	eb08 0106 	add.w	r1, r8, r6
 23fca46:	f7ff fa3f 	bl	23fbec8 <asset_manager_read>
        if (actuallyRead <= 0) {
 23fca4a:	1e04      	subs	r4, r0, #0
 23fca4c:	dc0f      	bgt.n	23fca6e <_ZN8particle16ApplicationAsset4readEPcj+0x52>
            if (actuallyRead == SYSTEM_ERROR_END_OF_STREAM) {
 23fca4e:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fca52:	d106      	bne.n	23fca62 <_ZN8particle16ApplicationAsset4readEPcj+0x46>
                data_.reset();
 23fca54:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23fca58:	f7ff ffb5 	bl	23fc9c6 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>
                eof_ = true;
 23fca5c:	2301      	movs	r3, #1
 23fca5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            return pos > 0 ? pos : actuallyRead;
 23fca62:	2e00      	cmp	r6, #0
 23fca64:	bf18      	it	ne
 23fca66:	4634      	movne	r4, r6
}
 23fca68:	4620      	mov	r0, r4
 23fca6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (size > 0) {
 23fca6e:	1b2d      	subs	r5, r5, r4
        pos += actuallyRead;
 23fca70:	4426      	add	r6, r4
    while (size > 0) {
 23fca72:	d1e2      	bne.n	23fca3a <_ZN8particle16ApplicationAsset4readEPcj+0x1e>
    return pos;
 23fca74:	4634      	mov	r4, r6
 23fca76:	e7f7      	b.n	23fca68 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fca78:	4c00      	ldr	r4, [pc, #0]	; (23fca7c <_ZN8particle16ApplicationAsset4readEPcj+0x60>)
 23fca7a:	e7f5      	b.n	23fca68 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
 23fca7c:	fffffef2 	.word	0xfffffef2

023fca80 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fca80:	6880      	ldr	r0, [r0, #8]
 23fca82:	6803      	ldr	r3, [r0, #0]
 23fca84:	68db      	ldr	r3, [r3, #12]
 23fca86:	4718      	bx	r3

023fca88 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fca88:	4770      	bx	lr

023fca8a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fca8a:	4608      	mov	r0, r1
 23fca8c:	b111      	cbz	r1, 23fca94 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fca8e:	680b      	ldr	r3, [r1, #0]
 23fca90:	685b      	ldr	r3, [r3, #4]
 23fca92:	4718      	bx	r3
}
 23fca94:	4770      	bx	lr

023fca96 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fca96:	4770      	bx	lr

023fca98 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fca98:	4770      	bx	lr

023fca9a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fca9a:	4770      	bx	lr

023fca9c <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fca9c:	4770      	bx	lr

023fca9e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fca9e:	b538      	push	{r3, r4, r5, lr}
 23fcaa0:	4604      	mov	r4, r0
 23fcaa2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fcaa4:	6800      	ldr	r0, [r0, #0]
 23fcaa6:	212e      	movs	r1, #46	; 0x2e
 23fcaa8:	f001 ffcb 	bl	23fea42 <strchrnul>
    size = s - category;
 23fcaac:	6823      	ldr	r3, [r4, #0]
 23fcaae:	1ac3      	subs	r3, r0, r3
 23fcab0:	602b      	str	r3, [r5, #0]
    if (size) {
 23fcab2:	b123      	cbz	r3, 23fcabe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fcab4:	7803      	ldrb	r3, [r0, #0]
 23fcab6:	b103      	cbz	r3, 23fcaba <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fcab8:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fcaba:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcabc:	6020      	str	r0, [r4, #0]
}
 23fcabe:	4618      	mov	r0, r3
 23fcac0:	bd38      	pop	{r3, r4, r5, pc}

023fcac2 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fcac2:	b510      	push	{r4, lr}
 23fcac4:	4604      	mov	r4, r0
 23fcac6:	210c      	movs	r1, #12
 23fcac8:	f7fd fcdb 	bl	23fa482 <_ZdlPvj>
 23fcacc:	4620      	mov	r0, r4
 23fcace:	bd10      	pop	{r4, pc}

023fcad0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fcad0:	b510      	push	{r4, lr}
 23fcad2:	4604      	mov	r4, r0
 23fcad4:	2104      	movs	r1, #4
 23fcad6:	f7fd fcd4 	bl	23fa482 <_ZdlPvj>
 23fcada:	4620      	mov	r0, r4
 23fcadc:	bd10      	pop	{r4, pc}

023fcade <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fcade:	b510      	push	{r4, lr}
 23fcae0:	4604      	mov	r4, r0
 23fcae2:	2104      	movs	r1, #4
 23fcae4:	f7fd fccd 	bl	23fa482 <_ZdlPvj>
 23fcae8:	4620      	mov	r0, r4
 23fcaea:	bd10      	pop	{r4, pc}

023fcaec <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fcaec:	f7fe be6c 	b.w	23fb7c8 <os_mutex_recursive_lock>

023fcaf0 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fcaf0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fcaf2:	f7fd fc91 	bl	23fa418 <strcmp>
}
 23fcaf6:	fab0 f080 	clz	r0, r0
 23fcafa:	0940      	lsrs	r0, r0, #5
 23fcafc:	bd08      	pop	{r3, pc}

023fcafe <__tcf_1>:
 23fcafe:	4770      	bx	lr

023fcb00 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fcb00:	b510      	push	{r4, lr}
 23fcb02:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fcb04:	f001 f910 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fcb08:	4284      	cmp	r4, r0
 23fcb0a:	d105      	bne.n	23fcb18 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fcb0c:	f001 f90c 	bl	23fdd28 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fcb10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fcb14:	f001 b8fa 	b.w	23fdd0c <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fcb18:	f001 fd34 	bl	23fe584 <_Z22__fetch_global_Serial1v>
 23fcb1c:	4284      	cmp	r4, r0
 23fcb1e:	d105      	bne.n	23fcb2c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fcb20:	f001 fd30 	bl	23fe584 <_Z22__fetch_global_Serial1v>
}
 23fcb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fcb28:	f001 b97b 	b.w	23fde22 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fcb2c:	b12c      	cbz	r4, 23fcb3a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fcb2e:	6823      	ldr	r3, [r4, #0]
 23fcb30:	4620      	mov	r0, r4
}
 23fcb32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fcb36:	685b      	ldr	r3, [r3, #4]
 23fcb38:	4718      	bx	r3
 23fcb3a:	bd10      	pop	{r4, pc}

023fcb3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcb3c:	680b      	ldr	r3, [r1, #0]
 23fcb3e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fcb40:	684b      	ldr	r3, [r1, #4]
 23fcb42:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fcb44:	b113      	cbz	r3, 23fcb4c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fcb46:	685a      	ldr	r2, [r3, #4]
 23fcb48:	3201      	adds	r2, #1
 23fcb4a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcb4c:	4770      	bx	lr

023fcb4e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fcb4e:	b513      	push	{r0, r1, r4, lr}
 23fcb50:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fcb52:	4608      	mov	r0, r1
 23fcb54:	9101      	str	r1, [sp, #4]
 23fcb56:	f7fd fc69 	bl	23fa42c <strlen>
 23fcb5a:	4602      	mov	r2, r0
 23fcb5c:	4620      	mov	r0, r4
 23fcb5e:	9901      	ldr	r1, [sp, #4]
}
 23fcb60:	b002      	add	sp, #8
 23fcb62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fcb66:	f001 bc65 	b.w	23fe434 <_ZN5spark10JSONWriter5valueEPKcj>

023fcb6a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fcb6a:	b513      	push	{r0, r1, r4, lr}
 23fcb6c:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fcb6e:	4608      	mov	r0, r1
 23fcb70:	9101      	str	r1, [sp, #4]
 23fcb72:	f7fd fc5b 	bl	23fa42c <strlen>
 23fcb76:	4602      	mov	r2, r0
 23fcb78:	4620      	mov	r0, r4
 23fcb7a:	6823      	ldr	r3, [r4, #0]
 23fcb7c:	9901      	ldr	r1, [sp, #4]
 23fcb7e:	68db      	ldr	r3, [r3, #12]
}
 23fcb80:	b002      	add	sp, #8
 23fcb82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fcb86:	4718      	bx	r3

023fcb88 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fcb88:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcb8a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fcb8c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fcb90:	2201      	movs	r2, #1
 23fcb92:	68db      	ldr	r3, [r3, #12]
 23fcb94:	f10d 0107 	add.w	r1, sp, #7
 23fcb98:	4798      	blx	r3
}
 23fcb9a:	b003      	add	sp, #12
 23fcb9c:	f85d fb04 	ldr.w	pc, [sp], #4

023fcba0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fcba0:	680a      	ldr	r2, [r1, #0]
 23fcba2:	b510      	push	{r4, lr}
 23fcba4:	6002      	str	r2, [r0, #0]
 23fcba6:	684a      	ldr	r2, [r1, #4]
 23fcba8:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fcbaa:	2200      	movs	r2, #0
 23fcbac:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fcbb0:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcbb2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcbb4:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcbb6:	6084      	str	r4, [r0, #8]
 23fcbb8:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcbba:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fcbbc:	60c4      	str	r4, [r0, #12]
 23fcbbe:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcbc0:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcbc2:	6104      	str	r4, [r0, #16]
 23fcbc4:	bd10      	pop	{r4, pc}
	...

023fcbc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcbc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fcbcc:	f04f 0a14 	mov.w	sl, #20
 23fcbd0:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fcbd4:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fcbd6:	4645      	mov	r5, r8
 23fcbd8:	fb0a f404 	mul.w	r4, sl, r4
 23fcbdc:	9300      	str	r3, [sp, #0]
 23fcbde:	4b17      	ldr	r3, [pc, #92]	; (23fcc3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fcbe0:	10a4      	asrs	r4, r4, #2
 23fcbe2:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fcbe4:	2c00      	cmp	r4, #0
 23fcbe6:	dd21      	ble.n	23fcc2c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fcbe8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fcbea:	fb0a f006 	mul.w	r0, sl, r6
 23fcbee:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fcbf2:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fcbf6:	463a      	mov	r2, r7
 23fcbf8:	455f      	cmp	r7, fp
 23fcbfa:	bf28      	it	cs
 23fcbfc:	465a      	movcs	r2, fp
 23fcbfe:	5828      	ldr	r0, [r5, r0]
 23fcc00:	9101      	str	r1, [sp, #4]
 23fcc02:	f001 ff30 	bl	23fea66 <strncmp>
                if (cmp == 0) {
 23fcc06:	2800      	cmp	r0, #0
 23fcc08:	f04f 0301 	mov.w	r3, #1
 23fcc0c:	9901      	ldr	r1, [sp, #4]
 23fcc0e:	d10b      	bne.n	23fcc28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fcc10:	455f      	cmp	r7, fp
 23fcc12:	d103      	bne.n	23fcc1c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fcc14:	9a00      	ldr	r2, [sp, #0]
 23fcc16:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcc18:	4634      	mov	r4, r6
 23fcc1a:	e7e3      	b.n	23fcbe4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fcc1c:	d9fc      	bls.n	23fcc18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fcc1e:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fcc20:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fcc24:	3e01      	subs	r6, #1
 23fcc26:	e7f7      	b.n	23fcc18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fcc28:	dbf9      	blt.n	23fcc1e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fcc2a:	e7f5      	b.n	23fcc18 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fcc2c:	eba5 0508 	sub.w	r5, r5, r8
}
 23fcc30:	4802      	ldr	r0, [pc, #8]	; (23fcc3c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fcc32:	10ad      	asrs	r5, r5, #2
 23fcc34:	4368      	muls	r0, r5
 23fcc36:	b003      	add	sp, #12
 23fcc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcc3c:	cccccccd 	.word	0xcccccccd

023fcc40 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fcc40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fcc42:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fcc44:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fcc46:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fcc48:	b303      	cbz	r3, 23fcc8c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fcc4a:	b1f9      	cbz	r1, 23fcc8c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fcc4c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fcc4e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fcc52:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fcc54:	a903      	add	r1, sp, #12
 23fcc56:	a801      	add	r0, sp, #4
 23fcc58:	f7ff ff21 	bl	23fca9e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fcc5c:	4601      	mov	r1, r0
 23fcc5e:	b1a8      	cbz	r0, 23fcc8c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcc60:	f10d 030b 	add.w	r3, sp, #11
 23fcc64:	4620      	mov	r0, r4
 23fcc66:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fcc68:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcc6c:	f7ff ffac 	bl	23fcbc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fcc70:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fcc74:	b153      	cbz	r3, 23fcc8c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fcc76:	6823      	ldr	r3, [r4, #0]
 23fcc78:	2414      	movs	r4, #20
 23fcc7a:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fcc7e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fcc82:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fcc84:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fcc86:	bfa8      	it	ge
 23fcc88:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fcc8a:	e7e3      	b.n	23fcc54 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fcc8c:	4628      	mov	r0, r5
 23fcc8e:	b004      	add	sp, #16
 23fcc90:	bd70      	pop	{r4, r5, r6, pc}

023fcc92 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fcc92:	b40e      	push	{r1, r2, r3}
 23fcc94:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcc96:	b08c      	sub	sp, #48	; 0x30
 23fcc98:	af00      	add	r7, sp, #0
 23fcc9a:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fcc9e:	f855 2b04 	ldr.w	r2, [r5], #4
 23fcca2:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fcca4:	462b      	mov	r3, r5
 23fcca6:	2120      	movs	r1, #32
 23fcca8:	f107 0010 	add.w	r0, r7, #16
 23fccac:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fccae:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fccb0:	f7ff f96c 	bl	23fbf8c <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fccb4:	281f      	cmp	r0, #31
 23fccb6:	687a      	ldr	r2, [r7, #4]
 23fccb8:	d91a      	bls.n	23fccf0 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fccba:	f100 0308 	add.w	r3, r0, #8
 23fccbe:	f023 0307 	bic.w	r3, r3, #7
        }
 23fccc2:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fccc4:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fccc8:	1c41      	adds	r1, r0, #1
 23fccca:	462b      	mov	r3, r5
 23fcccc:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fccce:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fccd0:	f7ff f95c 	bl	23fbf8c <vsnprintf>
        if (n > 0) {
 23fccd4:	1e02      	subs	r2, r0, #0
 23fccd6:	dd04      	ble.n	23fcce2 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fccd8:	6823      	ldr	r3, [r4, #0]
 23fccda:	4669      	mov	r1, sp
 23fccdc:	4620      	mov	r0, r4
 23fccde:	68db      	ldr	r3, [r3, #12]
 23fcce0:	4798      	blx	r3
 23fcce2:	46b5      	mov	sp, r6
}
 23fcce4:	3730      	adds	r7, #48	; 0x30
 23fcce6:	46bd      	mov	sp, r7
 23fcce8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fccec:	b003      	add	sp, #12
 23fccee:	4770      	bx	lr
    } else if (n > 0) {
 23fccf0:	2800      	cmp	r0, #0
 23fccf2:	d0f7      	beq.n	23fcce4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fccf4:	6823      	ldr	r3, [r4, #0]
 23fccf6:	4602      	mov	r2, r0
 23fccf8:	68db      	ldr	r3, [r3, #12]
 23fccfa:	4620      	mov	r0, r4
 23fccfc:	f107 0110 	add.w	r1, r7, #16
 23fcd00:	4798      	blx	r3
}
 23fcd02:	e7ef      	b.n	23fcce4 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fcd04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fcd04:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fcd06:	4c08      	ldr	r4, [pc, #32]	; (23fcd28 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fcd08:	e8d4 3f8f 	ldab	r3, [r4]
 23fcd0c:	07db      	lsls	r3, r3, #31
 23fcd0e:	d409      	bmi.n	23fcd24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fcd10:	4620      	mov	r0, r4
 23fcd12:	f7fd fbc5 	bl	23fa4a0 <__cxa_guard_acquire>
 23fcd16:	b128      	cbz	r0, 23fcd24 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fcd18:	4620      	mov	r0, r4
 23fcd1a:	f7fd fbc6 	bl	23fa4aa <__cxa_guard_release>
 23fcd1e:	4803      	ldr	r0, [pc, #12]	; (23fcd2c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fcd20:	f001 fe16 	bl	23fe950 <atexit>
}
 23fcd24:	4802      	ldr	r0, [pc, #8]	; (23fcd30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fcd26:	bd10      	pop	{r4, pc}
 23fcd28:	1007ae74 	.word	0x1007ae74
 23fcd2c:	023fca97 	.word	0x023fca97
 23fcd30:	1007ad70 	.word	0x1007ad70

023fcd34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fcd34:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fcd36:	4c08      	ldr	r4, [pc, #32]	; (23fcd58 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fcd38:	e8d4 3f8f 	ldab	r3, [r4]
 23fcd3c:	07db      	lsls	r3, r3, #31
 23fcd3e:	d409      	bmi.n	23fcd54 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fcd40:	4620      	mov	r0, r4
 23fcd42:	f7fd fbad 	bl	23fa4a0 <__cxa_guard_acquire>
 23fcd46:	b128      	cbz	r0, 23fcd54 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fcd48:	4620      	mov	r0, r4
 23fcd4a:	f7fd fbae 	bl	23fa4aa <__cxa_guard_release>
 23fcd4e:	4803      	ldr	r0, [pc, #12]	; (23fcd5c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fcd50:	f001 fdfe 	bl	23fe950 <atexit>
    return &factory;
}
 23fcd54:	4802      	ldr	r0, [pc, #8]	; (23fcd60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fcd56:	bd10      	pop	{r4, pc}
 23fcd58:	1007ae78 	.word	0x1007ae78
 23fcd5c:	023fcaff 	.word	0x023fcaff
 23fcd60:	1007ad74 	.word	0x1007ad74

023fcd64 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fcd64:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fcd66:	2500      	movs	r5, #0
 23fcd68:	4604      	mov	r4, r0
 23fcd6a:	e9c0 5500 	strd	r5, r5, [r0]
 23fcd6e:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fcd72:	6085      	str	r5, [r0, #8]
 23fcd74:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fcd76:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fcd7a:	f7fe fd09 	bl	23fb790 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fcd7e:	f7ff ffc1 	bl	23fcd04 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fcd82:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fcd84:	f7ff ffd6 	bl	23fcd34 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fcd88:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fcd8a:	6220      	str	r0, [r4, #32]
}
 23fcd8c:	4620      	mov	r0, r4
 23fcd8e:	bd38      	pop	{r3, r4, r5, pc}

023fcd90 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fcd90:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fcd92:	4c0a      	ldr	r4, [pc, #40]	; (23fcdbc <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fcd94:	e8d4 3f8f 	ldab	r3, [r4]
 23fcd98:	07db      	lsls	r3, r3, #31
 23fcd9a:	d40c      	bmi.n	23fcdb6 <_ZN5spark10LogManager8instanceEv+0x26>
 23fcd9c:	4620      	mov	r0, r4
 23fcd9e:	f7fd fb7f 	bl	23fa4a0 <__cxa_guard_acquire>
 23fcda2:	b140      	cbz	r0, 23fcdb6 <_ZN5spark10LogManager8instanceEv+0x26>
 23fcda4:	4806      	ldr	r0, [pc, #24]	; (23fcdc0 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcda6:	f7ff ffdd 	bl	23fcd64 <_ZN5spark10LogManagerC1Ev>
 23fcdaa:	4620      	mov	r0, r4
 23fcdac:	f7fd fb7d 	bl	23fa4aa <__cxa_guard_release>
 23fcdb0:	4804      	ldr	r0, [pc, #16]	; (23fcdc4 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fcdb2:	f001 fdcd 	bl	23fe950 <atexit>
    return &mgr;
}
 23fcdb6:	4802      	ldr	r0, [pc, #8]	; (23fcdc0 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fcdb8:	bd10      	pop	{r4, pc}
 23fcdba:	bf00      	nop
 23fcdbc:	1007ae70 	.word	0x1007ae70
 23fcdc0:	1007ae80 	.word	0x1007ae80
 23fcdc4:	023fd2e1 	.word	0x023fd2e1

023fcdc8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fcdc8:	2300      	movs	r3, #0
 23fcdca:	4a02      	ldr	r2, [pc, #8]	; (23fcdd4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fcdcc:	4902      	ldr	r1, [pc, #8]	; (23fcdd8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fcdce:	4803      	ldr	r0, [pc, #12]	; (23fcddc <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fcdd0:	f7fe bf2a 	b.w	23fbc28 <log_set_callbacks>
 23fcdd4:	023fd0c9 	.word	0x023fd0c9
 23fcdd8:	023fd055 	.word	0x023fd055
 23fcddc:	023fcfd5 	.word	0x023fcfd5

023fcde0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fcde0:	2300      	movs	r3, #0
 23fcde2:	461a      	mov	r2, r3
 23fcde4:	4619      	mov	r1, r3
 23fcde6:	4618      	mov	r0, r3
 23fcde8:	f7fe bf1e 	b.w	23fbc28 <log_set_callbacks>

023fcdec <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fcdec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcdee:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fcdf0:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fcdf2:	4668      	mov	r0, sp
 23fcdf4:	f7ff fea2 	bl	23fcb3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fcdf8:	466a      	mov	r2, sp
 23fcdfa:	4629      	mov	r1, r5
 23fcdfc:	4620      	mov	r0, r4
 23fcdfe:	f001 fa39 	bl	23fe274 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fce02:	a801      	add	r0, sp, #4
 23fce04:	f7ff fc0e 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fce08:	4620      	mov	r0, r4
 23fce0a:	b003      	add	sp, #12
 23fce0c:	bd30      	pop	{r4, r5, pc}

023fce0e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fce0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fce10:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fce12:	68cd      	ldr	r5, [r1, #12]
 23fce14:	4668      	mov	r0, sp
 23fce16:	f7ff fe91 	bl	23fcb3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fce1a:	466a      	mov	r2, sp
 23fce1c:	4629      	mov	r1, r5
 23fce1e:	4620      	mov	r0, r4
 23fce20:	f001 fa04 	bl	23fe22c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fce24:	a801      	add	r0, sp, #4
 23fce26:	f7ff fbfd 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fce2a:	4620      	mov	r0, r4
 23fce2c:	b003      	add	sp, #12
 23fce2e:	bd30      	pop	{r4, r5, pc}

023fce30 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fce30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fce32:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fce34:	690d      	ldr	r5, [r1, #16]
 23fce36:	4668      	mov	r0, sp
 23fce38:	f7ff fe80 	bl	23fcb3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fce3c:	466a      	mov	r2, sp
 23fce3e:	4629      	mov	r1, r5
 23fce40:	4620      	mov	r0, r4
 23fce42:	f001 f99c 	bl	23fe17e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fce46:	a801      	add	r0, sp, #4
 23fce48:	f7ff fbec 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fce4c:	4620      	mov	r0, r4
 23fce4e:	b003      	add	sp, #12
 23fce50:	bd30      	pop	{r4, r5, pc}
	...

023fce54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fce54:	b570      	push	{r4, r5, r6, lr}
 23fce56:	b08a      	sub	sp, #40	; 0x28
 23fce58:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fce5a:	4601      	mov	r1, r0
 23fce5c:	a804      	add	r0, sp, #16
 23fce5e:	f7ff ffc5 	bl	23fcdec <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fce62:	4e14      	ldr	r6, [pc, #80]	; (23fceb4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fce64:	a804      	add	r0, sp, #16
 23fce66:	f001 fa1d 	bl	23fe2a4 <_ZN5spark18JSONObjectIterator4nextEv>
 23fce6a:	b1e8      	cbz	r0, 23fcea8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fce6c:	4668      	mov	r0, sp
 23fce6e:	a904      	add	r1, sp, #16
 23fce70:	f7ff ffcd 	bl	23fce0e <_ZNK5spark18JSONObjectIterator4nameEv>
 23fce74:	4631      	mov	r1, r6
 23fce76:	9802      	ldr	r0, [sp, #8]
 23fce78:	f7ff fe3a 	bl	23fcaf0 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fce7c:	4604      	mov	r4, r0
 23fce7e:	b110      	cbz	r0, 23fce86 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fce80:	1e2c      	subs	r4, r5, #0
 23fce82:	bf18      	it	ne
 23fce84:	2401      	movne	r4, #1
 23fce86:	a801      	add	r0, sp, #4
 23fce88:	f7ff fbcc 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fce8c:	2c00      	cmp	r4, #0
 23fce8e:	d0e9      	beq.n	23fce64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fce90:	4668      	mov	r0, sp
 23fce92:	a904      	add	r1, sp, #16
 23fce94:	f7ff ffcc 	bl	23fce30 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fce98:	4668      	mov	r0, sp
 23fce9a:	f001 f9a6 	bl	23fe1ea <_ZNK5spark9JSONValue5toIntEv>
 23fce9e:	6028      	str	r0, [r5, #0]
 23fcea0:	a801      	add	r0, sp, #4
 23fcea2:	f7ff fbbf 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fcea6:	e7dd      	b.n	23fce64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fcea8:	a805      	add	r0, sp, #20
 23fceaa:	f7ff fbbb 	bl	23fc624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fceae:	b00a      	add	sp, #40	; 0x28
 23fceb0:	bd70      	pop	{r4, r5, r6, pc}
 23fceb2:	bf00      	nop
 23fceb4:	023ffb20 	.word	0x023ffb20

023fceb8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fceb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fceba:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fcebc:	4913      	ldr	r1, [pc, #76]	; (23fcf0c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fcebe:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fcec0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fcec2:	f7fd faa9 	bl	23fa418 <strcmp>
 23fcec6:	b950      	cbnz	r0, 23fcede <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fcec8:	f000 ff2e 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fcecc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fced0:	f000 ff18 	bl	23fdd04 <_ZN9USBSerial5beginEl>
}
 23fced4:	b003      	add	sp, #12
 23fced6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fceda:	f000 bf25 	b.w	23fdd28 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fcede:	4620      	mov	r0, r4
 23fcee0:	490b      	ldr	r1, [pc, #44]	; (23fcf10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fcee2:	f7fd fa99 	bl	23fa418 <strcmp>
 23fcee6:	b978      	cbnz	r0, 23fcf08 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fcee8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fceec:	a901      	add	r1, sp, #4
 23fceee:	4628      	mov	r0, r5
        int baud = 9600;
 23fcef0:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fcef2:	f7ff ffaf 	bl	23fce54 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fcef6:	f001 fb45 	bl	23fe584 <_Z22__fetch_global_Serial1v>
 23fcefa:	9901      	ldr	r1, [sp, #4]
 23fcefc:	f000 ff8e 	bl	23fde1c <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fcf00:	f001 fb40 	bl	23fe584 <_Z22__fetch_global_Serial1v>
}
 23fcf04:	b003      	add	sp, #12
 23fcf06:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fcf08:	2000      	movs	r0, #0
 23fcf0a:	e7fb      	b.n	23fcf04 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fcf0c:	023ffb25 	.word	0x023ffb25
 23fcf10:	023ffb2c 	.word	0x023ffb2c

023fcf14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcf14:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fcf16:	2614      	movs	r6, #20
 23fcf18:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fcf1c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fcf1e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fcf22:	42ae      	cmp	r6, r5
 23fcf24:	d005      	beq.n	23fcf32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fcf26:	f105 0008 	add.w	r0, r5, #8
 23fcf2a:	f7ff fff3 	bl	23fcf14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcf2e:	3514      	adds	r5, #20
 23fcf30:	e7f7      	b.n	23fcf22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fcf32:	6820      	ldr	r0, [r4, #0]
 23fcf34:	f7ff f80e 	bl	23fbf54 <free>
}
 23fcf38:	4620      	mov	r0, r4
 23fcf3a:	bd70      	pop	{r4, r5, r6, pc}

023fcf3c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fcf3c:	b510      	push	{r4, lr}
 23fcf3e:	4604      	mov	r4, r0
 23fcf40:	300c      	adds	r0, #12
 23fcf42:	f7ff ffe7 	bl	23fcf14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcf46:	4620      	mov	r0, r4
 23fcf48:	f7ff fb5a 	bl	23fc600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fcf4c:	4620      	mov	r0, r4
 23fcf4e:	bd10      	pop	{r4, pc}

023fcf50 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fcf50:	b510      	push	{r4, lr}
 23fcf52:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fcf54:	4b03      	ldr	r3, [pc, #12]	; (23fcf64 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fcf56:	f840 3b04 	str.w	r3, [r0], #4
 23fcf5a:	f7ff ffef 	bl	23fcf3c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fcf5e:	4620      	mov	r0, r4
 23fcf60:	bd10      	pop	{r4, pc}
 23fcf62:	bf00      	nop
 23fcf64:	023fed94 	.word	0x023fed94

023fcf68 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fcf68:	b510      	push	{r4, lr}
 23fcf6a:	4604      	mov	r4, r0
 23fcf6c:	f7ff fff0 	bl	23fcf50 <_ZN5spark16StreamLogHandlerD1Ev>
 23fcf70:	4620      	mov	r0, r4
 23fcf72:	2124      	movs	r1, #36	; 0x24
 23fcf74:	f7fd fa85 	bl	23fa482 <_ZdlPvj>
 23fcf78:	4620      	mov	r0, r4
 23fcf7a:	bd10      	pop	{r4, pc}

023fcf7c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fcf7c:	b510      	push	{r4, lr}
 23fcf7e:	4604      	mov	r4, r0
 23fcf80:	4b02      	ldr	r3, [pc, #8]	; (23fcf8c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fcf82:	6003      	str	r3, [r0, #0]
 23fcf84:	f7ff ffe4 	bl	23fcf50 <_ZN5spark16StreamLogHandlerD1Ev>
 23fcf88:	4620      	mov	r0, r4
 23fcf8a:	bd10      	pop	{r4, pc}
 23fcf8c:	023ffbcc 	.word	0x023ffbcc

023fcf90 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fcf90:	b510      	push	{r4, lr}
 23fcf92:	4604      	mov	r4, r0
 23fcf94:	f7ff fff2 	bl	23fcf7c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fcf98:	4620      	mov	r0, r4
 23fcf9a:	2124      	movs	r1, #36	; 0x24
 23fcf9c:	f7fd fa71 	bl	23fa482 <_ZdlPvj>
 23fcfa0:	4620      	mov	r0, r4
 23fcfa2:	bd10      	pop	{r4, pc}

023fcfa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fcfa4:	2200      	movs	r2, #0
 23fcfa6:	e9c0 2200 	strd	r2, r2, [r0]
 23fcfaa:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fcfac:	b510      	push	{r4, lr}
 23fcfae:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfb0:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fcfb2:	6004      	str	r4, [r0, #0]
 23fcfb4:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfb6:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fcfb8:	6044      	str	r4, [r0, #4]
 23fcfba:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcfbc:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fcfbe:	6084      	str	r4, [r0, #8]
}
 23fcfc0:	bd10      	pop	{r4, pc}

023fcfc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fcfc2:	b510      	push	{r4, lr}
 23fcfc4:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fcfc6:	6803      	ldr	r3, [r0, #0]
 23fcfc8:	6818      	ldr	r0, [r3, #0]
 23fcfca:	f7fe fc0b 	bl	23fb7e4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fcfce:	4620      	mov	r0, r4
 23fcfd0:	bd10      	pop	{r4, pc}
	...

023fcfd4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fcfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcfd8:	b087      	sub	sp, #28
 23fcfda:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fcfdc:	4b1c      	ldr	r3, [pc, #112]	; (23fd050 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fcfde:	4680      	mov	r8, r0
 23fcfe0:	685b      	ldr	r3, [r3, #4]
 23fcfe2:	4689      	mov	r9, r1
 23fcfe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fcfe8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fcfea:	b96b      	cbnz	r3, 23fd008 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fcfec:	f7ff fed0 	bl	23fcd90 <_ZN5spark10LogManager8instanceEv>
 23fcff0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fcff2:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fcff6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fcff8:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fcffa:	f7ff fd77 	bl	23fcaec <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fcffe:	7b23      	ldrb	r3, [r4, #12]
 23fd000:	b12b      	cbz	r3, 23fd00e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fd002:	a805      	add	r0, sp, #20
 23fd004:	f7ff ffdd 	bl	23fcfc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fd008:	b007      	add	sp, #28
 23fd00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fd00e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fd010:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fd014:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fd016:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd01a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd01e:	45aa      	cmp	sl, r5
 23fd020:	d012      	beq.n	23fd048 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fd022:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fd026:	4631      	mov	r1, r6
 23fd028:	1d38      	adds	r0, r7, #4
 23fd02a:	f7ff fe09 	bl	23fcc40 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd02e:	4581      	cmp	r9, r0
 23fd030:	d3f5      	bcc.n	23fd01e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fd032:	9a03      	ldr	r2, [sp, #12]
 23fd034:	683b      	ldr	r3, [r7, #0]
 23fd036:	9200      	str	r2, [sp, #0]
 23fd038:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fd03c:	464a      	mov	r2, r9
 23fd03e:	4633      	mov	r3, r6
 23fd040:	4641      	mov	r1, r8
 23fd042:	4638      	mov	r0, r7
 23fd044:	47d8      	blx	fp
 23fd046:	e7ea      	b.n	23fd01e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fd048:	2300      	movs	r3, #0
 23fd04a:	7323      	strb	r3, [r4, #12]
 23fd04c:	e7d9      	b.n	23fd002 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fd04e:	bf00      	nop
 23fd050:	e000ed00 	.word	0xe000ed00

023fd054 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fd054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd058:	469b      	mov	fp, r3
 23fd05a:	4b1a      	ldr	r3, [pc, #104]	; (23fd0c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fd05c:	4680      	mov	r8, r0
 23fd05e:	685b      	ldr	r3, [r3, #4]
 23fd060:	4689      	mov	r9, r1
 23fd062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd066:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fd068:	b96b      	cbnz	r3, 23fd086 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fd06a:	f7ff fe91 	bl	23fcd90 <_ZN5spark10LogManager8instanceEv>
 23fd06e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd070:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd074:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd076:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd078:	f7ff fd38 	bl	23fcaec <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fd07c:	7b23      	ldrb	r3, [r4, #12]
 23fd07e:	b12b      	cbz	r3, 23fd08c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fd080:	a801      	add	r0, sp, #4
 23fd082:	f7ff ff9e 	bl	23fcfc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd086:	b003      	add	sp, #12
 23fd088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fd08c:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fd08e:	b2f6      	uxtb	r6, r6
 23fd090:	7323      	strb	r3, [r4, #12]
 23fd092:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd096:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd09a:	4555      	cmp	r5, sl
 23fd09c:	d00e      	beq.n	23fd0bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fd09e:	f855 7b04 	ldr.w	r7, [r5], #4
 23fd0a2:	4659      	mov	r1, fp
 23fd0a4:	1d38      	adds	r0, r7, #4
 23fd0a6:	f7ff fdcb 	bl	23fcc40 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd0aa:	4286      	cmp	r6, r0
 23fd0ac:	d3f5      	bcc.n	23fd09a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd0ae:	683b      	ldr	r3, [r7, #0]
 23fd0b0:	464a      	mov	r2, r9
 23fd0b2:	4641      	mov	r1, r8
 23fd0b4:	4638      	mov	r0, r7
 23fd0b6:	68db      	ldr	r3, [r3, #12]
 23fd0b8:	4798      	blx	r3
 23fd0ba:	e7ee      	b.n	23fd09a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd0bc:	2300      	movs	r3, #0
 23fd0be:	7323      	strb	r3, [r4, #12]
 23fd0c0:	e7de      	b.n	23fd080 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd0c2:	bf00      	nop
 23fd0c4:	e000ed00 	.word	0xe000ed00

023fd0c8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd0c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd0cc:	4b16      	ldr	r3, [pc, #88]	; (23fd128 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd0ce:	4605      	mov	r5, r0
 23fd0d0:	685b      	ldr	r3, [r3, #4]
 23fd0d2:	460f      	mov	r7, r1
 23fd0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd0d8:	bb1b      	cbnz	r3, 23fd122 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd0da:	f7ff fe59 	bl	23fcd90 <_ZN5spark10LogManager8instanceEv>
 23fd0de:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd0e0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd0e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd0e6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd0e8:	f7ff fd00 	bl	23fcaec <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd0ec:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd0f0:	2446      	movs	r4, #70	; 0x46
 23fd0f2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd0f6:	45b0      	cmp	r8, r6
 23fd0f8:	d109      	bne.n	23fd10e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd0fa:	a801      	add	r0, sp, #4
 23fd0fc:	f7ff ff61 	bl	23fcfc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd100:	42a5      	cmp	r5, r4
 23fd102:	bfb4      	ite	lt
 23fd104:	2000      	movlt	r0, #0
 23fd106:	2001      	movge	r0, #1
}
 23fd108:	b002      	add	sp, #8
 23fd10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd10e:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd112:	4639      	mov	r1, r7
 23fd114:	3004      	adds	r0, #4
 23fd116:	f7ff fd93 	bl	23fcc40 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd11a:	4284      	cmp	r4, r0
 23fd11c:	bfa8      	it	ge
 23fd11e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd120:	e7e9      	b.n	23fd0f6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd122:	2000      	movs	r0, #0
 23fd124:	e7f0      	b.n	23fd108 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd126:	bf00      	nop
 23fd128:	e000ed00 	.word	0xe000ed00

023fd12c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd12e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd132:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd134:	4604      	mov	r4, r0
 23fd136:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd138:	db0d      	blt.n	23fd156 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fd13a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fd13c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd13e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd140:	dd04      	ble.n	23fd14c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fd142:	00b9      	lsls	r1, r7, #2
 23fd144:	f7fe ff14 	bl	23fbf70 <realloc>
            if (!d) {
 23fd148:	b918      	cbnz	r0, 23fd152 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fd14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fd14c:	f7fe ff02 	bl	23fbf54 <free>
        T* d = nullptr;
 23fd150:	2000      	movs	r0, #0
        data_ = d;
 23fd152:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd154:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fd156:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd158:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd15a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fd15e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd160:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fd164:	1d08      	adds	r0, r1, #4
 23fd166:	f001 fc0e 	bl	23fe986 <memmove>
    new(p) T(std::move(value));
 23fd16a:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fd16e:	6863      	ldr	r3, [r4, #4]
    return true;
 23fd170:	2001      	movs	r0, #1
    ++size_;
 23fd172:	3301      	adds	r3, #1
 23fd174:	6063      	str	r3, [r4, #4]
    return true;
 23fd176:	e7e8      	b.n	23fd14a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fd178 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd17a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd17c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd180:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd182:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd184:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fd186:	f7ff fcb1 	bl	23fcaec <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fd18a:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fd18e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fd192:	4293      	cmp	r3, r2
 23fd194:	4619      	mov	r1, r3
 23fd196:	d00a      	beq.n	23fd1ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fd198:	6809      	ldr	r1, [r1, #0]
 23fd19a:	3304      	adds	r3, #4
 23fd19c:	42a9      	cmp	r1, r5
 23fd19e:	d1f8      	bne.n	23fd192 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fd1a0:	a801      	add	r0, sp, #4
 23fd1a2:	f7ff ff0e 	bl	23fcfc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd1a6:	2500      	movs	r5, #0
}
 23fd1a8:	4628      	mov	r0, r5
 23fd1aa:	b003      	add	sp, #12
 23fd1ac:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fd1ae:	4629      	mov	r1, r5
 23fd1b0:	4620      	mov	r0, r4
 23fd1b2:	f7ff ffbb 	bl	23fd12c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fd1b6:	4605      	mov	r5, r0
 23fd1b8:	2800      	cmp	r0, #0
 23fd1ba:	d0f1      	beq.n	23fd1a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fd1bc:	6863      	ldr	r3, [r4, #4]
 23fd1be:	2b01      	cmp	r3, #1
 23fd1c0:	d101      	bne.n	23fd1c6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fd1c2:	f7ff fe01 	bl	23fcdc8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd1c6:	a801      	add	r0, sp, #4
 23fd1c8:	f7ff fefb 	bl	23fcfc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd1cc:	e7ec      	b.n	23fd1a8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fd1ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fd1ce:	460b      	mov	r3, r1
 23fd1d0:	b570      	push	{r4, r5, r6, lr}
 23fd1d2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fd1d4:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fd1d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fd1dc:	4282      	cmp	r2, r0
 23fd1de:	d00f      	beq.n	23fd200 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fd1e0:	4601      	mov	r1, r0
            if (*p == value) {
 23fd1e2:	681d      	ldr	r5, [r3, #0]
 23fd1e4:	f851 6b04 	ldr.w	r6, [r1], #4
 23fd1e8:	42ae      	cmp	r6, r5
 23fd1ea:	d107      	bne.n	23fd1fc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd1ec:	1a52      	subs	r2, r2, r1
 23fd1ee:	f001 fbca 	bl	23fe986 <memmove>
    return true;
 23fd1f2:	2001      	movs	r0, #1
    --size_;
 23fd1f4:	6863      	ldr	r3, [r4, #4]
 23fd1f6:	3b01      	subs	r3, #1
 23fd1f8:	6063      	str	r3, [r4, #4]
}
 23fd1fa:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fd1fc:	4608      	mov	r0, r1
 23fd1fe:	e7ed      	b.n	23fd1dc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fd200:	2000      	movs	r0, #0
 23fd202:	e7fa      	b.n	23fd1fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fd204 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd206:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd208:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd20c:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd20e:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd210:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fd212:	f7ff fc6b 	bl	23fcaec <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fd216:	4620      	mov	r0, r4
 23fd218:	a901      	add	r1, sp, #4
 23fd21a:	f7ff ffd8 	bl	23fd1ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fd21e:	b118      	cbz	r0, 23fd228 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fd220:	6863      	ldr	r3, [r4, #4]
 23fd222:	b90b      	cbnz	r3, 23fd228 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fd224:	f7ff fddc 	bl	23fcde0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd228:	a803      	add	r0, sp, #12
 23fd22a:	f7ff feca 	bl	23fcfc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd22e:	b004      	add	sp, #16
 23fd230:	bd10      	pop	{r4, pc}

023fd232 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fd232:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fd234:	b570      	push	{r4, r5, r6, lr}
 23fd236:	4604      	mov	r4, r0
 23fd238:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fd23c:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd240:	42ae      	cmp	r6, r5
 23fd242:	d015      	beq.n	23fd270 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fd244:	4620      	mov	r0, r4
 23fd246:	f105 0110 	add.w	r1, r5, #16
 23fd24a:	f7ff ffc0 	bl	23fd1ce <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fd24e:	6863      	ldr	r3, [r4, #4]
 23fd250:	b90b      	cbnz	r3, 23fd256 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fd252:	f7ff fdc5 	bl	23fcde0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fd256:	69e0      	ldr	r0, [r4, #28]
 23fd258:	6929      	ldr	r1, [r5, #16]
 23fd25a:	6803      	ldr	r3, [r0, #0]
 23fd25c:	68db      	ldr	r3, [r3, #12]
 23fd25e:	4798      	blx	r3
        if (h.stream) {
 23fd260:	6969      	ldr	r1, [r5, #20]
 23fd262:	b119      	cbz	r1, 23fd26c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fd264:	6a20      	ldr	r0, [r4, #32]
 23fd266:	6803      	ldr	r3, [r0, #0]
 23fd268:	68db      	ldr	r3, [r3, #12]
 23fd26a:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd26c:	3518      	adds	r5, #24
 23fd26e:	e7e7      	b.n	23fd240 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fd270:	2618      	movs	r6, #24
 23fd272:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd276:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd27a:	42ae      	cmp	r6, r5
 23fd27c:	d004      	beq.n	23fd288 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fd27e:	4628      	mov	r0, r5
 23fd280:	f7ff f8ee 	bl	23fc460 <_ZN6StringD1Ev>
 23fd284:	3518      	adds	r5, #24
 23fd286:	e7f8      	b.n	23fd27a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fd288:	2300      	movs	r3, #0
 23fd28a:	6163      	str	r3, [r4, #20]
}
 23fd28c:	bd70      	pop	{r4, r5, r6, pc}

023fd28e <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fd28e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd290:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fd292:	f7ff fda5 	bl	23fcde0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd296:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fd29a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd29c:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd29e:	f7ff fc25 	bl	23fcaec <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fd2a2:	4620      	mov	r0, r4
 23fd2a4:	f7ff ffc5 	bl	23fd232 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fd2a8:	a801      	add	r0, sp, #4
 23fd2aa:	f7ff fe8a 	bl	23fcfc2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fd2ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fd2b0:	b108      	cbz	r0, 23fd2b6 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fd2b2:	f7fe fa7b 	bl	23fb7ac <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fd2b6:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd2ba:	2618      	movs	r6, #24
 23fd2bc:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd2c0:	42ae      	cmp	r6, r5
 23fd2c2:	d004      	beq.n	23fd2ce <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fd2c4:	4628      	mov	r0, r5
 23fd2c6:	f7ff f8cb 	bl	23fc460 <_ZN6StringD1Ev>
 23fd2ca:	3518      	adds	r5, #24
 23fd2cc:	e7f8      	b.n	23fd2c0 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fd2ce:	6920      	ldr	r0, [r4, #16]
 23fd2d0:	f7fe fe40 	bl	23fbf54 <free>
 23fd2d4:	6820      	ldr	r0, [r4, #0]
 23fd2d6:	f7fe fe3d 	bl	23fbf54 <free>
}
 23fd2da:	4620      	mov	r0, r4
 23fd2dc:	b002      	add	sp, #8
 23fd2de:	bd70      	pop	{r4, r5, r6, pc}

023fd2e0 <__tcf_2>:
    static LogManager mgr;
 23fd2e0:	4801      	ldr	r0, [pc, #4]	; (23fd2e8 <__tcf_2+0x8>)
 23fd2e2:	f7ff bfd4 	b.w	23fd28e <_ZN5spark10LogManagerD1Ev>
 23fd2e6:	bf00      	nop
 23fd2e8:	1007ae80 	.word	0x1007ae80

023fd2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd2ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd2f0:	4604      	mov	r4, r0
 23fd2f2:	460d      	mov	r5, r1
 23fd2f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd2f6:	d915      	bls.n	23fd324 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd2f8:	4290      	cmp	r0, r2
 23fd2fa:	d214      	bcs.n	23fd326 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd2fc:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd300:	1a75      	subs	r5, r6, r1
 23fd302:	f1a1 0714 	sub.w	r7, r1, #20
 23fd306:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd308:	42b7      	cmp	r7, r6
 23fd30a:	d01a      	beq.n	23fd342 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd30c:	b11c      	cbz	r4, 23fd316 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd30e:	4631      	mov	r1, r6
 23fd310:	4620      	mov	r0, r4
 23fd312:	f7ff fc45 	bl	23fcba0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd316:	f106 0008 	add.w	r0, r6, #8
 23fd31a:	f7ff fdfb 	bl	23fcf14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd31e:	3e14      	subs	r6, #20
 23fd320:	3c14      	subs	r4, #20
 23fd322:	e7f1      	b.n	23fd308 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd324:	d00d      	beq.n	23fd342 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd326:	42b5      	cmp	r5, r6
 23fd328:	d00b      	beq.n	23fd342 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd32a:	b11c      	cbz	r4, 23fd334 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd32c:	4629      	mov	r1, r5
 23fd32e:	4620      	mov	r0, r4
 23fd330:	f7ff fc36 	bl	23fcba0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd334:	f105 0008 	add.w	r0, r5, #8
 23fd338:	f7ff fdec 	bl	23fcf14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd33c:	3514      	adds	r5, #20
 23fd33e:	3414      	adds	r4, #20
 23fd340:	e7f1      	b.n	23fd326 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd344 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fd344:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd348:	4604      	mov	r4, r0
 23fd34a:	460d      	mov	r5, r1
 23fd34c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd34e:	d914      	bls.n	23fd37a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fd350:	4290      	cmp	r0, r2
 23fd352:	d213      	bcs.n	23fd37c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fd354:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fd358:	1a75      	subs	r5, r6, r1
 23fd35a:	f1a1 0710 	sub.w	r7, r1, #16
 23fd35e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd360:	42b7      	cmp	r7, r6
 23fd362:	d018      	beq.n	23fd396 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fd364:	b11c      	cbz	r4, 23fd36e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fd366:	4631      	mov	r1, r6
 23fd368:	4620      	mov	r0, r4
 23fd36a:	f7ff f8f6 	bl	23fc55a <_ZN6StringC1EOS_>
                end->~T();
 23fd36e:	4630      	mov	r0, r6
 23fd370:	f7ff f876 	bl	23fc460 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fd374:	3e10      	subs	r6, #16
 23fd376:	3c10      	subs	r4, #16
 23fd378:	e7f2      	b.n	23fd360 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fd37a:	d00c      	beq.n	23fd396 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fd37c:	42b5      	cmp	r5, r6
 23fd37e:	d00a      	beq.n	23fd396 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fd380:	b11c      	cbz	r4, 23fd38a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fd382:	4629      	mov	r1, r5
 23fd384:	4620      	mov	r0, r4
 23fd386:	f7ff f8e8 	bl	23fc55a <_ZN6StringC1EOS_>
                p->~T();
 23fd38a:	4628      	mov	r0, r5
 23fd38c:	f7ff f868 	bl	23fc460 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fd390:	3510      	adds	r5, #16
 23fd392:	3410      	adds	r4, #16
 23fd394:	e7f2      	b.n	23fd37c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fd396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd398 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fd398:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fd39a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fd39c:	4605      	mov	r5, r0
        if (n > 0) {
 23fd39e:	dd11      	ble.n	23fd3c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fd3a0:	0130      	lsls	r0, r6, #4
 23fd3a2:	f7fe fdc9 	bl	23fbf38 <malloc>
            if (!d) {
 23fd3a6:	4604      	mov	r4, r0
 23fd3a8:	b158      	cbz	r0, 23fd3c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fd3aa:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd3ae:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fd3b2:	f7ff ffc7 	bl	23fd344 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fd3b6:	6828      	ldr	r0, [r5, #0]
 23fd3b8:	f7fe fdcc 	bl	23fbf54 <free>
        return true;
 23fd3bc:	2001      	movs	r0, #1
        data_ = d;
 23fd3be:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fd3c0:	60ae      	str	r6, [r5, #8]
    }
 23fd3c2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fd3c4:	2400      	movs	r4, #0
 23fd3c6:	e7f6      	b.n	23fd3b6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fd3c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd3cc:	4690      	mov	r8, r2
        capacity_(0) {
 23fd3ce:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd3d0:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd3d2:	b095      	sub	sp, #84	; 0x54
 23fd3d4:	9103      	str	r1, [sp, #12]
    return size_;
 23fd3d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd3da:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd3dc:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd3de:	e9c0 3300 	strd	r3, r3, [r0]
 23fd3e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd3e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd3ea:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd3ee:	7602      	strb	r2, [r0, #24]
 23fd3f0:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd3f2:	dc23      	bgt.n	23fd43c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd3f4:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd3f8:	2314      	movs	r3, #20
 23fd3fa:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd3fe:	42af      	cmp	r7, r5
 23fd400:	d03b      	beq.n	23fd47a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd402:	4629      	mov	r1, r5
 23fd404:	a80b      	add	r0, sp, #44	; 0x2c
 23fd406:	f7ff f8a8 	bl	23fc55a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd40a:	a90b      	add	r1, sp, #44	; 0x2c
 23fd40c:	a80f      	add	r0, sp, #60	; 0x3c
 23fd40e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd410:	f7ff f8a3 	bl	23fc55a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd414:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd418:	4299      	cmp	r1, r3
 23fd41a:	da1b      	bge.n	23fd454 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd41c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd41e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd420:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd424:	4631      	mov	r1, r6
 23fd426:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd42a:	f106 0010 	add.w	r0, r6, #16
 23fd42e:	f7ff ff89 	bl	23fd344 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd432:	b9ee      	cbnz	r6, 23fd470 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd436:	3301      	adds	r3, #1
 23fd438:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd43a:	e011      	b.n	23fd460 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd43c:	a808      	add	r0, sp, #32
 23fd43e:	f7ff ffab 	bl	23fd398 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd442:	2800      	cmp	r0, #0
 23fd444:	d1d6      	bne.n	23fd3f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd446:	a808      	add	r0, sp, #32
 23fd448:	f7ff f8da 	bl	23fc600 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd44c:	4620      	mov	r0, r4
 23fd44e:	b015      	add	sp, #84	; 0x54
 23fd450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd454:	3101      	adds	r1, #1
 23fd456:	a808      	add	r0, sp, #32
 23fd458:	f7ff ff9e 	bl	23fd398 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd45c:	2800      	cmp	r0, #0
 23fd45e:	d1dd      	bne.n	23fd41c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd460:	a80f      	add	r0, sp, #60	; 0x3c
 23fd462:	f7fe fffd 	bl	23fc460 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd466:	a80b      	add	r0, sp, #44	; 0x2c
 23fd468:	f7fe fffa 	bl	23fc460 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd46c:	3514      	adds	r5, #20
 23fd46e:	e7c6      	b.n	23fd3fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd470:	4630      	mov	r0, r6
 23fd472:	a90f      	add	r1, sp, #60	; 0x3c
 23fd474:	f7ff f871 	bl	23fc55a <_ZN6StringC1EOS_>
 23fd478:	e7dc      	b.n	23fd434 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd47a:	2600      	movs	r6, #0
 23fd47c:	f04f 0914 	mov.w	r9, #20
 23fd480:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd484:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd486:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd48a:	429e      	cmp	r6, r3
 23fd48c:	da7c      	bge.n	23fd588 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fd48e:	0133      	lsls	r3, r6, #4
 23fd490:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd492:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd494:	b90b      	cbnz	r3, 23fd49a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd496:	3601      	adds	r6, #1
 23fd498:	e7f5      	b.n	23fd486 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd49a:	2300      	movs	r3, #0
 23fd49c:	9307      	str	r3, [sp, #28]
 23fd49e:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd4a2:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd4a4:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd4a6:	a907      	add	r1, sp, #28
 23fd4a8:	a806      	add	r0, sp, #24
 23fd4aa:	f7ff faf8 	bl	23fca9e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd4ae:	4682      	mov	sl, r0
 23fd4b0:	2800      	cmp	r0, #0
 23fd4b2:	d0f0      	beq.n	23fd496 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd4b4:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd4b8:	4601      	mov	r1, r0
            bool found = false;
 23fd4ba:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd4be:	4628      	mov	r0, r5
 23fd4c0:	9a07      	ldr	r2, [sp, #28]
 23fd4c2:	f10d 0317 	add.w	r3, sp, #23
 23fd4c6:	f7ff fb7f 	bl	23fcbc8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd4ca:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd4ce:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd4d0:	2f00      	cmp	r7, #0
 23fd4d2:	d14a      	bne.n	23fd56a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd4d4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd4d8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd4dc:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd4e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd4e4:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd4e8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd4ec:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd4ee:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd4f2:	4293      	cmp	r3, r2
 23fd4f4:	db17      	blt.n	23fd526 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd4f6:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd4fa:	f1ba 0f00 	cmp.w	sl, #0
 23fd4fe:	dd30      	ble.n	23fd562 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd500:	fb09 f00a 	mul.w	r0, r9, sl
 23fd504:	f7fe fd18 	bl	23fbf38 <malloc>
            if (!d) {
 23fd508:	4683      	mov	fp, r0
 23fd50a:	b360      	cbz	r0, 23fd566 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd50c:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd510:	fb09 1202 	mla	r2, r9, r2, r1
 23fd514:	f7ff feea 	bl	23fd2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd518:	6828      	ldr	r0, [r5, #0]
 23fd51a:	f7fe fd1b 	bl	23fbf54 <free>
        data_ = d;
 23fd51e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fd522:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fd526:	682b      	ldr	r3, [r5, #0]
 23fd528:	9a01      	ldr	r2, [sp, #4]
 23fd52a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fd52e:	686a      	ldr	r2, [r5, #4]
 23fd530:	4651      	mov	r1, sl
 23fd532:	fb09 3202 	mla	r2, r9, r2, r3
 23fd536:	f10a 0014 	add.w	r0, sl, #20
 23fd53a:	f7ff fed7 	bl	23fd2ec <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fd53e:	f1ba 0f00 	cmp.w	sl, #0
 23fd542:	d003      	beq.n	23fd54c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fd544:	4650      	mov	r0, sl
 23fd546:	a90f      	add	r1, sp, #60	; 0x3c
 23fd548:	f7ff fb2a 	bl	23fcba0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fd54c:	686b      	ldr	r3, [r5, #4]
 23fd54e:	3301      	adds	r3, #1
 23fd550:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fd552:	a811      	add	r0, sp, #68	; 0x44
 23fd554:	f7ff fcde 	bl	23fcf14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd558:	b13f      	cbz	r7, 23fd56a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fd55a:	a80b      	add	r0, sp, #44	; 0x2c
 23fd55c:	f7ff fcda 	bl	23fcf14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd560:	e771      	b.n	23fd446 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fd562:	46bb      	mov	fp, r7
 23fd564:	e7d8      	b.n	23fd518 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd566:	2701      	movs	r7, #1
 23fd568:	e7f3      	b.n	23fd552 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fd56a:	9b01      	ldr	r3, [sp, #4]
 23fd56c:	682d      	ldr	r5, [r5, #0]
 23fd56e:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fd572:	9b06      	ldr	r3, [sp, #24]
 23fd574:	781b      	ldrb	r3, [r3, #0]
 23fd576:	b92b      	cbnz	r3, 23fd584 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fd578:	f8d8 3000 	ldr.w	r3, [r8]
 23fd57c:	9a02      	ldr	r2, [sp, #8]
 23fd57e:	4413      	add	r3, r2
 23fd580:	7c1b      	ldrb	r3, [r3, #16]
 23fd582:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fd584:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fd586:	e78e      	b.n	23fd4a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd588:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd58a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd58c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd58e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd590:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd592:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fd594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fd596:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd598:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd59a:	60a2      	str	r2, [r4, #8]
 23fd59c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fd59e:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd5a0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd5a2:	60e2      	str	r2, [r4, #12]
 23fd5a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fd5a6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd5a8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd5aa:	6122      	str	r2, [r4, #16]
 23fd5ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fd5ae:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fd5b0:	9b03      	ldr	r3, [sp, #12]
 23fd5b2:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fd5b4:	6162      	str	r2, [r4, #20]
 23fd5b6:	7623      	strb	r3, [r4, #24]
 23fd5b8:	e7cf      	b.n	23fd55a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fd5bc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd5be:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fd5c0:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd5c2:	4617      	mov	r7, r2
 23fd5c4:	b087      	sub	sp, #28
 23fd5c6:	460d      	mov	r5, r1
        stream_(&stream) {
 23fd5c8:	4668      	mov	r0, sp
 23fd5ca:	4619      	mov	r1, r3
 23fd5cc:	f7fd f86f 	bl	23fa6ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd5d0:	4b0b      	ldr	r3, [pc, #44]	; (23fd600 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fd5d2:	4669      	mov	r1, sp
 23fd5d4:	f846 3b04 	str.w	r3, [r6], #4
 23fd5d8:	a803      	add	r0, sp, #12
 23fd5da:	f7fd f868 	bl	23fa6ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd5de:	4639      	mov	r1, r7
 23fd5e0:	aa03      	add	r2, sp, #12
 23fd5e2:	4630      	mov	r0, r6
 23fd5e4:	f7ff fef0 	bl	23fd3c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd5e8:	a803      	add	r0, sp, #12
 23fd5ea:	f7fd f81f 	bl	23fa62c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd5ee:	4668      	mov	r0, sp
 23fd5f0:	f7fd f81c 	bl	23fa62c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd5f4:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd5f6:	4b03      	ldr	r3, [pc, #12]	; (23fd604 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd5f8:	6225      	str	r5, [r4, #32]
 23fd5fa:	6023      	str	r3, [r4, #0]
}
 23fd5fc:	b007      	add	sp, #28
 23fd5fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd600:	023fed94 	.word	0x023fed94
 23fd604:	023ffbb4 	.word	0x023ffbb4

023fd608 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd608:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd60a:	460f      	mov	r7, r1
 23fd60c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd60e:	4638      	mov	r0, r7
 23fd610:	491c      	ldr	r1, [pc, #112]	; (23fd684 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd612:	4616      	mov	r6, r2
 23fd614:	461d      	mov	r5, r3
 23fd616:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd618:	f7fc fefe 	bl	23fa418 <strcmp>
 23fd61c:	b9c0      	cbnz	r0, 23fd650 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd61e:	b1a4      	cbz	r4, 23fd64a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd620:	4629      	mov	r1, r5
 23fd622:	a801      	add	r0, sp, #4
 23fd624:	f7ff fcbe 	bl	23fcfa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd628:	2024      	movs	r0, #36	; 0x24
 23fd62a:	4917      	ldr	r1, [pc, #92]	; (23fd688 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd62c:	f001 f87a 	bl	23fe724 <_ZnwjRKSt9nothrow_t>
 23fd630:	4605      	mov	r5, r0
 23fd632:	b130      	cbz	r0, 23fd642 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fd634:	ab01      	add	r3, sp, #4
 23fd636:	4632      	mov	r2, r6
 23fd638:	4621      	mov	r1, r4
 23fd63a:	f7ff ffbf 	bl	23fd5bc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd63e:	4b13      	ldr	r3, [pc, #76]	; (23fd68c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fd640:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd642:	a801      	add	r0, sp, #4
 23fd644:	f7fc fff2 	bl	23fa62c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd648:	462c      	mov	r4, r5
}
 23fd64a:	4620      	mov	r0, r4
 23fd64c:	b005      	add	sp, #20
 23fd64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fd650:	4638      	mov	r0, r7
 23fd652:	490f      	ldr	r1, [pc, #60]	; (23fd690 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fd654:	f7fc fee0 	bl	23fa418 <strcmp>
 23fd658:	b990      	cbnz	r0, 23fd680 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fd65a:	2c00      	cmp	r4, #0
 23fd65c:	d0f5      	beq.n	23fd64a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd65e:	4629      	mov	r1, r5
 23fd660:	a801      	add	r0, sp, #4
 23fd662:	f7ff fc9f 	bl	23fcfa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd666:	2024      	movs	r0, #36	; 0x24
 23fd668:	4907      	ldr	r1, [pc, #28]	; (23fd688 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd66a:	f001 f85b 	bl	23fe724 <_ZnwjRKSt9nothrow_t>
 23fd66e:	4605      	mov	r5, r0
 23fd670:	2800      	cmp	r0, #0
 23fd672:	d0e6      	beq.n	23fd642 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fd674:	4632      	mov	r2, r6
 23fd676:	4621      	mov	r1, r4
 23fd678:	ab01      	add	r3, sp, #4
 23fd67a:	f7ff ff9f 	bl	23fd5bc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd67e:	e7e0      	b.n	23fd642 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fd680:	2400      	movs	r4, #0
 23fd682:	e7e2      	b.n	23fd64a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fd684:	023ffb34 	.word	0x023ffb34
 23fd688:	023ffd45 	.word	0x023ffd45
 23fd68c:	023ffbcc 	.word	0x023ffbcc
 23fd690:	023ffb38 	.word	0x023ffb38

023fd694 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fd694:	4b01      	ldr	r3, [pc, #4]	; (23fd69c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fd696:	4a02      	ldr	r2, [pc, #8]	; (23fd6a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fd698:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fd69a:	4770      	bx	lr
 23fd69c:	1007ae7c 	.word	0x1007ae7c
 23fd6a0:	023ffb49 	.word	0x023ffb49

023fd6a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fd6a8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fd6aa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd6ae:	4604      	mov	r4, r0
 23fd6b0:	460e      	mov	r6, r1
 23fd6b2:	4617      	mov	r7, r2
 23fd6b4:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fd6b6:	f000 fb37 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fd6ba:	4581      	cmp	r9, r0
 23fd6bc:	d04d      	beq.n	23fd75a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fd6be:	792b      	ldrb	r3, [r5, #4]
 23fd6c0:	0719      	lsls	r1, r3, #28
 23fd6c2:	d504      	bpl.n	23fd6ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fd6c4:	4620      	mov	r0, r4
 23fd6c6:	696a      	ldr	r2, [r5, #20]
 23fd6c8:	4954      	ldr	r1, [pc, #336]	; (23fd81c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fd6ca:	f7ff fae2 	bl	23fcc92 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fd6ce:	f1b8 0f00 	cmp.w	r8, #0
 23fd6d2:	d00d      	beq.n	23fd6f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fd6d4:	215b      	movs	r1, #91	; 0x5b
 23fd6d6:	4620      	mov	r0, r4
 23fd6d8:	f7ff fa56 	bl	23fcb88 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fd6dc:	4641      	mov	r1, r8
 23fd6de:	4620      	mov	r0, r4
 23fd6e0:	f7ff fa43 	bl	23fcb6a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fd6e4:	6823      	ldr	r3, [r4, #0]
 23fd6e6:	2202      	movs	r2, #2
 23fd6e8:	4620      	mov	r0, r4
 23fd6ea:	68db      	ldr	r3, [r3, #12]
 23fd6ec:	494c      	ldr	r1, [pc, #304]	; (23fd820 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fd6ee:	4798      	blx	r3
    if (attr.has_file) {
 23fd6f0:	792b      	ldrb	r3, [r5, #4]
 23fd6f2:	07da      	lsls	r2, r3, #31
 23fd6f4:	d524      	bpl.n	23fd740 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fd6f6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fd6fa:	212f      	movs	r1, #47	; 0x2f
 23fd6fc:	4640      	mov	r0, r8
 23fd6fe:	f001 f9c6 	bl	23fea8e <strrchr>
    if (s1) {
 23fd702:	b108      	cbz	r0, 23fd708 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fd704:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fd708:	4641      	mov	r1, r8
 23fd70a:	4620      	mov	r0, r4
 23fd70c:	f7ff fa2d 	bl	23fcb6a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fd710:	792b      	ldrb	r3, [r5, #4]
 23fd712:	079b      	lsls	r3, r3, #30
 23fd714:	d508      	bpl.n	23fd728 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fd716:	213a      	movs	r1, #58	; 0x3a
 23fd718:	4620      	mov	r0, r4
 23fd71a:	f7ff fa35 	bl	23fcb88 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fd71e:	4620      	mov	r0, r4
 23fd720:	68ea      	ldr	r2, [r5, #12]
 23fd722:	4940      	ldr	r1, [pc, #256]	; (23fd824 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fd724:	f7ff fab5 	bl	23fcc92 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fd728:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fd72a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fd72c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fd730:	4620      	mov	r0, r4
            write(", ", 2);
 23fd732:	f04f 0202 	mov.w	r2, #2
 23fd736:	68db      	ldr	r3, [r3, #12]
 23fd738:	bf14      	ite	ne
 23fd73a:	493b      	ldrne	r1, [pc, #236]	; (23fd828 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fd73c:	493b      	ldreq	r1, [pc, #236]	; (23fd82c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd73e:	4798      	blx	r3
    if (attr.has_function) {
 23fd740:	792b      	ldrb	r3, [r5, #4]
 23fd742:	0758      	lsls	r0, r3, #29
 23fd744:	d51d      	bpl.n	23fd782 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd746:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd748:	460b      	mov	r3, r1
 23fd74a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fd74c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd750:	b160      	cbz	r0, 23fd76c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fd752:	2820      	cmp	r0, #32
 23fd754:	d108      	bne.n	23fd768 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fd756:	4619      	mov	r1, r3
 23fd758:	e7f7      	b.n	23fd74a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fd75a:	4835      	ldr	r0, [pc, #212]	; (23fd830 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fd75c:	f000 fc27 	bl	23fdfae <_ZN5spark12NetworkClass9listeningEv>
 23fd760:	2800      	cmp	r0, #0
 23fd762:	d0ac      	beq.n	23fd6be <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fd764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fd768:	2828      	cmp	r0, #40	; 0x28
 23fd76a:	d1ee      	bne.n	23fd74a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fd76c:	6823      	ldr	r3, [r4, #0]
 23fd76e:	1a52      	subs	r2, r2, r1
 23fd770:	4620      	mov	r0, r4
 23fd772:	68db      	ldr	r3, [r3, #12]
 23fd774:	4798      	blx	r3
        write("(): ", 4);
 23fd776:	6823      	ldr	r3, [r4, #0]
 23fd778:	2204      	movs	r2, #4
 23fd77a:	4620      	mov	r0, r4
 23fd77c:	68db      	ldr	r3, [r3, #12]
 23fd77e:	492d      	ldr	r1, [pc, #180]	; (23fd834 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fd780:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fd782:	2100      	movs	r1, #0
 23fd784:	4638      	mov	r0, r7
 23fd786:	f7fe fa41 	bl	23fbc0c <log_level_name>
 23fd78a:	4601      	mov	r1, r0
    write(s);
 23fd78c:	4620      	mov	r0, r4
 23fd78e:	f7ff f9ec 	bl	23fcb6a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fd792:	6823      	ldr	r3, [r4, #0]
 23fd794:	2202      	movs	r2, #2
 23fd796:	4620      	mov	r0, r4
 23fd798:	68db      	ldr	r3, [r3, #12]
 23fd79a:	4924      	ldr	r1, [pc, #144]	; (23fd82c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fd79c:	4798      	blx	r3
    if (msg) {
 23fd79e:	b11e      	cbz	r6, 23fd7a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fd7a0:	4631      	mov	r1, r6
 23fd7a2:	4620      	mov	r0, r4
 23fd7a4:	f7ff f9e1 	bl	23fcb6a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fd7a8:	792b      	ldrb	r3, [r5, #4]
 23fd7aa:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fd7ae:	d02c      	beq.n	23fd80a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fd7b0:	6823      	ldr	r3, [r4, #0]
 23fd7b2:	4921      	ldr	r1, [pc, #132]	; (23fd838 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fd7b4:	68db      	ldr	r3, [r3, #12]
 23fd7b6:	2202      	movs	r2, #2
 23fd7b8:	4620      	mov	r0, r4
 23fd7ba:	4798      	blx	r3
        if (attr.has_code) {
 23fd7bc:	792b      	ldrb	r3, [r5, #4]
 23fd7be:	06d9      	lsls	r1, r3, #27
 23fd7c0:	d50a      	bpl.n	23fd7d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fd7c2:	6823      	ldr	r3, [r4, #0]
 23fd7c4:	2207      	movs	r2, #7
 23fd7c6:	4620      	mov	r0, r4
 23fd7c8:	491c      	ldr	r1, [pc, #112]	; (23fd83c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fd7ca:	68db      	ldr	r3, [r3, #12]
 23fd7cc:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fd7ce:	4620      	mov	r0, r4
 23fd7d0:	69aa      	ldr	r2, [r5, #24]
 23fd7d2:	491b      	ldr	r1, [pc, #108]	; (23fd840 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fd7d4:	f7ff fa5d 	bl	23fcc92 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fd7d8:	792b      	ldrb	r3, [r5, #4]
 23fd7da:	069a      	lsls	r2, r3, #26
 23fd7dc:	d511      	bpl.n	23fd802 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fd7de:	06db      	lsls	r3, r3, #27
 23fd7e0:	d505      	bpl.n	23fd7ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fd7e2:	6823      	ldr	r3, [r4, #0]
 23fd7e4:	2202      	movs	r2, #2
 23fd7e6:	4620      	mov	r0, r4
 23fd7e8:	68db      	ldr	r3, [r3, #12]
 23fd7ea:	490f      	ldr	r1, [pc, #60]	; (23fd828 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fd7ec:	4798      	blx	r3
            write("details = ", 10);
 23fd7ee:	6823      	ldr	r3, [r4, #0]
 23fd7f0:	4620      	mov	r0, r4
 23fd7f2:	4914      	ldr	r1, [pc, #80]	; (23fd844 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fd7f4:	220a      	movs	r2, #10
 23fd7f6:	68db      	ldr	r3, [r3, #12]
 23fd7f8:	4798      	blx	r3
            write(attr.details);
 23fd7fa:	4620      	mov	r0, r4
 23fd7fc:	69e9      	ldr	r1, [r5, #28]
 23fd7fe:	f7ff f9b4 	bl	23fcb6a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fd802:	215d      	movs	r1, #93	; 0x5d
 23fd804:	4620      	mov	r0, r4
 23fd806:	f7ff f9bf 	bl	23fcb88 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fd80a:	6823      	ldr	r3, [r4, #0]
 23fd80c:	4620      	mov	r0, r4
}
 23fd80e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fd812:	2202      	movs	r2, #2
 23fd814:	68db      	ldr	r3, [r3, #12]
 23fd816:	490c      	ldr	r1, [pc, #48]	; (23fd848 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fd818:	4718      	bx	r3
 23fd81a:	bf00      	nop
 23fd81c:	023ffb4d 	.word	0x023ffb4d
 23fd820:	023ffb54 	.word	0x023ffb54
 23fd824:	023ffb57 	.word	0x023ffb57
 23fd828:	023ffb5a 	.word	0x023ffb5a
 23fd82c:	023ffb5f 	.word	0x023ffb5f
 23fd830:	1007aee4 	.word	0x1007aee4
 23fd834:	023ffb5d 	.word	0x023ffb5d
 23fd838:	023ffb62 	.word	0x023ffb62
 23fd83c:	023ffb65 	.word	0x023ffb65
 23fd840:	023ffb6d 	.word	0x023ffb6d
 23fd844:	023ffb70 	.word	0x023ffb70
 23fd848:	023ffb7b 	.word	0x023ffb7b

023fd84c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd850:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fd852:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fd854:	460d      	mov	r5, r1
 23fd856:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fd858:	f000 fa66 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fd85c:	4287      	cmp	r7, r0
 23fd85e:	d007      	beq.n	23fd870 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fd860:	6a20      	ldr	r0, [r4, #32]
 23fd862:	4632      	mov	r2, r6
 23fd864:	6803      	ldr	r3, [r0, #0]
 23fd866:	4629      	mov	r1, r5
}
 23fd868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fd86c:	68db      	ldr	r3, [r3, #12]
 23fd86e:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fd870:	4803      	ldr	r0, [pc, #12]	; (23fd880 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fd872:	f000 fb9c 	bl	23fdfae <_ZN5spark12NetworkClass9listeningEv>
 23fd876:	2800      	cmp	r0, #0
 23fd878:	d0f2      	beq.n	23fd860 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fd87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fd87e:	bf00      	nop
 23fd880:	1007aee4 	.word	0x1007aee4

023fd884 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fd884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fd888:	b085      	sub	sp, #20
    return stream_;
 23fd88a:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fd88e:	4605      	mov	r5, r0
 23fd890:	460f      	mov	r7, r1
 23fd892:	4690      	mov	r8, r2
 23fd894:	461e      	mov	r6, r3
 23fd896:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fd898:	f000 fa46 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fd89c:	4581      	cmp	r9, r0
 23fd89e:	d105      	bne.n	23fd8ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fd8a0:	4849      	ldr	r0, [pc, #292]	; (23fd9c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fd8a2:	f000 fb84 	bl	23fdfae <_ZN5spark12NetworkClass9listeningEv>
 23fd8a6:	2800      	cmp	r0, #0
 23fd8a8:	f040 808a 	bne.w	23fd9c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fd8ac:	f04f 0900 	mov.w	r9, #0
 23fd8b0:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fd8b2:	4a46      	ldr	r2, [pc, #280]	; (23fd9cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fd8b4:	a801      	add	r0, sp, #4
 23fd8b6:	9201      	str	r2, [sp, #4]
 23fd8b8:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fd8ba:	f88d 9008 	strb.w	r9, [sp, #8]
 23fd8be:	f000 fd1a 	bl	23fe2f6 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fd8c2:	4649      	mov	r1, r9
 23fd8c4:	4640      	mov	r0, r8
 23fd8c6:	f7fe f9a1 	bl	23fbc0c <log_level_name>
 23fd8ca:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fd8cc:	4940      	ldr	r1, [pc, #256]	; (23fd9d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fd8ce:	2201      	movs	r2, #1
 23fd8d0:	a801      	add	r0, sp, #4
 23fd8d2:	f000 fd9f 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd8d6:	4641      	mov	r1, r8
 23fd8d8:	f7ff f939 	bl	23fcb4e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fd8dc:	b13f      	cbz	r7, 23fd8ee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fd8de:	493d      	ldr	r1, [pc, #244]	; (23fd9d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fd8e0:	2201      	movs	r2, #1
 23fd8e2:	a801      	add	r0, sp, #4
 23fd8e4:	f000 fd96 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd8e8:	4639      	mov	r1, r7
 23fd8ea:	f7ff f930 	bl	23fcb4e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fd8ee:	b13e      	cbz	r6, 23fd900 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fd8f0:	4939      	ldr	r1, [pc, #228]	; (23fd9d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fd8f2:	2201      	movs	r2, #1
 23fd8f4:	a801      	add	r0, sp, #4
 23fd8f6:	f000 fd8d 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd8fa:	4631      	mov	r1, r6
 23fd8fc:	f7ff f927 	bl	23fcb4e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fd900:	7923      	ldrb	r3, [r4, #4]
 23fd902:	07df      	lsls	r7, r3, #31
 23fd904:	d50e      	bpl.n	23fd924 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fd906:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fd908:	212f      	movs	r1, #47	; 0x2f
 23fd90a:	4630      	mov	r0, r6
 23fd90c:	f001 f8bf 	bl	23fea8e <strrchr>
    if (s1) {
 23fd910:	b100      	cbz	r0, 23fd914 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fd912:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fd914:	4931      	ldr	r1, [pc, #196]	; (23fd9dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fd916:	2201      	movs	r2, #1
 23fd918:	a801      	add	r0, sp, #4
 23fd91a:	f000 fd7b 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd91e:	4631      	mov	r1, r6
 23fd920:	f7ff f915 	bl	23fcb4e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fd924:	7923      	ldrb	r3, [r4, #4]
 23fd926:	079e      	lsls	r6, r3, #30
 23fd928:	d507      	bpl.n	23fd93a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fd92a:	492d      	ldr	r1, [pc, #180]	; (23fd9e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fd92c:	2202      	movs	r2, #2
 23fd92e:	a801      	add	r0, sp, #4
 23fd930:	f000 fd70 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd934:	68e1      	ldr	r1, [r4, #12]
 23fd936:	f000 fceb 	bl	23fe310 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd93a:	7923      	ldrb	r3, [r4, #4]
 23fd93c:	0758      	lsls	r0, r3, #29
 23fd93e:	d514      	bpl.n	23fd96a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd940:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd942:	4633      	mov	r3, r6
 23fd944:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd946:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd94a:	b12a      	cbz	r2, 23fd958 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd94c:	2a20      	cmp	r2, #32
 23fd94e:	d101      	bne.n	23fd954 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd950:	461e      	mov	r6, r3
 23fd952:	e7f7      	b.n	23fd944 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd954:	2a28      	cmp	r2, #40	; 0x28
 23fd956:	d1f5      	bne.n	23fd944 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd958:	2202      	movs	r2, #2
 23fd95a:	4922      	ldr	r1, [pc, #136]	; (23fd9e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd95c:	a801      	add	r0, sp, #4
 23fd95e:	f000 fd59 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd962:	4631      	mov	r1, r6
 23fd964:	1bba      	subs	r2, r7, r6
 23fd966:	f000 fd65 	bl	23fe434 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd96a:	7923      	ldrb	r3, [r4, #4]
 23fd96c:	0719      	lsls	r1, r3, #28
 23fd96e:	d507      	bpl.n	23fd980 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd970:	491d      	ldr	r1, [pc, #116]	; (23fd9e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd972:	2201      	movs	r2, #1
 23fd974:	a801      	add	r0, sp, #4
 23fd976:	f000 fd4d 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd97a:	6961      	ldr	r1, [r4, #20]
 23fd97c:	f000 fcda 	bl	23fe334 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd980:	7923      	ldrb	r3, [r4, #4]
 23fd982:	06da      	lsls	r2, r3, #27
 23fd984:	d508      	bpl.n	23fd998 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd986:	2204      	movs	r2, #4
 23fd988:	4918      	ldr	r1, [pc, #96]	; (23fd9ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd98a:	eb0d 0002 	add.w	r0, sp, r2
 23fd98e:	f000 fd41 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd992:	69a1      	ldr	r1, [r4, #24]
 23fd994:	f000 fcbc 	bl	23fe310 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd998:	7923      	ldrb	r3, [r4, #4]
 23fd99a:	069b      	lsls	r3, r3, #26
 23fd99c:	d507      	bpl.n	23fd9ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd99e:	4914      	ldr	r1, [pc, #80]	; (23fd9f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd9a0:	2206      	movs	r2, #6
 23fd9a2:	a801      	add	r0, sp, #4
 23fd9a4:	f000 fd36 	bl	23fe414 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd9a8:	69e1      	ldr	r1, [r4, #28]
 23fd9aa:	f7ff f8d0 	bl	23fcb4e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd9ae:	a801      	add	r0, sp, #4
 23fd9b0:	f000 fc8b 	bl	23fe2ca <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd9b4:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd9b6:	2202      	movs	r2, #2
 23fd9b8:	6803      	ldr	r3, [r0, #0]
 23fd9ba:	490e      	ldr	r1, [pc, #56]	; (23fd9f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd9bc:	68db      	ldr	r3, [r3, #12]
 23fd9be:	4798      	blx	r3
}
 23fd9c0:	b005      	add	sp, #20
 23fd9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd9c6:	bf00      	nop
 23fd9c8:	1007aee4 	.word	0x1007aee4
 23fd9cc:	023ffb9c 	.word	0x023ffb9c
 23fd9d0:	023ffb2a 	.word	0x023ffb2a
 23fd9d4:	023ffb7e 	.word	0x023ffb7e
 23fd9d8:	023ffecb 	.word	0x023ffecb
 23fd9dc:	023fed7e 	.word	0x023fed7e
 23fd9e0:	023ffb80 	.word	0x023ffb80
 23fd9e4:	023ffb83 	.word	0x023ffb83
 23fd9e8:	023ffb86 	.word	0x023ffb86
 23fd9ec:	023ffb88 	.word	0x023ffb88
 23fd9f0:	023ffb8d 	.word	0x023ffb8d
 23fd9f4:	023ffb7b 	.word	0x023ffb7b

023fd9f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fd9f8:	4b02      	ldr	r3, [pc, #8]	; (23fda04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fd9fa:	681a      	ldr	r2, [r3, #0]
 23fd9fc:	4b02      	ldr	r3, [pc, #8]	; (23fda08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fd9fe:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fda00:	4770      	bx	lr
 23fda02:	bf00      	nop
 23fda04:	1007ad78 	.word	0x1007ad78
 23fda08:	1007aea8 	.word	0x1007aea8

023fda0c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fda0c:	2100      	movs	r1, #0
 23fda0e:	f7fe b927 	b.w	23fbc60 <system_delay_ms>
	...

023fda14 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fda14:	2200      	movs	r2, #0
 23fda16:	4b01      	ldr	r3, [pc, #4]	; (23fda1c <_GLOBAL__sub_I_RGB+0x8>)
 23fda18:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fda1a:	4770      	bx	lr
 23fda1c:	1007aeac 	.word	0x1007aeac

023fda20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fda20:	4b01      	ldr	r3, [pc, #4]	; (23fda28 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fda22:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fda24:	4770      	bx	lr
 23fda26:	bf00      	nop
 23fda28:	1007ad7c 	.word	0x1007ad7c

023fda2c <serialEventRun>:
{
 23fda2c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fda2e:	4b0f      	ldr	r3, [pc, #60]	; (23fda6c <serialEventRun+0x40>)
 23fda30:	b143      	cbz	r3, 23fda44 <serialEventRun+0x18>
 23fda32:	f000 f979 	bl	23fdd28 <_Z16_fetch_usbserialv>
 23fda36:	6803      	ldr	r3, [r0, #0]
 23fda38:	691b      	ldr	r3, [r3, #16]
 23fda3a:	4798      	blx	r3
 23fda3c:	2800      	cmp	r0, #0
 23fda3e:	dd01      	ble.n	23fda44 <serialEventRun+0x18>
        serialEvent();
 23fda40:	e000      	b.n	23fda44 <serialEventRun+0x18>
 23fda42:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fda44:	4b0a      	ldr	r3, [pc, #40]	; (23fda70 <serialEventRun+0x44>)
 23fda46:	b143      	cbz	r3, 23fda5a <serialEventRun+0x2e>
 23fda48:	f000 fd9c 	bl	23fe584 <_Z22__fetch_global_Serial1v>
 23fda4c:	6803      	ldr	r3, [r0, #0]
 23fda4e:	691b      	ldr	r3, [r3, #16]
 23fda50:	4798      	blx	r3
 23fda52:	2800      	cmp	r0, #0
 23fda54:	dd01      	ble.n	23fda5a <serialEventRun+0x2e>
        serialEvent1();
 23fda56:	e000      	b.n	23fda5a <serialEventRun+0x2e>
 23fda58:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fda5a:	4b06      	ldr	r3, [pc, #24]	; (23fda74 <serialEventRun+0x48>)
 23fda5c:	b10b      	cbz	r3, 23fda62 <serialEventRun+0x36>
 23fda5e:	f000 fdd7 	bl	23fe610 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fda62:	4b05      	ldr	r3, [pc, #20]	; (23fda78 <serialEventRun+0x4c>)
 23fda64:	b10b      	cbz	r3, 23fda6a <serialEventRun+0x3e>
 23fda66:	f000 fe09 	bl	23fe67c <_Z15serialEventRun3v>
}
 23fda6a:	bd08      	pop	{r3, pc}
	...

023fda7c <_post_loop>:
{
 23fda7c:	b508      	push	{r3, lr}
	serialEventRun();
 23fda7e:	f7ff ffd5 	bl	23fda2c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fda82:	f7fd fe3f 	bl	23fb704 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fda86:	4b01      	ldr	r3, [pc, #4]	; (23fda8c <_post_loop+0x10>)
 23fda88:	6018      	str	r0, [r3, #0]
}
 23fda8a:	bd08      	pop	{r3, pc}
 23fda8c:	1007af34 	.word	0x1007af34

023fda90 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fda90:	4805      	ldr	r0, [pc, #20]	; (23fdaa8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fda92:	4a06      	ldr	r2, [pc, #24]	; (23fdaac <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fda94:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fda96:	1a12      	subs	r2, r2, r0
 23fda98:	4905      	ldr	r1, [pc, #20]	; (23fdab0 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fda9a:	f000 ff67 	bl	23fe96c <memcpy>
    __backup_sram_signature = signature;
 23fda9e:	4b05      	ldr	r3, [pc, #20]	; (23fdab4 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fdaa0:	4a05      	ldr	r2, [pc, #20]	; (23fdab8 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fdaa2:	601a      	str	r2, [r3, #0]
}
 23fdaa4:	bd08      	pop	{r3, pc}
 23fdaa6:	bf00      	nop
 23fdaa8:	1007b400 	.word	0x1007b400
 23fdaac:	1007b404 	.word	0x1007b404
 23fdab0:	085ffd04 	.word	0x085ffd04
 23fdab4:	1007b400 	.word	0x1007b400
 23fdab8:	9a271c1e 	.word	0x9a271c1e

023fdabc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdabc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fdabe:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdac0:	461a      	mov	r2, r3
 23fdac2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdac6:	9300      	str	r3, [sp, #0]
 23fdac8:	f7fe f8e6 	bl	23fbc98 <system_ctrl_set_result>
}
 23fdacc:	b003      	add	sp, #12
 23fdace:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fdad4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fdad4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fdad6:	8843      	ldrh	r3, [r0, #2]
 23fdad8:	2b0a      	cmp	r3, #10
 23fdada:	d008      	beq.n	23fdaee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fdadc:	2b50      	cmp	r3, #80	; 0x50
 23fdade:	d10b      	bne.n	23fdaf8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fdae0:	4b09      	ldr	r3, [pc, #36]	; (23fdb08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fdae2:	681b      	ldr	r3, [r3, #0]
 23fdae4:	b14b      	cbz	r3, 23fdafa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fdae6:	b003      	add	sp, #12
 23fdae8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fdaec:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fdaee:	f7ff ffe5 	bl	23fdabc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fdaf2:	b003      	add	sp, #12
 23fdaf4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fdaf8:	2300      	movs	r3, #0
 23fdafa:	461a      	mov	r2, r3
 23fdafc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fdb00:	9300      	str	r3, [sp, #0]
 23fdb02:	f7fe f8c9 	bl	23fbc98 <system_ctrl_set_result>
}
 23fdb06:	e7f4      	b.n	23fdaf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fdb08:	1007aec0 	.word	0x1007aec0

023fdb0c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdb0c:	2100      	movs	r1, #0
{
 23fdb0e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fdb10:	4811      	ldr	r0, [pc, #68]	; (23fdb58 <module_user_init_hook+0x4c>)
 23fdb12:	f7fe fa65 	bl	23fbfe0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fdb16:	4b11      	ldr	r3, [pc, #68]	; (23fdb5c <module_user_init_hook+0x50>)
 23fdb18:	681a      	ldr	r2, [r3, #0]
 23fdb1a:	4b11      	ldr	r3, [pc, #68]	; (23fdb60 <module_user_init_hook+0x54>)
 23fdb1c:	429a      	cmp	r2, r3
 23fdb1e:	bf0c      	ite	eq
 23fdb20:	2201      	moveq	r2, #1
 23fdb22:	2200      	movne	r2, #0
 23fdb24:	4b0f      	ldr	r3, [pc, #60]	; (23fdb64 <module_user_init_hook+0x58>)
 23fdb26:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fdb28:	d001      	beq.n	23fdb2e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fdb2a:	f7ff ffb1 	bl	23fda90 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fdb2e:	f7fd fdcd 	bl	23fb6cc <HAL_RNG_GetRandomNumber>
 23fdb32:	4604      	mov	r4, r0
    srand(seed);
 23fdb34:	f000 ff4a 	bl	23fe9cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fdb38:	4b0b      	ldr	r3, [pc, #44]	; (23fdb68 <module_user_init_hook+0x5c>)
 23fdb3a:	b113      	cbz	r3, 23fdb42 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fdb3c:	4620      	mov	r0, r4
 23fdb3e:	e000      	b.n	23fdb42 <module_user_init_hook+0x36>
 23fdb40:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fdb42:	2100      	movs	r1, #0
 23fdb44:	4808      	ldr	r0, [pc, #32]	; (23fdb68 <module_user_init_hook+0x5c>)
 23fdb46:	f7fe f96b 	bl	23fbe20 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fdb4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fdb4e:	2100      	movs	r1, #0
 23fdb50:	4806      	ldr	r0, [pc, #24]	; (23fdb6c <module_user_init_hook+0x60>)
 23fdb52:	f7fe b893 	b.w	23fbc7c <system_ctrl_set_app_request_handler>
 23fdb56:	bf00      	nop
 23fdb58:	023fda21 	.word	0x023fda21
 23fdb5c:	1007b400 	.word	0x1007b400
 23fdb60:	9a271c1e 	.word	0x9a271c1e
 23fdb64:	1007aebc 	.word	0x1007aebc
 23fdb68:	00000000 	.word	0x00000000
 23fdb6c:	023fdad5 	.word	0x023fdad5

023fdb70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fdb70:	4770      	bx	lr

023fdb72 <_ZN9IPAddressD0Ev>:
 23fdb72:	b510      	push	{r4, lr}
 23fdb74:	4604      	mov	r4, r0
 23fdb76:	2118      	movs	r1, #24
 23fdb78:	f7fc fc83 	bl	23fa482 <_ZdlPvj>
 23fdb7c:	4620      	mov	r0, r4
 23fdb7e:	bd10      	pop	{r4, pc}

023fdb80 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fdb80:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fdb82:	7d03      	ldrb	r3, [r0, #20]
{
 23fdb84:	460e      	mov	r6, r1
	if (address.v==6) {
 23fdb86:	2b06      	cmp	r3, #6
 23fdb88:	f04f 0400 	mov.w	r4, #0
{
 23fdb8c:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdb8e:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fdb92:	d012      	beq.n	23fdbba <_ZNK9IPAddress7printToER5Print+0x3a>
 23fdb94:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fdb98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fdb9c:	220a      	movs	r2, #10
 23fdb9e:	4630      	mov	r0, r6
 23fdba0:	f7fe fd69 	bl	23fc676 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fdba4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fdba6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fdba8:	d019      	beq.n	23fdbde <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fdbaa:	2c00      	cmp	r4, #0
 23fdbac:	d0f4      	beq.n	23fdb98 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fdbae:	212e      	movs	r1, #46	; 0x2e
 23fdbb0:	4630      	mov	r0, r6
 23fdbb2:	f7fe fd5d 	bl	23fc670 <_ZN5Print5printEc>
 23fdbb6:	4404      	add	r4, r0
 23fdbb8:	e7ee      	b.n	23fdb98 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdbba:	232f      	movs	r3, #47	; 0x2f
 23fdbbc:	466a      	mov	r2, sp
 23fdbbe:	4639      	mov	r1, r7
 23fdbc0:	200a      	movs	r0, #10
		buf[0] = 0;
 23fdbc2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fdbc6:	f7fd fe1b 	bl	23fb800 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fdbca:	4668      	mov	r0, sp
 23fdbcc:	f7fc fc2e 	bl	23fa42c <strlen>
 23fdbd0:	6833      	ldr	r3, [r6, #0]
 23fdbd2:	4602      	mov	r2, r0
 23fdbd4:	4669      	mov	r1, sp
 23fdbd6:	4630      	mov	r0, r6
 23fdbd8:	68db      	ldr	r3, [r3, #12]
 23fdbda:	4798      	blx	r3
 23fdbdc:	4604      	mov	r4, r0
    }
    return n;
}
 23fdbde:	4620      	mov	r0, r4
 23fdbe0:	b00d      	add	sp, #52	; 0x34
 23fdbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fdbe4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fdbe4:	b510      	push	{r4, lr}
 23fdbe6:	4604      	mov	r4, r0
 23fdbe8:	4b04      	ldr	r3, [pc, #16]	; (23fdbfc <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fdbea:	2211      	movs	r2, #17
 23fdbec:	2100      	movs	r1, #0
 23fdbee:	f840 3b04 	str.w	r3, [r0], #4
 23fdbf2:	f000 fee2 	bl	23fe9ba <memset>
}
 23fdbf6:	4620      	mov	r0, r4
 23fdbf8:	bd10      	pop	{r4, pc}
 23fdbfa:	bf00      	nop
 23fdbfc:	023ffc30 	.word	0x023ffc30

023fdc00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fdc00:	4603      	mov	r3, r0
 23fdc02:	4a07      	ldr	r2, [pc, #28]	; (23fdc20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fdc04:	b510      	push	{r4, lr}
 23fdc06:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fdc0a:	f101 0210 	add.w	r2, r1, #16
 23fdc0e:	f851 4b04 	ldr.w	r4, [r1], #4
 23fdc12:	4291      	cmp	r1, r2
 23fdc14:	f843 4b04 	str.w	r4, [r3], #4
 23fdc18:	d1f9      	bne.n	23fdc0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fdc1a:	780a      	ldrb	r2, [r1, #0]
 23fdc1c:	701a      	strb	r2, [r3, #0]
}
 23fdc1e:	bd10      	pop	{r4, pc}
 23fdc20:	023ffc30 	.word	0x023ffc30

023fdc24 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fdc24:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fdc26:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fdc2a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fdc2e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fdc32:	2304      	movs	r3, #4
 23fdc34:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fdc38:	6041      	str	r1, [r0, #4]
 23fdc3a:	7503      	strb	r3, [r0, #20]
}
 23fdc3c:	bd10      	pop	{r4, pc}
	...

023fdc40 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fdc40:	b507      	push	{r0, r1, r2, lr}
 23fdc42:	4b06      	ldr	r3, [pc, #24]	; (23fdc5c <_ZN9IPAddressC1EPKh+0x1c>)
 23fdc44:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fdc46:	78cb      	ldrb	r3, [r1, #3]
 23fdc48:	9300      	str	r3, [sp, #0]
 23fdc4a:	788b      	ldrb	r3, [r1, #2]
 23fdc4c:	784a      	ldrb	r2, [r1, #1]
 23fdc4e:	7809      	ldrb	r1, [r1, #0]
 23fdc50:	f7ff ffe8 	bl	23fdc24 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fdc54:	b003      	add	sp, #12
 23fdc56:	f85d fb04 	ldr.w	pc, [sp], #4
 23fdc5a:	bf00      	nop
 23fdc5c:	023ffc30 	.word	0x023ffc30

023fdc60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdc60:	7441      	strb	r1, [r0, #17]
}
 23fdc62:	4770      	bx	lr

023fdc64 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdc64:	4770      	bx	lr

023fdc66 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fdc66:	4770      	bx	lr

023fdc68 <_ZN9USBSerial4readEv>:
{
 23fdc68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fdc6a:	2100      	movs	r1, #0
 23fdc6c:	7c00      	ldrb	r0, [r0, #16]
 23fdc6e:	f7fd ff87 	bl	23fbb80 <HAL_USB_USART_Receive_Data>
}
 23fdc72:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdc76:	bd08      	pop	{r3, pc}

023fdc78 <_ZN9USBSerial4peekEv>:
{
 23fdc78:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fdc7a:	2101      	movs	r1, #1
 23fdc7c:	7c00      	ldrb	r0, [r0, #16]
 23fdc7e:	f7fd ff7f 	bl	23fbb80 <HAL_USB_USART_Receive_Data>
}
 23fdc82:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdc86:	bd08      	pop	{r3, pc}

023fdc88 <_ZN9USBSerial17availableForWriteEv>:
{
 23fdc88:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fdc8a:	7c00      	ldrb	r0, [r0, #16]
 23fdc8c:	f7fd ff6a 	bl	23fbb64 <HAL_USB_USART_Available_Data_For_Write>
}
 23fdc90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdc94:	bd08      	pop	{r3, pc}

023fdc96 <_ZN9USBSerial9availableEv>:
{
 23fdc96:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fdc98:	7c00      	ldrb	r0, [r0, #16]
 23fdc9a:	f7fd ff55 	bl	23fbb48 <HAL_USB_USART_Available_Data>
}
 23fdc9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdca2:	bd08      	pop	{r3, pc}

023fdca4 <_ZN9USBSerial5writeEh>:
{
 23fdca4:	b513      	push	{r0, r1, r4, lr}
 23fdca6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdca8:	7c00      	ldrb	r0, [r0, #16]
{
 23fdcaa:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fdcac:	f7fd ff5a 	bl	23fbb64 <HAL_USB_USART_Available_Data_For_Write>
 23fdcb0:	2800      	cmp	r0, #0
 23fdcb2:	9901      	ldr	r1, [sp, #4]
 23fdcb4:	dc01      	bgt.n	23fdcba <_ZN9USBSerial5writeEh+0x16>
 23fdcb6:	7c60      	ldrb	r0, [r4, #17]
 23fdcb8:	b120      	cbz	r0, 23fdcc4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fdcba:	7c20      	ldrb	r0, [r4, #16]
 23fdcbc:	f7fd ff6e 	bl	23fbb9c <HAL_USB_USART_Send_Data>
 23fdcc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fdcc4:	b002      	add	sp, #8
 23fdcc6:	bd10      	pop	{r4, pc}

023fdcc8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fdcc8:	7c00      	ldrb	r0, [r0, #16]
 23fdcca:	f7fd bf75 	b.w	23fbbb8 <HAL_USB_USART_Flush_Data>

023fdcce <_ZN9USBSerialD0Ev>:
 23fdcce:	b510      	push	{r4, lr}
 23fdcd0:	4604      	mov	r4, r0
 23fdcd2:	2114      	movs	r1, #20
 23fdcd4:	f7fc fbd5 	bl	23fa482 <_ZdlPvj>
 23fdcd8:	4620      	mov	r0, r4
 23fdcda:	bd10      	pop	{r4, pc}

023fdcdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdcdc:	b510      	push	{r4, lr}
 23fdcde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdce2:	4604      	mov	r4, r0
 23fdce4:	4608      	mov	r0, r1
 23fdce6:	2100      	movs	r1, #0
 23fdce8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fdcec:	4b04      	ldr	r3, [pc, #16]	; (23fdd00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fdcee:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fdcf0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdcf2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fdcf4:	4611      	mov	r1, r2
  _blocking = true;
 23fdcf6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fdcf8:	f7fd fefc 	bl	23fbaf4 <HAL_USB_USART_Init>
}
 23fdcfc:	4620      	mov	r0, r4
 23fdcfe:	bd10      	pop	{r4, pc}
 23fdd00:	023ffc44 	.word	0x023ffc44

023fdd04 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fdd04:	2200      	movs	r2, #0
 23fdd06:	7c00      	ldrb	r0, [r0, #16]
 23fdd08:	f7fd bf02 	b.w	23fbb10 <HAL_USB_USART_Begin>

023fdd0c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fdd0c:	7c00      	ldrb	r0, [r0, #16]
 23fdd0e:	f7fd bf0d 	b.w	23fbb2c <HAL_USB_USART_End>

023fdd12 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fdd12:	7c00      	ldrb	r0, [r0, #16]
 23fdd14:	f7fd bf5e 	b.w	23fbbd4 <HAL_USB_USART_Is_Connected>

023fdd18 <_Z19acquireSerialBufferv>:
{
 23fdd18:	b510      	push	{r4, lr}
 23fdd1a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fdd1c:	2214      	movs	r2, #20
 23fdd1e:	2100      	movs	r1, #0
 23fdd20:	f000 fe4b 	bl	23fe9ba <memset>
}
 23fdd24:	4620      	mov	r0, r4
 23fdd26:	bd10      	pop	{r4, pc}

023fdd28 <_Z16_fetch_usbserialv>:
{
 23fdd28:	b510      	push	{r4, lr}
 23fdd2a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fdd2c:	a803      	add	r0, sp, #12
 23fdd2e:	f7ff fff3 	bl	23fdd18 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fdd32:	4c0c      	ldr	r4, [pc, #48]	; (23fdd64 <_Z16_fetch_usbserialv+0x3c>)
 23fdd34:	e8d4 1f8f 	ldab	r1, [r4]
 23fdd38:	f011 0101 	ands.w	r1, r1, #1
 23fdd3c:	d10f      	bne.n	23fdd5e <_Z16_fetch_usbserialv+0x36>
 23fdd3e:	4620      	mov	r0, r4
 23fdd40:	9101      	str	r1, [sp, #4]
 23fdd42:	f7fc fbad 	bl	23fa4a0 <__cxa_guard_acquire>
 23fdd46:	9901      	ldr	r1, [sp, #4]
 23fdd48:	b148      	cbz	r0, 23fdd5e <_Z16_fetch_usbserialv+0x36>
 23fdd4a:	aa03      	add	r2, sp, #12
 23fdd4c:	4806      	ldr	r0, [pc, #24]	; (23fdd68 <_Z16_fetch_usbserialv+0x40>)
 23fdd4e:	f7ff ffc5 	bl	23fdcdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fdd52:	4620      	mov	r0, r4
 23fdd54:	f7fc fba9 	bl	23fa4aa <__cxa_guard_release>
 23fdd58:	4804      	ldr	r0, [pc, #16]	; (23fdd6c <_Z16_fetch_usbserialv+0x44>)
 23fdd5a:	f000 fdf9 	bl	23fe950 <atexit>
	return _usbserial;
}
 23fdd5e:	4802      	ldr	r0, [pc, #8]	; (23fdd68 <_Z16_fetch_usbserialv+0x40>)
 23fdd60:	b008      	add	sp, #32
 23fdd62:	bd10      	pop	{r4, pc}
 23fdd64:	1007aec4 	.word	0x1007aec4
 23fdd68:	1007aec8 	.word	0x1007aec8
 23fdd6c:	023fdc65 	.word	0x023fdc65

023fdd70 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fdd70:	4770      	bx	lr

023fdd72 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fdd72:	7441      	strb	r1, [r0, #17]
}
 23fdd74:	4770      	bx	lr

023fdd76 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fdd76:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fdd78:	7c00      	ldrb	r0, [r0, #16]
 23fdd7a:	f7fd fdb1 	bl	23fb8e0 <hal_usart_available_data_for_write>
}
 23fdd7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdd82:	bd08      	pop	{r3, pc}

023fdd84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fdd84:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fdd86:	7c00      	ldrb	r0, [r0, #16]
 23fdd88:	f7fd fd64 	bl	23fb854 <hal_usart_available>
}
 23fdd8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fdd90:	bd08      	pop	{r3, pc}

023fdd92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fdd92:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fdd94:	7c00      	ldrb	r0, [r0, #16]
 23fdd96:	f7fd fd79 	bl	23fb88c <hal_usart_peek>
}
 23fdd9a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fdd9e:	bd08      	pop	{r3, pc}

023fdda0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fdda0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fdda2:	7c00      	ldrb	r0, [r0, #16]
 23fdda4:	f7fd fd64 	bl	23fb870 <hal_usart_read>
}
 23fdda8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fddac:	bd08      	pop	{r3, pc}

023fddae <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fddae:	7c00      	ldrb	r0, [r0, #16]
 23fddb0:	f7fd bd7a 	b.w	23fb8a8 <hal_usart_flush>

023fddb4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fddb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fddb6:	7c45      	ldrb	r5, [r0, #17]
{
 23fddb8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fddba:	b12d      	cbz	r5, 23fddc8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fddbc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fddbe:	b003      	add	sp, #12
 23fddc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fddc4:	f7fd bd38 	b.w	23fb838 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fddc8:	7c00      	ldrb	r0, [r0, #16]
 23fddca:	9101      	str	r1, [sp, #4]
 23fddcc:	f7fd fd88 	bl	23fb8e0 <hal_usart_available_data_for_write>
 23fddd0:	2800      	cmp	r0, #0
 23fddd2:	9901      	ldr	r1, [sp, #4]
 23fddd4:	dcf2      	bgt.n	23fddbc <_ZN11USARTSerial5writeEh+0x8>
}
 23fddd6:	4628      	mov	r0, r5
 23fddd8:	b003      	add	sp, #12
 23fddda:	bd30      	pop	{r4, r5, pc}

023fdddc <_ZN11USARTSerialD0Ev>:
 23fdddc:	b510      	push	{r4, lr}
 23fddde:	4604      	mov	r4, r0
 23fdde0:	2114      	movs	r1, #20
 23fdde2:	f7fc fb4e 	bl	23fa482 <_ZdlPvj>
 23fdde6:	4620      	mov	r0, r4
 23fdde8:	bd10      	pop	{r4, pc}
	...

023fddec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fddec:	b510      	push	{r4, lr}
 23fddee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fddf2:	4604      	mov	r4, r0
 23fddf4:	4608      	mov	r0, r1
 23fddf6:	4611      	mov	r1, r2
 23fddf8:	2200      	movs	r2, #0
 23fddfa:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fddfe:	4b04      	ldr	r3, [pc, #16]	; (23fde10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fde00:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fde02:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fde04:	2301      	movs	r3, #1
 23fde06:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fde08:	f7fd fd86 	bl	23fb918 <hal_usart_init_ex>
}
 23fde0c:	4620      	mov	r0, r4
 23fde0e:	bd10      	pop	{r4, pc}
 23fde10:	023ffc74 	.word	0x023ffc74

023fde14 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fde14:	2300      	movs	r3, #0
 23fde16:	7c00      	ldrb	r0, [r0, #16]
 23fde18:	f7fd bd70 	b.w	23fb8fc <hal_usart_begin_config>

023fde1c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fde1c:	2200      	movs	r2, #0
 23fde1e:	f7ff bff9 	b.w	23fde14 <_ZN11USARTSerial5beginEmm>

023fde22 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fde22:	7c00      	ldrb	r0, [r0, #16]
 23fde24:	f7fd bcfa 	b.w	23fb81c <hal_usart_end>

023fde28 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fde28:	7c00      	ldrb	r0, [r0, #16]
 23fde2a:	f7fd bd4b 	b.w	23fb8c4 <hal_usart_is_enabled>

023fde2e <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fde2e:	4770      	bx	lr

023fde30 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fde30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fde32:	4606      	mov	r6, r0
 23fde34:	4615      	mov	r5, r2
 23fde36:	460c      	mov	r4, r1
 23fde38:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fde3a:	42bc      	cmp	r4, r7
 23fde3c:	d006      	beq.n	23fde4c <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fde3e:	6833      	ldr	r3, [r6, #0]
 23fde40:	4630      	mov	r0, r6
 23fde42:	689b      	ldr	r3, [r3, #8]
 23fde44:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fde48:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fde4a:	e7f6      	b.n	23fde3a <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fde4c:	4628      	mov	r0, r5
 23fde4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fde50 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fde50:	2200      	movs	r2, #0
 23fde52:	7c00      	ldrb	r0, [r0, #16]
 23fde54:	f7fd bd6e 	b.w	23fb934 <hal_i2c_write>

023fde58 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fde58:	2100      	movs	r1, #0
 23fde5a:	7c00      	ldrb	r0, [r0, #16]
 23fde5c:	f7fd bd78 	b.w	23fb950 <hal_i2c_available>

023fde60 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fde60:	2100      	movs	r1, #0
 23fde62:	7c00      	ldrb	r0, [r0, #16]
 23fde64:	f7fd bd82 	b.w	23fb96c <hal_i2c_read>

023fde68 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fde68:	2100      	movs	r1, #0
 23fde6a:	7c00      	ldrb	r0, [r0, #16]
 23fde6c:	f7fd bd8c 	b.w	23fb988 <hal_i2c_peek>

023fde70 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fde70:	2100      	movs	r1, #0
 23fde72:	7c00      	ldrb	r0, [r0, #16]
 23fde74:	f7fd bd96 	b.w	23fb9a4 <hal_i2c_flush>

023fde78 <_ZN7TwoWireD0Ev>:
 23fde78:	b510      	push	{r4, lr}
 23fde7a:	4604      	mov	r4, r0
 23fde7c:	2114      	movs	r1, #20
 23fde7e:	f7fc fb00 	bl	23fa482 <_ZdlPvj>
 23fde82:	4620      	mov	r0, r4
 23fde84:	bd10      	pop	{r4, pc}
	...

023fde88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fde88:	b538      	push	{r3, r4, r5, lr}
 23fde8a:	4604      	mov	r4, r0
 23fde8c:	4615      	mov	r5, r2
 23fde8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fde92:	2200      	movs	r2, #0
 23fde94:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fde98:	4b09      	ldr	r3, [pc, #36]	; (23fdec0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fde9a:	4608      	mov	r0, r1
  _i2c = i2c;
 23fde9c:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fde9e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fdea0:	4629      	mov	r1, r5
 23fdea2:	f7fd fd9b 	bl	23fb9dc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fdea6:	30bf      	adds	r0, #191	; 0xbf
 23fdea8:	d108      	bne.n	23fdebc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fdeaa:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fdeac:	07db      	lsls	r3, r3, #31
 23fdeae:	d505      	bpl.n	23fdebc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fdeb0:	6868      	ldr	r0, [r5, #4]
 23fdeb2:	f7fe f84f 	bl	23fbf54 <free>
    free(conf.tx_buffer);
 23fdeb6:	68e8      	ldr	r0, [r5, #12]
 23fdeb8:	f7fe f84c 	bl	23fbf54 <free>
}
 23fdebc:	4620      	mov	r0, r4
 23fdebe:	bd38      	pop	{r3, r4, r5, pc}
 23fdec0:	023ffca4 	.word	0x023ffca4

023fdec4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fdec4:	2200      	movs	r2, #0
 23fdec6:	6840      	ldr	r0, [r0, #4]
 23fdec8:	4611      	mov	r1, r2
 23fdeca:	f7fd bf1d 	b.w	23fbd08 <network_ready>

023fdece <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fdece:	2200      	movs	r2, #0
 23fded0:	6840      	ldr	r0, [r0, #4]
 23fded2:	4611      	mov	r1, r2
 23fded4:	f7fd bf50 	b.w	23fbd78 <network_listening>

023fded8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fded8:	2200      	movs	r2, #0
 23fdeda:	6840      	ldr	r0, [r0, #4]
 23fdedc:	4611      	mov	r1, r2
 23fdede:	f7fd bf67 	b.w	23fbdb0 <network_get_listen_timeout>

023fdee2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fdee2:	2200      	movs	r2, #0
 23fdee4:	6840      	ldr	r0, [r0, #4]
 23fdee6:	f7fd bf55 	b.w	23fbd94 <network_set_listen_timeout>

023fdeea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fdeea:	2200      	movs	r2, #0
 23fdeec:	6840      	ldr	r0, [r0, #4]
 23fdeee:	f081 0101 	eor.w	r1, r1, #1
 23fdef2:	f7fd bf33 	b.w	23fbd5c <network_listen>

023fdef6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fdef6:	2300      	movs	r3, #0
 23fdef8:	6840      	ldr	r0, [r0, #4]
 23fdefa:	461a      	mov	r2, r3
 23fdefc:	4619      	mov	r1, r3
 23fdefe:	f7fd bf1f 	b.w	23fbd40 <network_off>

023fdf02 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fdf02:	2300      	movs	r3, #0
 23fdf04:	6840      	ldr	r0, [r0, #4]
 23fdf06:	461a      	mov	r2, r3
 23fdf08:	4619      	mov	r1, r3
 23fdf0a:	f7fd bf0b 	b.w	23fbd24 <network_on>

023fdf0e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fdf0e:	2200      	movs	r2, #0
 23fdf10:	6840      	ldr	r0, [r0, #4]
 23fdf12:	4611      	mov	r1, r2
 23fdf14:	f7fd bedc 	b.w	23fbcd0 <network_connecting>

023fdf18 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fdf18:	2200      	movs	r2, #0
 23fdf1a:	2102      	movs	r1, #2
 23fdf1c:	6840      	ldr	r0, [r0, #4]
 23fdf1e:	f7fd bee5 	b.w	23fbcec <network_disconnect>

023fdf22 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fdf22:	2300      	movs	r3, #0
 23fdf24:	6840      	ldr	r0, [r0, #4]
 23fdf26:	461a      	mov	r2, r3
 23fdf28:	f7fd bec4 	b.w	23fbcb4 <network_connect>

023fdf2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fdf2c:	2204      	movs	r2, #4
 23fdf2e:	4b02      	ldr	r3, [pc, #8]	; (23fdf38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fdf30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fdf32:	4a02      	ldr	r2, [pc, #8]	; (23fdf3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fdf34:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fdf36:	4770      	bx	lr
 23fdf38:	1007aedc 	.word	0x1007aedc
 23fdf3c:	023ffccc 	.word	0x023ffccc

023fdf40 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fdf40:	2300      	movs	r3, #0
 23fdf42:	6840      	ldr	r0, [r0, #4]
 23fdf44:	461a      	mov	r2, r3
 23fdf46:	f7fd beb5 	b.w	23fbcb4 <network_connect>

023fdf4a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fdf4a:	2200      	movs	r2, #0
 23fdf4c:	2102      	movs	r1, #2
 23fdf4e:	6840      	ldr	r0, [r0, #4]
 23fdf50:	f7fd becc 	b.w	23fbcec <network_disconnect>

023fdf54 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fdf54:	2200      	movs	r2, #0
 23fdf56:	6840      	ldr	r0, [r0, #4]
 23fdf58:	4611      	mov	r1, r2
 23fdf5a:	f7fd beb9 	b.w	23fbcd0 <network_connecting>

023fdf5e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fdf5e:	2200      	movs	r2, #0
 23fdf60:	6840      	ldr	r0, [r0, #4]
 23fdf62:	4611      	mov	r1, r2
 23fdf64:	f7fd bed0 	b.w	23fbd08 <network_ready>

023fdf68 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fdf68:	2300      	movs	r3, #0
 23fdf6a:	6840      	ldr	r0, [r0, #4]
 23fdf6c:	461a      	mov	r2, r3
 23fdf6e:	4619      	mov	r1, r3
 23fdf70:	f7fd bed8 	b.w	23fbd24 <network_on>

023fdf74 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fdf74:	2300      	movs	r3, #0
 23fdf76:	6840      	ldr	r0, [r0, #4]
 23fdf78:	461a      	mov	r2, r3
 23fdf7a:	4619      	mov	r1, r3
 23fdf7c:	f7fd bee0 	b.w	23fbd40 <network_off>

023fdf80 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fdf80:	2100      	movs	r1, #0
 23fdf82:	6840      	ldr	r0, [r0, #4]
 23fdf84:	f7fd bf22 	b.w	23fbdcc <network_is_on>

023fdf88 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fdf88:	2100      	movs	r1, #0
 23fdf8a:	6840      	ldr	r0, [r0, #4]
 23fdf8c:	f7fd bf2c 	b.w	23fbde8 <network_is_off>

023fdf90 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fdf90:	2200      	movs	r2, #0
 23fdf92:	6840      	ldr	r0, [r0, #4]
 23fdf94:	f081 0101 	eor.w	r1, r1, #1
 23fdf98:	f7fd bee0 	b.w	23fbd5c <network_listen>

023fdf9c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fdf9c:	2200      	movs	r2, #0
 23fdf9e:	6840      	ldr	r0, [r0, #4]
 23fdfa0:	f7fd bef8 	b.w	23fbd94 <network_set_listen_timeout>

023fdfa4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fdfa4:	2200      	movs	r2, #0
 23fdfa6:	6840      	ldr	r0, [r0, #4]
 23fdfa8:	4611      	mov	r1, r2
 23fdfaa:	f7fd bf01 	b.w	23fbdb0 <network_get_listen_timeout>

023fdfae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fdfae:	2200      	movs	r2, #0
 23fdfb0:	6840      	ldr	r0, [r0, #4]
 23fdfb2:	4611      	mov	r1, r2
 23fdfb4:	f7fd bee0 	b.w	23fbd78 <network_listening>

023fdfb8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fdfb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdfbc:	b095      	sub	sp, #84	; 0x54
 23fdfbe:	4614      	mov	r4, r2
 23fdfc0:	460d      	mov	r5, r1
 23fdfc2:	4607      	mov	r7, r0
    IPAddress addr;
 23fdfc4:	f7ff fe0e 	bl	23fdbe4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fdfc8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fdfca:	221c      	movs	r2, #28
 23fdfcc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fdfce:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fdfd0:	f000 fcf3 	bl	23fe9ba <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fdfd4:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fdfd6:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fdfd8:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fdfda:	2100      	movs	r1, #0
 23fdfdc:	466b      	mov	r3, sp
 23fdfde:	aa0c      	add	r2, sp, #48	; 0x30
 23fdfe0:	f7fd fb2e 	bl	23fb640 <netdb_getaddrinfo>
    if (!r) {
 23fdfe4:	4604      	mov	r4, r0
 23fdfe6:	2800      	cmp	r0, #0
 23fdfe8:	d14b      	bne.n	23fe082 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fdfea:	4602      	mov	r2, r0
 23fdfec:	2101      	movs	r1, #1
 23fdfee:	6868      	ldr	r0, [r5, #4]
 23fdff0:	f7fd fe8a 	bl	23fbd08 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdff4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fdff6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdff8:	4622      	mov	r2, r4
 23fdffa:	6868      	ldr	r0, [r5, #4]
 23fdffc:	f7fd fe84 	bl	23fbd08 <network_ready>
        bool ok = false;
 23fe000:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe002:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe004:	9e00      	ldr	r6, [sp, #0]
 23fe006:	2e00      	cmp	r6, #0
 23fe008:	d03b      	beq.n	23fe082 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe00a:	2900      	cmp	r1, #0
 23fe00c:	d139      	bne.n	23fe082 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe00e:	6873      	ldr	r3, [r6, #4]
 23fe010:	2b02      	cmp	r3, #2
 23fe012:	d003      	beq.n	23fe01c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe014:	2b0a      	cmp	r3, #10
 23fe016:	d011      	beq.n	23fe03c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe018:	69f6      	ldr	r6, [r6, #28]
 23fe01a:	e7f4      	b.n	23fe006 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe01c:	f1b8 0f00 	cmp.w	r8, #0
 23fe020:	d0fa      	beq.n	23fe018 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe022:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe024:	a806      	add	r0, sp, #24
 23fe026:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe028:	1d3c      	adds	r4, r7, #4
 23fe02a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe02c:	f7ff fe08 	bl	23fdc40 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe034:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe036:	4641      	mov	r1, r8
 23fe038:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe03a:	e7ed      	b.n	23fe018 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe03c:	f1b9 0f00 	cmp.w	r9, #0
 23fe040:	d0ea      	beq.n	23fe018 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe042:	2210      	movs	r2, #16
 23fe044:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe046:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe048:	f000 fcb7 	bl	23fe9ba <memset>
                    a.v = 6;
 23fe04c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe04e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe050:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe054:	f104 0308 	add.w	r3, r4, #8
 23fe058:	3418      	adds	r4, #24
 23fe05a:	462a      	mov	r2, r5
 23fe05c:	6818      	ldr	r0, [r3, #0]
 23fe05e:	6859      	ldr	r1, [r3, #4]
 23fe060:	3308      	adds	r3, #8
 23fe062:	c203      	stmia	r2!, {r0, r1}
 23fe064:	42a3      	cmp	r3, r4
 23fe066:	4615      	mov	r5, r2
 23fe068:	d1f7      	bne.n	23fe05a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe06a:	a901      	add	r1, sp, #4
 23fe06c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe06e:	1d3c      	adds	r4, r7, #4
 23fe070:	ad07      	add	r5, sp, #28
 23fe072:	f7ff fdc5 	bl	23fdc00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe07a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe07c:	4649      	mov	r1, r9
 23fe07e:	7023      	strb	r3, [r4, #0]
                    break;
 23fe080:	e7ca      	b.n	23fe018 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe082:	9800      	ldr	r0, [sp, #0]
 23fe084:	f7fd face 	bl	23fb624 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe088:	4638      	mov	r0, r7
 23fe08a:	b015      	add	sp, #84	; 0x54
 23fe08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe090 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe090:	4b02      	ldr	r3, [pc, #8]	; (23fe09c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe092:	4a03      	ldr	r2, [pc, #12]	; (23fe0a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe094:	601a      	str	r2, [r3, #0]
 23fe096:	2200      	movs	r2, #0
 23fe098:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe09a:	4770      	bx	lr
 23fe09c:	1007aee4 	.word	0x1007aee4
 23fe0a0:	023ffd08 	.word	0x023ffd08

023fe0a4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fe0a4:	2201      	movs	r2, #1
 23fe0a6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fe0aa:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fe0ae:	4618      	mov	r0, r3
 23fe0b0:	2901      	cmp	r1, #1
 23fe0b2:	d108      	bne.n	23fe0c6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fe0b4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fe0b8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fe0bc:	3a01      	subs	r2, #1
 23fe0be:	f103 0310 	add.w	r3, r3, #16
 23fe0c2:	d1f2      	bne.n	23fe0aa <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fe0c4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fe0c6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fe0c8:	bf04      	itt	eq
 23fe0ca:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fe0ce:	1852      	addeq	r2, r2, r1
 23fe0d0:	e7f4      	b.n	23fe0bc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fe0d2 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fe0d2:	b40e      	push	{r1, r2, r3}
 23fe0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe0d6:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe0d8:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fe0da:	af00      	add	r7, sp, #0
 23fe0dc:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fe0e0:	f855 2b04 	ldr.w	r2, [r5], #4
 23fe0e4:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe0e6:	462b      	mov	r3, r5
 23fe0e8:	1878      	adds	r0, r7, r1
 23fe0ea:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fe0ec:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe0ee:	f7fd ff4d 	bl	23fbf8c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fe0f2:	280f      	cmp	r0, #15
 23fe0f4:	687a      	ldr	r2, [r7, #4]
 23fe0f6:	d91a      	bls.n	23fe12e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fe0f8:	f100 0308 	add.w	r3, r0, #8
 23fe0fc:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fe100:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fe102:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe106:	1c41      	adds	r1, r0, #1
 23fe108:	462b      	mov	r3, r5
 23fe10a:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fe10c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fe10e:	f7fd ff3d 	bl	23fbf8c <vsnprintf>
        if (n > 0) {
 23fe112:	1e02      	subs	r2, r0, #0
 23fe114:	dd04      	ble.n	23fe120 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fe116:	6823      	ldr	r3, [r4, #0]
 23fe118:	4669      	mov	r1, sp
 23fe11a:	4620      	mov	r0, r4
 23fe11c:	689b      	ldr	r3, [r3, #8]
 23fe11e:	4798      	blx	r3
 23fe120:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fe122:	3720      	adds	r7, #32
 23fe124:	46bd      	mov	sp, r7
 23fe126:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fe12a:	b003      	add	sp, #12
 23fe12c:	4770      	bx	lr
    } else if (n > 0) {
 23fe12e:	2800      	cmp	r0, #0
 23fe130:	d0f7      	beq.n	23fe122 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fe132:	6823      	ldr	r3, [r4, #0]
 23fe134:	4602      	mov	r2, r0
 23fe136:	689b      	ldr	r3, [r3, #8]
 23fe138:	4620      	mov	r0, r4
 23fe13a:	f107 0110 	add.w	r1, r7, #16
 23fe13e:	4798      	blx	r3
}
 23fe140:	e7ef      	b.n	23fe122 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fe142 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe142:	b538      	push	{r3, r4, r5, lr}
 23fe144:	680b      	ldr	r3, [r1, #0]
 23fe146:	4604      	mov	r4, r0
 23fe148:	6003      	str	r3, [r0, #0]
 23fe14a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fe14c:	6843      	ldr	r3, [r0, #4]
 23fe14e:	429d      	cmp	r5, r3
 23fe150:	d008      	beq.n	23fe164 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fe152:	b115      	cbz	r5, 23fe15a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fe154:	686b      	ldr	r3, [r5, #4]
 23fe156:	3301      	adds	r3, #1
 23fe158:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fe15a:	6860      	ldr	r0, [r4, #4]
 23fe15c:	b108      	cbz	r0, 23fe162 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fe15e:	f7fe fa3b 	bl	23fc5d8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fe162:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fe164:	bd38      	pop	{r3, r4, r5, pc}

023fe166 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23fe166:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fe168:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fe16a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fe16e:	2201      	movs	r2, #1
 23fe170:	689b      	ldr	r3, [r3, #8]
 23fe172:	f10d 0107 	add.w	r1, sp, #7
 23fe176:	4798      	blx	r3
}
 23fe178:	b003      	add	sp, #12
 23fe17a:	f85d fb04 	ldr.w	pc, [sp], #4

023fe17e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe17e:	460b      	mov	r3, r1
 23fe180:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fe182:	2200      	movs	r2, #0
 23fe184:	b510      	push	{r4, lr}
 23fe186:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe188:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fe18c:	6083      	str	r3, [r0, #8]
    if (t) {
 23fe18e:	b90b      	cbnz	r3, 23fe194 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fe190:	4620      	mov	r0, r4
 23fe192:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fe194:	f7ff ffd5 	bl	23fe142 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fe198:	e7fa      	b.n	23fe190 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fe19a <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fe19a:	6883      	ldr	r3, [r0, #8]
 23fe19c:	b1eb      	cbz	r3, 23fe1da <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fe19e:	781a      	ldrb	r2, [r3, #0]
 23fe1a0:	2a03      	cmp	r2, #3
 23fe1a2:	d81a      	bhi.n	23fe1da <_ZNK5spark9JSONValue4typeEv+0x40>
 23fe1a4:	e8df f002 	tbb	[pc, r2]
 23fe1a8:	1b021704 	.word	0x1b021704
 23fe1ac:	2005      	movs	r0, #5
 23fe1ae:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fe1b0:	6802      	ldr	r2, [r0, #0]
 23fe1b2:	685b      	ldr	r3, [r3, #4]
 23fe1b4:	6852      	ldr	r2, [r2, #4]
 23fe1b6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fe1b8:	282d      	cmp	r0, #45	; 0x2d
 23fe1ba:	d012      	beq.n	23fe1e2 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fe1bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fe1c0:	2b09      	cmp	r3, #9
 23fe1c2:	d90e      	bls.n	23fe1e2 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fe1c4:	2874      	cmp	r0, #116	; 0x74
 23fe1c6:	d00e      	beq.n	23fe1e6 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fe1c8:	2866      	cmp	r0, #102	; 0x66
 23fe1ca:	d00c      	beq.n	23fe1e6 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fe1cc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fe1d0:	4258      	negs	r0, r3
 23fe1d2:	4158      	adcs	r0, r3
 23fe1d4:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fe1d6:	2006      	movs	r0, #6
 23fe1d8:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fe1da:	2000      	movs	r0, #0
 23fe1dc:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fe1de:	2004      	movs	r0, #4
 23fe1e0:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fe1e2:	2003      	movs	r0, #3
 23fe1e4:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fe1e6:	2002      	movs	r0, #2
}
 23fe1e8:	4770      	bx	lr

023fe1ea <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fe1ea:	b510      	push	{r4, lr}
 23fe1ec:	4604      	mov	r4, r0
    switch (type()) {
 23fe1ee:	f7ff ffd4 	bl	23fe19a <_ZNK5spark9JSONValue4typeEv>
 23fe1f2:	2802      	cmp	r0, #2
 23fe1f4:	d00e      	beq.n	23fe214 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fe1f6:	1ec3      	subs	r3, r0, #3
 23fe1f8:	b2db      	uxtb	r3, r3
 23fe1fa:	2b01      	cmp	r3, #1
 23fe1fc:	d814      	bhi.n	23fe228 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fe1fe:	6822      	ldr	r2, [r4, #0]
 23fe200:	68a3      	ldr	r3, [r4, #8]
 23fe202:	6850      	ldr	r0, [r2, #4]
 23fe204:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fe206:	220a      	movs	r2, #10
}
 23fe208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fe20c:	2100      	movs	r1, #0
 23fe20e:	4418      	add	r0, r3
 23fe210:	f000 bcd4 	b.w	23febbc <strtol>
        const char* const s = d_->json + t_->start;
 23fe214:	6822      	ldr	r2, [r4, #0]
 23fe216:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fe218:	6852      	ldr	r2, [r2, #4]
 23fe21a:	685b      	ldr	r3, [r3, #4]
 23fe21c:	5cd0      	ldrb	r0, [r2, r3]
 23fe21e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fe222:	4258      	negs	r0, r3
 23fe224:	4158      	adcs	r0, r3
}
 23fe226:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fe228:	2000      	movs	r0, #0
 23fe22a:	e7fc      	b.n	23fe226 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fe22c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe22c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fe22e:	2300      	movs	r3, #0
 23fe230:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe232:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fe236:	480e      	ldr	r0, [pc, #56]	; (23fe270 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fe238:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fe23c:	b1a9      	cbz	r1, 23fe26a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fe23e:	780b      	ldrb	r3, [r1, #0]
 23fe240:	2b03      	cmp	r3, #3
 23fe242:	d006      	beq.n	23fe252 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fe244:	b98b      	cbnz	r3, 23fe26a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fe246:	6813      	ldr	r3, [r2, #0]
 23fe248:	6858      	ldr	r0, [r3, #4]
 23fe24a:	684b      	ldr	r3, [r1, #4]
 23fe24c:	5cc3      	ldrb	r3, [r0, r3]
 23fe24e:	2b6e      	cmp	r3, #110	; 0x6e
 23fe250:	d007      	beq.n	23fe262 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fe252:	6813      	ldr	r3, [r2, #0]
 23fe254:	684d      	ldr	r5, [r1, #4]
 23fe256:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fe258:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fe25a:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fe25c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fe25e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fe260:	60e3      	str	r3, [r4, #12]
 23fe262:	4611      	mov	r1, r2
 23fe264:	4620      	mov	r0, r4
 23fe266:	f7ff ff6c 	bl	23fe142 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fe26a:	4620      	mov	r0, r4
 23fe26c:	bd38      	pop	{r3, r4, r5, pc}
 23fe26e:	bf00      	nop
 23fe270:	023ffb7d 	.word	0x023ffb7d

023fe274 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fe274:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fe276:	2500      	movs	r5, #0
 23fe278:	460b      	mov	r3, r1
 23fe27a:	4604      	mov	r4, r0
 23fe27c:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fe27e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fe282:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fe286:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fe28a:	b14b      	cbz	r3, 23fe2a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fe28c:	781a      	ldrb	r2, [r3, #0]
 23fe28e:	2a01      	cmp	r2, #1
 23fe290:	d106      	bne.n	23fe2a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fe292:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fe296:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fe298:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fe29a:	6143      	str	r3, [r0, #20]
 23fe29c:	f7ff ff51 	bl	23fe142 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fe2a0:	4620      	mov	r0, r4
 23fe2a2:	bd38      	pop	{r3, r4, r5, pc}

023fe2a4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fe2a4:	b510      	push	{r4, lr}
    if (!n_) {
 23fe2a6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fe2a8:	4604      	mov	r4, r0
    if (!n_) {
 23fe2aa:	b163      	cbz	r3, 23fe2c6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fe2ac:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fe2ae:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fe2b0:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fe2b2:	3010      	adds	r0, #16
 23fe2b4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fe2b6:	6120      	str	r0, [r4, #16]
    --n_;
 23fe2b8:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fe2ba:	b113      	cbz	r3, 23fe2c2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fe2bc:	f7ff fef2 	bl	23fe0a4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fe2c0:	60a0      	str	r0, [r4, #8]
    return true;
 23fe2c2:	2001      	movs	r0, #1
 23fe2c4:	e000      	b.n	23fe2c8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fe2c6:	4618      	mov	r0, r3
}
 23fe2c8:	bd10      	pop	{r4, pc}

023fe2ca <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fe2ca:	b510      	push	{r4, lr}
    write('}');
 23fe2cc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fe2ce:	4604      	mov	r4, r0
    write('}');
 23fe2d0:	f7ff ff49 	bl	23fe166 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fe2d4:	2301      	movs	r3, #1
}
 23fe2d6:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe2d8:	7123      	strb	r3, [r4, #4]
}
 23fe2da:	bd10      	pop	{r4, pc}

023fe2dc <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fe2dc:	b508      	push	{r3, lr}
    switch (state_) {
 23fe2de:	7903      	ldrb	r3, [r0, #4]
 23fe2e0:	2b01      	cmp	r3, #1
 23fe2e2:	d002      	beq.n	23fe2ea <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fe2e4:	2b02      	cmp	r3, #2
 23fe2e6:	d004      	beq.n	23fe2f2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fe2e8:	bd08      	pop	{r3, pc}
        write(',');
 23fe2ea:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fe2ec:	f7ff ff3b 	bl	23fe166 <_ZN5spark10JSONWriter5writeEc>
}
 23fe2f0:	e7fa      	b.n	23fe2e8 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fe2f2:	213a      	movs	r1, #58	; 0x3a
 23fe2f4:	e7fa      	b.n	23fe2ec <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fe2f6 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fe2f6:	b510      	push	{r4, lr}
 23fe2f8:	4604      	mov	r4, r0
    writeSeparator();
 23fe2fa:	f7ff ffef 	bl	23fe2dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fe2fe:	4620      	mov	r0, r4
 23fe300:	217b      	movs	r1, #123	; 0x7b
 23fe302:	f7ff ff30 	bl	23fe166 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fe306:	2300      	movs	r3, #0
}
 23fe308:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fe30a:	7123      	strb	r3, [r4, #4]
}
 23fe30c:	bd10      	pop	{r4, pc}
	...

023fe310 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fe310:	b513      	push	{r0, r1, r4, lr}
 23fe312:	4604      	mov	r4, r0
 23fe314:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe316:	f7ff ffe1 	bl	23fe2dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fe31a:	6823      	ldr	r3, [r4, #0]
 23fe31c:	4620      	mov	r0, r4
 23fe31e:	68db      	ldr	r3, [r3, #12]
 23fe320:	9a01      	ldr	r2, [sp, #4]
 23fe322:	4903      	ldr	r1, [pc, #12]	; (23fe330 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fe324:	4798      	blx	r3
    state_ = NEXT;
 23fe326:	2301      	movs	r3, #1
}
 23fe328:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe32a:	7123      	strb	r3, [r4, #4]
}
 23fe32c:	b002      	add	sp, #8
 23fe32e:	bd10      	pop	{r4, pc}
 23fe330:	023ffb57 	.word	0x023ffb57

023fe334 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fe334:	b513      	push	{r0, r1, r4, lr}
 23fe336:	4604      	mov	r4, r0
 23fe338:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe33a:	f7ff ffcf 	bl	23fe2dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fe33e:	6823      	ldr	r3, [r4, #0]
 23fe340:	4620      	mov	r0, r4
 23fe342:	68db      	ldr	r3, [r3, #12]
 23fe344:	9a01      	ldr	r2, [sp, #4]
 23fe346:	4903      	ldr	r1, [pc, #12]	; (23fe354 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fe348:	4798      	blx	r3
    state_ = NEXT;
 23fe34a:	2301      	movs	r3, #1
}
 23fe34c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe34e:	7123      	strb	r3, [r4, #4]
}
 23fe350:	b002      	add	sp, #8
 23fe352:	bd10      	pop	{r4, pc}
 23fe354:	023ffd3c 	.word	0x023ffd3c

023fe358 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe35c:	460d      	mov	r5, r1
 23fe35e:	4690      	mov	r8, r2
    write('"');
 23fe360:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe362:	4604      	mov	r4, r0
 23fe364:	462f      	mov	r7, r5
    write('"');
 23fe366:	f7ff fefe 	bl	23fe166 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fe36a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fe410 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fe36e:	44a8      	add	r8, r5
    while (s != end) {
 23fe370:	4547      	cmp	r7, r8
 23fe372:	46ba      	mov	sl, r7
 23fe374:	d03d      	beq.n	23fe3f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fe376:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fe37a:	2e22      	cmp	r6, #34	; 0x22
 23fe37c:	d006      	beq.n	23fe38c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe37e:	2e5c      	cmp	r6, #92	; 0x5c
 23fe380:	d004      	beq.n	23fe38c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe382:	4630      	mov	r0, r6
 23fe384:	f000 faea 	bl	23fe95c <isprint>
 23fe388:	2800      	cmp	r0, #0
 23fe38a:	d1f1      	bne.n	23fe370 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fe38c:	6823      	ldr	r3, [r4, #0]
 23fe38e:	4629      	mov	r1, r5
 23fe390:	4620      	mov	r0, r4
 23fe392:	689b      	ldr	r3, [r3, #8]
 23fe394:	ebaa 0205 	sub.w	r2, sl, r5
 23fe398:	4798      	blx	r3
            write('\\');
 23fe39a:	215c      	movs	r1, #92	; 0x5c
 23fe39c:	4620      	mov	r0, r4
 23fe39e:	f7ff fee2 	bl	23fe166 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fe3a2:	2e0d      	cmp	r6, #13
 23fe3a4:	d80a      	bhi.n	23fe3bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fe3a6:	2e07      	cmp	r6, #7
 23fe3a8:	d91c      	bls.n	23fe3e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe3aa:	f1a6 0308 	sub.w	r3, r6, #8
 23fe3ae:	2b05      	cmp	r3, #5
 23fe3b0:	d818      	bhi.n	23fe3e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe3b2:	e8df f003 	tbb	[pc, r3]
 23fe3b6:	0f0d      	.short	0x0f0d
 23fe3b8:	15131711 	.word	0x15131711
 23fe3bc:	2e22      	cmp	r6, #34	; 0x22
 23fe3be:	d001      	beq.n	23fe3c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fe3c0:	2e5c      	cmp	r6, #92	; 0x5c
 23fe3c2:	d10f      	bne.n	23fe3e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fe3c4:	4631      	mov	r1, r6
                write('b');
 23fe3c6:	4620      	mov	r0, r4
 23fe3c8:	f7ff fecd 	bl	23fe166 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fe3cc:	463d      	mov	r5, r7
    while (s != end) {
 23fe3ce:	e7cf      	b.n	23fe370 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fe3d0:	2162      	movs	r1, #98	; 0x62
 23fe3d2:	e7f8      	b.n	23fe3c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fe3d4:	2174      	movs	r1, #116	; 0x74
 23fe3d6:	e7f6      	b.n	23fe3c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fe3d8:	216e      	movs	r1, #110	; 0x6e
 23fe3da:	e7f4      	b.n	23fe3c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fe3dc:	2166      	movs	r1, #102	; 0x66
 23fe3de:	e7f2      	b.n	23fe3c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fe3e0:	2172      	movs	r1, #114	; 0x72
 23fe3e2:	e7f0      	b.n	23fe3c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fe3e4:	6823      	ldr	r3, [r4, #0]
 23fe3e6:	4632      	mov	r2, r6
 23fe3e8:	4649      	mov	r1, r9
 23fe3ea:	4620      	mov	r0, r4
 23fe3ec:	68db      	ldr	r3, [r3, #12]
 23fe3ee:	4798      	blx	r3
                break;
 23fe3f0:	e7ec      	b.n	23fe3cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fe3f2:	42bd      	cmp	r5, r7
 23fe3f4:	d005      	beq.n	23fe402 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fe3f6:	6823      	ldr	r3, [r4, #0]
 23fe3f8:	4629      	mov	r1, r5
 23fe3fa:	4620      	mov	r0, r4
 23fe3fc:	689b      	ldr	r3, [r3, #8]
 23fe3fe:	1b7a      	subs	r2, r7, r5
 23fe400:	4798      	blx	r3
    }
    write('"');
 23fe402:	2122      	movs	r1, #34	; 0x22
 23fe404:	4620      	mov	r0, r4
 23fe406:	f7ff feae 	bl	23fe166 <_ZN5spark10JSONWriter5writeEc>
}
 23fe40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe40e:	bf00      	nop
 23fe410:	023ffd3f 	.word	0x023ffd3f

023fe414 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fe414:	b513      	push	{r0, r1, r4, lr}
 23fe416:	4604      	mov	r4, r0
 23fe418:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe41c:	f7ff ff5e 	bl	23fe2dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fe420:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe424:	4620      	mov	r0, r4
 23fe426:	f7ff ff97 	bl	23fe358 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fe42a:	2302      	movs	r3, #2
}
 23fe42c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fe42e:	7123      	strb	r3, [r4, #4]
}
 23fe430:	b002      	add	sp, #8
 23fe432:	bd10      	pop	{r4, pc}

023fe434 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fe434:	b513      	push	{r0, r1, r4, lr}
 23fe436:	4604      	mov	r4, r0
 23fe438:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe43c:	f7ff ff4e 	bl	23fe2dc <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fe440:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe444:	4620      	mov	r0, r4
 23fe446:	f7ff ff87 	bl	23fe358 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fe44a:	2301      	movs	r3, #1
}
 23fe44c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe44e:	7123      	strb	r3, [r4, #4]
}
 23fe450:	b002      	add	sp, #8
 23fe452:	bd10      	pop	{r4, pc}

023fe454 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe454:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe456:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe458:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe45a:	d902      	bls.n	23fe462 <pinAvailable+0xe>
    return false;
 23fe45c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe45e:	b003      	add	sp, #12
 23fe460:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe462:	f1a0 030f 	sub.w	r3, r0, #15
 23fe466:	2b02      	cmp	r3, #2
 23fe468:	d90b      	bls.n	23fe482 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe46a:	2801      	cmp	r0, #1
 23fe46c:	d821      	bhi.n	23fe4b2 <pinAvailable+0x5e>
 23fe46e:	f000 f935 	bl	23fe6dc <_Z19__fetch_global_Wirev>
 23fe472:	2100      	movs	r1, #0
 23fe474:	7c00      	ldrb	r0, [r0, #16]
 23fe476:	f7fd faa3 	bl	23fb9c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe47a:	f080 0001 	eor.w	r0, r0, #1
 23fe47e:	b2c0      	uxtb	r0, r0
 23fe480:	e7ed      	b.n	23fe45e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe482:	4d11      	ldr	r5, [pc, #68]	; (23fe4c8 <pinAvailable+0x74>)
 23fe484:	e8d5 1f8f 	ldab	r1, [r5]
 23fe488:	f011 0101 	ands.w	r1, r1, #1
 23fe48c:	d10b      	bne.n	23fe4a6 <pinAvailable+0x52>
 23fe48e:	4628      	mov	r0, r5
 23fe490:	9101      	str	r1, [sp, #4]
 23fe492:	f7fc f805 	bl	23fa4a0 <__cxa_guard_acquire>
 23fe496:	9901      	ldr	r1, [sp, #4]
 23fe498:	b128      	cbz	r0, 23fe4a6 <pinAvailable+0x52>
 23fe49a:	480c      	ldr	r0, [pc, #48]	; (23fe4cc <pinAvailable+0x78>)
 23fe49c:	f7fd fdf2 	bl	23fc084 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe4a0:	4628      	mov	r0, r5
 23fe4a2:	f7fc f802 	bl	23fa4aa <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe4a6:	4b09      	ldr	r3, [pc, #36]	; (23fe4cc <pinAvailable+0x78>)
 23fe4a8:	7818      	ldrb	r0, [r3, #0]
 23fe4aa:	f7fd faeb 	bl	23fba84 <hal_spi_is_enabled>
 23fe4ae:	2800      	cmp	r0, #0
 23fe4b0:	d1d4      	bne.n	23fe45c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe4b2:	3c08      	subs	r4, #8
 23fe4b4:	2c01      	cmp	r4, #1
 23fe4b6:	d805      	bhi.n	23fe4c4 <pinAvailable+0x70>
 23fe4b8:	f000 f864 	bl	23fe584 <_Z22__fetch_global_Serial1v>
 23fe4bc:	7c00      	ldrb	r0, [r0, #16]
 23fe4be:	f7fd fa01 	bl	23fb8c4 <hal_usart_is_enabled>
 23fe4c2:	e7da      	b.n	23fe47a <pinAvailable+0x26>
  return true; // 'pin' is available
 23fe4c4:	2001      	movs	r0, #1
 23fe4c6:	e7ca      	b.n	23fe45e <pinAvailable+0xa>
 23fe4c8:	1007ae40 	.word	0x1007ae40
 23fe4cc:	1007ae44 	.word	0x1007ae44

023fe4d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe4d0:	281b      	cmp	r0, #27
{
 23fe4d2:	b538      	push	{r3, r4, r5, lr}
 23fe4d4:	4604      	mov	r4, r0
 23fe4d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe4d8:	d80a      	bhi.n	23fe4f0 <pinMode+0x20>
 23fe4da:	29ff      	cmp	r1, #255	; 0xff
 23fe4dc:	d008      	beq.n	23fe4f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fe4de:	f7ff ffb9 	bl	23fe454 <pinAvailable>
 23fe4e2:	b128      	cbz	r0, 23fe4f0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fe4e4:	4629      	mov	r1, r5
 23fe4e6:	4620      	mov	r0, r4
}
 23fe4e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fe4ec:	f7fd b8c4 	b.w	23fb678 <hal_gpio_mode>
}
 23fe4f0:	bd38      	pop	{r3, r4, r5, pc}

023fe4f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fe4f2:	b538      	push	{r3, r4, r5, lr}
 23fe4f4:	4604      	mov	r4, r0
 23fe4f6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fe4f8:	f7fd f8cc 	bl	23fb694 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fe4fc:	28ff      	cmp	r0, #255	; 0xff
 23fe4fe:	d010      	beq.n	23fe522 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fe500:	2806      	cmp	r0, #6
 23fe502:	d804      	bhi.n	23fe50e <digitalWrite+0x1c>
 23fe504:	234d      	movs	r3, #77	; 0x4d
 23fe506:	fa23 f000 	lsr.w	r0, r3, r0
 23fe50a:	07c3      	lsls	r3, r0, #31
 23fe50c:	d409      	bmi.n	23fe522 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fe50e:	4620      	mov	r0, r4
 23fe510:	f7ff ffa0 	bl	23fe454 <pinAvailable>
 23fe514:	b128      	cbz	r0, 23fe522 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fe516:	4629      	mov	r1, r5
 23fe518:	4620      	mov	r0, r4
}
 23fe51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fe51e:	f7fd b8c7 	b.w	23fb6b0 <hal_gpio_write>
}
 23fe522:	bd38      	pop	{r3, r4, r5, pc}

023fe524 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe524:	4770      	bx	lr
	...

023fe528 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe528:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe52a:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe52c:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe52e:	462a      	mov	r2, r5
 23fe530:	2100      	movs	r1, #0
 23fe532:	f000 fa42 	bl	23fe9ba <memset>
 23fe536:	8025      	strh	r5, [r4, #0]
 23fe538:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe53a:	4907      	ldr	r1, [pc, #28]	; (23fe558 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fe53c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fe53e:	8125      	strh	r5, [r4, #8]
 23fe540:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe542:	f000 f8f1 	bl	23fe728 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe546:	4904      	ldr	r1, [pc, #16]	; (23fe558 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe548:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe54a:	4628      	mov	r0, r5
 23fe54c:	f000 f8ec 	bl	23fe728 <_ZnajRKSt9nothrow_t>
    };
 23fe550:	60e0      	str	r0, [r4, #12]
}
 23fe552:	4620      	mov	r0, r4
 23fe554:	bd38      	pop	{r3, r4, r5, pc}
 23fe556:	bf00      	nop
 23fe558:	023ffd45 	.word	0x023ffd45

023fe55c <__tcf_2>:
 23fe55c:	4770      	bx	lr

023fe55e <__tcf_1>:
 23fe55e:	4770      	bx	lr

023fe560 <_Z20acquireSerial1Bufferv>:
{
 23fe560:	b510      	push	{r4, lr}
 23fe562:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe564:	f7ff ffe0 	bl	23fe528 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe568:	4620      	mov	r0, r4
 23fe56a:	bd10      	pop	{r4, pc}

023fe56c <_Z20acquireSerial2Bufferv>:
 23fe56c:	b510      	push	{r4, lr}
 23fe56e:	4604      	mov	r4, r0
 23fe570:	f7ff ffda 	bl	23fe528 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe574:	4620      	mov	r0, r4
 23fe576:	bd10      	pop	{r4, pc}

023fe578 <_Z20acquireSerial3Bufferv>:
 23fe578:	b510      	push	{r4, lr}
 23fe57a:	4604      	mov	r4, r0
 23fe57c:	f7ff ffd4 	bl	23fe528 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe580:	4620      	mov	r0, r4
 23fe582:	bd10      	pop	{r4, pc}

023fe584 <_Z22__fetch_global_Serial1v>:
{
 23fe584:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe586:	4d0e      	ldr	r5, [pc, #56]	; (23fe5c0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe588:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe58a:	e8d5 1f8f 	ldab	r1, [r5]
 23fe58e:	f011 0401 	ands.w	r4, r1, #1
 23fe592:	d111      	bne.n	23fe5b8 <_Z22__fetch_global_Serial1v+0x34>
 23fe594:	4628      	mov	r0, r5
 23fe596:	f7fb ff83 	bl	23fa4a0 <__cxa_guard_acquire>
 23fe59a:	b168      	cbz	r0, 23fe5b8 <_Z22__fetch_global_Serial1v+0x34>
 23fe59c:	a801      	add	r0, sp, #4
 23fe59e:	f7ff ffdf 	bl	23fe560 <_Z20acquireSerial1Bufferv>
 23fe5a2:	4621      	mov	r1, r4
 23fe5a4:	aa01      	add	r2, sp, #4
 23fe5a6:	4807      	ldr	r0, [pc, #28]	; (23fe5c4 <_Z22__fetch_global_Serial1v+0x40>)
 23fe5a8:	f7ff fc20 	bl	23fddec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe5ac:	4628      	mov	r0, r5
 23fe5ae:	f7fb ff7c 	bl	23fa4aa <__cxa_guard_release>
 23fe5b2:	4805      	ldr	r0, [pc, #20]	; (23fe5c8 <_Z22__fetch_global_Serial1v+0x44>)
 23fe5b4:	f000 f9cc 	bl	23fe950 <atexit>
    return serial1;
}
 23fe5b8:	4802      	ldr	r0, [pc, #8]	; (23fe5c4 <_Z22__fetch_global_Serial1v+0x40>)
 23fe5ba:	b007      	add	sp, #28
 23fe5bc:	bd30      	pop	{r4, r5, pc}
 23fe5be:	bf00      	nop
 23fe5c0:	1007aeec 	.word	0x1007aeec
 23fe5c4:	1007aef8 	.word	0x1007aef8
 23fe5c8:	023fe525 	.word	0x023fe525

023fe5cc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe5cc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe5ce:	4c0d      	ldr	r4, [pc, #52]	; (23fe604 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe5d0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe5d2:	e8d4 3f8f 	ldab	r3, [r4]
 23fe5d6:	07db      	lsls	r3, r3, #31
 23fe5d8:	d411      	bmi.n	23fe5fe <_Z22__fetch_global_Serial2v+0x32>
 23fe5da:	4620      	mov	r0, r4
 23fe5dc:	f7fb ff60 	bl	23fa4a0 <__cxa_guard_acquire>
 23fe5e0:	b168      	cbz	r0, 23fe5fe <_Z22__fetch_global_Serial2v+0x32>
 23fe5e2:	a801      	add	r0, sp, #4
 23fe5e4:	f7ff ffc2 	bl	23fe56c <_Z20acquireSerial2Bufferv>
 23fe5e8:	2101      	movs	r1, #1
 23fe5ea:	aa01      	add	r2, sp, #4
 23fe5ec:	4806      	ldr	r0, [pc, #24]	; (23fe608 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe5ee:	f7ff fbfd 	bl	23fddec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe5f2:	4620      	mov	r0, r4
 23fe5f4:	f7fb ff59 	bl	23fa4aa <__cxa_guard_release>
 23fe5f8:	4804      	ldr	r0, [pc, #16]	; (23fe60c <_Z22__fetch_global_Serial2v+0x40>)
 23fe5fa:	f000 f9a9 	bl	23fe950 <atexit>
	return serial2;
}
 23fe5fe:	4802      	ldr	r0, [pc, #8]	; (23fe608 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe600:	b006      	add	sp, #24
 23fe602:	bd10      	pop	{r4, pc}
 23fe604:	1007aef0 	.word	0x1007aef0
 23fe608:	1007af0c 	.word	0x1007af0c
 23fe60c:	023fe55f 	.word	0x023fe55f

023fe610 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe610:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe612:	f7ff ffdb 	bl	23fe5cc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe616:	4b07      	ldr	r3, [pc, #28]	; (23fe634 <_Z15serialEventRun2v+0x24>)
 23fe618:	4604      	mov	r4, r0
 23fe61a:	b153      	cbz	r3, 23fe632 <_Z15serialEventRun2v+0x22>
 23fe61c:	f7ff fc04 	bl	23fde28 <_ZN11USARTSerial9isEnabledEv>
 23fe620:	b138      	cbz	r0, 23fe632 <_Z15serialEventRun2v+0x22>
 23fe622:	6823      	ldr	r3, [r4, #0]
 23fe624:	4620      	mov	r0, r4
 23fe626:	691b      	ldr	r3, [r3, #16]
 23fe628:	4798      	blx	r3
 23fe62a:	2800      	cmp	r0, #0
 23fe62c:	dd01      	ble.n	23fe632 <_Z15serialEventRun2v+0x22>
        handler();
 23fe62e:	e000      	b.n	23fe632 <_Z15serialEventRun2v+0x22>
 23fe630:	bf00      	nop
}
 23fe632:	bd10      	pop	{r4, pc}
 23fe634:	00000000 	.word	0x00000000

023fe638 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe638:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe63a:	4c0d      	ldr	r4, [pc, #52]	; (23fe670 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe63c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe63e:	e8d4 3f8f 	ldab	r3, [r4]
 23fe642:	07db      	lsls	r3, r3, #31
 23fe644:	d411      	bmi.n	23fe66a <_Z22__fetch_global_Serial3v+0x32>
 23fe646:	4620      	mov	r0, r4
 23fe648:	f7fb ff2a 	bl	23fa4a0 <__cxa_guard_acquire>
 23fe64c:	b168      	cbz	r0, 23fe66a <_Z22__fetch_global_Serial3v+0x32>
 23fe64e:	a801      	add	r0, sp, #4
 23fe650:	f7ff ff92 	bl	23fe578 <_Z20acquireSerial3Bufferv>
 23fe654:	2102      	movs	r1, #2
 23fe656:	aa01      	add	r2, sp, #4
 23fe658:	4806      	ldr	r0, [pc, #24]	; (23fe674 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe65a:	f7ff fbc7 	bl	23fddec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe65e:	4620      	mov	r0, r4
 23fe660:	f7fb ff23 	bl	23fa4aa <__cxa_guard_release>
 23fe664:	4804      	ldr	r0, [pc, #16]	; (23fe678 <_Z22__fetch_global_Serial3v+0x40>)
 23fe666:	f000 f973 	bl	23fe950 <atexit>
	return serial3;
}
 23fe66a:	4802      	ldr	r0, [pc, #8]	; (23fe674 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe66c:	b006      	add	sp, #24
 23fe66e:	bd10      	pop	{r4, pc}
 23fe670:	1007aef4 	.word	0x1007aef4
 23fe674:	1007af20 	.word	0x1007af20
 23fe678:	023fe55d 	.word	0x023fe55d

023fe67c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe67c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe67e:	f7ff ffdb 	bl	23fe638 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe682:	4b07      	ldr	r3, [pc, #28]	; (23fe6a0 <_Z15serialEventRun3v+0x24>)
 23fe684:	4604      	mov	r4, r0
 23fe686:	b153      	cbz	r3, 23fe69e <_Z15serialEventRun3v+0x22>
 23fe688:	f7ff fbce 	bl	23fde28 <_ZN11USARTSerial9isEnabledEv>
 23fe68c:	b138      	cbz	r0, 23fe69e <_Z15serialEventRun3v+0x22>
 23fe68e:	6823      	ldr	r3, [r4, #0]
 23fe690:	4620      	mov	r0, r4
 23fe692:	691b      	ldr	r3, [r3, #16]
 23fe694:	4798      	blx	r3
 23fe696:	2800      	cmp	r0, #0
 23fe698:	dd01      	ble.n	23fe69e <_Z15serialEventRun3v+0x22>
        handler();
 23fe69a:	e000      	b.n	23fe69e <_Z15serialEventRun3v+0x22>
 23fe69c:	bf00      	nop
}
 23fe69e:	bd10      	pop	{r4, pc}
 23fe6a0:	00000000 	.word	0x00000000

023fe6a4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe6a4:	4770      	bx	lr
	...

023fe6a8 <_Z17acquireWireBufferv>:
{
 23fe6a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe6aa:	4b0a      	ldr	r3, [pc, #40]	; (23fe6d4 <_Z17acquireWireBufferv+0x2c>)
{
 23fe6ac:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe6ae:	6003      	str	r3, [r0, #0]
 23fe6b0:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe6b2:	4909      	ldr	r1, [pc, #36]	; (23fe6d8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fe6b4:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe6b6:	2020      	movs	r0, #32
 23fe6b8:	f000 f836 	bl	23fe728 <_ZnajRKSt9nothrow_t>
	};
 23fe6bc:	2520      	movs	r5, #32
 23fe6be:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe6c0:	4905      	ldr	r1, [pc, #20]	; (23fe6d8 <_Z17acquireWireBufferv+0x30>)
 23fe6c2:	4628      	mov	r0, r5
	};
 23fe6c4:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe6c6:	f000 f82f 	bl	23fe728 <_ZnajRKSt9nothrow_t>
	};
 23fe6ca:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fe6ce:	4620      	mov	r0, r4
 23fe6d0:	bd38      	pop	{r3, r4, r5, pc}
 23fe6d2:	bf00      	nop
 23fe6d4:	00010018 	.word	0x00010018
 23fe6d8:	023ffd45 	.word	0x023ffd45

023fe6dc <_Z19__fetch_global_Wirev>:
{
 23fe6dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe6de:	4d0e      	ldr	r5, [pc, #56]	; (23fe718 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fe6e0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe6e2:	e8d5 1f8f 	ldab	r1, [r5]
 23fe6e6:	f011 0401 	ands.w	r4, r1, #1
 23fe6ea:	d111      	bne.n	23fe710 <_Z19__fetch_global_Wirev+0x34>
 23fe6ec:	4628      	mov	r0, r5
 23fe6ee:	f7fb fed7 	bl	23fa4a0 <__cxa_guard_acquire>
 23fe6f2:	b168      	cbz	r0, 23fe710 <_Z19__fetch_global_Wirev+0x34>
 23fe6f4:	4668      	mov	r0, sp
 23fe6f6:	f7ff ffd7 	bl	23fe6a8 <_Z17acquireWireBufferv>
 23fe6fa:	466a      	mov	r2, sp
 23fe6fc:	4621      	mov	r1, r4
 23fe6fe:	4807      	ldr	r0, [pc, #28]	; (23fe71c <_Z19__fetch_global_Wirev+0x40>)
 23fe700:	f7ff fbc2 	bl	23fde88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fe704:	4628      	mov	r0, r5
 23fe706:	f7fb fed0 	bl	23fa4aa <__cxa_guard_release>
 23fe70a:	4805      	ldr	r0, [pc, #20]	; (23fe720 <_Z19__fetch_global_Wirev+0x44>)
 23fe70c:	f000 f920 	bl	23fe950 <atexit>
	return wire;
}
 23fe710:	4802      	ldr	r0, [pc, #8]	; (23fe71c <_Z19__fetch_global_Wirev+0x40>)
 23fe712:	b007      	add	sp, #28
 23fe714:	bd30      	pop	{r4, r5, pc}
 23fe716:	bf00      	nop
 23fe718:	1007af38 	.word	0x1007af38
 23fe71c:	1007af3c 	.word	0x1007af3c
 23fe720:	023fe6a5 	.word	0x023fe6a5

023fe724 <_ZnwjRKSt9nothrow_t>:
 23fe724:	f7fb bea7 	b.w	23fa476 <_Znwj>

023fe728 <_ZnajRKSt9nothrow_t>:
 23fe728:	f7fb bea7 	b.w	23fa47a <_Znaj>

023fe72c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fe72c:	4901      	ldr	r1, [pc, #4]	; (23fe734 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fe72e:	f000 b8f9 	b.w	23fe924 <_ZNKSt9type_infoeqERKS_>
 23fe732:	bf00      	nop
 23fe734:	023ffd60 	.word	0x023ffd60

023fe738 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fe738:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fe73a:	2400      	movs	r4, #0
 23fe73c:	2310      	movs	r3, #16
 23fe73e:	4615      	mov	r5, r2
 23fe740:	6812      	ldr	r2, [r2, #0]
 23fe742:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fe746:	6803      	ldr	r3, [r0, #0]
 23fe748:	e9cd 4400 	strd	r4, r4, [sp]
 23fe74c:	699e      	ldr	r6, [r3, #24]
 23fe74e:	466b      	mov	r3, sp
 23fe750:	47b0      	blx	r6
 23fe752:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fe756:	f003 0306 	and.w	r3, r3, #6
 23fe75a:	2b06      	cmp	r3, #6
 23fe75c:	bf05      	ittet	eq
 23fe75e:	9b00      	ldreq	r3, [sp, #0]
 23fe760:	2001      	moveq	r0, #1
 23fe762:	4620      	movne	r0, r4
 23fe764:	602b      	streq	r3, [r5, #0]
 23fe766:	b004      	add	sp, #16
 23fe768:	bd70      	pop	{r4, r5, r6, pc}

023fe76a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fe76a:	9800      	ldr	r0, [sp, #0]
 23fe76c:	4290      	cmp	r0, r2
 23fe76e:	bf14      	ite	ne
 23fe770:	2001      	movne	r0, #1
 23fe772:	2006      	moveq	r0, #6
 23fe774:	4770      	bx	lr
	...

023fe778 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fe778:	4b03      	ldr	r3, [pc, #12]	; (23fe788 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fe77a:	b510      	push	{r4, lr}
 23fe77c:	4604      	mov	r4, r0
 23fe77e:	6003      	str	r3, [r0, #0]
 23fe780:	f000 f8cd 	bl	23fe91e <_ZNSt9type_infoD1Ev>
 23fe784:	4620      	mov	r0, r4
 23fe786:	bd10      	pop	{r4, pc}
 23fe788:	023ffda0 	.word	0x023ffda0

023fe78c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fe78c:	b510      	push	{r4, lr}
 23fe78e:	4604      	mov	r4, r0
 23fe790:	f7ff fff2 	bl	23fe778 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fe794:	2108      	movs	r1, #8
 23fe796:	4620      	mov	r0, r4
 23fe798:	f7fb fe73 	bl	23fa482 <_ZdlPvj>
 23fe79c:	4620      	mov	r0, r4
 23fe79e:	bd10      	pop	{r4, pc}

023fe7a0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fe7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe7a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fe7a8:	461f      	mov	r7, r3
 23fe7aa:	4606      	mov	r6, r0
 23fe7ac:	4615      	mov	r5, r2
 23fe7ae:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fe7b2:	4598      	cmp	r8, r3
 23fe7b4:	d107      	bne.n	23fe7c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fe7b6:	9907      	ldr	r1, [sp, #28]
 23fe7b8:	f000 f8b4 	bl	23fe924 <_ZNKSt9type_infoeqERKS_>
 23fe7bc:	b118      	cbz	r0, 23fe7c6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fe7be:	7165      	strb	r5, [r4, #5]
 23fe7c0:	2000      	movs	r0, #0
 23fe7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe7c6:	4639      	mov	r1, r7
 23fe7c8:	4630      	mov	r0, r6
 23fe7ca:	f000 f8ab 	bl	23fe924 <_ZNKSt9type_infoeqERKS_>
 23fe7ce:	2800      	cmp	r0, #0
 23fe7d0:	d0f6      	beq.n	23fe7c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fe7d2:	2301      	movs	r3, #1
 23fe7d4:	f8c4 8000 	str.w	r8, [r4]
 23fe7d8:	7125      	strb	r5, [r4, #4]
 23fe7da:	71a3      	strb	r3, [r4, #6]
 23fe7dc:	e7f0      	b.n	23fe7c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fe7de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fe7de:	b538      	push	{r3, r4, r5, lr}
 23fe7e0:	4615      	mov	r5, r2
 23fe7e2:	461c      	mov	r4, r3
 23fe7e4:	f000 f89e 	bl	23fe924 <_ZNKSt9type_infoeqERKS_>
 23fe7e8:	b120      	cbz	r0, 23fe7f4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fe7ea:	2308      	movs	r3, #8
 23fe7ec:	6025      	str	r5, [r4, #0]
 23fe7ee:	60e3      	str	r3, [r4, #12]
 23fe7f0:	2306      	movs	r3, #6
 23fe7f2:	7123      	strb	r3, [r4, #4]
 23fe7f4:	bd38      	pop	{r3, r4, r5, pc}

023fe7f6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fe7f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe7f8:	4605      	mov	r5, r0
 23fe7fa:	460c      	mov	r4, r1
 23fe7fc:	461e      	mov	r6, r3
 23fe7fe:	9201      	str	r2, [sp, #4]
 23fe800:	f000 f890 	bl	23fe924 <_ZNKSt9type_infoeqERKS_>
 23fe804:	b950      	cbnz	r0, 23fe81c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fe806:	2e03      	cmp	r6, #3
 23fe808:	d808      	bhi.n	23fe81c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fe80a:	6823      	ldr	r3, [r4, #0]
 23fe80c:	4629      	mov	r1, r5
 23fe80e:	9a01      	ldr	r2, [sp, #4]
 23fe810:	4620      	mov	r0, r4
 23fe812:	695b      	ldr	r3, [r3, #20]
 23fe814:	b002      	add	sp, #8
 23fe816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fe81a:	4718      	bx	r3
 23fe81c:	b002      	add	sp, #8
 23fe81e:	bd70      	pop	{r4, r5, r6, pc}

023fe820 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fe820:	4b03      	ldr	r3, [pc, #12]	; (23fe830 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fe822:	b510      	push	{r4, lr}
 23fe824:	4604      	mov	r4, r0
 23fe826:	6003      	str	r3, [r0, #0]
 23fe828:	f7ff ffa6 	bl	23fe778 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fe82c:	4620      	mov	r0, r4
 23fe82e:	bd10      	pop	{r4, pc}
 23fe830:	023ffe00 	.word	0x023ffe00

023fe834 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fe834:	b510      	push	{r4, lr}
 23fe836:	4604      	mov	r4, r0
 23fe838:	f7ff fff2 	bl	23fe820 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fe83c:	210c      	movs	r1, #12
 23fe83e:	4620      	mov	r0, r4
 23fe840:	f7fb fe1f 	bl	23fa482 <_ZdlPvj>
 23fe844:	4620      	mov	r0, r4
 23fe846:	bd10      	pop	{r4, pc}

023fe848 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fe848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fe84a:	9f08      	ldr	r7, [sp, #32]
 23fe84c:	4605      	mov	r5, r0
 23fe84e:	460e      	mov	r6, r1
 23fe850:	4614      	mov	r4, r2
 23fe852:	4297      	cmp	r7, r2
 23fe854:	d00a      	beq.n	23fe86c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fe856:	68a8      	ldr	r0, [r5, #8]
 23fe858:	4631      	mov	r1, r6
 23fe85a:	6802      	ldr	r2, [r0, #0]
 23fe85c:	9708      	str	r7, [sp, #32]
 23fe85e:	6a15      	ldr	r5, [r2, #32]
 23fe860:	4622      	mov	r2, r4
 23fe862:	46ac      	mov	ip, r5
 23fe864:	b003      	add	sp, #12
 23fe866:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fe86a:	4760      	bx	ip
 23fe86c:	4619      	mov	r1, r3
 23fe86e:	9301      	str	r3, [sp, #4]
 23fe870:	f000 f858 	bl	23fe924 <_ZNKSt9type_infoeqERKS_>
 23fe874:	9b01      	ldr	r3, [sp, #4]
 23fe876:	2800      	cmp	r0, #0
 23fe878:	d0ed      	beq.n	23fe856 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fe87a:	2006      	movs	r0, #6
 23fe87c:	b003      	add	sp, #12
 23fe87e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe880 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fe880:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe884:	460d      	mov	r5, r1
 23fe886:	4619      	mov	r1, r3
 23fe888:	4681      	mov	r9, r0
 23fe88a:	4617      	mov	r7, r2
 23fe88c:	4698      	mov	r8, r3
 23fe88e:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fe892:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fe896:	f000 f845 	bl	23fe924 <_ZNKSt9type_infoeqERKS_>
 23fe89a:	b190      	cbz	r0, 23fe8c2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fe89c:	2d00      	cmp	r5, #0
 23fe89e:	6034      	str	r4, [r6, #0]
 23fe8a0:	7137      	strb	r7, [r6, #4]
 23fe8a2:	db09      	blt.n	23fe8b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fe8a4:	1961      	adds	r1, r4, r5
 23fe8a6:	458a      	cmp	sl, r1
 23fe8a8:	bf0c      	ite	eq
 23fe8aa:	2106      	moveq	r1, #6
 23fe8ac:	2101      	movne	r1, #1
 23fe8ae:	71b1      	strb	r1, [r6, #6]
 23fe8b0:	2000      	movs	r0, #0
 23fe8b2:	b001      	add	sp, #4
 23fe8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe8b8:	3502      	adds	r5, #2
 23fe8ba:	d1f9      	bne.n	23fe8b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe8bc:	2301      	movs	r3, #1
 23fe8be:	71b3      	strb	r3, [r6, #6]
 23fe8c0:	e7f6      	b.n	23fe8b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe8c2:	4554      	cmp	r4, sl
 23fe8c4:	d106      	bne.n	23fe8d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fe8c6:	4659      	mov	r1, fp
 23fe8c8:	4648      	mov	r0, r9
 23fe8ca:	f000 f82b 	bl	23fe924 <_ZNKSt9type_infoeqERKS_>
 23fe8ce:	b108      	cbz	r0, 23fe8d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fe8d0:	7177      	strb	r7, [r6, #5]
 23fe8d2:	e7ed      	b.n	23fe8b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe8d4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fe8d8:	463a      	mov	r2, r7
 23fe8da:	4629      	mov	r1, r5
 23fe8dc:	6803      	ldr	r3, [r0, #0]
 23fe8de:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fe8e2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fe8e6:	69dc      	ldr	r4, [r3, #28]
 23fe8e8:	4643      	mov	r3, r8
 23fe8ea:	46a4      	mov	ip, r4
 23fe8ec:	b001      	add	sp, #4
 23fe8ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe8f2:	4760      	bx	ip

023fe8f4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fe8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe8f8:	4607      	mov	r7, r0
 23fe8fa:	460c      	mov	r4, r1
 23fe8fc:	4615      	mov	r5, r2
 23fe8fe:	461e      	mov	r6, r3
 23fe900:	f7ff ff6d 	bl	23fe7de <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fe904:	b948      	cbnz	r0, 23fe91a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fe906:	68b8      	ldr	r0, [r7, #8]
 23fe908:	462a      	mov	r2, r5
 23fe90a:	4621      	mov	r1, r4
 23fe90c:	6803      	ldr	r3, [r0, #0]
 23fe90e:	699f      	ldr	r7, [r3, #24]
 23fe910:	4633      	mov	r3, r6
 23fe912:	46bc      	mov	ip, r7
 23fe914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fe918:	4760      	bx	ip
 23fe91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe91e <_ZNSt9type_infoD1Ev>:
 23fe91e:	4770      	bx	lr

023fe920 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fe920:	2000      	movs	r0, #0
 23fe922:	4770      	bx	lr

023fe924 <_ZNKSt9type_infoeqERKS_>:
 23fe924:	4281      	cmp	r1, r0
 23fe926:	b508      	push	{r3, lr}
 23fe928:	d00e      	beq.n	23fe948 <_ZNKSt9type_infoeqERKS_+0x24>
 23fe92a:	6840      	ldr	r0, [r0, #4]
 23fe92c:	7803      	ldrb	r3, [r0, #0]
 23fe92e:	2b2a      	cmp	r3, #42	; 0x2a
 23fe930:	d00c      	beq.n	23fe94c <_ZNKSt9type_infoeqERKS_+0x28>
 23fe932:	6849      	ldr	r1, [r1, #4]
 23fe934:	780b      	ldrb	r3, [r1, #0]
 23fe936:	2b2a      	cmp	r3, #42	; 0x2a
 23fe938:	bf08      	it	eq
 23fe93a:	3101      	addeq	r1, #1
 23fe93c:	f7fb fd6c 	bl	23fa418 <strcmp>
 23fe940:	fab0 f080 	clz	r0, r0
 23fe944:	0940      	lsrs	r0, r0, #5
 23fe946:	bd08      	pop	{r3, pc}
 23fe948:	2001      	movs	r0, #1
 23fe94a:	e7fc      	b.n	23fe946 <_ZNKSt9type_infoeqERKS_+0x22>
 23fe94c:	2000      	movs	r0, #0
 23fe94e:	e7fa      	b.n	23fe946 <_ZNKSt9type_infoeqERKS_+0x22>

023fe950 <atexit>:
 23fe950:	2300      	movs	r3, #0
 23fe952:	4601      	mov	r1, r0
 23fe954:	461a      	mov	r2, r3
 23fe956:	4618      	mov	r0, r3
 23fe958:	f000 b972 	b.w	23fec40 <__register_exitproc>

023fe95c <isprint>:
 23fe95c:	4b02      	ldr	r3, [pc, #8]	; (23fe968 <isprint+0xc>)
 23fe95e:	4418      	add	r0, r3
 23fe960:	7840      	ldrb	r0, [r0, #1]
 23fe962:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fe966:	4770      	bx	lr
 23fe968:	023ffecd 	.word	0x023ffecd

023fe96c <memcpy>:
 23fe96c:	440a      	add	r2, r1
 23fe96e:	1e43      	subs	r3, r0, #1
 23fe970:	4291      	cmp	r1, r2
 23fe972:	d100      	bne.n	23fe976 <memcpy+0xa>
 23fe974:	4770      	bx	lr
 23fe976:	b510      	push	{r4, lr}
 23fe978:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe97c:	4291      	cmp	r1, r2
 23fe97e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fe982:	d1f9      	bne.n	23fe978 <memcpy+0xc>
 23fe984:	bd10      	pop	{r4, pc}

023fe986 <memmove>:
 23fe986:	4288      	cmp	r0, r1
 23fe988:	b510      	push	{r4, lr}
 23fe98a:	eb01 0402 	add.w	r4, r1, r2
 23fe98e:	d902      	bls.n	23fe996 <memmove+0x10>
 23fe990:	4284      	cmp	r4, r0
 23fe992:	4623      	mov	r3, r4
 23fe994:	d807      	bhi.n	23fe9a6 <memmove+0x20>
 23fe996:	1e43      	subs	r3, r0, #1
 23fe998:	42a1      	cmp	r1, r4
 23fe99a:	d008      	beq.n	23fe9ae <memmove+0x28>
 23fe99c:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fe9a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fe9a4:	e7f8      	b.n	23fe998 <memmove+0x12>
 23fe9a6:	4402      	add	r2, r0
 23fe9a8:	4601      	mov	r1, r0
 23fe9aa:	428a      	cmp	r2, r1
 23fe9ac:	d100      	bne.n	23fe9b0 <memmove+0x2a>
 23fe9ae:	bd10      	pop	{r4, pc}
 23fe9b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fe9b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fe9b8:	e7f7      	b.n	23fe9aa <memmove+0x24>

023fe9ba <memset>:
 23fe9ba:	4402      	add	r2, r0
 23fe9bc:	4603      	mov	r3, r0
 23fe9be:	4293      	cmp	r3, r2
 23fe9c0:	d100      	bne.n	23fe9c4 <memset+0xa>
 23fe9c2:	4770      	bx	lr
 23fe9c4:	f803 1b01 	strb.w	r1, [r3], #1
 23fe9c8:	e7f9      	b.n	23fe9be <memset+0x4>
	...

023fe9cc <srand>:
 23fe9cc:	b538      	push	{r3, r4, r5, lr}
 23fe9ce:	4b10      	ldr	r3, [pc, #64]	; (23fea10 <srand+0x44>)
 23fe9d0:	4604      	mov	r4, r0
 23fe9d2:	681d      	ldr	r5, [r3, #0]
 23fe9d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe9d6:	b9b3      	cbnz	r3, 23fea06 <srand+0x3a>
 23fe9d8:	2018      	movs	r0, #24
 23fe9da:	f7fd faad 	bl	23fbf38 <malloc>
 23fe9de:	4602      	mov	r2, r0
 23fe9e0:	63a8      	str	r0, [r5, #56]	; 0x38
 23fe9e2:	b920      	cbnz	r0, 23fe9ee <srand+0x22>
 23fe9e4:	4b0b      	ldr	r3, [pc, #44]	; (23fea14 <srand+0x48>)
 23fe9e6:	2142      	movs	r1, #66	; 0x42
 23fe9e8:	480b      	ldr	r0, [pc, #44]	; (23fea18 <srand+0x4c>)
 23fe9ea:	f7fd faeb 	bl	23fbfc4 <__assert_func>
 23fe9ee:	490b      	ldr	r1, [pc, #44]	; (23fea1c <srand+0x50>)
 23fe9f0:	4b0b      	ldr	r3, [pc, #44]	; (23fea20 <srand+0x54>)
 23fe9f2:	e9c0 1300 	strd	r1, r3, [r0]
 23fe9f6:	4b0b      	ldr	r3, [pc, #44]	; (23fea24 <srand+0x58>)
 23fe9f8:	2100      	movs	r1, #0
 23fe9fa:	6083      	str	r3, [r0, #8]
 23fe9fc:	230b      	movs	r3, #11
 23fe9fe:	8183      	strh	r3, [r0, #12]
 23fea00:	2001      	movs	r0, #1
 23fea02:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fea06:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fea08:	2200      	movs	r2, #0
 23fea0a:	611c      	str	r4, [r3, #16]
 23fea0c:	615a      	str	r2, [r3, #20]
 23fea0e:	bd38      	pop	{r3, r4, r5, pc}
 23fea10:	1007ad7c 	.word	0x1007ad7c
 23fea14:	023ffe39 	.word	0x023ffe39
 23fea18:	023ffe50 	.word	0x023ffe50
 23fea1c:	abcd330e 	.word	0xabcd330e
 23fea20:	e66d1234 	.word	0xe66d1234
 23fea24:	0005deec 	.word	0x0005deec

023fea28 <strchr>:
 23fea28:	b2c9      	uxtb	r1, r1
 23fea2a:	4603      	mov	r3, r0
 23fea2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fea30:	b11a      	cbz	r2, 23fea3a <strchr+0x12>
 23fea32:	428a      	cmp	r2, r1
 23fea34:	d1f9      	bne.n	23fea2a <strchr+0x2>
 23fea36:	4618      	mov	r0, r3
 23fea38:	4770      	bx	lr
 23fea3a:	2900      	cmp	r1, #0
 23fea3c:	bf18      	it	ne
 23fea3e:	2300      	movne	r3, #0
 23fea40:	e7f9      	b.n	23fea36 <strchr+0xe>

023fea42 <strchrnul>:
 23fea42:	b510      	push	{r4, lr}
 23fea44:	4604      	mov	r4, r0
 23fea46:	f7ff ffef 	bl	23fea28 <strchr>
 23fea4a:	b918      	cbnz	r0, 23fea54 <strchrnul+0x12>
 23fea4c:	4620      	mov	r0, r4
 23fea4e:	f7fb fced 	bl	23fa42c <strlen>
 23fea52:	4420      	add	r0, r4
 23fea54:	bd10      	pop	{r4, pc}

023fea56 <strcpy>:
 23fea56:	4603      	mov	r3, r0
 23fea58:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fea5c:	f803 2b01 	strb.w	r2, [r3], #1
 23fea60:	2a00      	cmp	r2, #0
 23fea62:	d1f9      	bne.n	23fea58 <strcpy+0x2>
 23fea64:	4770      	bx	lr

023fea66 <strncmp>:
 23fea66:	b510      	push	{r4, lr}
 23fea68:	b17a      	cbz	r2, 23fea8a <strncmp+0x24>
 23fea6a:	4603      	mov	r3, r0
 23fea6c:	3901      	subs	r1, #1
 23fea6e:	1884      	adds	r4, r0, r2
 23fea70:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fea74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fea78:	4290      	cmp	r0, r2
 23fea7a:	d101      	bne.n	23fea80 <strncmp+0x1a>
 23fea7c:	42a3      	cmp	r3, r4
 23fea7e:	d101      	bne.n	23fea84 <strncmp+0x1e>
 23fea80:	1a80      	subs	r0, r0, r2
 23fea82:	bd10      	pop	{r4, pc}
 23fea84:	2800      	cmp	r0, #0
 23fea86:	d1f3      	bne.n	23fea70 <strncmp+0xa>
 23fea88:	e7fa      	b.n	23fea80 <strncmp+0x1a>
 23fea8a:	4610      	mov	r0, r2
 23fea8c:	e7f9      	b.n	23fea82 <strncmp+0x1c>

023fea8e <strrchr>:
 23fea8e:	b538      	push	{r3, r4, r5, lr}
 23fea90:	4603      	mov	r3, r0
 23fea92:	460c      	mov	r4, r1
 23fea94:	b969      	cbnz	r1, 23feab2 <strrchr+0x24>
 23fea96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fea9a:	f7ff bfc5 	b.w	23fea28 <strchr>
 23fea9e:	1c43      	adds	r3, r0, #1
 23feaa0:	4605      	mov	r5, r0
 23feaa2:	4621      	mov	r1, r4
 23feaa4:	4618      	mov	r0, r3
 23feaa6:	f7ff ffbf 	bl	23fea28 <strchr>
 23feaaa:	2800      	cmp	r0, #0
 23feaac:	d1f7      	bne.n	23fea9e <strrchr+0x10>
 23feaae:	4628      	mov	r0, r5
 23feab0:	bd38      	pop	{r3, r4, r5, pc}
 23feab2:	2500      	movs	r5, #0
 23feab4:	e7f5      	b.n	23feaa2 <strrchr+0x14>
	...

023feab8 <_strtol_l.constprop.0>:
 23feab8:	2b01      	cmp	r3, #1
 23feaba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23feabe:	d001      	beq.n	23feac4 <_strtol_l.constprop.0+0xc>
 23feac0:	2b24      	cmp	r3, #36	; 0x24
 23feac2:	d906      	bls.n	23fead2 <_strtol_l.constprop.0+0x1a>
 23feac4:	f7fd fa70 	bl	23fbfa8 <__errno>
 23feac8:	2316      	movs	r3, #22
 23feaca:	6003      	str	r3, [r0, #0]
 23feacc:	2000      	movs	r0, #0
 23feace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fead2:	460d      	mov	r5, r1
 23fead4:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23febb8 <_strtol_l.constprop.0+0x100>
 23fead8:	462e      	mov	r6, r5
 23feada:	f815 4b01 	ldrb.w	r4, [r5], #1
 23feade:	f814 700c 	ldrb.w	r7, [r4, ip]
 23feae2:	f017 0708 	ands.w	r7, r7, #8
 23feae6:	d1f7      	bne.n	23fead8 <_strtol_l.constprop.0+0x20>
 23feae8:	2c2d      	cmp	r4, #45	; 0x2d
 23feaea:	d132      	bne.n	23feb52 <_strtol_l.constprop.0+0x9a>
 23feaec:	782c      	ldrb	r4, [r5, #0]
 23feaee:	2701      	movs	r7, #1
 23feaf0:	1cb5      	adds	r5, r6, #2
 23feaf2:	2b00      	cmp	r3, #0
 23feaf4:	d05b      	beq.n	23febae <_strtol_l.constprop.0+0xf6>
 23feaf6:	2b10      	cmp	r3, #16
 23feaf8:	d109      	bne.n	23feb0e <_strtol_l.constprop.0+0x56>
 23feafa:	2c30      	cmp	r4, #48	; 0x30
 23feafc:	d107      	bne.n	23feb0e <_strtol_l.constprop.0+0x56>
 23feafe:	782c      	ldrb	r4, [r5, #0]
 23feb00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23feb04:	2c58      	cmp	r4, #88	; 0x58
 23feb06:	d14d      	bne.n	23feba4 <_strtol_l.constprop.0+0xec>
 23feb08:	786c      	ldrb	r4, [r5, #1]
 23feb0a:	2310      	movs	r3, #16
 23feb0c:	3502      	adds	r5, #2
 23feb0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23feb12:	f04f 0c00 	mov.w	ip, #0
 23feb16:	f108 38ff 	add.w	r8, r8, #4294967295
 23feb1a:	4666      	mov	r6, ip
 23feb1c:	fbb8 f9f3 	udiv	r9, r8, r3
 23feb20:	fb03 8a19 	mls	sl, r3, r9, r8
 23feb24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23feb28:	f1be 0f09 	cmp.w	lr, #9
 23feb2c:	d816      	bhi.n	23feb5c <_strtol_l.constprop.0+0xa4>
 23feb2e:	4674      	mov	r4, lr
 23feb30:	42a3      	cmp	r3, r4
 23feb32:	dd24      	ble.n	23feb7e <_strtol_l.constprop.0+0xc6>
 23feb34:	f1bc 0f00 	cmp.w	ip, #0
 23feb38:	db1e      	blt.n	23feb78 <_strtol_l.constprop.0+0xc0>
 23feb3a:	45b1      	cmp	r9, r6
 23feb3c:	d31c      	bcc.n	23feb78 <_strtol_l.constprop.0+0xc0>
 23feb3e:	d101      	bne.n	23feb44 <_strtol_l.constprop.0+0x8c>
 23feb40:	45a2      	cmp	sl, r4
 23feb42:	db19      	blt.n	23feb78 <_strtol_l.constprop.0+0xc0>
 23feb44:	fb06 4603 	mla	r6, r6, r3, r4
 23feb48:	f04f 0c01 	mov.w	ip, #1
 23feb4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 23feb50:	e7e8      	b.n	23feb24 <_strtol_l.constprop.0+0x6c>
 23feb52:	2c2b      	cmp	r4, #43	; 0x2b
 23feb54:	bf04      	itt	eq
 23feb56:	782c      	ldrbeq	r4, [r5, #0]
 23feb58:	1cb5      	addeq	r5, r6, #2
 23feb5a:	e7ca      	b.n	23feaf2 <_strtol_l.constprop.0+0x3a>
 23feb5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23feb60:	f1be 0f19 	cmp.w	lr, #25
 23feb64:	d801      	bhi.n	23feb6a <_strtol_l.constprop.0+0xb2>
 23feb66:	3c37      	subs	r4, #55	; 0x37
 23feb68:	e7e2      	b.n	23feb30 <_strtol_l.constprop.0+0x78>
 23feb6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23feb6e:	f1be 0f19 	cmp.w	lr, #25
 23feb72:	d804      	bhi.n	23feb7e <_strtol_l.constprop.0+0xc6>
 23feb74:	3c57      	subs	r4, #87	; 0x57
 23feb76:	e7db      	b.n	23feb30 <_strtol_l.constprop.0+0x78>
 23feb78:	f04f 3cff 	mov.w	ip, #4294967295
 23feb7c:	e7e6      	b.n	23feb4c <_strtol_l.constprop.0+0x94>
 23feb7e:	f1bc 0f00 	cmp.w	ip, #0
 23feb82:	da05      	bge.n	23feb90 <_strtol_l.constprop.0+0xd8>
 23feb84:	2322      	movs	r3, #34	; 0x22
 23feb86:	4646      	mov	r6, r8
 23feb88:	6003      	str	r3, [r0, #0]
 23feb8a:	b942      	cbnz	r2, 23feb9e <_strtol_l.constprop.0+0xe6>
 23feb8c:	4630      	mov	r0, r6
 23feb8e:	e79e      	b.n	23feace <_strtol_l.constprop.0+0x16>
 23feb90:	b107      	cbz	r7, 23feb94 <_strtol_l.constprop.0+0xdc>
 23feb92:	4276      	negs	r6, r6
 23feb94:	2a00      	cmp	r2, #0
 23feb96:	d0f9      	beq.n	23feb8c <_strtol_l.constprop.0+0xd4>
 23feb98:	f1bc 0f00 	cmp.w	ip, #0
 23feb9c:	d000      	beq.n	23feba0 <_strtol_l.constprop.0+0xe8>
 23feb9e:	1e69      	subs	r1, r5, #1
 23feba0:	6011      	str	r1, [r2, #0]
 23feba2:	e7f3      	b.n	23feb8c <_strtol_l.constprop.0+0xd4>
 23feba4:	2430      	movs	r4, #48	; 0x30
 23feba6:	2b00      	cmp	r3, #0
 23feba8:	d1b1      	bne.n	23feb0e <_strtol_l.constprop.0+0x56>
 23febaa:	2308      	movs	r3, #8
 23febac:	e7af      	b.n	23feb0e <_strtol_l.constprop.0+0x56>
 23febae:	2c30      	cmp	r4, #48	; 0x30
 23febb0:	d0a5      	beq.n	23feafe <_strtol_l.constprop.0+0x46>
 23febb2:	230a      	movs	r3, #10
 23febb4:	e7ab      	b.n	23feb0e <_strtol_l.constprop.0+0x56>
 23febb6:	bf00      	nop
 23febb8:	023ffece 	.word	0x023ffece

023febbc <strtol>:
 23febbc:	4613      	mov	r3, r2
 23febbe:	460a      	mov	r2, r1
 23febc0:	4601      	mov	r1, r0
 23febc2:	4802      	ldr	r0, [pc, #8]	; (23febcc <strtol+0x10>)
 23febc4:	6800      	ldr	r0, [r0, #0]
 23febc6:	f7ff bf77 	b.w	23feab8 <_strtol_l.constprop.0>
 23febca:	bf00      	nop
 23febcc:	1007ad7c 	.word	0x1007ad7c

023febd0 <close>:
 23febd0:	4b02      	ldr	r3, [pc, #8]	; (23febdc <close+0xc>)
 23febd2:	4601      	mov	r1, r0
 23febd4:	6818      	ldr	r0, [r3, #0]
 23febd6:	f000 b897 	b.w	23fed08 <_close_r>
 23febda:	bf00      	nop
 23febdc:	1007ad7c 	.word	0x1007ad7c

023febe0 <open>:
 23febe0:	b40e      	push	{r1, r2, r3}
 23febe2:	b503      	push	{r0, r1, lr}
 23febe4:	ab03      	add	r3, sp, #12
 23febe6:	4601      	mov	r1, r0
 23febe8:	4806      	ldr	r0, [pc, #24]	; (23fec04 <open+0x24>)
 23febea:	f853 2b04 	ldr.w	r2, [r3], #4
 23febee:	6800      	ldr	r0, [r0, #0]
 23febf0:	9301      	str	r3, [sp, #4]
 23febf2:	9b04      	ldr	r3, [sp, #16]
 23febf4:	f000 f89c 	bl	23fed30 <_open_r>
 23febf8:	b002      	add	sp, #8
 23febfa:	f85d eb04 	ldr.w	lr, [sp], #4
 23febfe:	b003      	add	sp, #12
 23fec00:	4770      	bx	lr
 23fec02:	bf00      	nop
 23fec04:	1007ad7c 	.word	0x1007ad7c

023fec08 <write>:
 23fec08:	4613      	mov	r3, r2
 23fec0a:	460a      	mov	r2, r1
 23fec0c:	4601      	mov	r1, r0
 23fec0e:	4802      	ldr	r0, [pc, #8]	; (23fec18 <write+0x10>)
 23fec10:	6800      	ldr	r0, [r0, #0]
 23fec12:	f000 b803 	b.w	23fec1c <_write_r>
 23fec16:	bf00      	nop
 23fec18:	1007ad7c 	.word	0x1007ad7c

023fec1c <_write_r>:
 23fec1c:	b538      	push	{r3, r4, r5, lr}
 23fec1e:	4604      	mov	r4, r0
 23fec20:	4d06      	ldr	r5, [pc, #24]	; (23fec3c <_write_r+0x20>)
 23fec22:	4608      	mov	r0, r1
 23fec24:	4611      	mov	r1, r2
 23fec26:	2200      	movs	r2, #0
 23fec28:	602a      	str	r2, [r5, #0]
 23fec2a:	461a      	mov	r2, r3
 23fec2c:	f7fc fd94 	bl	23fb758 <_write>
 23fec30:	1c43      	adds	r3, r0, #1
 23fec32:	d102      	bne.n	23fec3a <_write_r+0x1e>
 23fec34:	682b      	ldr	r3, [r5, #0]
 23fec36:	b103      	cbz	r3, 23fec3a <_write_r+0x1e>
 23fec38:	6023      	str	r3, [r4, #0]
 23fec3a:	bd38      	pop	{r3, r4, r5, pc}
 23fec3c:	1007afe4 	.word	0x1007afe4

023fec40 <__register_exitproc>:
 23fec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fec44:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fed04 <__register_exitproc+0xc4>
 23fec48:	4606      	mov	r6, r0
 23fec4a:	461f      	mov	r7, r3
 23fec4c:	460d      	mov	r5, r1
 23fec4e:	f8d8 0000 	ldr.w	r0, [r8]
 23fec52:	4691      	mov	r9, r2
 23fec54:	f000 f868 	bl	23fed28 <__retarget_lock_acquire_recursive>
 23fec58:	4b26      	ldr	r3, [pc, #152]	; (23fecf4 <__register_exitproc+0xb4>)
 23fec5a:	681c      	ldr	r4, [r3, #0]
 23fec5c:	b934      	cbnz	r4, 23fec6c <__register_exitproc+0x2c>
 23fec5e:	4c26      	ldr	r4, [pc, #152]	; (23fecf8 <__register_exitproc+0xb8>)
 23fec60:	601c      	str	r4, [r3, #0]
 23fec62:	4b26      	ldr	r3, [pc, #152]	; (23fecfc <__register_exitproc+0xbc>)
 23fec64:	b113      	cbz	r3, 23fec6c <__register_exitproc+0x2c>
 23fec66:	681b      	ldr	r3, [r3, #0]
 23fec68:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fec6c:	6863      	ldr	r3, [r4, #4]
 23fec6e:	2b1f      	cmp	r3, #31
 23fec70:	dd07      	ble.n	23fec82 <__register_exitproc+0x42>
 23fec72:	f8d8 0000 	ldr.w	r0, [r8]
 23fec76:	f000 f859 	bl	23fed2c <__retarget_lock_release_recursive>
 23fec7a:	f04f 30ff 	mov.w	r0, #4294967295
 23fec7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fec82:	b35e      	cbz	r6, 23fecdc <__register_exitproc+0x9c>
 23fec84:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fec88:	b988      	cbnz	r0, 23fecae <__register_exitproc+0x6e>
 23fec8a:	4b1d      	ldr	r3, [pc, #116]	; (23fed00 <__register_exitproc+0xc0>)
 23fec8c:	b923      	cbnz	r3, 23fec98 <__register_exitproc+0x58>
 23fec8e:	f8d8 0000 	ldr.w	r0, [r8]
 23fec92:	f000 f84a 	bl	23fed2a <__retarget_lock_release>
 23fec96:	e7f0      	b.n	23fec7a <__register_exitproc+0x3a>
 23fec98:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fec9c:	f7fd f94c 	bl	23fbf38 <malloc>
 23feca0:	2800      	cmp	r0, #0
 23feca2:	d0f4      	beq.n	23fec8e <__register_exitproc+0x4e>
 23feca4:	2300      	movs	r3, #0
 23feca6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fecaa:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fecae:	6863      	ldr	r3, [r4, #4]
 23fecb0:	2201      	movs	r2, #1
 23fecb2:	2e02      	cmp	r6, #2
 23fecb4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fecb8:	fa02 f203 	lsl.w	r2, r2, r3
 23fecbc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fecc0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fecc4:	ea43 0302 	orr.w	r3, r3, r2
 23fecc8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23feccc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fecd0:	bf02      	ittt	eq
 23fecd2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fecd6:	4313      	orreq	r3, r2
 23fecd8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fecdc:	6863      	ldr	r3, [r4, #4]
 23fecde:	f8d8 0000 	ldr.w	r0, [r8]
 23fece2:	1c5a      	adds	r2, r3, #1
 23fece4:	3302      	adds	r3, #2
 23fece6:	6062      	str	r2, [r4, #4]
 23fece8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fecec:	f000 f81e 	bl	23fed2c <__retarget_lock_release_recursive>
 23fecf0:	2000      	movs	r0, #0
 23fecf2:	e7c4      	b.n	23fec7e <__register_exitproc+0x3e>
 23fecf4:	1007afdc 	.word	0x1007afdc
 23fecf8:	1007af50 	.word	0x1007af50
 23fecfc:	00000000 	.word	0x00000000
 23fed00:	023fbf39 	.word	0x023fbf39
 23fed04:	1007ade0 	.word	0x1007ade0

023fed08 <_close_r>:
 23fed08:	b538      	push	{r3, r4, r5, lr}
 23fed0a:	2300      	movs	r3, #0
 23fed0c:	4d05      	ldr	r5, [pc, #20]	; (23fed24 <_close_r+0x1c>)
 23fed0e:	4604      	mov	r4, r0
 23fed10:	4608      	mov	r0, r1
 23fed12:	602b      	str	r3, [r5, #0]
 23fed14:	f7fc fd2e 	bl	23fb774 <_close>
 23fed18:	1c43      	adds	r3, r0, #1
 23fed1a:	d102      	bne.n	23fed22 <_close_r+0x1a>
 23fed1c:	682b      	ldr	r3, [r5, #0]
 23fed1e:	b103      	cbz	r3, 23fed22 <_close_r+0x1a>
 23fed20:	6023      	str	r3, [r4, #0]
 23fed22:	bd38      	pop	{r3, r4, r5, pc}
 23fed24:	1007afe4 	.word	0x1007afe4

023fed28 <__retarget_lock_acquire_recursive>:
 23fed28:	4770      	bx	lr

023fed2a <__retarget_lock_release>:
 23fed2a:	4770      	bx	lr

023fed2c <__retarget_lock_release_recursive>:
 23fed2c:	4770      	bx	lr
	...

023fed30 <_open_r>:
 23fed30:	b538      	push	{r3, r4, r5, lr}
 23fed32:	4604      	mov	r4, r0
 23fed34:	4d06      	ldr	r5, [pc, #24]	; (23fed50 <_open_r+0x20>)
 23fed36:	4608      	mov	r0, r1
 23fed38:	4611      	mov	r1, r2
 23fed3a:	2200      	movs	r2, #0
 23fed3c:	602a      	str	r2, [r5, #0]
 23fed3e:	461a      	mov	r2, r3
 23fed40:	f7fc fcfc 	bl	23fb73c <_open>
 23fed44:	1c43      	adds	r3, r0, #1
 23fed46:	d102      	bne.n	23fed4e <_open_r+0x1e>
 23fed48:	682b      	ldr	r3, [r5, #0]
 23fed4a:	b103      	cbz	r3, 23fed4e <_open_r+0x1e>
 23fed4c:	6023      	str	r3, [r4, #0]
 23fed4e:	bd38      	pop	{r3, r4, r5, pc}
 23fed50:	1007afe4 	.word	0x1007afe4

023fed54 <dynalib_user>:
 23fed54:	023fa43d 023fa465 023fa469 00000000     =.?.e.?.i.?.....
 23fed64:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fed74:	6c617574 2e646100 00666967 6f637271     tual.ad.gif.qrco
 23fed84:	622e6564 0000706d                       de.bmp..

023fed8c <_ZTVN5spark10LogHandlerE>:
	...
 23fed9c:	023fa489 023fa4b1                       ..?...?.

023feda4 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fedac:	023fa4b5 023fa4e9 023fd6a5 023fd84d     ..?...?...?.M.?.

023fedbc <_ZTV16Adafruit_SSD1351>:
 23fedbc:	0000000c 00000000 00000000 023fb139     ............9.?.
 23fedcc:	023faeb1 023fae0f 023facc3 023fa7d5     ..?...?...?...?.
 23feddc:	023fa809 00000000 00000000 fffffff4     ..?.............
	...
 23fedf4:	fffffff4 fffffff4 00000000 fffffff4     ................
	...
 23fee0c:	fffffff4 fffffff4 00000000 023fa7e9     ..............?.
 23fee1c:	023fa829 023fb3ab 023fc645 023fb1db     ).?...?.E.?...?.
 23fee2c:	023fb1fb 023fae9f 023faf41 023fb2b9     ..?...?.A.?...?.
 23fee3c:	023fb357 023facd9 023fb3a9 023fb605     W.?...?...?...?.

023fee4c <_ZTV12Adafruit_GFX>:
	...
 23fee5c:	023fb3ab 023fc645 023fa489 023fb1fb     ..?.E.?...?...?.
 23fee6c:	023fb321 023fb33d 023fb2b9 023fb357     !.?.=.?...?.W.?.
 23fee7c:	023fb38d 023fb3a9 023fb605              ..?...?...?.

023fee88 <glcdfontBitmaps>:
 23fee88:	0000ff00 00000000 f8700000 88d8f8a8     ..........p.....
 23fee98:	f8700070 d888f8a8 50000070 70f8f8f8     p.p.....p..P...p
 23feea8:	20000020 70f8f870 50700020 20f8a8f8      .. p..p .pP... 
 23feeb8:	70200070 20f8f8f8 00000070 20707020     p. p... p... pp 
 23feec8:	f8f80000 d88888d8 0000f8f8 20505020     ............ PP 
 23feed8:	f8f80000 d8a8a8d8 3800f8f8 a0a06818     ...........8.h..
 23feee8:	88700040 f8207088 48780020 40404078     @.p..p . .xHx@@@
 23feef8:	487800c0 58484878 a82000c0 70d8d870     ..xHxHHX.. .p..p
 23fef08:	c08020a8 c0f0f8f0 18080080 1878f878     . ..........x.x.
 23fef18:	70200008 70a820a8 d8d80020 00d8d8d8     .. p. .p .......
 23fef28:	a87800d8 282868a8 48300028 48102850     ..x..h(((.0HP(.H
 23fef38:	00003048 f8000000 702000f8 70a820a8     H0........ p. .p
 23fef48:	2000f820 2020a870 20000020 70a82020      .. p.   ..   .p
 23fef58:	20000020 2010f810 20000000 2040f840      .. ... ... @.@ 
 23fef68:	80000000 00f88080 50000000 0050f8f8     ...........P..P.
 23fef78:	20000000 f8f87020 f8000000 202070f8     ...  p.......p  
	...
 23fef90:	20200000 00202020 50500020 00000050     ..     . .PPP...
 23fefa0:	50500000 50f850f8 78200050 f02870a0     ..PP.P.PP. x.p(.
 23fefb0:	c8c00020 98402010 a0400018 90a840a0      .... @...@..@..
 23fefc0:	30300068 00004020 20100000 20404040     h.00 @..... @@@ 
 23fefd0:	20400010 20101010 a8200040 a870f870     ..@ ... @. .p.p.
 23fefe0:	20000020 2020f820 00000000 30300000      ..  .  ......00
 23feff0:	00004020 0000f800 00000000 30000000      @.............0
 23ff000:	08000030 80402010 88700000 88c8a898     0.... @...p.....
 23ff010:	60200070 20202020 88700070 80807008     p. `    p.p..p..
 23ff020:	08f800f8 88083010 30100070 10f89050     .....0..p..0P...
 23ff030:	80f80010 880808f0 40380070 8888f080     ........p.8@....
 23ff040:	08f80070 40201008 88700080 88887088     p..... @..p..p..
 23ff050:	88700070 10087888 000000e0 00200020     p.p..x...... . .
 23ff060:	00000000 20200020 10080040 10204020     .... .  @... @ .
 23ff070:	00000008 00f800f8 20400000 20100810     ..........@ ... 
 23ff080:	88700040 00203008 88700020 80b0b8a8     @.p..0 . .p.....
 23ff090:	50200078 88f88888 88f00088 8888f088     x. P............
 23ff0a0:	887000f0 88808080 88f00070 88888888     ..p.....p.......
 23ff0b0:	80f800f0 8080f080 80f800f8 8080f080     ................
 23ff0c0:	88780080 88988080 88880078 8888f888     ..x.....x.......
 23ff0d0:	20700088 20202020 10380070 90101010     ..p     p.8.....
 23ff0e0:	90880060 90a0c0a0 80800088 80808080     `...............
 23ff0f0:	d88800f8 88a8a8a8 88880088 8898a8c8     ................
 23ff100:	88700088 88888888 88f00070 8080f088     ..p.....p.......
 23ff110:	88700080 90a88888 88f00068 90a0f088     ..p.....h.......
 23ff120:	88700088 88087080 a8f80070 20202020     ..p..p..p...    
 23ff130:	88880020 88888888 88880070 50888888      .......p......P
 23ff140:	88880020 a8a8a888 88880050 88502050      .......P...P P.
 23ff150:	88880088 20202050 08f80020 80407010     ....P    ....p@.
 23ff160:	407800f8 40404040 80000078 08102040     ..x@@@@@x...@ ..
 23ff170:	08780000 08080808 50200078 00000088     ..x.....x. P....
	...
 23ff188:	606000f8 00001020 00000000 90701060     ..`` .......`.p.
 23ff198:	80800078 c888c8b0 000000b0 88808870     x...........p...
 23ff1a8:	08080070 98889868 00000068 80f88870     p...h...h...p...
 23ff1b8:	28100070 20207020 00000020 68989870     p..( p   ...p..h
 23ff1c8:	80807008 8888c8b0 00200088 20202060     .p........ .`   
 23ff1d8:	00100070 90101010 80800060 a0c0a090     p.......`.......
 23ff1e8:	20600090 20202020 00000070 a8a8a8d0     ..`     p.......
 23ff1f8:	000000a8 8888c8b0 00000088 88888870     ............p...
 23ff208:	00000070 b0c8c8b0 00008080 68989868     p...........h..h
 23ff218:	00000808 8080c8b0 00000080 08708078     ............x.p.
 23ff228:	202000f0 282020f8 00000010 98888888     ..  .  (........
 23ff238:	00000068 50888888 00000020 a8a88888     h......P .......
 23ff248:	00000050 50205088 00000088 08788888     P....P P......x.
 23ff258:	00007088 402010f8 201000f8 20204020     .p.... @...  @  
 23ff268:	20200010 20200020 20400020 20201020     ..   .   .@  .  
 23ff278:	a8400040 00000010 70200000 f88888d8     @.@....... p....
 23ff288:	88700000 70888080 88006010 98888800     ..p....p.`......
 23ff298:	00180068 80f88870 00f80078 90701060     h...p...x...`.p.
 23ff2a8:	00880078 90701060 00c00078 90701060     x...`.p.x...`.p.
 23ff2b8:	00300078 90701060 78000078 1078c0c0     x.0.`.p.x..x..x.
 23ff2c8:	00f80030 80f88870 00880078 80f88870     0...p...x...p...
 23ff2d8:	00c00078 80f88870 00280078 10101030     x...p...x.(.0...
 23ff2e8:	48300038 10101030 00600038 10101030     8.0H0...8.`.0...
 23ff2f8:	00500038 f8885020 00208888 f8885020     8.P. P.... . P..
 23ff308:	00308888 80e080f0 000000f0 90781078     ..0.........x.x.
 23ff318:	50380078 9090f890 88700098 88887000     x.8P......p..p..
 23ff328:	88000070 88887000 c0000070 88887000     p....p..p....p..
 23ff338:	88700070 98888800 c0000068 98888800     p.p.....h.......
 23ff348:	00480068 38484848 00887008 88888870     h.H.HHH8.p..p...
 23ff358:	00880070 88888888 20200070 f8a0a0f8     p.......p.  ....
 23ff368:	58302020 4840e048 d8d800f8 f820f870       0XH.@H....p. .
 23ff378:	90e02020 b890e090 28189090 20207020       .........( p  
 23ff388:	0018c0a0 90701060 00180078 10101030     ....`.p.x...0...
 23ff398:	18000038 88887000 18000070 98888800     8....p..p.......
 23ff3a8:	78000068 48487000 00f80048 98b8e8c8     h..x.pHHH.......
 23ff3b8:	90700088 f8007890 88700000 f8007088     ..p..x....p..p..
 23ff3c8:	00200000 88806020 00000070 8080f800     .. . `..p.......
 23ff3d8:	00000000 0808f800 88800000 9848b890     ..............H.
 23ff3e8:	88803820 b858a890 20200808 20202000      8....X...  .   
 23ff3f8:	28000020 2850a050 a0000000 a0502850      ..(P.P(....P(P.
 23ff408:	88200000 88208820 a8508820 a850a850     .. . . . .P.P.P.
 23ff418:	1010a850 10101010 10101010 10f01010     P...............
 23ff428:	10101010 10f010f0 28281010 28e82828     ..........((((.(
 23ff438:	00002828 28f80000 00002828 10f010f0     ((.....(((......
 23ff448:	28281010 28e808e8 28282828 28282828     ..((...(((((((((
 23ff458:	00002828 28e808f8 28282828 00f808e8     ((.....(((((....
 23ff468:	28280000 00f82828 10100000 00f010f0     ..((((..........
 23ff478:	00000000 10f00000 10101010 00181010     ................
 23ff488:	10100000 00f81010 00000000 10f80000     ................
 23ff498:	10101010 10181010 00001010 00f80000     ................
 23ff4a8:	10100000 10f81010 10101010 10181018     ................
 23ff4b8:	28281010 28282828 28282828 00382028     ..((((((((((( 8.
 23ff4c8:	00000000 28282038 28282828 00f800e8     ....8 ((((((....
 23ff4d8:	00000000 28e800f8 28282828 28282028     .......(((((( ((
 23ff4e8:	00002828 00f800f8 28280000 28e800e8     ((........((...(
 23ff4f8:	10102828 00f800f8 28280000 00f82828     ((........((((..
 23ff508:	00000000 10f800f8 00001010 28f80000     ...............(
 23ff518:	28282828 00382828 10100000 00181018     ((((((8.........
 23ff528:	00000000 10181018 00001010 28380000     ..............8(
 23ff538:	28282828 28f82828 10102828 10f810f8     ((((((.(((......
 23ff548:	10101010 00f01010 00000000 10180000     ................
 23ff558:	f8f81010 f8f8f8f8 0000f8f8 f8f80000     ................
 23ff568:	e0e0f8f8 e0e0e0e0 1818e0e0 18181818     ................
 23ff578:	f8f81818 0000f8f8 00000000 90909068     ............h...
 23ff588:	70000068 f098f098 f8000080 80808098     h..p............
 23ff598:	f8000080 50505050 88f80050 88402040     ....PPPPP...@ @.
 23ff5a8:	000000f8 90909078 50000060 68505050     ....x...`..PPPPh
 23ff5b8:	f80000c0 202020a0 20f80020 70888870     .....    .. p..p
 23ff5c8:	5020f820 5088f888 50200020 50508888      . P...P . P..PP
 23ff5d8:	403000d8 88887030 00000070 a8a87000     ..0@0p..p....p..
 23ff5e8:	70080070 c8a8a898 80708070 8080f080     p..p....p.p.....
 23ff5f8:	88700070 88888888 f8000088 f800f800     p.p.............
 23ff608:	20200000 002020f8 204000f8 00402010     ..  .  ...@ . @.
 23ff618:	201000f8 00102040 283800f8 20202020     ... @ ....8(    
 23ff628:	20202020 a0202020 3030e0a0 3000f800            ...00...0
 23ff638:	e8000030 b8e800b8 d8700000 000070d8     0.........p..p..
 23ff648:	00000000 00303000 00000000 00300000     .....00.......0.
 23ff658:	20380000 a0a02020 48702060 00484848     ..8   ..` pHHHH.
 23ff668:	18700000 00786030 00000000 78787878     ..p.0`x.....xxxx
	...

023ff682 <glcdfontDescriptors>:
 23ff682:	00000805 00080805 00100805 00180805     ................
 23ff692:	00200805 00280805 00300805 00380805     .. ...(...0...8.
 23ff6a2:	00400805 00480805 00500805 00580805     ..@...H...P...X.
 23ff6b2:	00600805 00680805 00700805 00780805     ..`...h...p...x.
 23ff6c2:	00800805 00880805 00900805 00980805     ................
 23ff6d2:	00a00805 00a80805 00b00805 00b80805     ................
 23ff6e2:	00c00805 00c80805 00d00805 00d80805     ................
 23ff6f2:	00e00805 00e80805 00f00805 00f80805     ................
 23ff702:	01000805 01080805 01100805 01180805     ................
 23ff712:	01200805 01280805 01300805 01380805     .. ...(...0...8.
 23ff722:	01400805 01480805 01500805 01580805     ..@...H...P...X.
 23ff732:	01600805 01680805 01700805 01780805     ..`...h...p...x.
 23ff742:	01800805 01880805 01900805 01980805     ................
 23ff752:	01a00805 01a80805 01b00805 01b80805     ................
 23ff762:	01c00805 01c80805 01d00805 01d80805     ................
 23ff772:	01e00805 01e80805 01f00805 01f80805     ................
 23ff782:	02000805 02080805 02100805 02180805     ................
 23ff792:	02200805 02280805 02300805 02380805     .. ...(...0...8.
 23ff7a2:	02400805 02480805 02500805 02580805     ..@...H...P...X.
 23ff7b2:	02600805 02680805 02700805 02780805     ..`...h...p...x.
 23ff7c2:	02800805 02880805 02900805 02980805     ................
 23ff7d2:	02a00805 02a80805 02b00805 02b80805     ................
 23ff7e2:	02c00805 02c80805 02d00805 02d80805     ................
 23ff7f2:	02e00805 02e80805 02f00805 02f80805     ................
 23ff802:	03000805 03080805 03100805 03180805     ................
 23ff812:	03200805 03280805 03300805 03380805     .. ...(...0...8.
 23ff822:	03400805 03480805 03500805 03580805     ..@...H...P...X.
 23ff832:	03600805 03680805 03700805 03780805     ..`...h...p...x.
 23ff842:	03800805 03880805 03900805 03980805     ................
 23ff852:	03a00805 03a80805 03b00805 03b80805     ................
 23ff862:	03c00805 03c80805 03d00805 03d80805     ................
 23ff872:	03e00805 03e80805 03f00805 03f80805     ................
 23ff882:	04000805 04080805 04100805 04180805     ................
 23ff892:	04200805 04280805 04300805 04380805     .. ...(...0...8.
 23ff8a2:	04400805 04480805 04500805 04580805     ..@...H...P...X.
 23ff8b2:	04600805 04680805 04700805 04780805     ..`...h...p...x.
 23ff8c2:	04800805 04880805 04900805 04980805     ................
 23ff8d2:	04a00805 04a80805 04b00805 04b80805     ................
 23ff8e2:	04c00805 04c80805 04d00805 04d80805     ................
 23ff8f2:	04e00805 04e80805 04f00805 04f80805     ................
 23ff902:	05000805 05080805 05100805 05180805     ................
 23ff912:	05200805 05280805 05300805 05380805     .. ...(...0...8.
 23ff922:	05400805 05480805 05500805 05580805     ..@...H...P...X.
 23ff932:	05600805 05680805 05700805 05780805     ..`...h...p...x.
 23ff942:	05800805 05880805 05900805 05980805     ................
 23ff952:	05a00805 05a80805 05b00805 05b80805     ................
 23ff962:	05c00805 05c80805 05d00805 05d80805     ................
 23ff972:	05e00805 05e80805 05f00805 05f80805     ................
 23ff982:	06000805 06080805 06100805 06180805     ................
 23ff992:	06200805 06280805 06300805 06380805     .. ...(...0...8.
 23ff9a2:	06400805 06480805 06500805 06580805     ..@...H...P...X.
 23ff9b2:	06600805 06680805 06700805 06780805     ..`...h...p...x.
 23ff9c2:	06800805 06880805 06900805 06980805     ................
 23ff9d2:	06a00805 06a80805 06b00805 06b80805     ................
 23ff9e2:	06c00805 06c80805 06d00805 06d80805     ................
 23ff9f2:	06e00805 06e80805 06f00805 06f80805     ................
 23ffa02:	07000805 07080805 07100805 07180805     ................
 23ffa12:	07200805 07280805 07300805 07380805     .. ...(...0...8.
 23ffa22:	07400805 07480805 07500805 07580805     ..@...H...P...X.
 23ffa32:	07600805 07680805 07700805 07780805     ..`...h...p...x.
 23ffa42:	07800805 07880805 07900805 07980805     ................
 23ffa52:	07a00805 07a80805 07b00805 07b80805     ................
 23ffa62:	07c00805 07c80805 07d00805 07d80805     ................
 23ffa72:	07e00805 07e80805 07f00805 07f80805     ................
	...

023ffa84 <_ZTVN5spark13EthernetClassE>:
	...
 23ffa8c:	023fc05b 023fc051 023fc047 023fc03d     [.?.Q.?.G.?.=.?.
 23ffa9c:	023fc031 023fc025 023fdf81 023fdf89     1.?.%.?...?...?.
 23ffaac:	023fc019 023fc011 023fc007 023fbffd     ..?...?...?...?.
 23ffabc:	023fdfb9                                ..?.

023ffac0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffac0:	18100800 38302820                       .... (08

023ffac8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffad0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffad8:	023fc6f1 023fc715 023fc767 023fc723     ..?...?.g.?.#.?.
 23ffae8:	023fc6f5                                ..?.

023ffaec <_ZTVN8particle16ApplicationAssetE>:
	...
 23ffaf4:	023fc32d 023fc429 023fc6ed 023fc645     -.?.).?...?.E.?.
 23ffb04:	023fc9e3 023fc6b3 023fc6cf 023fc6eb     ..?...?...?...?.
 23ffb14:	023fca1d 023fc975 023fc9a5 64756162     ..?.u.?...?.baud
 23ffb24:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
 23ffb34:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 23ffb44:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 23ffb54:	2500205d 202c0064 3a292800 5b200020     ] .%d., .(): . [
 23ffb64:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
 23ffb74:	20736c69 0d00203d 006d000a 66006e6c     ils = ....m.ln.f
 23ffb84:	0074006e 65646f63 74656400 006c6961     n.t.code.detail.

023ffb94 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffb9c:	023fca9d 023fcac3 023fca81 023fe0d3     ..?...?...?...?.

023ffbac <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffbb4:	023fcf51 023fcf69 023fd6a5 023fd84d     Q.?.i.?...?.M.?.

023ffbc4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffbcc:	023fcf7d 023fcf91 023fd885 023fca89     }.?...?...?...?.

023ffbdc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffbe4:	023fca9b 023fcad1 023fd609 023fca8b     ..?...?...?...?.

023ffbf4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffbfc:	023fca99 023fcadf 023fceb9 023fcb01     ..?...?...?...?.
 23ffc0c:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 23ffc1c:	007a2553 74637361 00656d69              S%z.asctime.

023ffc28 <_ZTV9IPAddress>:
	...
 23ffc30:	023fdb81 023fdb71 023fdb73              ..?.q.?.s.?.

023ffc3c <_ZTV9USBSerial>:
	...
 23ffc44:	023fdc67 023fdccf 023fdca5 023fc645     g.?...?...?.E.?.
 23ffc54:	023fdc97 023fdc69 023fdc79 023fdcc9     ..?.i.?.y.?...?.
 23ffc64:	023fdc89 023fdc61                       ..?.a.?.

023ffc6c <_ZTV11USARTSerial>:
	...
 23ffc74:	023fdd71 023fdddd 023fddb5 023fc645     q.?...?...?.E.?.
 23ffc84:	023fdd85 023fdda1 023fdd93 023fddaf     ..?...?...?...?.
 23ffc94:	023fdd73 023fdd77                       s.?.w.?.

023ffc9c <_ZTV7TwoWire>:
	...
 23ffca4:	023fde2f 023fde79 023fde51 023fde31     /.?.y.?.Q.?.1.?.
 23ffcb4:	023fde59 023fde61 023fde69 023fde71     Y.?.a.?.i.?.q.?.

023ffcc4 <_ZTVN5spark9WiFiClassE>:
	...
 23ffccc:	023fdf23 023fdf19 023fdf0f 023fdec5     #.?...?...?...?.
 23ffcdc:	023fdf03 023fdef7 023fdf81 023fdf89     ..?...?...?...?.
 23ffcec:	023fdeeb 023fdee3 023fded9 023fdecf     ..?...?...?...?.
 23ffcfc:	023fdfb9                                ..?.

023ffd00 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd08:	023fdf41 023fdf4b 023fdf55 023fdf5f     A.?.K.?.U.?._.?.
 23ffd18:	023fdf69 023fdf75 023fdf81 023fdf89     i.?.u.?...?...?.
 23ffd28:	023fdf91 023fdf9d 023fdfa5 023fdfaf     ..?...?...?...?.
 23ffd38:	023fdfb9 75007525 78343025               ..?.%u.u%04x.

023ffd45 <_ZSt7nothrow>:
	...

023ffd46 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd46:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd56:	5f646572 00676174                        red_tag...

023ffd60 <_ZTISt19_Sp_make_shared_tag>:
 23ffd60:	023ffda0 023ffd46                       ..?.F.?.

023ffd68 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd68:	023ffe00 023ffd74 023ffe24              ..?.t.?.$.?.

023ffd74 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd74:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd84:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd94:	00000045                                E...

023ffd98 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd98:	00000000 023ffd68 023fe779 023fe78d     ....h.?.y.?...?.
 23ffda8:	023fe921 023fe921 023fe7f7 023fe739     !.?.!.?...?.9.?.
 23ffdb8:	023fe7df 023fe7a1 023fe76b              ..?...?.k.?.

023ffdc4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdc4:	023ffe00 023ffdd0 023ffd68              ..?...?.h.?.

023ffdd0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdd0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffde0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdf0:	456f666e 00000000                       nfoE....

023ffdf8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffdf8:	00000000 023ffdc4 023fe821 023fe835     ......?.!.?.5.?.
 23ffe08:	023fe921 023fe921 023fe7f7 023fe739     !.?.!.?...?.9.?.
 23ffe18:	023fe8f5 023fe881 023fe849              ..?...?.I.?.

023ffe24 <_ZTISt9type_info>:
 23ffe24:	023ffda0 023ffe2c                       ..?.,.?.

023ffe2c <_ZTSSt9type_info>:
 23ffe2c:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe3c:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe4c:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe5c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe6c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe7c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe8c:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe9c:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffeac:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffebc:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffecd <_ctype_>:
 23ffecd:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffedd:	20202020 20202020 20202020 20202020                     
 23ffeed:	10108820 10101010 10101010 10101010      ...............
 23ffefd:	04040410 04040404 10040404 10101010     ................
 23fff0d:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff1d:	01010101 01010101 01010101 10101010     ................
 23fff2d:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff3d:	02020202 02020202 02020202 10101010     ................
 23fff4d:	00000020 00000000 00000000 00000000      ...............
	...

023fffce <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fa715 	.word	0x023fa715
 23fffd4:	023fc065 	.word	0x023fc065
 23fffd8:	023fc43d 	.word	0x023fc43d
 23fffdc:	023fc635 	.word	0x023fc635
 23fffe0:	023fd695 	.word	0x023fd695
 23fffe4:	023fd9f9 	.word	0x023fd9f9
 23fffe8:	023fda15 	.word	0x023fda15
 23fffec:	023fdf2d 	.word	0x023fdf2d
 23ffff0:	023fe091 	.word	0x023fe091
