
c:/Users/gaton/source/repos/micro-ad-platform-particle/micro-ad-display/target/5.5.0/p2/micro-ad-display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f8000  085f8000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f8018  085f8018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f8a20  085f80a8  00008a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000075cc  023f8a28  085f80b0  00008a28  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff4  023ffff4  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad38  085ff67c  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000238  1007adb0  1007adb0  0002adb0  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff6f4  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000008c0  085ff6f8  085ff6f8  0001f6f8  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f6f8  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001ad2ca  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001c27b  00000000  00000000  001cd2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004e60a  00000000  00000000  001e9545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003978  00000000  00000000  00237b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000d678  00000000  00000000  0023b4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00031a84  00000000  00000000  00248b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00059e6e  00000000  00000000  0027a5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e54f6  00000000  00000000  002d4431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000ace4  00000000  00000000  003b9928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f8018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f8018:	4813      	ldr	r0, [pc, #76]	; (85f8068 <module_user_pre_init+0x50>)
 85f801a:	4914      	ldr	r1, [pc, #80]	; (85f806c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f801c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f801e:	4288      	cmp	r0, r1
 85f8020:	d005      	beq.n	85f802e <module_user_pre_init+0x16>
 85f8022:	4a13      	ldr	r2, [pc, #76]	; (85f8070 <module_user_pre_init+0x58>)
 85f8024:	4282      	cmp	r2, r0
 85f8026:	d002      	beq.n	85f802e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f8028:	4b12      	ldr	r3, [pc, #72]	; (85f8074 <module_user_pre_init+0x5c>)
 85f802a:	1a12      	subs	r2, r2, r0
 85f802c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f802e:	4812      	ldr	r0, [pc, #72]	; (85f8078 <module_user_pre_init+0x60>)
 85f8030:	4a12      	ldr	r2, [pc, #72]	; (85f807c <module_user_pre_init+0x64>)
 85f8032:	2100      	movs	r1, #0
 85f8034:	4b12      	ldr	r3, [pc, #72]	; (85f8080 <module_user_pre_init+0x68>)
 85f8036:	1a12      	subs	r2, r2, r0
 85f8038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f803a:	4812      	ldr	r0, [pc, #72]	; (85f8084 <module_user_pre_init+0x6c>)
 85f803c:	4912      	ldr	r1, [pc, #72]	; (85f8088 <module_user_pre_init+0x70>)
 85f803e:	4288      	cmp	r0, r1
 85f8040:	d005      	beq.n	85f804e <module_user_pre_init+0x36>
 85f8042:	4a12      	ldr	r2, [pc, #72]	; (85f808c <module_user_pre_init+0x74>)
 85f8044:	4282      	cmp	r2, r0
 85f8046:	d002      	beq.n	85f804e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f8048:	4b0a      	ldr	r3, [pc, #40]	; (85f8074 <module_user_pre_init+0x5c>)
 85f804a:	1a12      	subs	r2, r2, r0
 85f804c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f804e:	4810      	ldr	r0, [pc, #64]	; (85f8090 <module_user_pre_init+0x78>)
 85f8050:	4910      	ldr	r1, [pc, #64]	; (85f8094 <module_user_pre_init+0x7c>)
 85f8052:	4288      	cmp	r0, r1
 85f8054:	d005      	beq.n	85f8062 <module_user_pre_init+0x4a>
 85f8056:	4a10      	ldr	r2, [pc, #64]	; (85f8098 <module_user_pre_init+0x80>)
 85f8058:	4282      	cmp	r2, r0
 85f805a:	d002      	beq.n	85f8062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f805c:	4b05      	ldr	r3, [pc, #20]	; (85f8074 <module_user_pre_init+0x5c>)
 85f805e:	1a12      	subs	r2, r2, r0
 85f8060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f8062:	4801      	ldr	r0, [pc, #4]	; (85f8068 <module_user_pre_init+0x50>)
 85f8064:	bd08      	pop	{r3, pc}
 85f8066:	bf00      	nop
 85f8068:	1007ad38 	.word	0x1007ad38
 85f806c:	085ff67c 	.word	0x085ff67c
 85f8070:	1007adb0 	.word	0x1007adb0
 85f8074:	10110d2d 	.word	0x10110d2d
 85f8078:	1007adb0 	.word	0x1007adb0
 85f807c:	1007afe8 	.word	0x1007afe8
 85f8080:	10110ea1 	.word	0x10110ea1
 85f8084:	023f8a20 	.word	0x023f8a20
 85f8088:	085f80a8 	.word	0x085f80a8
 85f808c:	023f8a28 	.word	0x023f8a28
 85f8090:	023f8a28 	.word	0x023f8a28
 85f8094:	085f80b0 	.word	0x085f80b0
 85f8098:	023ffff4 	.word	0x023ffff4

085f809c <dynalib_preinit>:
 85f809c:	085f8019 00000000                       .._.....

Disassembly of section .psram_text:

023f8a28 <strcmp>:
 23f8a28:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f8a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f8a30:	2a01      	cmp	r2, #1
 23f8a32:	bf28      	it	cs
 23f8a34:	429a      	cmpcs	r2, r3
 23f8a36:	d0f7      	beq.n	23f8a28 <strcmp>
 23f8a38:	1ad0      	subs	r0, r2, r3
 23f8a3a:	4770      	bx	lr

023f8a3c <strlen>:
 23f8a3c:	4603      	mov	r3, r0
 23f8a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f8a42:	2a00      	cmp	r2, #0
 23f8a44:	d1fb      	bne.n	23f8a3e <strlen+0x2>
 23f8a46:	1a18      	subs	r0, r3, r0
 23f8a48:	3801      	subs	r0, #1
 23f8a4a:	4770      	bx	lr

023f8a4c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f8a4c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f8a4e:	f004 fbfb 	bl	23fd248 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f8a52:	2500      	movs	r5, #0
 23f8a54:	4e05      	ldr	r6, [pc, #20]	; (23f8a6c <module_user_init+0x20>)
 23f8a56:	4c06      	ldr	r4, [pc, #24]	; (23f8a70 <module_user_init+0x24>)
 23f8a58:	1ba4      	subs	r4, r4, r6
 23f8a5a:	08a4      	lsrs	r4, r4, #2
 23f8a5c:	42ac      	cmp	r4, r5
 23f8a5e:	d100      	bne.n	23f8a62 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f8a60:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f8a62:	f856 3b04 	ldr.w	r3, [r6], #4
 23f8a66:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f8a68:	3501      	adds	r5, #1
 23f8a6a:	e7f7      	b.n	23f8a5c <module_user_init+0x10>
 23f8a6c:	023fffd0 	.word	0x023fffd0
 23f8a70:	023ffff4 	.word	0x023ffff4

023f8a74 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f8a74:	f000 baf8 	b.w	23f9068 <setup>

023f8a78 <module_user_loop>:
}

void module_user_loop() {
 23f8a78:	b508      	push	{r3, lr}
    loop();
 23f8a7a:	f000 f893 	bl	23f8ba4 <loop>
    _post_loop();
}
 23f8a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f8a82:	f004 bb99 	b.w	23fd1b8 <_post_loop>

023f8a86 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f8a86:	f002 bda5 	b.w	23fb5d4 <malloc>

023f8a8a <_Znaj>:
 23f8a8a:	f002 bda3 	b.w	23fb5d4 <malloc>

023f8a8e <_ZdaPv>:
 23f8a8e:	f002 bdaf 	b.w	23fb5f0 <free>

023f8a92 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f8a92:	f002 bdad 	b.w	23fb5f0 <free>
	...

023f8a98 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f8a98:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f8a9a:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f8a9c:	4a02      	ldr	r2, [pc, #8]	; (23f8aa8 <__cxa_pure_virtual+0x10>)
 23f8a9e:	4903      	ldr	r1, [pc, #12]	; (23f8aac <__cxa_pure_virtual+0x14>)
 23f8aa0:	f002 fbae 	bl	23fb200 <panic_>
  while (1);
 23f8aa4:	e7fe      	b.n	23f8aa4 <__cxa_pure_virtual+0xc>
 23f8aa6:	bf00      	nop
 23f8aa8:	023fabe1 	.word	0x023fabe1
 23f8aac:	023feba4 	.word	0x023feba4

023f8ab0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f8ab0:	7800      	ldrb	r0, [r0, #0]
 23f8ab2:	fab0 f080 	clz	r0, r0
 23f8ab6:	0940      	lsrs	r0, r0, #5
 23f8ab8:	4770      	bx	lr

023f8aba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f8aba:	2301      	movs	r3, #1
 23f8abc:	7003      	strb	r3, [r0, #0]
 23f8abe:	4770      	bx	lr

023f8ac0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f8ac0:	4770      	bx	lr
	...

023f8ac4 <_Z12handleButtonv>:
        Log.info("Closed dir");
    }
}

void handleButton() {
    buttonPress = true;
 23f8ac4:	2201      	movs	r2, #1
 23f8ac6:	4b01      	ldr	r3, [pc, #4]	; (23f8acc <_Z12handleButtonv+0x8>)
 23f8ac8:	701a      	strb	r2, [r3, #0]
}
 23f8aca:	4770      	bx	lr
 23f8acc:	1007adc4 	.word	0x1007adc4

023f8ad0 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f8ad0:	b510      	push	{r4, lr}
 23f8ad2:	4604      	mov	r4, r0
 23f8ad4:	4b09      	ldr	r3, [pc, #36]	; (23f8afc <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f8ad6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f8ad8:	f003 fcf8 	bl	23fc4cc <_ZN5spark10LogManager8instanceEv>
 23f8adc:	4621      	mov	r1, r4
 23f8ade:	f003 ff2f 	bl	23fc940 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f8ae2:	f004 ff55 	bl	23fd990 <_Z16_fetch_usbserialv>
 23f8ae6:	f004 ff45 	bl	23fd974 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f8aea:	4620      	mov	r0, r4
 23f8aec:	4b04      	ldr	r3, [pc, #16]	; (23f8b00 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f8aee:	f840 3b04 	str.w	r3, [r0], #4
 23f8af2:	f003 fdc1 	bl	23fc678 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f8af6:	4620      	mov	r0, r4
 23f8af8:	bd10      	pop	{r4, pc}
 23f8afa:	bf00      	nop
 23f8afc:	023fecec 	.word	0x023fecec
 23f8b00:	023fecd4 	.word	0x023fecd4

023f8b04 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f8b04:	b510      	push	{r4, lr}
 23f8b06:	4604      	mov	r4, r0
    }
 23f8b08:	f7ff ffe2 	bl	23f8ad0 <_ZN5spark16SerialLogHandlerD1Ev>
 23f8b0c:	4620      	mov	r0, r4
 23f8b0e:	2124      	movs	r1, #36	; 0x24
 23f8b10:	f7ff ffbf 	bl	23f8a92 <_ZdlPvj>
 23f8b14:	4620      	mov	r0, r4
 23f8b16:	bd10      	pop	{r4, pc}

023f8b18 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23f8b18:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f8b1a:	f04f 0c20 	mov.w	ip, #32
 23f8b1e:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23f8b20:	b500      	push	{lr}
 23f8b22:	b08c      	sub	sp, #48	; 0x30
 23f8b24:	aa0d      	add	r2, sp, #52	; 0x34
 23f8b26:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f8b2a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8b2e:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f8b32:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8b34:	6801      	ldr	r1, [r0, #0]
 23f8b36:	aa04      	add	r2, sp, #16
 23f8b38:	201e      	movs	r0, #30
 23f8b3a:	f002 fb6f 	bl	23fb21c <log_message_v>
}
 23f8b3e:	b00c      	add	sp, #48	; 0x30
 23f8b40:	f85d eb04 	ldr.w	lr, [sp], #4
 23f8b44:	b003      	add	sp, #12
 23f8b46:	4770      	bx	lr

023f8b48 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f8b48:	b40e      	push	{r1, r2, r3}
    attr.flags = 0;
 23f8b4a:	f04f 0c20 	mov.w	ip, #32
 23f8b4e:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23f8b50:	b500      	push	{lr}
 23f8b52:	b08c      	sub	sp, #48	; 0x30
 23f8b54:	aa0d      	add	r2, sp, #52	; 0x34
 23f8b56:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f8b5a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8b5e:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f8b62:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8b64:	6801      	ldr	r1, [r0, #0]
 23f8b66:	aa04      	add	r2, sp, #16
 23f8b68:	2032      	movs	r0, #50	; 0x32
 23f8b6a:	f002 fb57 	bl	23fb21c <log_message_v>
}
 23f8b6e:	b00c      	add	sp, #48	; 0x30
 23f8b70:	f85d eb04 	ldr.w	lr, [sp], #4
 23f8b74:	b003      	add	sp, #12
 23f8b76:	4770      	bx	lr

023f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23f8b78:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23f8b7a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f8b7c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f8b7e:	b17c      	cbz	r4, 23f8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f8b80:	6863      	ldr	r3, [r4, #4]
 23f8b82:	3b01      	subs	r3, #1
 23f8b84:	6063      	str	r3, [r4, #4]
 23f8b86:	b95b      	cbnz	r3, 23f8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f8b88:	6823      	ldr	r3, [r4, #0]
 23f8b8a:	4620      	mov	r0, r4
 23f8b8c:	689b      	ldr	r3, [r3, #8]
 23f8b8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f8b90:	68a3      	ldr	r3, [r4, #8]
 23f8b92:	3b01      	subs	r3, #1
 23f8b94:	60a3      	str	r3, [r4, #8]
 23f8b96:	b91b      	cbnz	r3, 23f8ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f8b98:	6823      	ldr	r3, [r4, #0]
 23f8b9a:	4620      	mov	r0, r4
 23f8b9c:	68db      	ldr	r3, [r3, #12]
 23f8b9e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f8ba0:	4628      	mov	r0, r5
 23f8ba2:	bd38      	pop	{r3, r4, r5, pc}

023f8ba4 <loop>:
void loop() {
 23f8ba4:	b530      	push	{r4, r5, lr}
 23f8ba6:	b085      	sub	sp, #20

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f8ba8:	f002 f828 	bl	23fabfc <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastAdDisplayMs >= AdSwitchDelayMs) {
 23f8bac:	4d3f      	ldr	r5, [pc, #252]	; (23f8cac <loop+0x108>)
 23f8bae:	682b      	ldr	r3, [r5, #0]
 23f8bb0:	1ac0      	subs	r0, r0, r3
 23f8bb2:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 23f8bb6:	d31c      	bcc.n	23f8bf2 <loop+0x4e>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8bb8:	4c3d      	ldr	r4, [pc, #244]	; (23f8cb0 <loop+0x10c>)
        if (adFileNames.size() > 0) {
 23f8bba:	e9d4 2300 	ldrd	r2, r3, [r4]
 23f8bbe:	429a      	cmp	r2, r3
 23f8bc0:	d014      	beq.n	23f8bec <loop+0x48>
            Log.info("draw bitmap start");
 23f8bc2:	493c      	ldr	r1, [pc, #240]	; (23f8cb4 <loop+0x110>)
 23f8bc4:	483c      	ldr	r0, [pc, #240]	; (23f8cb8 <loop+0x114>)
 23f8bc6:	f7ff ffa7 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
            bitmap.drawBitmap(adFileNames[currentAd++ % adFileNames.size()].c_str());
 23f8bca:	4a3c      	ldr	r2, [pc, #240]	; (23f8cbc <loop+0x118>)
 23f8bcc:	7813      	ldrb	r3, [r2, #0]
 23f8bce:	1c59      	adds	r1, r3, #1
 23f8bd0:	7011      	strb	r1, [r2, #0]
 23f8bd2:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f8bd6:	1a52      	subs	r2, r2, r1
 23f8bd8:	1112      	asrs	r2, r2, #4
 23f8bda:	fbb3 f0f2 	udiv	r0, r3, r2
 23f8bde:	fb02 3310 	mls	r3, r2, r0, r3
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23f8be2:	011b      	lsls	r3, r3, #4
 23f8be4:	58c9      	ldr	r1, [r1, r3]
 23f8be6:	4836      	ldr	r0, [pc, #216]	; (23f8cc0 <loop+0x11c>)
 23f8be8:	f001 fb54 	bl	23fa294 <_ZN6Bitmap10drawBitmapEPKc>
 23f8bec:	f002 f806 	bl	23fabfc <HAL_Timer_Get_Milli_Seconds>
        lastAdDisplayMs = millis();
 23f8bf0:	6028      	str	r0, [r5, #0]
    if (buttonPress) {
 23f8bf2:	4b34      	ldr	r3, [pc, #208]	; (23f8cc4 <loop+0x120>)
 23f8bf4:	781b      	ldrb	r3, [r3, #0]
 23f8bf6:	b1e3      	cbz	r3, 23f8c32 <loop+0x8e>
        digitalWrite(ButtonLedPin, LOW);
 23f8bf8:	2100      	movs	r1, #0
 23f8bfa:	2005      	movs	r0, #5
 23f8bfc:	f005 fb25 	bl	23fe24a <digitalWrite>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23f8c00:	4b31      	ldr	r3, [pc, #196]	; (23f8cc8 <loop+0x124>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23f8c02:	2200      	movs	r2, #0
 23f8c04:	781b      	ldrb	r3, [r3, #0]
 23f8c06:	4931      	ldr	r1, [pc, #196]	; (23f8ccc <loop+0x128>)
 23f8c08:	f88d 3000 	strb.w	r3, [sp]
 23f8c0c:	a802      	add	r0, sp, #8
 23f8c0e:	233c      	movs	r3, #60	; 0x3c
 23f8c10:	f004 fc78 	bl	23fd504 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23f8c14:	a803      	add	r0, sp, #12
 23f8c16:	f7ff ffaf 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        bitmap.drawBitmap("qrcode.bmp");
 23f8c1a:	492d      	ldr	r1, [pc, #180]	; (23f8cd0 <loop+0x12c>)
 23f8c1c:	4828      	ldr	r0, [pc, #160]	; (23f8cc0 <loop+0x11c>)
 23f8c1e:	f001 fb39 	bl	23fa294 <_ZN6Bitmap10drawBitmapEPKc>
        delay(6000);
 23f8c22:	f241 7070 	movw	r0, #6000	; 0x1770
 23f8c26:	f004 fa8f 	bl	23fd148 <delay>
        digitalWrite(ButtonLedPin, HIGH);
 23f8c2a:	2101      	movs	r1, #1
 23f8c2c:	2005      	movs	r0, #5
 23f8c2e:	f005 fb0c 	bl	23fe24a <digitalWrite>
    distanceSensor.startRanging();
 23f8c32:	4828      	ldr	r0, [pc, #160]	; (23f8cd4 <loop+0x130>)
 23f8c34:	f001 ff33 	bl	23faa9e <_ZN10SFEVL53L1X12startRangingEv>
    while (!distanceSensor.checkForDataReady()) {
 23f8c38:	4c26      	ldr	r4, [pc, #152]	; (23f8cd4 <loop+0x130>)
 23f8c3a:	4620      	mov	r0, r4
 23f8c3c:	f001 ff35 	bl	23faaaa <_ZN10SFEVL53L1X17checkForDataReadyEv>
 23f8c40:	b918      	cbnz	r0, 23f8c4a <loop+0xa6>
        delay (1);
 23f8c42:	2001      	movs	r0, #1
 23f8c44:	f004 fa80 	bl	23fd148 <delay>
    while (!distanceSensor.checkForDataReady()) {
 23f8c48:	e7f7      	b.n	23f8c3a <loop+0x96>
    int distance = distanceSensor.getDistance();
 23f8c4a:	4822      	ldr	r0, [pc, #136]	; (23f8cd4 <loop+0x130>)
 23f8c4c:	f001 ff3f 	bl	23faace <_ZN10SFEVL53L1X11getDistanceEv>
 23f8c50:	4604      	mov	r4, r0
    distanceSensor.clearInterrupt();
 23f8c52:	4820      	ldr	r0, [pc, #128]	; (23f8cd4 <loop+0x130>)
 23f8c54:	f001 ff20 	bl	23faa98 <_ZN10SFEVL53L1X14clearInterruptEv>
    distanceSensor.stopRanging();
 23f8c58:	481e      	ldr	r0, [pc, #120]	; (23f8cd4 <loop+0x130>)
 23f8c5a:	f001 ff23 	bl	23faaa4 <_ZN10SFEVL53L1X11stopRangingEv>
    Log.info("Distance (mm) = %d", distance);
 23f8c5e:	4622      	mov	r2, r4
 23f8c60:	491d      	ldr	r1, [pc, #116]	; (23f8cd8 <loop+0x134>)
 23f8c62:	4815      	ldr	r0, [pc, #84]	; (23f8cb8 <loop+0x114>)
 23f8c64:	f7ff ff58 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
    if (distance <= ImpressionDistanceThresholdMM &&
 23f8c68:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 23f8c6c:	dc1c      	bgt.n	23f8ca8 <loop+0x104>
 23f8c6e:	f001 ffc5 	bl	23fabfc <HAL_Timer_Get_Milli_Seconds>
        millis() - lastImpressionMs >= ImpressionDelayMs) {
 23f8c72:	4c1a      	ldr	r4, [pc, #104]	; (23f8cdc <loop+0x138>)
 23f8c74:	6823      	ldr	r3, [r4, #0]
 23f8c76:	1ac0      	subs	r0, r0, r3
    if (distance <= ImpressionDistanceThresholdMM &&
 23f8c78:	f241 736f 	movw	r3, #5999	; 0x176f
 23f8c7c:	4298      	cmp	r0, r3
 23f8c7e:	d913      	bls.n	23f8ca8 <loop+0x104>
        Log.info("Sending ad impression");
 23f8c80:	4917      	ldr	r1, [pc, #92]	; (23f8ce0 <loop+0x13c>)
 23f8c82:	480d      	ldr	r0, [pc, #52]	; (23f8cb8 <loop+0x114>)
 23f8c84:	f7ff ff48 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
 23f8c88:	f001 ffb8 	bl	23fabfc <HAL_Timer_Get_Milli_Seconds>
 23f8c8c:	4b0e      	ldr	r3, [pc, #56]	; (23f8cc8 <loop+0x124>)
        lastImpressionMs = millis();
 23f8c8e:	6020      	str	r0, [r4, #0]
 23f8c90:	781b      	ldrb	r3, [r3, #0]
 23f8c92:	a802      	add	r0, sp, #8
 23f8c94:	f88d 3000 	strb.w	r3, [sp]
 23f8c98:	2200      	movs	r2, #0
 23f8c9a:	233c      	movs	r3, #60	; 0x3c
 23f8c9c:	4911      	ldr	r1, [pc, #68]	; (23f8ce4 <loop+0x140>)
 23f8c9e:	f004 fc31 	bl	23fd504 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23f8ca2:	a803      	add	r0, sp, #12
 23f8ca4:	f7ff ff68 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f8ca8:	b005      	add	sp, #20
 23f8caa:	bd30      	pop	{r4, r5, pc}
 23f8cac:	1007addc 	.word	0x1007addc
 23f8cb0:	1007adb0 	.word	0x1007adb0
 23f8cb4:	023febb9 	.word	0x023febb9
 23f8cb8:	1007ae7c 	.word	0x1007ae7c
 23f8cbc:	1007adc5 	.word	0x1007adc5
 23f8cc0:	1007adc0 	.word	0x1007adc0
 23f8cc4:	1007adc4 	.word	0x1007adc4
 23f8cc8:	1007adbc 	.word	0x1007adbc
 23f8ccc:	023febcb 	.word	0x023febcb
 23f8cd0:	023febdb 	.word	0x023febdb
 23f8cd4:	1007adc8 	.word	0x1007adc8
 23f8cd8:	023febe6 	.word	0x023febe6
 23f8cdc:	1007ade0 	.word	0x1007ade0
 23f8ce0:	023febf9 	.word	0x023febf9
 23f8ce4:	023fec0f 	.word	0x023fec0f

023f8ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8ce8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f8cea:	2614      	movs	r6, #20
 23f8cec:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8cf0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f8cf2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f8cf6:	42ae      	cmp	r6, r5
 23f8cf8:	d004      	beq.n	23f8d04 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f8cfa:	4628      	mov	r0, r5
 23f8cfc:	f002 ff24 	bl	23fbb48 <_ZN6StringD1Ev>
 23f8d00:	3514      	adds	r5, #20
 23f8d02:	e7f8      	b.n	23f8cf6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f8d04:	6820      	ldr	r0, [r4, #0]
 23f8d06:	f002 fc73 	bl	23fb5f0 <free>
    AllocatorT::free(data_);
}
 23f8d0a:	4620      	mov	r0, r4
 23f8d0c:	bd70      	pop	{r4, r5, r6, pc}

023f8d0e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8d0e:	b570      	push	{r4, r5, r6, lr}
 23f8d10:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f8d12:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f8d16:	eb05 1683 	add.w	r6, r5, r3, lsl #6
        for (; p != end; ++p) {
 23f8d1a:	42ae      	cmp	r6, r5
 23f8d1c:	d005      	beq.n	23f8d2a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev+0x1c>
            p->~T();
 23f8d1e:	682b      	ldr	r3, [r5, #0]
 23f8d20:	4628      	mov	r0, r5
 23f8d22:	681b      	ldr	r3, [r3, #0]
 23f8d24:	4798      	blx	r3
        for (; p != end; ++p) {
 23f8d26:	3540      	adds	r5, #64	; 0x40
 23f8d28:	e7f7      	b.n	23f8d1a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f8d2a:	6820      	ldr	r0, [r4, #0]
 23f8d2c:	f002 fc60 	bl	23fb5f0 <free>
}
 23f8d30:	4620      	mov	r0, r4
 23f8d32:	bd70      	pop	{r4, r5, r6, pc}

023f8d34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f8d34:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f8d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8d38:	4604      	mov	r4, r0
 23f8d3a:	460d      	mov	r5, r1
 23f8d3c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f8d3e:	d916      	bls.n	23f8d6e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f8d40:	4290      	cmp	r0, r2
 23f8d42:	d215      	bcs.n	23f8d70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f8d44:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f8d48:	1a75      	subs	r5, r6, r1
 23f8d4a:	f1a1 0714 	sub.w	r7, r1, #20
 23f8d4e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f8d50:	42b7      	cmp	r7, r6
 23f8d52:	d01c      	beq.n	23f8d8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f8d54:	b12c      	cbz	r4, 23f8d62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f8d56:	4631      	mov	r1, r6
 23f8d58:	4620      	mov	r0, r4
 23f8d5a:	f002 ff72 	bl	23fbc42 <_ZN6StringC1EOS_>
 23f8d5e:	7c33      	ldrb	r3, [r6, #16]
 23f8d60:	7423      	strb	r3, [r4, #16]
 23f8d62:	4630      	mov	r0, r6
 23f8d64:	f002 fef0 	bl	23fbb48 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f8d68:	3e14      	subs	r6, #20
 23f8d6a:	3c14      	subs	r4, #20
 23f8d6c:	e7f0      	b.n	23f8d50 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f8d6e:	d00e      	beq.n	23f8d8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f8d70:	42b5      	cmp	r5, r6
 23f8d72:	d00c      	beq.n	23f8d8e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f8d74:	b12c      	cbz	r4, 23f8d82 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f8d76:	4629      	mov	r1, r5
 23f8d78:	4620      	mov	r0, r4
 23f8d7a:	f002 ff62 	bl	23fbc42 <_ZN6StringC1EOS_>
 23f8d7e:	7c2b      	ldrb	r3, [r5, #16]
 23f8d80:	7423      	strb	r3, [r4, #16]
 23f8d82:	4628      	mov	r0, r5
 23f8d84:	f002 fee0 	bl	23fbb48 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f8d88:	3514      	adds	r5, #20
 23f8d8a:	3414      	adds	r4, #20
 23f8d8c:	e7f0      	b.n	23f8d70 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f8d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8d90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f8d90:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f8d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f8d96:	e9c0 3300 	strd	r3, r3, [r0]
 23f8d9a:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f8d9c:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f8d9e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f8da0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f8da2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f8da4:	dd24      	ble.n	23f8df0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f8da6:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f8daa:	fb08 f007 	mul.w	r0, r8, r7
 23f8dae:	f002 fc11 	bl	23fb5d4 <malloc>
            if (!d) {
 23f8db2:	4605      	mov	r5, r0
 23f8db4:	b1e0      	cbz	r0, 23f8df0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f8db6:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f8dba:	fb08 1202 	mla	r2, r8, r2, r1
 23f8dbe:	f7ff ffb9 	bl	23f8d34 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f8dc2:	6820      	ldr	r0, [r4, #0]
 23f8dc4:	f002 fc14 	bl	23fb5f0 <free>
        data_ = d;
 23f8dc8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f8dca:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f8dcc:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f8dd0:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f8dd4:	45b8      	cmp	r8, r7
 23f8dd6:	d009      	beq.n	23f8dec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f8dd8:	4639      	mov	r1, r7
 23f8dda:	4628      	mov	r0, r5
 23f8ddc:	f002 ff4b 	bl	23fbc76 <_ZN6StringC1ERKS_>
 23f8de0:	7c3b      	ldrb	r3, [r7, #16]
 23f8de2:	3514      	adds	r5, #20
 23f8de4:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f8de8:	3714      	adds	r7, #20
 23f8dea:	e7f3      	b.n	23f8dd4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f8dec:	6873      	ldr	r3, [r6, #4]
 23f8dee:	6063      	str	r3, [r4, #4]
}
 23f8df0:	4620      	mov	r0, r4
 23f8df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f8df8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 23f8df8:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 23f8dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8e00:	468b      	mov	fp, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8e02:	e9d0 9a00 	ldrd	r9, sl, [r0]
 23f8e06:	4611      	mov	r1, r2
 23f8e08:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
 23f8e0c:	ebb3 1f22 	cmp.w	r3, r2, asr #4
 23f8e10:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8e12:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 23f8e16:	d102      	bne.n	23f8e1e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 23f8e18:	4826      	ldr	r0, [pc, #152]	; (23f8eb4 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 23f8e1a:	f005 fb33 	bl	23fe484 <_ZSt20__throw_length_errorPKc>
 23f8e1e:	2c01      	cmp	r4, #1
 23f8e20:	4622      	mov	r2, r4
 23f8e22:	bf38      	it	cc
 23f8e24:	2201      	movcc	r2, #1
 23f8e26:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 23f8e28:	ebab 0609 	sub.w	r6, fp, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f8e2c:	d21a      	bcs.n	23f8e64 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f8e2e:	b1dc      	cbz	r4, 23f8e68 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
 23f8e30:	429c      	cmp	r4, r3
 23f8e32:	bf28      	it	cs
 23f8e34:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23f8e36:	0120      	lsls	r0, r4, #4
 23f8e38:	9101      	str	r1, [sp, #4]
 23f8e3a:	f7ff fe24 	bl	23f8a86 <_Znwj>
 23f8e3e:	4605      	mov	r5, r0
 23f8e40:	9901      	ldr	r1, [sp, #4]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23f8e42:	19a8      	adds	r0, r5, r6
 23f8e44:	d001      	beq.n	23f8e4a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
 23f8e46:	f002 fefc 	bl	23fbc42 <_ZN6StringC1EOS_>
 23f8e4a:	4628      	mov	r0, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8e4c:	464e      	mov	r6, r9
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
 23f8e4e:	45b3      	cmp	fp, r6
 23f8e50:	f100 0710 	add.w	r7, r0, #16
 23f8e54:	d00a      	beq.n	23f8e6c <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 23f8e56:	b110      	cbz	r0, 23f8e5e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
 23f8e58:	4631      	mov	r1, r6
 23f8e5a:	f002 ff0c 	bl	23fbc76 <_ZN6StringC1ERKS_>
 23f8e5e:	4638      	mov	r0, r7
 23f8e60:	3610      	adds	r6, #16
 23f8e62:	e7f4      	b.n	23f8e4e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f8e64:	461c      	mov	r4, r3
 23f8e66:	e7e6      	b.n	23f8e36 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f8e68:	4625      	mov	r5, r4
 23f8e6a:	e7ea      	b.n	23f8e42 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
 23f8e6c:	4556      	cmp	r6, sl
 23f8e6e:	d006      	beq.n	23f8e7e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
 23f8e70:	4631      	mov	r1, r6
 23f8e72:	4638      	mov	r0, r7
 23f8e74:	f002 feff 	bl	23fbc76 <_ZN6StringC1ERKS_>
 23f8e78:	3610      	adds	r6, #16
 23f8e7a:	3710      	adds	r7, #16
 23f8e7c:	e7f6      	b.n	23f8e6c <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8e7e:	464e      	mov	r6, r9
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 23f8e80:	4556      	cmp	r6, sl
 23f8e82:	d004      	beq.n	23f8e8e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      __pointer->~_Tp();
 23f8e84:	4630      	mov	r0, r6
 23f8e86:	f002 fe5f 	bl	23fbb48 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
 23f8e8a:	3610      	adds	r6, #16
 23f8e8c:	e7f8      	b.n	23f8e80 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	if (__p)
 23f8e8e:	f1b9 0f00 	cmp.w	r9, #0
 23f8e92:	d006      	beq.n	23f8ea2 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 23f8e94:	f8d8 1008 	ldr.w	r1, [r8, #8]
	::operator delete(__p
 23f8e98:	4648      	mov	r0, r9
 23f8e9a:	eba1 0109 	sub.w	r1, r1, r9
 23f8e9e:	f7ff fdf8 	bl	23f8a92 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f8ea2:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
 23f8ea6:	e9c8 5700 	strd	r5, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f8eaa:	f8c8 4008 	str.w	r4, [r8, #8]
    }
 23f8eae:	b003      	add	sp, #12
 23f8eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8eb4:	023fec1d 	.word	0x023fec1d

023f8eb8 <_Z15loadAdFilenamesv>:
void loadAdFilenames() {
 23f8eb8:	b530      	push	{r4, r5, lr}
    DIR* dir = opendir("/");
 23f8eba:	481d      	ldr	r0, [pc, #116]	; (23f8f30 <_Z15loadAdFilenamesv+0x78>)
void loadAdFilenames() {
 23f8ebc:	b085      	sub	sp, #20
    DIR* dir = opendir("/");
 23f8ebe:	f001 ff0d 	bl	23facdc <opendir>
 23f8ec2:	4604      	mov	r4, r0
    Log.info("Opened dir=%d", errno);
 23f8ec4:	f002 fbda 	bl	23fb67c <__errno>
 23f8ec8:	491a      	ldr	r1, [pc, #104]	; (23f8f34 <_Z15loadAdFilenamesv+0x7c>)
 23f8eca:	6802      	ldr	r2, [r0, #0]
 23f8ecc:	481a      	ldr	r0, [pc, #104]	; (23f8f38 <_Z15loadAdFilenamesv+0x80>)
 23f8ece:	f7ff fe23 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
    if (dir != NULL) {
 23f8ed2:	b35c      	cbz	r4, 23f8f2c <_Z15loadAdFilenamesv+0x74>
        dirent *result = readdir(dir);
 23f8ed4:	4620      	mov	r0, r4
 23f8ed6:	f001 ff0f 	bl	23facf8 <readdir>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23f8eda:	4d18      	ldr	r5, [pc, #96]	; (23f8f3c <_Z15loadAdFilenamesv+0x84>)
        while (result) {
 23f8edc:	b1f8      	cbz	r0, 23f8f1e <_Z15loadAdFilenamesv+0x66>
            if (result->d_type == DT_REG) {
 23f8ede:	7a83      	ldrb	r3, [r0, #10]
 23f8ee0:	2b08      	cmp	r3, #8
 23f8ee2:	d112      	bne.n	23f8f0a <_Z15loadAdFilenamesv+0x52>
                adFileNames.push_back(result->d_name);
 23f8ee4:	f100 010b 	add.w	r1, r0, #11
 23f8ee8:	4668      	mov	r0, sp
 23f8eea:	f002 fe78 	bl	23fbbde <_ZN6StringC1EPK19__FlashStringHelper>
 23f8eee:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 23f8ef2:	4298      	cmp	r0, r3
 23f8ef4:	d00d      	beq.n	23f8f12 <_Z15loadAdFilenamesv+0x5a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23f8ef6:	b110      	cbz	r0, 23f8efe <_Z15loadAdFilenamesv+0x46>
 23f8ef8:	4669      	mov	r1, sp
 23f8efa:	f002 fea2 	bl	23fbc42 <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
 23f8efe:	686b      	ldr	r3, [r5, #4]
 23f8f00:	3310      	adds	r3, #16
 23f8f02:	606b      	str	r3, [r5, #4]
 23f8f04:	4668      	mov	r0, sp
 23f8f06:	f002 fe1f 	bl	23fbb48 <_ZN6StringD1Ev>
            result = readdir(dir);
 23f8f0a:	4620      	mov	r0, r4
 23f8f0c:	f001 fef4 	bl	23facf8 <readdir>
        while (result) {
 23f8f10:	e7e4      	b.n	23f8edc <_Z15loadAdFilenamesv+0x24>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 23f8f12:	4601      	mov	r1, r0
 23f8f14:	466a      	mov	r2, sp
 23f8f16:	4628      	mov	r0, r5
 23f8f18:	f7ff ff6e 	bl	23f8df8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 23f8f1c:	e7f2      	b.n	23f8f04 <_Z15loadAdFilenamesv+0x4c>
        closedir(dir);
 23f8f1e:	4620      	mov	r0, r4
 23f8f20:	f001 fef8 	bl	23fad14 <closedir>
        Log.info("Closed dir");
 23f8f24:	4906      	ldr	r1, [pc, #24]	; (23f8f40 <_Z15loadAdFilenamesv+0x88>)
 23f8f26:	4804      	ldr	r0, [pc, #16]	; (23f8f38 <_Z15loadAdFilenamesv+0x80>)
 23f8f28:	f7ff fdf6 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
}
 23f8f2c:	b005      	add	sp, #20
 23f8f2e:	bd30      	pop	{r4, r5, pc}
 23f8f30:	023fec37 	.word	0x023fec37
 23f8f34:	023fec39 	.word	0x023fec39
 23f8f38:	1007ae7c 	.word	0x1007ae7c
 23f8f3c:	1007adb0 	.word	0x1007adb0
 23f8f40:	023fec47 	.word	0x023fec47

023f8f44 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE>:

void handleAssets(spark::Vector<ApplicationAsset> assets) {
 23f8f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8f48:	4c3f      	ldr	r4, [pc, #252]	; (23f9048 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x104>)
 23f8f4a:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 23f8f4e:	4605      	mov	r5, r0
    // Delete all previous ad files
    loadAdFilenames();
 23f8f50:	f7ff ffb2 	bl	23f8eb8 <_Z15loadAdFilenamesv>
 23f8f54:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f8f58:	1ad2      	subs	r2, r2, r3
    Log.info("ad file names length = %d", adFileNames.size());
 23f8f5a:	493c      	ldr	r1, [pc, #240]	; (23f904c <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x108>)
 23f8f5c:	483c      	ldr	r0, [pc, #240]	; (23f9050 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x10c>)
 23f8f5e:	1112      	asrs	r2, r2, #4
 23f8f60:	f7ff fdda 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 23f8f64:	e9d4 4600 	ldrd	r4, r6, [r4]
    for (auto& path : adFileNames) {
 23f8f68:	42a6      	cmp	r6, r4
 23f8f6a:	d004      	beq.n	23f8f76 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x32>
        int result = unlink(path.c_str());
 23f8f6c:	f854 0b10 	ldr.w	r0, [r4], #16
 23f8f70:	f005 fd2e 	bl	23fe9d0 <unlink>
	return *this;
 23f8f74:	e7f8      	b.n	23f8f68 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x24>
    }

    for (auto& asset : assets) {
        int size = (int)asset.size();
        String name = asset.name();
        Log.info("Found asset %s", name.c_str());
 23f8f76:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 23f9060 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x11c>
 23f8f7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 23f9050 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x10c>
        if (name.startsWith("ad") || name == "qrcode.bmp") {
 23f8f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 23f9064 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x120>
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 23f8f82:	e9d5 4700 	ldrd	r4, r7, [r5]
 23f8f86:	eb04 1787 	add.w	r7, r4, r7, lsl #6
    for (auto& asset : assets) {
 23f8f8a:	42bc      	cmp	r4, r7
 23f8f8c:	d054      	beq.n	23f9038 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xf4>
        int size = (int)asset.size();
 23f8f8e:	4620      	mov	r0, r4
 23f8f90:	f002 ff6f 	bl	23fbe72 <_ZNK8particle16ApplicationAsset4sizeEv>
        String name = asset.name();
 23f8f94:	4621      	mov	r1, r4
        int size = (int)asset.size();
 23f8f96:	4606      	mov	r6, r0
        String name = asset.name();
 23f8f98:	4668      	mov	r0, sp
 23f8f9a:	f002 ff63 	bl	23fbe64 <_ZNK8particle16ApplicationAsset4nameEv>
        Log.info("Found asset %s", name.c_str());
 23f8f9e:	4649      	mov	r1, r9
 23f8fa0:	4640      	mov	r0, r8
 23f8fa2:	9a00      	ldr	r2, [sp, #0]
 23f8fa4:	f7ff fdb8 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
        if (name.startsWith("ad") || name == "qrcode.bmp") {
 23f8fa8:	4651      	mov	r1, sl
 23f8faa:	a804      	add	r0, sp, #16
 23f8fac:	f002 fe17 	bl	23fbbde <_ZN6StringC1EPK19__FlashStringHelper>
 23f8fb0:	4668      	mov	r0, sp
 23f8fb2:	a904      	add	r1, sp, #16
 23f8fb4:	f002 fe9a 	bl	23fbcec <_ZNK6String10startsWithERKS_>
 23f8fb8:	bb78      	cbnz	r0, 23f901a <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xd6>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f8fba:	4668      	mov	r0, sp
 23f8fbc:	4925      	ldr	r1, [pc, #148]	; (23f9054 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x110>)
 23f8fbe:	f002 fe6d 	bl	23fbc9c <_ZNK6String6equalsEPKc>
 23f8fc2:	1e05      	subs	r5, r0, #0
 23f8fc4:	bf18      	it	ne
 23f8fc6:	2501      	movne	r5, #1
 23f8fc8:	a804      	add	r0, sp, #16
 23f8fca:	f002 fdbd 	bl	23fbb48 <_ZN6StringD1Ev>
 23f8fce:	b375      	cbz	r5, 23f902e <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xea>
            uint8_t buf[BlockSize];
            int32_t bytesRead = 0;
            int fd = open(name, O_WRONLY | O_CREAT | O_TRUNC);
 23f8fd0:	f240 6101 	movw	r1, #1537	; 0x601
 23f8fd4:	9800      	ldr	r0, [sp, #0]
 23f8fd6:	f005 fcdd 	bl	23fe994 <open>
 23f8fda:	4605      	mov	r5, r0
            Log.info("Got fd=%d", fd);
 23f8fdc:	4602      	mov	r2, r0
 23f8fde:	491e      	ldr	r1, [pc, #120]	; (23f9058 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x114>)
 23f8fe0:	4640      	mov	r0, r8
 23f8fe2:	f7ff fd99 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
            if (fd != -1) {
 23f8fe6:	1c6b      	adds	r3, r5, #1
 23f8fe8:	d021      	beq.n	23f902e <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xea>
            int32_t bytesRead = 0;
 23f8fea:	f04f 0b00 	mov.w	fp, #0
                while (bytesRead < size) {
 23f8fee:	45b3      	cmp	fp, r6
 23f8ff0:	da15      	bge.n	23f901e <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xda>
                    int toRead = constrain(size - bytesRead, 0, sizeof(buf));
 23f8ff2:	eba6 020b 	sub.w	r2, r6, fp
                    toRead = asset.read((char*)buf, toRead);
 23f8ff6:	6823      	ldr	r3, [r4, #0]
 23f8ff8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 23f8ffc:	bfa8      	it	ge
 23f8ffe:	f44f 7200 	movge.w	r2, #512	; 0x200
 23f9002:	4620      	mov	r0, r4
 23f9004:	6a1b      	ldr	r3, [r3, #32]
 23f9006:	a904      	add	r1, sp, #16
 23f9008:	4798      	blx	r3

                    if (toRead <= 0) break;
 23f900a:	1e02      	subs	r2, r0, #0
 23f900c:	dd07      	ble.n	23f901e <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xda>

                    bytesRead += toRead;

                    write(fd, buf, toRead);
 23f900e:	4628      	mov	r0, r5
 23f9010:	a904      	add	r1, sp, #16
                    bytesRead += toRead;
 23f9012:	4493      	add	fp, r2
                    write(fd, buf, toRead);
 23f9014:	f005 fce4 	bl	23fe9e0 <write>
                while (bytesRead < size) {
 23f9018:	e7e9      	b.n	23f8fee <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xaa>
        if (name.startsWith("ad") || name == "qrcode.bmp") {
 23f901a:	2501      	movs	r5, #1
 23f901c:	e7d4      	b.n	23f8fc8 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x84>
                }

                close(fd);
 23f901e:	4628      	mov	r0, r5
 23f9020:	f005 fca6 	bl	23fe970 <close>
                Log.info("Closed fd=%d", fd);
 23f9024:	462a      	mov	r2, r5
 23f9026:	4640      	mov	r0, r8
 23f9028:	490c      	ldr	r1, [pc, #48]	; (23f905c <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x118>)
 23f902a:	f7ff fd75 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
        String name = asset.name();
 23f902e:	4668      	mov	r0, sp
 23f9030:	f002 fd8a 	bl	23fbb48 <_ZN6StringD1Ev>
    for (auto& asset : assets) {
 23f9034:	3440      	adds	r4, #64	; 0x40
 23f9036:	e7a8      	b.n	23f8f8a <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x46>
            }
        }
    }

    System.assetsHandled(true);
 23f9038:	2001      	movs	r0, #1
 23f903a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 23f903e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    System.assetsHandled(true);
 23f9042:	f002 bc38 	b.w	23fb8b6 <_ZN11SystemClass13assetsHandledEb>
 23f9046:	bf00      	nop
 23f9048:	1007adb0 	.word	0x1007adb0
 23f904c:	023fec52 	.word	0x023fec52
 23f9050:	1007ae7c 	.word	0x1007ae7c
 23f9054:	023febdb 	.word	0x023febdb
 23f9058:	023fec7e 	.word	0x023fec7e
 23f905c:	023fec88 	.word	0x023fec88
 23f9060:	023fec6c 	.word	0x023fec6c
 23f9064:	023fec7b 	.word	0x023fec7b

023f9068 <setup>:
void setup() {
 23f9068:	b530      	push	{r4, r5, lr}
 23f906a:	b087      	sub	sp, #28
    Serial.begin(115200);
 23f906c:	f004 fc90 	bl	23fd990 <_Z16_fetch_usbserialv>
 23f9070:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23f9074:	f004 fc7a 	bl	23fd96c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23f9078:	2000      	movs	r0, #0
 23f907a:	f001 fdcd 	bl	23fac18 <hal_timer_millis>
        while (_while() && !_condition()) {
 23f907e:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
 23f9082:	4604      	mov	r4, r0
 23f9084:	2000      	movs	r0, #0
 23f9086:	f001 fdc7 	bl	23fac18 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f908a:	1b00      	subs	r0, r0, r4
 23f908c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f9090:	42a8      	cmp	r0, r5
 23f9092:	f171 0300 	sbcs.w	r3, r1, #0
 23f9096:	d207      	bcs.n	23f90a8 <setup+0x40>
    waitFor(Serial.isConnected, 10000); delay(2000);
 23f9098:	f004 fc7a 	bl	23fd990 <_Z16_fetch_usbserialv>
 23f909c:	f004 fc6d 	bl	23fd97a <_ZN9USBSerial11isConnectedEv>
 23f90a0:	b910      	cbnz	r0, 23f90a8 <setup+0x40>
            spark_process();
 23f90a2:	f002 f9e1 	bl	23fb468 <spark_process>
        while (_while() && !_condition()) {
 23f90a6:	e7ed      	b.n	23f9084 <setup+0x1c>
 23f90a8:	f004 fc72 	bl	23fd990 <_Z16_fetch_usbserialv>
 23f90ac:	f004 fc65 	bl	23fd97a <_ZN9USBSerial11isConnectedEv>
 23f90b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f90b4:	f004 f848 	bl	23fd148 <delay>
    Log.info("Starting assets available=%d", System.assetsAvailable().size());
 23f90b8:	a803      	add	r0, sp, #12
 23f90ba:	f002 fcf8 	bl	23fbaae <_ZN11SystemClass15assetsAvailableEv>
 23f90be:	9a04      	ldr	r2, [sp, #16]
 23f90c0:	492a      	ldr	r1, [pc, #168]	; (23f916c <setup+0x104>)
 23f90c2:	482b      	ldr	r0, [pc, #172]	; (23f9170 <setup+0x108>)
 23f90c4:	f7ff fd28 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
 23f90c8:	a803      	add	r0, sp, #12
 23f90ca:	f7ff fe20 	bl	23f8d0e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>
    handleAssets(System.assetsAvailable());
 23f90ce:	a803      	add	r0, sp, #12
 23f90d0:	f002 fced 	bl	23fbaae <_ZN11SystemClass15assetsAvailableEv>
 23f90d4:	a803      	add	r0, sp, #12
 23f90d6:	f7ff ff35 	bl	23f8f44 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE>
 23f90da:	a803      	add	r0, sp, #12
 23f90dc:	f7ff fe17 	bl	23f8d0e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>
    tft.begin();
 23f90e0:	4824      	ldr	r0, [pc, #144]	; (23f9174 <setup+0x10c>)
 23f90e2:	f000 fc92 	bl	23f9a0a <_ZN16Adafruit_SSD13515beginEv>
    tft.fillScreen(0);
 23f90e6:	2100      	movs	r1, #0
 23f90e8:	4822      	ldr	r0, [pc, #136]	; (23f9174 <setup+0x10c>)
 23f90ea:	f000 fb46 	bl	23f977a <_ZN16Adafruit_SSD135110fillScreenEt>
    tft.fillCircle(60, 60, 20, 0x0ff0);
 23f90ee:	223c      	movs	r2, #60	; 0x3c
 23f90f0:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 23f90f4:	4611      	mov	r1, r2
 23f90f6:	4820      	ldr	r0, [pc, #128]	; (23f9178 <setup+0x110>)
 23f90f8:	9300      	str	r3, [sp, #0]
 23f90fa:	2314      	movs	r3, #20
 23f90fc:	f000 ffd1 	bl	23fa0a2 <_ZN12Adafruit_GFX10fillCircleEssst>
    delay(1000);
 23f9100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f9104:	f004 f820 	bl	23fd148 <delay>
    tft.fillScreen(0xff00);
 23f9108:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 23f910c:	4819      	ldr	r0, [pc, #100]	; (23f9174 <setup+0x10c>)
 23f910e:	f000 fb34 	bl	23f977a <_ZN16Adafruit_SSD135110fillScreenEt>
    delay(1000);
 23f9112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f9116:	f004 f817 	bl	23fd148 <delay>
    Wire.begin();
 23f911a:	f005 f98b 	bl	23fe434 <_Z19__fetch_global_Wirev>
 23f911e:	f004 fd43 	bl	23fdba8 <_ZN7TwoWire5beginEv>
    if (distanceSensor.begin() != 0) {
 23f9122:	4816      	ldr	r0, [pc, #88]	; (23f917c <setup+0x114>)
 23f9124:	f001 fcaa 	bl	23faa7c <_ZN10SFEVL53L1X5beginEv>
 23f9128:	b118      	cbz	r0, 23f9132 <setup+0xca>
        Log.error("VL53L1X failed to init");
 23f912a:	4915      	ldr	r1, [pc, #84]	; (23f9180 <setup+0x118>)
 23f912c:	4810      	ldr	r0, [pc, #64]	; (23f9170 <setup+0x108>)
 23f912e:	f7ff fd0b 	bl	23f8b48 <_ZNK5spark6Logger5errorEPKcz>
    distanceSensor.setDistanceModeLong();
 23f9132:	4812      	ldr	r0, [pc, #72]	; (23f917c <setup+0x114>)
 23f9134:	f001 fcc7 	bl	23faac6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>
    pinMode(ButtonPin, INPUT_PULLUP);
 23f9138:	2102      	movs	r1, #2
 23f913a:	2004      	movs	r0, #4
 23f913c:	f005 f874 	bl	23fe228 <pinMode>
    attachInterrupt(ButtonPin, handleButton, FALLING);
 23f9140:	2300      	movs	r3, #0
 23f9142:	2202      	movs	r2, #2
 23f9144:	9300      	str	r3, [sp, #0]
 23f9146:	490f      	ldr	r1, [pc, #60]	; (23f9184 <setup+0x11c>)
 23f9148:	f04f 33ff 	mov.w	r3, #4294967295
 23f914c:	2004      	movs	r0, #4
 23f914e:	f004 fc45 	bl	23fd9dc <_Z15attachInterrupttPFvvE13InterruptModeah>
    pinMode(ButtonLedPin, OUTPUT);
 23f9152:	2101      	movs	r1, #1
 23f9154:	2005      	movs	r0, #5
 23f9156:	f005 f867 	bl	23fe228 <pinMode>
    digitalWrite(ButtonLedPin, HIGH);
 23f915a:	2101      	movs	r1, #1
 23f915c:	2005      	movs	r0, #5
 23f915e:	f005 f874 	bl	23fe24a <digitalWrite>
}
 23f9162:	b007      	add	sp, #28
 23f9164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    loadAdFilenames();
 23f9168:	f7ff bea6 	b.w	23f8eb8 <_Z15loadAdFilenamesv>
 23f916c:	023fec95 	.word	0x023fec95
 23f9170:	1007ae7c 	.word	0x1007ae7c
 23f9174:	1007ae08 	.word	0x1007ae08
 23f9178:	1007ae14 	.word	0x1007ae14
 23f917c:	1007adc8 	.word	0x1007adc8
 23f9180:	023fecb2 	.word	0x023fecb2
 23f9184:	023f8ac5 	.word	0x023f8ac5

023f9188 <_GLOBAL__sub_I_currentAd>:
 23f9188:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 23f918a:	2400      	movs	r4, #0
 23f918c:	4b29      	ldr	r3, [pc, #164]	; (23f9234 <_GLOBAL__sub_I_currentAd+0xac>)
Adafruit_SSD1351 tft = Adafruit_SSD1351(CsPin, DcPin, RstPin);
 23f918e:	4d2a      	ldr	r5, [pc, #168]	; (23f9238 <_GLOBAL__sub_I_currentAd+0xb0>)
 23f9190:	701c      	strb	r4, [r3, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f9192:	4b2a      	ldr	r3, [pc, #168]	; (23f923c <_GLOBAL__sub_I_currentAd+0xb4>)
 23f9194:	b08c      	sub	sp, #48	; 0x30
Adafruit_SSD1351 tft = Adafruit_SSD1351(CsPin, DcPin, RstPin);
 23f9196:	2213      	movs	r2, #19
 23f9198:	2112      	movs	r1, #18
 23f919a:	e9c3 4400 	strd	r4, r4, [r3]
 23f919e:	609c      	str	r4, [r3, #8]
 23f91a0:	4628      	mov	r0, r5
 23f91a2:	230e      	movs	r3, #14
 23f91a4:	f000 f8fc 	bl	23f93a0 <_ZN16Adafruit_SSD1351C1Ehhh>
SFEVL53L1X distanceSensor;
 23f91a8:	f005 f944 	bl	23fe434 <_Z19__fetch_global_Wirev>
 23f91ac:	f04f 33ff 	mov.w	r3, #4294967295
 23f91b0:	4601      	mov	r1, r0
 23f91b2:	461a      	mov	r2, r3
 23f91b4:	4822      	ldr	r0, [pc, #136]	; (23f9240 <_GLOBAL__sub_I_currentAd+0xb8>)
 23f91b6:	f001 fc27 	bl	23faa08 <_ZN10SFEVL53L1XC1ER7TwoWireii>
#include "Adafruit_mfGFX/Adafruit_mfGFX.h"
#include "Adafruit_SSD1351_Photon.h"

class Bitmap {
    public:
        Bitmap(Adafruit_SSD1351 *tft) : _tft(tft) { }
 23f91ba:	4b22      	ldr	r3, [pc, #136]	; (23f9244 <_GLOBAL__sub_I_currentAd+0xbc>)
        capacity_(0) {
 23f91bc:	e9cd 4400 	strd	r4, r4, [sp]
 23f91c0:	601d      	str	r5, [r3, #0]
 23f91c2:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f91c4:	f004 fbe4 	bl	23fd990 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f91c8:	4c1f      	ldr	r4, [pc, #124]	; (23f9248 <_GLOBAL__sub_I_currentAd+0xc0>)
 23f91ca:	4605      	mov	r5, r0
 23f91cc:	4626      	mov	r6, r4
 23f91ce:	4669      	mov	r1, sp
 23f91d0:	a803      	add	r0, sp, #12
 23f91d2:	f7ff fddd 	bl	23f8d90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23f91d6:	a903      	add	r1, sp, #12
 23f91d8:	a806      	add	r0, sp, #24
 23f91da:	f7ff fdd9 	bl	23f8d90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f91de:	4b1b      	ldr	r3, [pc, #108]	; (23f924c <_GLOBAL__sub_I_currentAd+0xc4>)
 23f91e0:	a906      	add	r1, sp, #24
 23f91e2:	f846 3b04 	str.w	r3, [r6], #4
 23f91e6:	a809      	add	r0, sp, #36	; 0x24
 23f91e8:	f7ff fdd2 	bl	23f8d90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f91ec:	aa09      	add	r2, sp, #36	; 0x24
 23f91ee:	211e      	movs	r1, #30
 23f91f0:	4630      	mov	r0, r6
 23f91f2:	f003 fc87 	bl	23fcb04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f91f6:	a809      	add	r0, sp, #36	; 0x24
 23f91f8:	f7ff fd76 	bl	23f8ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f91fc:	a806      	add	r0, sp, #24
 23f91fe:	f7ff fd73 	bl	23f8ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f9202:	4b13      	ldr	r3, [pc, #76]	; (23f9250 <_GLOBAL__sub_I_currentAd+0xc8>)
 23f9204:	6225      	str	r5, [r4, #32]
 23f9206:	6023      	str	r3, [r4, #0]
 23f9208:	a803      	add	r0, sp, #12
 23f920a:	f7ff fd6d 	bl	23f8ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f920e:	4b11      	ldr	r3, [pc, #68]	; (23f9254 <_GLOBAL__sub_I_currentAd+0xcc>)
 23f9210:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f9212:	f004 fbbd 	bl	23fd990 <_Z16_fetch_usbserialv>
 23f9216:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f921a:	f004 fba7 	bl	23fd96c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f921e:	f003 f955 	bl	23fc4cc <_ZN5spark10LogManager8instanceEv>
 23f9222:	4621      	mov	r1, r4
 23f9224:	f003 fb46 	bl	23fc8b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23f9228:	4668      	mov	r0, sp
 23f922a:	f7ff fd5d 	bl	23f8ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f922e:	b00c      	add	sp, #48	; 0x30
 23f9230:	bd70      	pop	{r4, r5, r6, pc}
 23f9232:	bf00      	nop
 23f9234:	1007adbc 	.word	0x1007adbc
 23f9238:	1007ae08 	.word	0x1007ae08
 23f923c:	1007adb0 	.word	0x1007adb0
 23f9240:	1007adc8 	.word	0x1007adc8
 23f9244:	1007adc0 	.word	0x1007adc0
 23f9248:	1007ade4 	.word	0x1007ade4
 23f924c:	023fecd4 	.word	0x023fecd4
 23f9250:	023ffb98 	.word	0x023ffb98
 23f9254:	023fecec 	.word	0x023fecec

023f9258 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23f9258:	b513      	push	{r0, r1, r4, lr}
 23f925a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23f925c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f925e:	b159      	cbz	r1, 23f9278 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f9260:	9101      	str	r1, [sp, #4]
 23f9262:	f7ff fbeb 	bl	23f8a3c <strlen>
 23f9266:	4602      	mov	r2, r0
 23f9268:	4620      	mov	r0, r4
 23f926a:	6823      	ldr	r3, [r4, #0]
 23f926c:	9901      	ldr	r1, [sp, #4]
 23f926e:	68db      	ldr	r3, [r3, #12]
    }
 23f9270:	b002      	add	sp, #8
 23f9272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f9276:	4718      	bx	r3
    }
 23f9278:	b002      	add	sp, #8
 23f927a:	bd10      	pop	{r4, pc}

023f927c <_ZN16Adafruit_SSD1351D1Ev>:
#define SSD1351_CMD_HORIZSCROLL		0x96
#define SSD1351_CMD_STOPSCROLL		0x9E
#define SSD1351_CMD_STARTSCROLL		0x9F


class Adafruit_SSD1351  : public virtual Adafruit_GFX {
 23f927c:	4a03      	ldr	r2, [pc, #12]	; (23f928c <_ZN16Adafruit_SSD1351D1Ev+0x10>)
 23f927e:	f102 010c 	add.w	r1, r2, #12
 23f9282:	325c      	adds	r2, #92	; 0x5c
 23f9284:	6001      	str	r1, [r0, #0]
 23f9286:	60c2      	str	r2, [r0, #12]
 23f9288:	4770      	bx	lr
 23f928a:	bf00      	nop
 23f928c:	023fecfc 	.word	0x023fecfc

023f9290 <_ZTv0_n12_N16Adafruit_SSD1351D1Ev>:
 23f9290:	b510      	push	{r4, lr}
 23f9292:	6803      	ldr	r3, [r0, #0]
 23f9294:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 23f9298:	4b04      	ldr	r3, [pc, #16]	; (23f92ac <_ZTv0_n12_N16Adafruit_SSD1351D1Ev+0x1c>)
 23f929a:	1842      	adds	r2, r0, r1
 23f929c:	f103 040c 	add.w	r4, r3, #12
 23f92a0:	335c      	adds	r3, #92	; 0x5c
 23f92a2:	5044      	str	r4, [r0, r1]
 23f92a4:	60d3      	str	r3, [r2, #12]
 23f92a6:	4610      	mov	r0, r2
 23f92a8:	bd10      	pop	{r4, pc}
 23f92aa:	bf00      	nop
 23f92ac:	023fecfc 	.word	0x023fecfc

023f92b0 <_ZN16Adafruit_SSD1351D0Ev>:
 23f92b0:	b510      	push	{r4, lr}
 23f92b2:	4604      	mov	r4, r0
 23f92b4:	4b05      	ldr	r3, [pc, #20]	; (23f92cc <_ZN16Adafruit_SSD1351D0Ev+0x1c>)
 23f92b6:	2138      	movs	r1, #56	; 0x38
 23f92b8:	f103 020c 	add.w	r2, r3, #12
 23f92bc:	335c      	adds	r3, #92	; 0x5c
 23f92be:	6002      	str	r2, [r0, #0]
 23f92c0:	60c3      	str	r3, [r0, #12]
 23f92c2:	f7ff fbe6 	bl	23f8a92 <_ZdlPvj>
 23f92c6:	4620      	mov	r0, r4
 23f92c8:	bd10      	pop	{r4, pc}
 23f92ca:	bf00      	nop
 23f92cc:	023fecfc 	.word	0x023fecfc

023f92d0 <_ZTv0_n12_N16Adafruit_SSD1351D0Ev>:
 23f92d0:	f8d0 c000 	ldr.w	ip, [r0]
 23f92d4:	f1ac 0c0c 	sub.w	ip, ip, #12
 23f92d8:	f8dc c000 	ldr.w	ip, [ip]
 23f92dc:	4460      	add	r0, ip
 23f92de:	e7e7      	b.n	23f92b0 <_ZN16Adafruit_SSD1351D0Ev>

023f92e0 <digitalWriteFast>:
    #define pinResetFast(pin) digitalWrite(pin, LOW)

#endif

inline void digitalWriteFast(hal_pin_t pin, uint8_t value)
{
 23f92e0:	b570      	push	{r4, r5, r6, lr}
 23f92e2:	4604      	mov	r4, r0
    if (value)
 23f92e4:	4d26      	ldr	r5, [pc, #152]	; (23f9380 <digitalWriteFast+0xa0>)
 23f92e6:	4e27      	ldr	r6, [pc, #156]	; (23f9384 <digitalWriteFast+0xa4>)
 23f92e8:	b351      	cbz	r1, 23f9340 <digitalWriteFast+0x60>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f92ea:	e8d5 3f8f 	ldab	r3, [r5]
 23f92ee:	07da      	lsls	r2, r3, #31
 23f92f0:	d409      	bmi.n	23f9306 <digitalWriteFast+0x26>
 23f92f2:	4628      	mov	r0, r5
 23f92f4:	f7ff fbdc 	bl	23f8ab0 <__cxa_guard_acquire>
 23f92f8:	b128      	cbz	r0, 23f9306 <digitalWriteFast+0x26>
 23f92fa:	f001 fc0f 	bl	23fab1c <hal_pin_map>
 23f92fe:	6030      	str	r0, [r6, #0]
 23f9300:	4628      	mov	r0, r5
 23f9302:	f7ff fbda 	bl	23f8aba <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9306:	200c      	movs	r0, #12
 23f9308:	4344      	muls	r4, r0
 23f930a:	6833      	ldr	r3, [r6, #0]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f930c:	4a1e      	ldr	r2, [pc, #120]	; (23f9388 <digitalWriteFast+0xa8>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f930e:	1919      	adds	r1, r3, r4
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9310:	5d1c      	ldrb	r4, [r3, r4]
 23f9312:	4b1e      	ldr	r3, [pc, #120]	; (23f938c <digitalWriteFast+0xac>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9314:	7848      	ldrb	r0, [r1, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9316:	2c00      	cmp	r4, #0
 23f9318:	bf18      	it	ne
 23f931a:	4613      	movne	r3, r2
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f931c:	2201      	movs	r2, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f931e:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9320:	4082      	lsls	r2, r0
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23f9322:	2905      	cmp	r1, #5
 23f9324:	d001      	beq.n	23f932a <digitalWriteFast+0x4a>
 23f9326:	2908      	cmp	r1, #8
 23f9328:	d104      	bne.n	23f9334 <digitalWriteFast+0x54>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23f932a:	6859      	ldr	r1, [r3, #4]
 23f932c:	ea21 0202 	bic.w	r2, r1, r2
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9330:	605a      	str	r2, [r3, #4]
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
 23f9332:	bd70      	pop	{r4, r5, r6, pc}
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9334:	6819      	ldr	r1, [r3, #0]
 23f9336:	4311      	orrs	r1, r2
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23f9338:	6019      	str	r1, [r3, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f933a:	6859      	ldr	r1, [r3, #4]
 23f933c:	430a      	orrs	r2, r1
 23f933e:	e7f7      	b.n	23f9330 <digitalWriteFast+0x50>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f9340:	e8d5 3f8f 	ldab	r3, [r5]
 23f9344:	07db      	lsls	r3, r3, #31
 23f9346:	d409      	bmi.n	23f935c <digitalWriteFast+0x7c>
 23f9348:	4628      	mov	r0, r5
 23f934a:	f7ff fbb1 	bl	23f8ab0 <__cxa_guard_acquire>
 23f934e:	b128      	cbz	r0, 23f935c <digitalWriteFast+0x7c>
 23f9350:	f001 fbe4 	bl	23fab1c <hal_pin_map>
 23f9354:	6030      	str	r0, [r6, #0]
 23f9356:	4628      	mov	r0, r5
 23f9358:	f7ff fbaf 	bl	23f8aba <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f935c:	200c      	movs	r0, #12
 23f935e:	4344      	muls	r4, r0
 23f9360:	6833      	ldr	r3, [r6, #0]
 23f9362:	191a      	adds	r2, r3, r4
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9364:	5d19      	ldrb	r1, [r3, r4]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9366:	7850      	ldrb	r0, [r2, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9368:	4b08      	ldr	r3, [pc, #32]	; (23f938c <digitalWriteFast+0xac>)
 23f936a:	4a07      	ldr	r2, [pc, #28]	; (23f9388 <digitalWriteFast+0xa8>)
 23f936c:	2900      	cmp	r1, #0
 23f936e:	bf18      	it	ne
 23f9370:	4613      	movne	r3, r2
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23f9372:	2201      	movs	r2, #1
 23f9374:	6819      	ldr	r1, [r3, #0]
 23f9376:	4082      	lsls	r2, r0
 23f9378:	ea21 0102 	bic.w	r1, r1, r2
 23f937c:	e7dc      	b.n	23f9338 <digitalWriteFast+0x58>
 23f937e:	bf00      	nop
 23f9380:	1007ae4c 	.word	0x1007ae4c
 23f9384:	1007ae50 	.word	0x1007ae50
 23f9388:	48014400 	.word	0x48014400
 23f938c:	48014000 	.word	0x48014000

023f9390 <_ZN16Adafruit_SSD13518Color565Ehhh>:
  writeCommand(SSD1351_CMD_WRITERAM);
}

uint16_t Adafruit_SSD1351::Color565(uint8_t r, uint8_t g, uint8_t b) {
  uint16_t c;
  c = r >> 3;
 23f9390:	08c9      	lsrs	r1, r1, #3
  c <<= 6;
  c |= g >> 2;
 23f9392:	0892      	lsrs	r2, r2, #2
 23f9394:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
  c <<= 5;
  c |= b >> 3;
 23f9398:	08db      	lsrs	r3, r3, #3

  return c;
}
 23f939a:	ea43 1042 	orr.w	r0, r3, r2, lsl #5
 23f939e:	4770      	bx	lr

023f93a0 <_ZN16Adafruit_SSD1351C1Ehhh>:
    _sclk = sclk;
    _rst = rst;
}

// Hardware SPI
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23f93a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f93a2:	4616      	mov	r6, r2
 23f93a4:	2280      	movs	r2, #128	; 0x80
 23f93a6:	4604      	mov	r4, r0
 23f93a8:	460f      	mov	r7, r1
 23f93aa:	300c      	adds	r0, #12
 23f93ac:	4611      	mov	r1, r2
 23f93ae:	461d      	mov	r5, r3
 23f93b0:	f000 fdc6 	bl	23f9f40 <_ZN12Adafruit_GFXC1Ess>
 23f93b4:	4806      	ldr	r0, [pc, #24]	; (23f93d0 <_ZN16Adafruit_SSD1351C1Ehhh+0x30>)
    _cs = cs;
 23f93b6:	7127      	strb	r7, [r4, #4]
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23f93b8:	f100 030c 	add.w	r3, r0, #12
 23f93bc:	6023      	str	r3, [r4, #0]
    _rs = rs;
    _sid = 0;
 23f93be:	2300      	movs	r3, #0
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23f93c0:	305c      	adds	r0, #92	; 0x5c
 23f93c2:	60e0      	str	r0, [r4, #12]
    _rs = rs;
 23f93c4:	7166      	strb	r6, [r4, #5]
    _sclk = 0;
    _rst = rst;
}
 23f93c6:	4620      	mov	r0, r4
    _sid = 0;
 23f93c8:	71e3      	strb	r3, [r4, #7]
    _sclk = 0;
 23f93ca:	7223      	strb	r3, [r4, #8]
    _rst = rst;
 23f93cc:	71a5      	strb	r5, [r4, #6]
}
 23f93ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f93d0:	023fecfc 	.word	0x023fecfc

023f93d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23f93d4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23f93d6:	4c0a      	ldr	r4, [pc, #40]	; (23f9400 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23f93d8:	e8d4 1f8f 	ldab	r1, [r4]
 23f93dc:	f011 0101 	ands.w	r1, r1, #1
 23f93e0:	d10b      	bne.n	23f93fa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23f93e2:	4620      	mov	r0, r4
 23f93e4:	9101      	str	r1, [sp, #4]
 23f93e6:	f7ff fb63 	bl	23f8ab0 <__cxa_guard_acquire>
 23f93ea:	9901      	ldr	r1, [sp, #4]
 23f93ec:	b128      	cbz	r0, 23f93fa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23f93ee:	4805      	ldr	r0, [pc, #20]	; (23f9404 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23f93f0:	f002 f9b2 	bl	23fb758 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f93f4:	4620      	mov	r0, r4
 23f93f6:	f7ff fb60 	bl	23f8aba <__cxa_guard_release>
        return instance;
    }
 23f93fa:	4802      	ldr	r0, [pc, #8]	; (23f9404 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23f93fc:	b002      	add	sp, #8
 23f93fe:	bd10      	pop	{r4, pc}
 23f9400:	1007ae40 	.word	0x1007ae40
 23f9404:	1007ae44 	.word	0x1007ae44

023f9408 <_ZN16Adafruit_SSD13518spiwriteEh>:
inline void Adafruit_SSD1351::spiwrite(uint8_t c) {
 23f9408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!_sid) {
 23f940c:	79c3      	ldrb	r3, [r0, #7]
inline void Adafruit_SSD1351::spiwrite(uint8_t c) {
 23f940e:	4607      	mov	r7, r0
 23f9410:	4689      	mov	r9, r1
    if (!_sid) {
 23f9412:	b933      	cbnz	r3, 23f9422 <_ZN16Adafruit_SSD13518spiwriteEh+0x1a>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23f9414:	f7ff ffde 	bl	23f93d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9418:	4649      	mov	r1, r9
}
 23f941a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f941e:	f002 ba3b 	b.w	23fb898 <_ZN8SPIClass8transferEh>
 23f9422:	f04f 0807 	mov.w	r8, #7
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f9426:	4c58      	ldr	r4, [pc, #352]	; (23f9588 <_ZN16Adafruit_SSD13518spiwriteEh+0x180>)
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9428:	f8df a164 	ldr.w	sl, [pc, #356]	; 23f9590 <_ZN16Adafruit_SSD13518spiwriteEh+0x188>
 23f942c:	f8df b164 	ldr.w	fp, [pc, #356]	; 23f9594 <_ZN16Adafruit_SSD13518spiwriteEh+0x18c>
		pinResetFast(_sclk);
 23f9430:	7a3d      	ldrb	r5, [r7, #8]
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f9432:	e8d4 3f8f 	ldab	r3, [r4]
 23f9436:	f013 0f01 	tst.w	r3, #1
 23f943a:	4e54      	ldr	r6, [pc, #336]	; (23f958c <_ZN16Adafruit_SSD13518spiwriteEh+0x184>)
 23f943c:	d109      	bne.n	23f9452 <_ZN16Adafruit_SSD13518spiwriteEh+0x4a>
 23f943e:	4620      	mov	r0, r4
 23f9440:	f7ff fb36 	bl	23f8ab0 <__cxa_guard_acquire>
 23f9444:	b128      	cbz	r0, 23f9452 <_ZN16Adafruit_SSD13518spiwriteEh+0x4a>
 23f9446:	f001 fb69 	bl	23fab1c <hal_pin_map>
 23f944a:	6030      	str	r0, [r6, #0]
 23f944c:	4620      	mov	r0, r4
 23f944e:	f7ff fb34 	bl	23f8aba <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9452:	6832      	ldr	r2, [r6, #0]
 23f9454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 23f9458:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 23f945c:	7858      	ldrb	r0, [r3, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f945e:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
 23f9462:	2b00      	cmp	r3, #0
 23f9464:	bf0c      	ite	eq
 23f9466:	4652      	moveq	r2, sl
 23f9468:	465a      	movne	r2, fp
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23f946a:	2301      	movs	r3, #1
 23f946c:	6811      	ldr	r1, [r2, #0]
 23f946e:	4083      	lsls	r3, r0
 23f9470:	ea21 0103 	bic.w	r1, r1, r3
 23f9474:	6011      	str	r1, [r2, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9476:	6851      	ldr	r1, [r2, #4]
 23f9478:	430b      	orrs	r3, r1
 23f947a:	6053      	str	r3, [r2, #4]
		if (c & (1 << (7-bit)))		// walk down mask from bit 7 to bit 0
 23f947c:	fa49 f308 	asr.w	r3, r9, r8
 23f9480:	f013 0f01 	tst.w	r3, #1
 23f9484:	79fd      	ldrb	r5, [r7, #7]
 23f9486:	d055      	beq.n	23f9534 <_ZN16Adafruit_SSD13518spiwriteEh+0x12c>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f9488:	e8d4 3f8f 	ldab	r3, [r4]
 23f948c:	07d9      	lsls	r1, r3, #31
 23f948e:	d409      	bmi.n	23f94a4 <_ZN16Adafruit_SSD13518spiwriteEh+0x9c>
 23f9490:	4620      	mov	r0, r4
 23f9492:	f7ff fb0d 	bl	23f8ab0 <__cxa_guard_acquire>
 23f9496:	b128      	cbz	r0, 23f94a4 <_ZN16Adafruit_SSD13518spiwriteEh+0x9c>
 23f9498:	f001 fb40 	bl	23fab1c <hal_pin_map>
 23f949c:	6030      	str	r0, [r6, #0]
 23f949e:	4620      	mov	r0, r4
 23f94a0:	f7ff fb0b 	bl	23f8aba <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f94a4:	6832      	ldr	r2, [r6, #0]
 23f94a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f94aa:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f94ae:	eb02 0185 	add.w	r1, r2, r5, lsl #2
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f94b2:	2b00      	cmp	r3, #0
 23f94b4:	bf0c      	ite	eq
 23f94b6:	4652      	moveq	r2, sl
 23f94b8:	465a      	movne	r2, fp
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f94ba:	2301      	movs	r3, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f94bc:	7848      	ldrb	r0, [r1, #1]
 23f94be:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f94c0:	4083      	lsls	r3, r0
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23f94c2:	2905      	cmp	r1, #5
 23f94c4:	d001      	beq.n	23f94ca <_ZN16Adafruit_SSD13518spiwriteEh+0xc2>
 23f94c6:	2908      	cmp	r1, #8
 23f94c8:	d12e      	bne.n	23f9528 <_ZN16Adafruit_SSD13518spiwriteEh+0x120>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23f94ca:	6851      	ldr	r1, [r2, #4]
 23f94cc:	ea21 0303 	bic.w	r3, r1, r3
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f94d0:	6053      	str	r3, [r2, #4]
		pinSetFast(_sclk);
 23f94d2:	7a3d      	ldrb	r5, [r7, #8]
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f94d4:	e8d4 3f8f 	ldab	r3, [r4]
 23f94d8:	07db      	lsls	r3, r3, #31
 23f94da:	d409      	bmi.n	23f94f0 <_ZN16Adafruit_SSD13518spiwriteEh+0xe8>
 23f94dc:	4620      	mov	r0, r4
 23f94de:	f7ff fae7 	bl	23f8ab0 <__cxa_guard_acquire>
 23f94e2:	b128      	cbz	r0, 23f94f0 <_ZN16Adafruit_SSD13518spiwriteEh+0xe8>
 23f94e4:	f001 fb1a 	bl	23fab1c <hal_pin_map>
 23f94e8:	6030      	str	r0, [r6, #0]
 23f94ea:	4620      	mov	r0, r4
 23f94ec:	f7ff fae5 	bl	23f8aba <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f94f0:	6830      	ldr	r0, [r6, #0]
 23f94f2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f94f6:	f810 3022 	ldrb.w	r3, [r0, r2, lsl #2]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f94fa:	eb00 0182 	add.w	r1, r0, r2, lsl #2
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f94fe:	2b00      	cmp	r3, #0
 23f9500:	bf0c      	ite	eq
 23f9502:	4652      	moveq	r2, sl
 23f9504:	465a      	movne	r2, fp
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9506:	2301      	movs	r3, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9508:	784d      	ldrb	r5, [r1, #1]
 23f950a:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f950c:	40ab      	lsls	r3, r5
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23f950e:	2905      	cmp	r1, #5
 23f9510:	d001      	beq.n	23f9516 <_ZN16Adafruit_SSD13518spiwriteEh+0x10e>
 23f9512:	2908      	cmp	r1, #8
 23f9514:	d132      	bne.n	23f957c <_ZN16Adafruit_SSD13518spiwriteEh+0x174>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23f9516:	6851      	ldr	r1, [r2, #4]
 23f9518:	ea21 0303 	bic.w	r3, r1, r3
	for (uint8_t bit = 0; bit < 8; bit++)  {
 23f951c:	f1b8 0801 	subs.w	r8, r8, #1
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9520:	6053      	str	r3, [r2, #4]
 23f9522:	d285      	bcs.n	23f9430 <_ZN16Adafruit_SSD13518spiwriteEh+0x28>
}
 23f9524:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9528:	6811      	ldr	r1, [r2, #0]
 23f952a:	4319      	orrs	r1, r3
 23f952c:	6011      	str	r1, [r2, #0]
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f952e:	6851      	ldr	r1, [r2, #4]
 23f9530:	430b      	orrs	r3, r1
 23f9532:	e7cd      	b.n	23f94d0 <_ZN16Adafruit_SSD13518spiwriteEh+0xc8>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f9534:	e8d4 3f8f 	ldab	r3, [r4]
 23f9538:	07da      	lsls	r2, r3, #31
 23f953a:	d409      	bmi.n	23f9550 <_ZN16Adafruit_SSD13518spiwriteEh+0x148>
 23f953c:	4620      	mov	r0, r4
 23f953e:	f7ff fab7 	bl	23f8ab0 <__cxa_guard_acquire>
 23f9542:	b128      	cbz	r0, 23f9550 <_ZN16Adafruit_SSD13518spiwriteEh+0x148>
 23f9544:	f001 faea 	bl	23fab1c <hal_pin_map>
 23f9548:	6030      	str	r0, [r6, #0]
 23f954a:	4620      	mov	r0, r4
 23f954c:	f7ff fab5 	bl	23f8aba <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9550:	6832      	ldr	r2, [r6, #0]
 23f9552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 23f9556:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 23f955a:	7858      	ldrb	r0, [r3, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f955c:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
 23f9560:	2b00      	cmp	r3, #0
 23f9562:	bf0c      	ite	eq
 23f9564:	4651      	moveq	r1, sl
 23f9566:	4659      	movne	r1, fp
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23f9568:	2301      	movs	r3, #1
 23f956a:	680a      	ldr	r2, [r1, #0]
 23f956c:	4083      	lsls	r3, r0
 23f956e:	ea22 0203 	bic.w	r2, r2, r3
 23f9572:	600a      	str	r2, [r1, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9574:	684a      	ldr	r2, [r1, #4]
 23f9576:	4313      	orrs	r3, r2
 23f9578:	604b      	str	r3, [r1, #4]
}
 23f957a:	e7aa      	b.n	23f94d2 <_ZN16Adafruit_SSD13518spiwriteEh+0xca>
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f957c:	6811      	ldr	r1, [r2, #0]
 23f957e:	4319      	orrs	r1, r3
 23f9580:	6011      	str	r1, [r2, #0]
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9582:	6851      	ldr	r1, [r2, #4]
 23f9584:	430b      	orrs	r3, r1
 23f9586:	e7c9      	b.n	23f951c <_ZN16Adafruit_SSD13518spiwriteEh+0x114>
 23f9588:	1007ae4c 	.word	0x1007ae4c
 23f958c:	1007ae50 	.word	0x1007ae50
 23f9590:	48014000 	.word	0x48014000
 23f9594:	48014400 	.word	0x48014400

023f9598 <_ZN16Adafruit_SSD135112writeCommandEh>:
void Adafruit_SSD1351::writeCommand(uint8_t c) {
 23f9598:	b538      	push	{r3, r4, r5, lr}
 23f959a:	4604      	mov	r4, r0
 23f959c:	460d      	mov	r5, r1
    digitalWriteFast(_rs, LOW);
 23f959e:	7940      	ldrb	r0, [r0, #5]
 23f95a0:	2100      	movs	r1, #0
 23f95a2:	f7ff fe9d 	bl	23f92e0 <digitalWriteFast>
    digitalWriteFast(_cs, LOW);
 23f95a6:	7920      	ldrb	r0, [r4, #4]
 23f95a8:	2100      	movs	r1, #0
 23f95aa:	f7ff fe99 	bl	23f92e0 <digitalWriteFast>
    spiwrite(c);
 23f95ae:	4629      	mov	r1, r5
 23f95b0:	4620      	mov	r0, r4
 23f95b2:	f7ff ff29 	bl	23f9408 <_ZN16Adafruit_SSD13518spiwriteEh>
    digitalWriteFast(_cs, HIGH);
 23f95b6:	2101      	movs	r1, #1
 23f95b8:	7920      	ldrb	r0, [r4, #4]
 23f95ba:	f7ff fe91 	bl	23f92e0 <digitalWriteFast>
}
 23f95be:	bd38      	pop	{r3, r4, r5, pc}

023f95c0 <_ZN16Adafruit_SSD13519writeDataEh>:
void Adafruit_SSD1351::writeData(uint8_t c) {
 23f95c0:	b538      	push	{r3, r4, r5, lr}
 23f95c2:	4604      	mov	r4, r0
 23f95c4:	460d      	mov	r5, r1
    digitalWriteFast(_rs, HIGH);
 23f95c6:	7940      	ldrb	r0, [r0, #5]
 23f95c8:	2101      	movs	r1, #1
 23f95ca:	f7ff fe89 	bl	23f92e0 <digitalWriteFast>
    digitalWriteFast(_cs, LOW);
 23f95ce:	7920      	ldrb	r0, [r4, #4]
 23f95d0:	2100      	movs	r1, #0
 23f95d2:	f7ff fe85 	bl	23f92e0 <digitalWriteFast>
    spiwrite(c);
 23f95d6:	4629      	mov	r1, r5
 23f95d8:	4620      	mov	r0, r4
 23f95da:	f7ff ff15 	bl	23f9408 <_ZN16Adafruit_SSD13518spiwriteEh>
    digitalWriteFast(_cs, HIGH);
 23f95de:	2101      	movs	r1, #1
 23f95e0:	7920      	ldrb	r0, [r4, #4]
 23f95e2:	f7ff fe7d 	bl	23f92e0 <digitalWriteFast>
}
 23f95e6:	bd38      	pop	{r3, r4, r5, pc}

023f95e8 <_ZN16Adafruit_SSD13514goToEii>:
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23f95e8:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::goTo(int x, int y) {
 23f95ea:	b570      	push	{r4, r5, r6, lr}
 23f95ec:	4604      	mov	r4, r0
 23f95ee:	460e      	mov	r6, r1
 23f95f0:	4615      	mov	r5, r2
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23f95f2:	dc1e      	bgt.n	23f9632 <_ZN16Adafruit_SSD13514goToEii+0x4a>
 23f95f4:	2a7f      	cmp	r2, #127	; 0x7f
 23f95f6:	dc1c      	bgt.n	23f9632 <_ZN16Adafruit_SSD13514goToEii+0x4a>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f95f8:	2115      	movs	r1, #21
 23f95fa:	f7ff ffcd 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23f95fe:	4620      	mov	r0, r4
 23f9600:	b2f1      	uxtb	r1, r6
 23f9602:	f7ff ffdd 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(SSD1351WIDTH-1);
 23f9606:	4620      	mov	r0, r4
 23f9608:	217f      	movs	r1, #127	; 0x7f
 23f960a:	f7ff ffd9 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_SETROW);
 23f960e:	4620      	mov	r0, r4
 23f9610:	2175      	movs	r1, #117	; 0x75
 23f9612:	f7ff ffc1 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23f9616:	4620      	mov	r0, r4
 23f9618:	b2e9      	uxtb	r1, r5
 23f961a:	f7ff ffd1 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(SSD1351HEIGHT-1);
 23f961e:	4620      	mov	r0, r4
 23f9620:	217f      	movs	r1, #127	; 0x7f
 23f9622:	f7ff ffcd 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23f9626:	4620      	mov	r0, r4
}
 23f9628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeCommand(SSD1351_CMD_WRITERAM);
 23f962c:	215c      	movs	r1, #92	; 0x5c
 23f962e:	f7ff bfb3 	b.w	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
}
 23f9632:	bd70      	pop	{r4, r5, r6, pc}

023f9634 <_ZN16Adafruit_SSD135111rawFillRectEttttt>:
void Adafruit_SSD1351::rawFillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f9634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f9638:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f963a:	4606      	mov	r6, r0
 23f963c:	460d      	mov	r5, r1
 23f963e:	4614      	mov	r4, r2
 23f9640:	461f      	mov	r7, r3
 23f9642:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 23f9646:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f964a:	d849      	bhi.n	23f96e0 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
 23f964c:	2a7f      	cmp	r2, #127	; 0x7f
 23f964e:	d847      	bhi.n	23f96e0 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
  if (y+h > SSD1351HEIGHT)
 23f9650:	eb02 0308 	add.w	r3, r2, r8
 23f9654:	2b80      	cmp	r3, #128	; 0x80
    h = SSD1351HEIGHT - y - 1;
 23f9656:	bfc8      	it	gt
 23f9658:	f1c2 087f 	rsbgt	r8, r2, #127	; 0x7f
  if (x+w > SSD1351WIDTH)
 23f965c:	eb01 0307 	add.w	r3, r1, r7
    h = SSD1351HEIGHT - y - 1;
 23f9660:	bfc8      	it	gt
 23f9662:	fa1f f888 	uxthgt.w	r8, r8
  if (x+w > SSD1351WIDTH)
 23f9666:	2b80      	cmp	r3, #128	; 0x80
    w = SSD1351WIDTH - x - 1;
 23f9668:	bfc8      	it	gt
 23f966a:	f1c1 077f 	rsbgt	r7, r1, #127	; 0x7f
  writeData(x);
 23f966e:	b2ed      	uxtb	r5, r5
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f9670:	f04f 0115 	mov.w	r1, #21
    w = SSD1351WIDTH - x - 1;
 23f9674:	bfc8      	it	gt
 23f9676:	b2bf      	uxthgt	r7, r7
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f9678:	f7ff ff8e 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23f967c:	4629      	mov	r1, r5
 23f967e:	4630      	mov	r0, r6
  writeData(x+w-1);
 23f9680:	3d01      	subs	r5, #1
  writeData(x);
 23f9682:	f7ff ff9d 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x+w-1);
 23f9686:	19e9      	adds	r1, r5, r7
 23f9688:	4630      	mov	r0, r6
 23f968a:	b2c9      	uxtb	r1, r1
 23f968c:	f7ff ff98 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23f9690:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETROW);
 23f9692:	2175      	movs	r1, #117	; 0x75
 23f9694:	4630      	mov	r0, r6
 23f9696:	f7ff ff7f 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23f969a:	4621      	mov	r1, r4
  writeData(y+h-1);
 23f969c:	3c01      	subs	r4, #1
  writeData(y);
 23f969e:	4630      	mov	r0, r6
  writeData(y+h-1);
 23f96a0:	4444      	add	r4, r8
  writeData(y);
 23f96a2:	f7ff ff8d 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y+h-1);
 23f96a6:	b2e1      	uxtb	r1, r4
 23f96a8:	4630      	mov	r0, r6
 23f96aa:	f7ff ff89 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23f96ae:	215c      	movs	r1, #92	; 0x5c
 23f96b0:	4630      	mov	r0, r6
 23f96b2:	f7ff ff71 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(fillcolor >> 8);
 23f96b6:	2400      	movs	r4, #0
  for (uint16_t i=0; i < w*h; i++) {
 23f96b8:	fb08 f707 	mul.w	r7, r8, r7
    writeData(fillcolor >> 8);
 23f96bc:	ea4f 2519 	mov.w	r5, r9, lsr #8
    writeData(fillcolor);
 23f96c0:	fa5f f989 	uxtb.w	r9, r9
  for (uint16_t i=0; i < w*h; i++) {
 23f96c4:	b2a3      	uxth	r3, r4
 23f96c6:	42bb      	cmp	r3, r7
 23f96c8:	f104 0401 	add.w	r4, r4, #1
 23f96cc:	da08      	bge.n	23f96e0 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
    writeData(fillcolor >> 8);
 23f96ce:	4629      	mov	r1, r5
 23f96d0:	4630      	mov	r0, r6
 23f96d2:	f7ff ff75 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(fillcolor);
 23f96d6:	4649      	mov	r1, r9
 23f96d8:	4630      	mov	r0, r6
 23f96da:	f7ff ff71 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < w*h; i++) {
 23f96de:	e7f1      	b.n	23f96c4 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0x90>
}
 23f96e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023f96e4 <_ZN16Adafruit_SSD13518fillRectEttttt>:
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f96e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f96e8:	4604      	mov	r4, r0
 23f96ea:	461f      	mov	r7, r3
  switch (getRotation()) {
 23f96ec:	6803      	ldr	r3, [r0, #0]
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f96ee:	460e      	mov	r6, r1
  switch (getRotation()) {
 23f96f0:	f853 0c0c 	ldr.w	r0, [r3, #-12]
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f96f4:	4615      	mov	r5, r2
  switch (getRotation()) {
 23f96f6:	4420      	add	r0, r4
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f96f8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 23f96fc:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  switch (getRotation()) {
 23f9700:	f000 fda8 	bl	23fa254 <_ZN12Adafruit_GFX11getRotationEv>
 23f9704:	2803      	cmp	r0, #3
 23f9706:	d836      	bhi.n	23f9776 <_ZN16Adafruit_SSD13518fillRectEttttt+0x92>
 23f9708:	e8df f000 	tbb	[pc, r0]
 23f970c:	28190c02 	.word	0x28190c02
    rawFillRect(x, y, w, h, fillcolor);
 23f9710:	463b      	mov	r3, r7
 23f9712:	462a      	mov	r2, r5
 23f9714:	4631      	mov	r1, r6
 23f9716:	e9cd 8908 	strd	r8, r9, [sp, #32]
    rawFillRect(x, y, h, w, fillcolor);
 23f971a:	4620      	mov	r0, r4
}
 23f971c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rawFillRect(x, y, h, w, fillcolor);
 23f9720:	f7ff bf88 	b.w	23f9634 <_ZN16Adafruit_SSD135111rawFillRectEttttt>
    x = WIDTH - x - h;
 23f9724:	6823      	ldr	r3, [r4, #0]
    rawFillRect(x, y, h, w, fillcolor);
 23f9726:	4632      	mov	r2, r6
    x = WIDTH - x - h;
 23f9728:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f972c:	4445      	add	r5, r8
 23f972e:	4423      	add	r3, r4
 23f9730:	8919      	ldrh	r1, [r3, #8]
    rawFillRect(x, y, h, w, fillcolor);
 23f9732:	4643      	mov	r3, r8
 23f9734:	e9cd 7908 	strd	r7, r9, [sp, #32]
    x = WIDTH - x - h;
 23f9738:	1b49      	subs	r1, r1, r5
    rawFillRect(x, y, w, h, fillcolor);
 23f973a:	b289      	uxth	r1, r1
 23f973c:	e7ed      	b.n	23f971a <_ZN16Adafruit_SSD13518fillRectEttttt+0x36>
    x = WIDTH - x - w;
 23f973e:	6823      	ldr	r3, [r4, #0]
    y = HEIGHT - y - h;
 23f9740:	4445      	add	r5, r8
    x = WIDTH - x - w;
 23f9742:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f9746:	443e      	add	r6, r7
 23f9748:	4423      	add	r3, r4
    y = HEIGHT - y - h;
 23f974a:	895a      	ldrh	r2, [r3, #10]
    x = WIDTH - x - w;
 23f974c:	8919      	ldrh	r1, [r3, #8]
    y = HEIGHT - y - h;
 23f974e:	1b52      	subs	r2, r2, r5
    rawFillRect(x, y, w, h, fillcolor);
 23f9750:	463b      	mov	r3, r7
 23f9752:	e9cd 8908 	strd	r8, r9, [sp, #32]
    x = WIDTH - x - w;
 23f9756:	1b89      	subs	r1, r1, r6
    rawFillRect(x, y, w, h, fillcolor);
 23f9758:	b292      	uxth	r2, r2
 23f975a:	e7ee      	b.n	23f973a <_ZN16Adafruit_SSD13518fillRectEttttt+0x56>
    y = HEIGHT - y - w;
 23f975c:	6823      	ldr	r3, [r4, #0]
 23f975e:	443e      	add	r6, r7
 23f9760:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    rawFillRect(x, y, h, w, fillcolor);
 23f9764:	4629      	mov	r1, r5
    y = HEIGHT - y - w;
 23f9766:	4423      	add	r3, r4
 23f9768:	895a      	ldrh	r2, [r3, #10]
    rawFillRect(x, y, h, w, fillcolor);
 23f976a:	4643      	mov	r3, r8
    y = HEIGHT - y - w;
 23f976c:	1b92      	subs	r2, r2, r6
    rawFillRect(x, y, h, w, fillcolor);
 23f976e:	e9cd 7908 	strd	r7, r9, [sp, #32]
 23f9772:	b292      	uxth	r2, r2
 23f9774:	e7d1      	b.n	23f971a <_ZN16Adafruit_SSD13518fillRectEttttt+0x36>
}
 23f9776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f977a <_ZN16Adafruit_SSD135110fillScreenEt>:
void Adafruit_SSD1351::fillScreen(uint16_t fillcolor) {
 23f977a:	b507      	push	{r0, r1, r2, lr}
  fillRect(0, 0, SSD1351WIDTH, SSD1351HEIGHT, fillcolor);
 23f977c:	2380      	movs	r3, #128	; 0x80
 23f977e:	2200      	movs	r2, #0
 23f9780:	9101      	str	r1, [sp, #4]
 23f9782:	9300      	str	r3, [sp, #0]
 23f9784:	4611      	mov	r1, r2
 23f9786:	f7ff ffad 	bl	23f96e4 <_ZN16Adafruit_SSD13518fillRectEttttt>
}
 23f978a:	b003      	add	sp, #12
 23f978c:	f85d fb04 	ldr.w	pc, [sp], #4

023f9790 <_ZTv0_n48_N16Adafruit_SSD135110fillScreenEt>:
  // drawing primitives!
  void drawPixel(int16_t x, int16_t y, uint16_t color);
  void fillRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t color);
  void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
  void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  void fillScreen(uint16_t fillcolor);
 23f9790:	f8d0 c000 	ldr.w	ip, [r0]
 23f9794:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 23f9798:	f8dc c000 	ldr.w	ip, [ip]
 23f979c:	4460      	add	r0, ip
 23f979e:	f7ff bfec 	b.w	23f977a <_ZN16Adafruit_SSD135110fillScreenEt>

023f97a2 <_ZN16Adafruit_SSD135112rawFastHLineEssst>:
void Adafruit_SSD1351::rawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f97a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f97a6:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f97a8:	4605      	mov	r5, r0
 23f97aa:	460c      	mov	r4, r1
 23f97ac:	4617      	mov	r7, r2
 23f97ae:	461e      	mov	r6, r3
 23f97b0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f97b4:	dc3b      	bgt.n	23f982e <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
 23f97b6:	2a7f      	cmp	r2, #127	; 0x7f
 23f97b8:	dc39      	bgt.n	23f982e <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
  if (x+w > SSD1351WIDTH)
 23f97ba:	18cb      	adds	r3, r1, r3
 23f97bc:	2b80      	cmp	r3, #128	; 0x80
    w = SSD1351WIDTH - x - 1;
 23f97be:	bfc4      	itt	gt
 23f97c0:	f1c1 067f 	rsbgt	r6, r1, #127	; 0x7f
 23f97c4:	b236      	sxthgt	r6, r6
  if (w < 0) return;
 23f97c6:	2e00      	cmp	r6, #0
 23f97c8:	db31      	blt.n	23f982e <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f97ca:	2115      	movs	r1, #21
  writeData(x);
 23f97cc:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f97ce:	f7ff fee3 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23f97d2:	4621      	mov	r1, r4
  writeData(x+w-1);
 23f97d4:	3c01      	subs	r4, #1
  writeData(x);
 23f97d6:	4628      	mov	r0, r5
  writeData(x+w-1);
 23f97d8:	4434      	add	r4, r6
  writeData(x);
 23f97da:	f7ff fef1 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x+w-1);
 23f97de:	b2e1      	uxtb	r1, r4
 23f97e0:	4628      	mov	r0, r5
 23f97e2:	f7ff feed 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_SETROW);
 23f97e6:	2175      	movs	r1, #117	; 0x75
 23f97e8:	4628      	mov	r0, r5
 23f97ea:	f7ff fed5 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23f97ee:	b2f9      	uxtb	r1, r7
 23f97f0:	4628      	mov	r0, r5
 23f97f2:	9101      	str	r1, [sp, #4]
 23f97f4:	f7ff fee4 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23f97f8:	4628      	mov	r0, r5
 23f97fa:	9901      	ldr	r1, [sp, #4]
 23f97fc:	f7ff fee0 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23f9800:	215c      	movs	r1, #92	; 0x5c
 23f9802:	4628      	mov	r0, r5
 23f9804:	f7ff fec8 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(color >> 8);
 23f9808:	2400      	movs	r4, #0
 23f980a:	ea4f 2718 	mov.w	r7, r8, lsr #8
    writeData(color);
 23f980e:	fa5f f888 	uxtb.w	r8, r8
  for (uint16_t i=0; i < w; i++) {
 23f9812:	b2a3      	uxth	r3, r4
 23f9814:	42b3      	cmp	r3, r6
 23f9816:	f104 0401 	add.w	r4, r4, #1
 23f981a:	da08      	bge.n	23f982e <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
    writeData(color >> 8);
 23f981c:	4639      	mov	r1, r7
 23f981e:	4628      	mov	r0, r5
 23f9820:	f7ff fece 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(color);
 23f9824:	4641      	mov	r1, r8
 23f9826:	4628      	mov	r0, r5
 23f9828:	f7ff feca 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < w; i++) {
 23f982c:	e7f1      	b.n	23f9812 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x70>
}
 23f982e:	b002      	add	sp, #8
 23f9830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f9834 <_ZN16Adafruit_SSD135112rawFastVLineEssst>:
void Adafruit_SSD1351::rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f9834:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f9838:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f983a:	4605      	mov	r5, r0
 23f983c:	460f      	mov	r7, r1
 23f983e:	4614      	mov	r4, r2
 23f9840:	461e      	mov	r6, r3
 23f9842:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f9846:	dc3b      	bgt.n	23f98c0 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
 23f9848:	2a7f      	cmp	r2, #127	; 0x7f
 23f984a:	dc39      	bgt.n	23f98c0 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
  if (y+h > SSD1351HEIGHT)
 23f984c:	18d3      	adds	r3, r2, r3
 23f984e:	2b80      	cmp	r3, #128	; 0x80
    h = SSD1351HEIGHT - y - 1;
 23f9850:	bfc4      	itt	gt
 23f9852:	f1c2 067f 	rsbgt	r6, r2, #127	; 0x7f
 23f9856:	b236      	sxthgt	r6, r6
  if (h < 0) return;
 23f9858:	2e00      	cmp	r6, #0
 23f985a:	db31      	blt.n	23f98c0 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f985c:	2115      	movs	r1, #21
 23f985e:	f7ff fe9b 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23f9862:	b2f9      	uxtb	r1, r7
 23f9864:	4628      	mov	r0, r5
 23f9866:	9101      	str	r1, [sp, #4]
 23f9868:	f7ff feaa 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x);
 23f986c:	4628      	mov	r0, r5
 23f986e:	9901      	ldr	r1, [sp, #4]
 23f9870:	f7ff fea6 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23f9874:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETROW);
 23f9876:	2175      	movs	r1, #117	; 0x75
 23f9878:	4628      	mov	r0, r5
 23f987a:	f7ff fe8d 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23f987e:	4621      	mov	r1, r4
  writeData(y+h-1);
 23f9880:	3c01      	subs	r4, #1
  writeData(y);
 23f9882:	4628      	mov	r0, r5
  writeData(y+h-1);
 23f9884:	4434      	add	r4, r6
  writeData(y);
 23f9886:	f7ff fe9b 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y+h-1);
 23f988a:	b2e1      	uxtb	r1, r4
 23f988c:	4628      	mov	r0, r5
 23f988e:	f7ff fe97 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23f9892:	215c      	movs	r1, #92	; 0x5c
 23f9894:	4628      	mov	r0, r5
 23f9896:	f7ff fe7f 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(color >> 8);
 23f989a:	2400      	movs	r4, #0
 23f989c:	ea4f 2718 	mov.w	r7, r8, lsr #8
    writeData(color);
 23f98a0:	fa5f f888 	uxtb.w	r8, r8
  for (uint16_t i=0; i < h; i++) {
 23f98a4:	b2a3      	uxth	r3, r4
 23f98a6:	42b3      	cmp	r3, r6
 23f98a8:	f104 0401 	add.w	r4, r4, #1
 23f98ac:	da08      	bge.n	23f98c0 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
    writeData(color >> 8);
 23f98ae:	4639      	mov	r1, r7
 23f98b0:	4628      	mov	r0, r5
 23f98b2:	f7ff fe85 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(color);
 23f98b6:	4641      	mov	r1, r8
 23f98b8:	4628      	mov	r0, r5
 23f98ba:	f7ff fe81 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < h; i++) {
 23f98be:	e7f1      	b.n	23f98a4 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x70>
}
 23f98c0:	b002      	add	sp, #8
 23f98c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f98c6 <_ZN16Adafruit_SSD135113drawFastVLineEssst>:
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f98c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f98c8:	4604      	mov	r4, r0
 23f98ca:	4616      	mov	r6, r2
  switch (getRotation()) {
 23f98cc:	6802      	ldr	r2, [r0, #0]
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f98ce:	9301      	str	r3, [sp, #4]
  switch (getRotation()) {
 23f98d0:	f852 0c0c 	ldr.w	r0, [r2, #-12]
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f98d4:	460d      	mov	r5, r1
  switch (getRotation()) {
 23f98d6:	4420      	add	r0, r4
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f98d8:	f8bd 7020 	ldrh.w	r7, [sp, #32]
  switch (getRotation()) {
 23f98dc:	f000 fcba 	bl	23fa254 <_ZN12Adafruit_GFX11getRotationEv>
 23f98e0:	9b01      	ldr	r3, [sp, #4]
 23f98e2:	2803      	cmp	r0, #3
 23f98e4:	d835      	bhi.n	23f9952 <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x8c>
 23f98e6:	e8df f000 	tbb	[pc, r0]
 23f98ea:	0b02      	.short	0x0b02
 23f98ec:	291b      	.short	0x291b
    rawFastVLine(x, y, h, color);
 23f98ee:	4632      	mov	r2, r6
 23f98f0:	4629      	mov	r1, r5
 23f98f2:	9708      	str	r7, [sp, #32]
    rawFastVLine(x, y, h, color);
 23f98f4:	4620      	mov	r0, r4
}
 23f98f6:	b003      	add	sp, #12
 23f98f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastVLine(x, y, h, color);
 23f98fc:	f7ff bf9a 	b.w	23f9834 <_ZN16Adafruit_SSD135112rawFastVLineEssst>
    x = WIDTH - x - h;
 23f9900:	6822      	ldr	r2, [r4, #0]
 23f9902:	441e      	add	r6, r3
 23f9904:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    rawFastHLine(x, y, h, color);
 23f9908:	462a      	mov	r2, r5
    x = WIDTH - x - h;
 23f990a:	4420      	add	r0, r4
 23f990c:	8901      	ldrh	r1, [r0, #8]
    rawFastHLine(x, y, h, color);
 23f990e:	9708      	str	r7, [sp, #32]
    x = WIDTH - x - h;
 23f9910:	1b89      	subs	r1, r1, r6
    rawFastHLine(x, y, h, color);
 23f9912:	b209      	sxth	r1, r1
    rawFastHLine(x, y, h, color);
 23f9914:	4620      	mov	r0, r4
}
 23f9916:	b003      	add	sp, #12
 23f9918:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastHLine(x, y, h, color);
 23f991c:	f7ff bf41 	b.w	23f97a2 <_ZN16Adafruit_SSD135112rawFastHLineEssst>
    x = WIDTH - x - 1;
 23f9920:	43e9      	mvns	r1, r5
 23f9922:	6822      	ldr	r2, [r4, #0]
    y = HEIGHT - y - h;
 23f9924:	441e      	add	r6, r3
    x = WIDTH - x - 1;
 23f9926:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23f992a:	4420      	add	r0, r4
    y = HEIGHT - y - h;
 23f992c:	8942      	ldrh	r2, [r0, #10]
    x = WIDTH - x - 1;
 23f992e:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - h;
 23f9930:	1b92      	subs	r2, r2, r6
    x = WIDTH - x - 1;
 23f9932:	4429      	add	r1, r5
    rawFastVLine(x, y, h, color);
 23f9934:	9708      	str	r7, [sp, #32]
 23f9936:	b212      	sxth	r2, r2
 23f9938:	b209      	sxth	r1, r1
 23f993a:	e7db      	b.n	23f98f4 <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x2e>
    y = HEIGHT - y - 1;
 23f993c:	43ed      	mvns	r5, r5
 23f993e:	6822      	ldr	r2, [r4, #0]
    rawFastHLine(x, y, h, color);
 23f9940:	4631      	mov	r1, r6
    y = HEIGHT - y - 1;
 23f9942:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23f9946:	4422      	add	r2, r4
 23f9948:	8952      	ldrh	r2, [r2, #10]
    rawFastHLine(x, y, h, color);
 23f994a:	9708      	str	r7, [sp, #32]
    y = HEIGHT - y - 1;
 23f994c:	442a      	add	r2, r5
    rawFastHLine(x, y, h, color);
 23f994e:	b212      	sxth	r2, r2
 23f9950:	e7e0      	b.n	23f9914 <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x4e>
}
 23f9952:	b003      	add	sp, #12
 23f9954:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f9956 <_ZTv0_n32_N16Adafruit_SSD135113drawFastVLineEssst>:
  void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
 23f9956:	f8d0 c000 	ldr.w	ip, [r0]
 23f995a:	f1ac 0c20 	sub.w	ip, ip, #32
 23f995e:	f8dc c000 	ldr.w	ip, [ip]
 23f9962:	4460      	add	r0, ip
 23f9964:	f7ff bfaf 	b.w	23f98c6 <_ZN16Adafruit_SSD135113drawFastVLineEssst>

023f9968 <_ZN16Adafruit_SSD135113drawFastHLineEssst>:
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f9968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f996a:	4604      	mov	r4, r0
 23f996c:	4615      	mov	r5, r2
  switch (getRotation()) {
 23f996e:	6802      	ldr	r2, [r0, #0]
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f9970:	9301      	str	r3, [sp, #4]
  switch (getRotation()) {
 23f9972:	f852 0c0c 	ldr.w	r0, [r2, #-12]
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f9976:	460e      	mov	r6, r1
  switch (getRotation()) {
 23f9978:	4420      	add	r0, r4
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f997a:	f8bd 7020 	ldrh.w	r7, [sp, #32]
  switch (getRotation()) {
 23f997e:	f000 fc69 	bl	23fa254 <_ZN12Adafruit_GFX11getRotationEv>
 23f9982:	9b01      	ldr	r3, [sp, #4]
 23f9984:	2803      	cmp	r0, #3
 23f9986:	d835      	bhi.n	23f99f4 <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x8c>
 23f9988:	e8df f000 	tbb	[pc, r0]
 23f998c:	291b0b02 	.word	0x291b0b02
    rawFastHLine(x, y, w, color);
 23f9990:	462a      	mov	r2, r5
 23f9992:	4631      	mov	r1, r6
 23f9994:	9708      	str	r7, [sp, #32]
    rawFastHLine(x, y, w, color);
 23f9996:	4620      	mov	r0, r4
}
 23f9998:	b003      	add	sp, #12
 23f999a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastHLine(x, y, w, color);
 23f999e:	f7ff bf00 	b.w	23f97a2 <_ZN16Adafruit_SSD135112rawFastHLineEssst>
    x = WIDTH - x - 1;
 23f99a2:	6822      	ldr	r2, [r4, #0]
 23f99a4:	43e9      	mvns	r1, r5
 23f99a6:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23f99aa:	4422      	add	r2, r4
 23f99ac:	8915      	ldrh	r5, [r2, #8]
    rawFastVLine(x, y, w, color);
 23f99ae:	4632      	mov	r2, r6
    x = WIDTH - x - 1;
 23f99b0:	4429      	add	r1, r5
    rawFastVLine(x, y, w, color);
 23f99b2:	9708      	str	r7, [sp, #32]
 23f99b4:	b209      	sxth	r1, r1
    rawFastVLine(x, y, w, color);
 23f99b6:	4620      	mov	r0, r4
}
 23f99b8:	b003      	add	sp, #12
 23f99ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastVLine(x, y, w, color);
 23f99be:	f7ff bf39 	b.w	23f9834 <_ZN16Adafruit_SSD135112rawFastVLineEssst>
    x = WIDTH - x - w;
 23f99c2:	6822      	ldr	r2, [r4, #0]
 23f99c4:	441e      	add	r6, r3
 23f99c6:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    y = HEIGHT - y - 1;
 23f99ca:	43ea      	mvns	r2, r5
    x = WIDTH - x - w;
 23f99cc:	4420      	add	r0, r4
    y = HEIGHT - y - 1;
 23f99ce:	8945      	ldrh	r5, [r0, #10]
    x = WIDTH - x - w;
 23f99d0:	8901      	ldrh	r1, [r0, #8]
    y = HEIGHT - y - 1;
 23f99d2:	442a      	add	r2, r5
    x = WIDTH - x - w;
 23f99d4:	1b89      	subs	r1, r1, r6
    rawFastHLine(x, y, w, color);
 23f99d6:	9708      	str	r7, [sp, #32]
 23f99d8:	b212      	sxth	r2, r2
 23f99da:	b209      	sxth	r1, r1
 23f99dc:	e7db      	b.n	23f9996 <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x2e>
    y = HEIGHT - y - w;
 23f99de:	6822      	ldr	r2, [r4, #0]
 23f99e0:	441e      	add	r6, r3
 23f99e2:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    rawFastVLine(x, y, w, color);
 23f99e6:	4629      	mov	r1, r5
    y = HEIGHT - y - w;
 23f99e8:	4422      	add	r2, r4
 23f99ea:	8952      	ldrh	r2, [r2, #10]
    rawFastVLine(x, y, w, color);
 23f99ec:	9708      	str	r7, [sp, #32]
    y = HEIGHT - y - w;
 23f99ee:	1b92      	subs	r2, r2, r6
    rawFastVLine(x, y, w, color);
 23f99f0:	b212      	sxth	r2, r2
 23f99f2:	e7e0      	b.n	23f99b6 <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x4e>
}
 23f99f4:	b003      	add	sp, #12
 23f99f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f99f8 <_ZTv0_n36_N16Adafruit_SSD135113drawFastHLineEssst>:
  void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
 23f99f8:	f8d0 c000 	ldr.w	ip, [r0]
 23f99fc:	f1ac 0c24 	sub.w	ip, ip, #36	; 0x24
 23f9a00:	f8dc c000 	ldr.w	ip, [ip]
 23f9a04:	4460      	add	r0, ip
 23f9a06:	f7ff bfaf 	b.w	23f9968 <_ZN16Adafruit_SSD135113drawFastHLineEssst>

023f9a0a <_ZN16Adafruit_SSD13515beginEv>:
void Adafruit_SSD1351::begin(void) {
 23f9a0a:	b510      	push	{r4, lr}
 23f9a0c:	4604      	mov	r4, r0
    pinMode(_rs, OUTPUT);
 23f9a0e:	2101      	movs	r1, #1
 23f9a10:	7940      	ldrb	r0, [r0, #5]
 23f9a12:	f004 fc09 	bl	23fe228 <pinMode>
    if (_sclk) {
 23f9a16:	7a20      	ldrb	r0, [r4, #8]
 23f9a18:	2800      	cmp	r0, #0
 23f9a1a:	f000 80da 	beq.w	23f9bd2 <_ZN16Adafruit_SSD13515beginEv+0x1c8>
        pinMode(_sclk, OUTPUT);
 23f9a1e:	2101      	movs	r1, #1
 23f9a20:	f004 fc02 	bl	23fe228 <pinMode>
        pinMode(_sid, OUTPUT);
 23f9a24:	2101      	movs	r1, #1
 23f9a26:	79e0      	ldrb	r0, [r4, #7]
 23f9a28:	f004 fbfe 	bl	23fe228 <pinMode>
    pinMode(_cs, OUTPUT);
 23f9a2c:	2101      	movs	r1, #1
 23f9a2e:	7920      	ldrb	r0, [r4, #4]
 23f9a30:	f004 fbfa 	bl	23fe228 <pinMode>
    digitalWrite(_cs, LOW);
 23f9a34:	7920      	ldrb	r0, [r4, #4]
 23f9a36:	2100      	movs	r1, #0
 23f9a38:	f004 fc07 	bl	23fe24a <digitalWrite>
    if (_rst) {
 23f9a3c:	79a0      	ldrb	r0, [r4, #6]
 23f9a3e:	b1d0      	cbz	r0, 23f9a76 <_ZN16Adafruit_SSD13515beginEv+0x6c>
        pinMode(_rst, OUTPUT);
 23f9a40:	2101      	movs	r1, #1
 23f9a42:	f004 fbf1 	bl	23fe228 <pinMode>
        digitalWrite(_rst, HIGH);
 23f9a46:	2101      	movs	r1, #1
 23f9a48:	79a0      	ldrb	r0, [r4, #6]
 23f9a4a:	f004 fbfe 	bl	23fe24a <digitalWrite>
        delay(500);
 23f9a4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f9a52:	f003 fb79 	bl	23fd148 <delay>
        digitalWrite(_rst, LOW);
 23f9a56:	2100      	movs	r1, #0
 23f9a58:	79a0      	ldrb	r0, [r4, #6]
 23f9a5a:	f004 fbf6 	bl	23fe24a <digitalWrite>
        delay(500);
 23f9a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f9a62:	f003 fb71 	bl	23fd148 <delay>
        digitalWrite(_rst, HIGH);
 23f9a66:	79a0      	ldrb	r0, [r4, #6]
 23f9a68:	2101      	movs	r1, #1
 23f9a6a:	f004 fbee 	bl	23fe24a <digitalWrite>
        delay(500);
 23f9a6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f9a72:	f003 fb69 	bl	23fd148 <delay>
    writeCommand(SSD1351_CMD_COMMANDLOCK);  // set command lock
 23f9a76:	4620      	mov	r0, r4
 23f9a78:	21fd      	movs	r1, #253	; 0xfd
 23f9a7a:	f7ff fd8d 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x12);
 23f9a7e:	4620      	mov	r0, r4
 23f9a80:	2112      	movs	r1, #18
 23f9a82:	f7ff fd9d 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_COMMANDLOCK);  // set command lock
 23f9a86:	4620      	mov	r0, r4
 23f9a88:	21fd      	movs	r1, #253	; 0xfd
 23f9a8a:	f7ff fd85 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xB1);
 23f9a8e:	4620      	mov	r0, r4
 23f9a90:	21b1      	movs	r1, #177	; 0xb1
 23f9a92:	f7ff fd95 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYOFF);  		// 0xAE
 23f9a96:	4620      	mov	r0, r4
 23f9a98:	21ae      	movs	r1, #174	; 0xae
 23f9a9a:	f7ff fd7d 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_CLOCKDIV);  		// 0xB3
 23f9a9e:	4620      	mov	r0, r4
 23f9aa0:	21b3      	movs	r1, #179	; 0xb3
 23f9aa2:	f7ff fd79 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0xF1);  						// 7:4 = Oscillator Frequency, 3:0 = CLK Div Ratio (A[3:0]+1 = 1..16)
 23f9aa6:	4620      	mov	r0, r4
 23f9aa8:	21f1      	movs	r1, #241	; 0xf1
 23f9aaa:	f7ff fd75 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_MUXRATIO);
 23f9aae:	4620      	mov	r0, r4
 23f9ab0:	21ca      	movs	r1, #202	; 0xca
 23f9ab2:	f7ff fd71 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(127);
 23f9ab6:	4620      	mov	r0, r4
 23f9ab8:	217f      	movs	r1, #127	; 0x7f
 23f9aba:	f7ff fd81 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETREMAP);
 23f9abe:	4620      	mov	r0, r4
 23f9ac0:	21a0      	movs	r1, #160	; 0xa0
 23f9ac2:	f7ff fd69 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x74);
 23f9ac6:	4620      	mov	r0, r4
 23f9ac8:	2174      	movs	r1, #116	; 0x74
 23f9aca:	f7ff fd79 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETCOLUMN);
 23f9ace:	4620      	mov	r0, r4
 23f9ad0:	2115      	movs	r1, #21
 23f9ad2:	f7ff fd61 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23f9ad6:	4620      	mov	r0, r4
 23f9ad8:	2100      	movs	r1, #0
 23f9ada:	f7ff fd71 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x7F);
 23f9ade:	4620      	mov	r0, r4
 23f9ae0:	217f      	movs	r1, #127	; 0x7f
 23f9ae2:	f7ff fd6d 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETROW);
 23f9ae6:	4620      	mov	r0, r4
 23f9ae8:	2175      	movs	r1, #117	; 0x75
 23f9aea:	f7ff fd55 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23f9aee:	4620      	mov	r0, r4
 23f9af0:	2100      	movs	r1, #0
 23f9af2:	f7ff fd65 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x7F);
 23f9af6:	4620      	mov	r0, r4
 23f9af8:	217f      	movs	r1, #127	; 0x7f
 23f9afa:	f7ff fd61 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_STARTLINE); 		// 0xA1
 23f9afe:	4620      	mov	r0, r4
 23f9b00:	21a1      	movs	r1, #161	; 0xa1
 23f9b02:	f7ff fd49 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
      writeData(0);
 23f9b06:	4620      	mov	r0, r4
 23f9b08:	2100      	movs	r1, #0
 23f9b0a:	f7ff fd59 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYOFFSET); 	// 0xA2
 23f9b0e:	4620      	mov	r0, r4
 23f9b10:	21a2      	movs	r1, #162	; 0xa2
 23f9b12:	f7ff fd41 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x0);
 23f9b16:	4620      	mov	r0, r4
 23f9b18:	2100      	movs	r1, #0
 23f9b1a:	f7ff fd51 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETGPIO);
 23f9b1e:	4620      	mov	r0, r4
 23f9b20:	21b5      	movs	r1, #181	; 0xb5
 23f9b22:	f7ff fd39 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23f9b26:	4620      	mov	r0, r4
 23f9b28:	2100      	movs	r1, #0
 23f9b2a:	f7ff fd49 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_FUNCTIONSELECT);
 23f9b2e:	4620      	mov	r0, r4
 23f9b30:	21ab      	movs	r1, #171	; 0xab
 23f9b32:	f7ff fd31 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x01); // internal (diode drop)
 23f9b36:	4620      	mov	r0, r4
 23f9b38:	2101      	movs	r1, #1
 23f9b3a:	f7ff fd41 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_PRECHARGE);  		// 0xB1
 23f9b3e:	4620      	mov	r0, r4
 23f9b40:	21b1      	movs	r1, #177	; 0xb1
 23f9b42:	f7ff fd29 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0x32);
 23f9b46:	4620      	mov	r0, r4
 23f9b48:	2132      	movs	r1, #50	; 0x32
 23f9b4a:	f7ff fd25 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_VCOMH);  			// 0xBE
 23f9b4e:	4620      	mov	r0, r4
 23f9b50:	21be      	movs	r1, #190	; 0xbe
 23f9b52:	f7ff fd21 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0x05);
 23f9b56:	4620      	mov	r0, r4
 23f9b58:	2105      	movs	r1, #5
 23f9b5a:	f7ff fd1d 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_NORMALDISPLAY);  	// 0xA6
 23f9b5e:	4620      	mov	r0, r4
 23f9b60:	21a6      	movs	r1, #166	; 0xa6
 23f9b62:	f7ff fd19 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_CONTRASTABC);
 23f9b66:	4620      	mov	r0, r4
 23f9b68:	21c1      	movs	r1, #193	; 0xc1
 23f9b6a:	f7ff fd15 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xC8);
 23f9b6e:	4620      	mov	r0, r4
 23f9b70:	21c8      	movs	r1, #200	; 0xc8
 23f9b72:	f7ff fd25 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x80);
 23f9b76:	4620      	mov	r0, r4
 23f9b78:	2180      	movs	r1, #128	; 0x80
 23f9b7a:	f7ff fd21 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0xC8);
 23f9b7e:	4620      	mov	r0, r4
 23f9b80:	21c8      	movs	r1, #200	; 0xc8
 23f9b82:	f7ff fd1d 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_CONTRASTMASTER);
 23f9b86:	4620      	mov	r0, r4
 23f9b88:	21c7      	movs	r1, #199	; 0xc7
 23f9b8a:	f7ff fd05 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x0F);
 23f9b8e:	4620      	mov	r0, r4
 23f9b90:	210f      	movs	r1, #15
 23f9b92:	f7ff fd15 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETVSL );
 23f9b96:	4620      	mov	r0, r4
 23f9b98:	21b4      	movs	r1, #180	; 0xb4
 23f9b9a:	f7ff fcfd 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xA0);
 23f9b9e:	4620      	mov	r0, r4
 23f9ba0:	21a0      	movs	r1, #160	; 0xa0
 23f9ba2:	f7ff fd0d 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0xB5);
 23f9ba6:	4620      	mov	r0, r4
 23f9ba8:	21b5      	movs	r1, #181	; 0xb5
 23f9baa:	f7ff fd09 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x55);
 23f9bae:	4620      	mov	r0, r4
 23f9bb0:	2155      	movs	r1, #85	; 0x55
 23f9bb2:	f7ff fd05 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_PRECHARGE2);
 23f9bb6:	4620      	mov	r0, r4
 23f9bb8:	21b6      	movs	r1, #182	; 0xb6
 23f9bba:	f7ff fced 	bl	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x01);
 23f9bbe:	4620      	mov	r0, r4
 23f9bc0:	2101      	movs	r1, #1
 23f9bc2:	f7ff fcfd 	bl	23f95c0 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYON);		//--turn on oled panel
 23f9bc6:	4620      	mov	r0, r4
}
 23f9bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeCommand(SSD1351_CMD_DISPLAYON);		//--turn on oled panel
 23f9bcc:	21af      	movs	r1, #175	; 0xaf
 23f9bce:	f7ff bce3 	b.w	23f9598 <_ZN16Adafruit_SSD135112writeCommandEh>
        instance().begin();
 23f9bd2:	f7ff fbff 	bl	23f93d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9bd6:	f001 fdc9 	bl	23fb76c <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
 23f9bda:	f7ff fbfb 	bl	23f93d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9bde:	2110      	movs	r1, #16
 23f9be0:	f001 fe34 	bl	23fb84c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
 23f9be4:	f7ff fbf6 	bl	23f93d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9be8:	2103      	movs	r1, #3
 23f9bea:	f001 fdd3 	bl	23fb794 <_ZN8SPIClass11setDataModeEh>
    }
 23f9bee:	e71d      	b.n	23f9a2c <_ZN16Adafruit_SSD13515beginEv+0x22>

023f9bf0 <_ZN16Adafruit_SSD13519drawPixelEsst>:
{
 23f9bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9bf2:	4604      	mov	r4, r0
 23f9bf4:	461f      	mov	r7, r3
  switch (getRotation()) {
 23f9bf6:	6803      	ldr	r3, [r0, #0]
{
 23f9bf8:	460d      	mov	r5, r1
  switch (getRotation()) {
 23f9bfa:	f853 0c0c 	ldr.w	r0, [r3, #-12]
{
 23f9bfe:	4616      	mov	r6, r2
  switch (getRotation()) {
 23f9c00:	4420      	add	r0, r4
 23f9c02:	f000 fb27 	bl	23fa254 <_ZN12Adafruit_GFX11getRotationEv>
 23f9c06:	2802      	cmp	r0, #2
 23f9c08:	d02c      	beq.n	23f9c64 <_ZN16Adafruit_SSD13519drawPixelEsst+0x74>
 23f9c0a:	2803      	cmp	r0, #3
 23f9c0c:	d037      	beq.n	23f9c7e <_ZN16Adafruit_SSD13519drawPixelEsst+0x8e>
 23f9c0e:	2801      	cmp	r0, #1
 23f9c10:	d108      	bne.n	23f9c24 <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>
    x = WIDTH - x - 1;
 23f9c12:	43f2      	mvns	r2, r6
 23f9c14:	6823      	ldr	r3, [r4, #0]
  void rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  template<typename T>
  void swap(T &x, T &y) {
    T tmp = x;
    x = y;
    y = tmp;
 23f9c16:	462e      	mov	r6, r5
 23f9c18:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f9c1c:	4423      	add	r3, r4
 23f9c1e:	891b      	ldrh	r3, [r3, #8]
 23f9c20:	441a      	add	r2, r3
 23f9c22:	b215      	sxth	r5, r2
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23f9c24:	b2ab      	uxth	r3, r5
 23f9c26:	2b7f      	cmp	r3, #127	; 0x7f
 23f9c28:	d81b      	bhi.n	23f9c62 <_ZN16Adafruit_SSD13519drawPixelEsst+0x72>
 23f9c2a:	b2b3      	uxth	r3, r6
 23f9c2c:	2b7f      	cmp	r3, #127	; 0x7f
 23f9c2e:	d818      	bhi.n	23f9c62 <_ZN16Adafruit_SSD13519drawPixelEsst+0x72>
  goTo(x, y);
 23f9c30:	4632      	mov	r2, r6
 23f9c32:	4629      	mov	r1, r5
 23f9c34:	4620      	mov	r0, r4
 23f9c36:	f7ff fcd7 	bl	23f95e8 <_ZN16Adafruit_SSD13514goToEii>
  digitalWriteFast(_rs, HIGH);
 23f9c3a:	2101      	movs	r1, #1
 23f9c3c:	7960      	ldrb	r0, [r4, #5]
 23f9c3e:	f7ff fb4f 	bl	23f92e0 <digitalWriteFast>
  digitalWriteFast(_cs, LOW);
 23f9c42:	2100      	movs	r1, #0
 23f9c44:	7920      	ldrb	r0, [r4, #4]
 23f9c46:	f7ff fb4b 	bl	23f92e0 <digitalWriteFast>
  spiwrite(color >> 8);
 23f9c4a:	4620      	mov	r0, r4
 23f9c4c:	0a39      	lsrs	r1, r7, #8
 23f9c4e:	f7ff fbdb 	bl	23f9408 <_ZN16Adafruit_SSD13518spiwriteEh>
  spiwrite(color);
 23f9c52:	4620      	mov	r0, r4
 23f9c54:	b2f9      	uxtb	r1, r7
 23f9c56:	f7ff fbd7 	bl	23f9408 <_ZN16Adafruit_SSD13518spiwriteEh>
  digitalWriteFast(_cs, HIGH);
 23f9c5a:	2101      	movs	r1, #1
 23f9c5c:	7920      	ldrb	r0, [r4, #4]
 23f9c5e:	f7ff fb3f 	bl	23f92e0 <digitalWriteFast>
}
 23f9c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
 23f9c64:	43ed      	mvns	r5, r5
    y = HEIGHT - y - 1;
 23f9c66:	43f6      	mvns	r6, r6
    x = WIDTH - x - 1;
 23f9c68:	6823      	ldr	r3, [r4, #0]
 23f9c6a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f9c6e:	4423      	add	r3, r4
 23f9c70:	8919      	ldrh	r1, [r3, #8]
    y = HEIGHT - y - 1;
 23f9c72:	895a      	ldrh	r2, [r3, #10]
    x = WIDTH - x - 1;
 23f9c74:	440d      	add	r5, r1
    y = HEIGHT - y - 1;
 23f9c76:	4416      	add	r6, r2
    x = WIDTH - x - 1;
 23f9c78:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 23f9c7a:	b236      	sxth	r6, r6
    break;
 23f9c7c:	e7d2      	b.n	23f9c24 <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>
    y = HEIGHT - y - 1;
 23f9c7e:	43e9      	mvns	r1, r5
 23f9c80:	6823      	ldr	r3, [r4, #0]
    x = y;
 23f9c82:	4635      	mov	r5, r6
 23f9c84:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f9c88:	4423      	add	r3, r4
 23f9c8a:	895b      	ldrh	r3, [r3, #10]
 23f9c8c:	4419      	add	r1, r3
 23f9c8e:	b20e      	sxth	r6, r1
    break;
 23f9c90:	e7c8      	b.n	23f9c24 <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>

023f9c92 <_ZTv0_n24_N16Adafruit_SSD13519drawPixelEsst>:
  void drawPixel(int16_t x, int16_t y, uint16_t color);
 23f9c92:	f8d0 c000 	ldr.w	ip, [r0]
 23f9c96:	f1ac 0c18 	sub.w	ip, ip, #24
 23f9c9a:	f8dc c000 	ldr.w	ip, [ip]
 23f9c9e:	4460      	add	r0, ip
 23f9ca0:	f7ff bfa6 	b.w	23f9bf0 <_ZN16Adafruit_SSD13519drawPixelEsst>

023f9ca4 <_ZN16Adafruit_SSD1351D2Ev>:
class Adafruit_SSD1351  : public virtual Adafruit_GFX {
 23f9ca4:	680a      	ldr	r2, [r1, #0]
 23f9ca6:	6002      	str	r2, [r0, #0]
 23f9ca8:	6849      	ldr	r1, [r1, #4]
 23f9caa:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23f9cae:	5081      	str	r1, [r0, r2]
 23f9cb0:	4770      	bx	lr

023f9cb2 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 23f9cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9cb6:	461f      	mov	r7, r3
 23f9cb8:	b085      	sub	sp, #20
 23f9cba:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23f9cbe:	eba7 0a01 	sub.w	sl, r7, r1
 23f9cc2:	eba8 0902 	sub.w	r9, r8, r2
 23f9cc6:	f1b9 0f00 	cmp.w	r9, #0
 23f9cca:	bfb8      	it	lt
 23f9ccc:	f1c9 0900 	rsblt	r9, r9, #0
 23f9cd0:	f1ba 0f00 	cmp.w	sl, #0
 23f9cd4:	bfb8      	it	lt
 23f9cd6:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23f9cda:	45d1      	cmp	r9, sl
			    uint16_t color) {
 23f9cdc:	4683      	mov	fp, r0
 23f9cde:	460c      	mov	r4, r1
 23f9ce0:	4615      	mov	r5, r2
 23f9ce2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23f9ce6:	dd04      	ble.n	23f9cf2 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
 23f9ce8:	463a      	mov	r2, r7
    swap(x0, y0);
 23f9cea:	462c      	mov	r4, r5
    swap(x1, y1);
 23f9cec:	4647      	mov	r7, r8
    swap(x0, y0);
 23f9cee:	460d      	mov	r5, r1
    swap(x1, y1);
 23f9cf0:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23f9cf2:	42bc      	cmp	r4, r7
 23f9cf4:	dd05      	ble.n	23f9d02 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
 23f9cf6:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 23f9cf8:	4645      	mov	r5, r8
 23f9cfa:	4690      	mov	r8, r2
  if (x0 > x1) {
 23f9cfc:	4622      	mov	r2, r4
 23f9cfe:	463c      	mov	r4, r7
 23f9d00:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23f9d02:	1b3e      	subs	r6, r7, r4
 23f9d04:	b2b2      	uxth	r2, r6
 23f9d06:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23f9d08:	eba8 0205 	sub.w	r2, r8, r5
 23f9d0c:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23f9d10:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23f9d14:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23f9d18:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23f9d1c:	4545      	cmp	r5, r8
 23f9d1e:	bfb4      	ite	lt
 23f9d20:	2201      	movlt	r2, #1
 23f9d22:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
 23f9d26:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23f9d28:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23f9d2a:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 23f9d2c:	42bc      	cmp	r4, r7
 23f9d2e:	dc1c      	bgt.n	23f9d6a <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
 23f9d30:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23f9d34:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
 23f9d36:	f8d2 8010 	ldr.w	r8, [r2, #16]
 23f9d3a:	bfc7      	ittee	gt
 23f9d3c:	4629      	movgt	r1, r5
 23f9d3e:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
 23f9d40:	462a      	movle	r2, r5
 23f9d42:	4621      	movle	r1, r4
      drawPixel(y0, x0, color);
 23f9d44:	9303      	str	r3, [sp, #12]
      drawPixel(x0, y0, color);
 23f9d46:	4658      	mov	r0, fp
 23f9d48:	47c0      	blx	r8
    }
    err -= dy;
 23f9d4a:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
 23f9d4c:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23f9d4e:	1ab6      	subs	r6, r6, r2
 23f9d50:	b2b1      	uxth	r1, r6
 23f9d52:	b236      	sxth	r6, r6
    if (err < 0) {
 23f9d54:	2e00      	cmp	r6, #0
 23f9d56:	da05      	bge.n	23f9d64 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
 23f9d58:	9a02      	ldr	r2, [sp, #8]
 23f9d5a:	4415      	add	r5, r2
      err += dx;
 23f9d5c:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23f9d5e:	b22d      	sxth	r5, r5
      err += dx;
 23f9d60:	1856      	adds	r6, r2, r1
 23f9d62:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
 23f9d64:	3401      	adds	r4, #1
 23f9d66:	b224      	sxth	r4, r4
 23f9d68:	e7e0      	b.n	23f9d2c <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
 23f9d6a:	b005      	add	sp, #20
 23f9d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f9d70 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 23f9d70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f9d74:	4604      	mov	r4, r0
 23f9d76:	4616      	mov	r6, r2
 23f9d78:	468a      	mov	sl, r1
 23f9d7a:	461d      	mov	r5, r3
 23f9d7c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 23f9d80:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
 23f9d82:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 23f9d86:	f8cd 8000 	str.w	r8, [sp]
 23f9d8a:	69ff      	ldr	r7, [r7, #28]
 23f9d8c:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 23f9d8e:	6823      	ldr	r3, [r4, #0]
 23f9d90:	f109 32ff 	add.w	r2, r9, #4294967295
 23f9d94:	f8cd 8000 	str.w	r8, [sp]
 23f9d98:	4432      	add	r2, r6
 23f9d9a:	4651      	mov	r1, sl
 23f9d9c:	4620      	mov	r0, r4
 23f9d9e:	69df      	ldr	r7, [r3, #28]
 23f9da0:	b212      	sxth	r2, r2
 23f9da2:	462b      	mov	r3, r5
 23f9da4:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 23f9da6:	6823      	ldr	r3, [r4, #0]
 23f9da8:	f8cd 8000 	str.w	r8, [sp]
 23f9dac:	4632      	mov	r2, r6
 23f9dae:	4651      	mov	r1, sl
 23f9db0:	4620      	mov	r0, r4
 23f9db2:	699f      	ldr	r7, [r3, #24]
 23f9db4:	464b      	mov	r3, r9
 23f9db6:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 23f9db8:	1e6b      	subs	r3, r5, #1
 23f9dba:	eb03 010a 	add.w	r1, r3, sl
 23f9dbe:	6823      	ldr	r3, [r4, #0]
 23f9dc0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 23f9dc4:	699d      	ldr	r5, [r3, #24]
 23f9dc6:	4632      	mov	r2, r6
 23f9dc8:	464b      	mov	r3, r9
 23f9dca:	4620      	mov	r0, r4
 23f9dcc:	46ac      	mov	ip, r5
 23f9dce:	b209      	sxth	r1, r1
}
 23f9dd0:	b002      	add	sp, #8
 23f9dd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
 23f9dd6:	4760      	bx	ip

023f9dd8 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 23f9dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 23f9dda:	3b01      	subs	r3, #1
 23f9ddc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23f9de0:	4413      	add	r3, r2
 23f9de2:	6804      	ldr	r4, [r0, #0]
 23f9de4:	b21b      	sxth	r3, r3
 23f9de6:	9300      	str	r3, [sp, #0]
 23f9de8:	9501      	str	r5, [sp, #4]
 23f9dea:	460b      	mov	r3, r1
 23f9dec:	6964      	ldr	r4, [r4, #20]
 23f9dee:	47a0      	blx	r4
}
 23f9df0:	b003      	add	sp, #12
 23f9df2:	bd30      	pop	{r4, r5, pc}

023f9df4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 23f9df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 23f9df6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23f9dfa:	6804      	ldr	r4, [r0, #0]
 23f9dfc:	e9cd 2500 	strd	r2, r5, [sp]
 23f9e00:	3b01      	subs	r3, #1
 23f9e02:	440b      	add	r3, r1
 23f9e04:	6964      	ldr	r4, [r4, #20]
 23f9e06:	b21b      	sxth	r3, r3
 23f9e08:	47a0      	blx	r4
}
 23f9e0a:	b003      	add	sp, #12
 23f9e0c:	bd30      	pop	{r4, r5, pc}

023f9e0e <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 23f9e0e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f9e12:	4605      	mov	r5, r0
 23f9e14:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 23f9e16:	460c      	mov	r4, r1
			    uint16_t color) {
 23f9e18:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23f9e1c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  for (int16_t i=x; i<x+w; i++) {
 23f9e20:	18ce      	adds	r6, r1, r3
 23f9e22:	42b4      	cmp	r4, r6
 23f9e24:	da0b      	bge.n	23f9e3e <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
 23f9e26:	682b      	ldr	r3, [r5, #0]
 23f9e28:	f8cd 8000 	str.w	r8, [sp]
 23f9e2c:	4621      	mov	r1, r4
 23f9e2e:	699f      	ldr	r7, [r3, #24]
 23f9e30:	4652      	mov	r2, sl
 23f9e32:	464b      	mov	r3, r9
 23f9e34:	4628      	mov	r0, r5
 23f9e36:	3401      	adds	r4, #1
 23f9e38:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
 23f9e3a:	b224      	sxth	r4, r4
 23f9e3c:	e7f1      	b.n	23f9e22 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
 23f9e3e:	b002      	add	sp, #8
 23f9e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f9e44 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 23f9e44:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23f9e46:	9101      	str	r1, [sp, #4]
 23f9e48:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23f9e4c:	6802      	ldr	r2, [r0, #0]
 23f9e4e:	9100      	str	r1, [sp, #0]
 23f9e50:	6a54      	ldr	r4, [r2, #36]	; 0x24
 23f9e52:	2200      	movs	r2, #0
 23f9e54:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23f9e58:	4611      	mov	r1, r2
 23f9e5a:	47a0      	blx	r4
}
 23f9e5c:	b002      	add	sp, #8
 23f9e5e:	bd10      	pop	{r4, pc}

023f9e60 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
 23f9e60:	4770      	bx	lr

023f9e62 <_ZN12Adafruit_GFX5writeEh>:
  if (c == '\n') {
 23f9e62:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
 23f9e64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f9e68:	4604      	mov	r4, r0
 23f9e6a:	460d      	mov	r5, r1
  if (c == '\n') {
 23f9e6c:	d10c      	bne.n	23f9e88 <_ZN12Adafruit_GFX5writeEh+0x26>
    cursor_y += textsize*fontDesc[0].height;	//all chars are same height so use height of space char
 23f9e6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 23f9e70:	7e02      	ldrb	r2, [r0, #24]
 23f9e72:	7859      	ldrb	r1, [r3, #1]
 23f9e74:	8a43      	ldrh	r3, [r0, #18]
 23f9e76:	fb01 3302 	mla	r3, r1, r2, r3
      cursor_y += textsize*h;
 23f9e7a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 23f9e7c:	2300      	movs	r3, #0
 23f9e7e:	8223      	strh	r3, [r4, #16]
}
 23f9e80:	2001      	movs	r0, #1
 23f9e82:	b004      	add	sp, #16
 23f9e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (c == '\r') {
 23f9e88:	290d      	cmp	r1, #13
 23f9e8a:	d0f9      	beq.n	23f9e80 <_ZN12Adafruit_GFX5writeEh+0x1e>
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 23f9e8c:	7e02      	ldrb	r2, [r0, #24]
 23f9e8e:	6803      	ldr	r3, [r0, #0]
 23f9e90:	9202      	str	r2, [sp, #8]
 23f9e92:	8ac2      	ldrh	r2, [r0, #22]
 23f9e94:	9201      	str	r2, [sp, #4]
 23f9e96:	8a82      	ldrh	r2, [r0, #20]
 23f9e98:	9200      	str	r2, [sp, #0]
 23f9e9a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 23f9e9c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 23f9ea0:	460b      	mov	r3, r1
 23f9ea2:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 23f9ea6:	47b0      	blx	r6
	uint16_t w = fontDesc[c-fontStart].width;
 23f9ea8:	7ee3      	ldrb	r3, [r4, #27]
    if (fontKern > 0 && textcolor != textbgcolor) {
 23f9eaa:	f994 701d 	ldrsb.w	r7, [r4, #29]
	uint16_t w = fontDesc[c-fontStart].width;
 23f9eae:	1aed      	subs	r5, r5, r3
 23f9eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (fontKern > 0 && textcolor != textbgcolor) {
 23f9eb2:	2f00      	cmp	r7, #0
	uint16_t w = fontDesc[c-fontStart].width;
 23f9eb4:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 23f9eb8:	f813 6025 	ldrb.w	r6, [r3, r5, lsl #2]
	uint16_t h = fontDesc[c-fontStart].height;
 23f9ebc:	7855      	ldrb	r5, [r2, #1]
    if (fontKern > 0 && textcolor != textbgcolor) {
 23f9ebe:	dd15      	ble.n	23f9eec <_ZN12Adafruit_GFX5writeEh+0x8a>
 23f9ec0:	8ae2      	ldrh	r2, [r4, #22]
 23f9ec2:	8aa3      	ldrh	r3, [r4, #20]
 23f9ec4:	4293      	cmp	r3, r2
 23f9ec6:	d011      	beq.n	23f9eec <_ZN12Adafruit_GFX5writeEh+0x8a>
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
 23f9ec8:	7e23      	ldrb	r3, [r4, #24]
 23f9eca:	9201      	str	r2, [sp, #4]
 23f9ecc:	8a21      	ldrh	r1, [r4, #16]
 23f9ece:	fb15 f203 	smulbb	r2, r5, r3
 23f9ed2:	fb06 1103 	mla	r1, r6, r3, r1
 23f9ed6:	6820      	ldr	r0, [r4, #0]
 23f9ed8:	b212      	sxth	r2, r2
 23f9eda:	9200      	str	r2, [sp, #0]
 23f9edc:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 23f9ee0:	437b      	muls	r3, r7
 23f9ee2:	4620      	mov	r0, r4
 23f9ee4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f9ee8:	b209      	sxth	r1, r1
 23f9eea:	47c0      	blx	r8
    cursor_x += textsize*(w+fontKern);
 23f9eec:	f994 301d 	ldrsb.w	r3, [r4, #29]
 23f9ef0:	7e27      	ldrb	r7, [r4, #24]
 23f9ef2:	1999      	adds	r1, r3, r6
 23f9ef4:	8a23      	ldrh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 23f9ef6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    cursor_x += textsize*(w+fontKern);
 23f9efa:	fb01 3307 	mla	r3, r1, r7, r3
 23f9efe:	b21b      	sxth	r3, r3
 23f9f00:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 23f9f02:	2a00      	cmp	r2, #0
 23f9f04:	d0bc      	beq.n	23f9e80 <_ZN12Adafruit_GFX5writeEh+0x1e>
 23f9f06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 23f9f0a:	fb06 2217 	mls	r2, r6, r7, r2
 23f9f0e:	4293      	cmp	r3, r2
 23f9f10:	ddb6      	ble.n	23f9e80 <_ZN12Adafruit_GFX5writeEh+0x1e>
      cursor_y += textsize*h;
 23f9f12:	8a63      	ldrh	r3, [r4, #18]
 23f9f14:	fb05 3307 	mla	r3, r5, r7, r3
 23f9f18:	e7af      	b.n	23f9e7a <_ZN12Adafruit_GFX5writeEh+0x18>
	...

023f9f1c <_ZN12Adafruit_GFX7setFontEh>:
      font = GLCDFONT;
 23f9f1c:	2304      	movs	r3, #4
	  fontDesc = glcdfontDescriptors;
 23f9f1e:	4a06      	ldr	r2, [pc, #24]	; (23f9f38 <_ZN12Adafruit_GFX7setFontEh+0x1c>)
      font = GLCDFONT;
 23f9f20:	7683      	strb	r3, [r0, #26]
	  fontDesc = glcdfontDescriptors;
 23f9f22:	6242      	str	r2, [r0, #36]	; 0x24
      fontKern = 1;
 23f9f24:	2201      	movs	r2, #1
      fontData = glcdfontBitmaps;
 23f9f26:	4b05      	ldr	r3, [pc, #20]	; (23f9f3c <_ZN12Adafruit_GFX7setFontEh+0x20>)
      fontKern = 1;
 23f9f28:	7742      	strb	r2, [r0, #29]
      fontData = glcdfontBitmaps;
 23f9f2a:	6203      	str	r3, [r0, #32]
  fontStart = pgm_read_byte(fontData+FONT_START);
 23f9f2c:	781a      	ldrb	r2, [r3, #0]
 23f9f2e:	76c2      	strb	r2, [r0, #27]
  fontEnd = pgm_read_byte(fontData+FONT_END);
 23f9f30:	785b      	ldrb	r3, [r3, #1]
 23f9f32:	7703      	strb	r3, [r0, #28]
}
 23f9f34:	4770      	bx	lr
 23f9f36:	bf00      	nop
 23f9f38:	023ff5c2 	.word	0x023ff5c2
 23f9f3c:	023fedc8 	.word	0x023fedc8

023f9f40 <_ZN12Adafruit_GFXC1Ess>:
  WIDTH(w), HEIGHT(h)
 23f9f40:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
 23f9f42:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
 23f9f44:	f04f 32ff 	mov.w	r2, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23f9f48:	b538      	push	{r3, r4, r5, lr}
  textcolor = textbgcolor = 0xFFFF;
 23f9f4a:	6142      	str	r2, [r0, #20]
    Print() : write_error(0) {}
 23f9f4c:	2400      	movs	r4, #0
  textsize  = 1;
 23f9f4e:	2201      	movs	r2, #1
  WIDTH(w), HEIGHT(h)
 23f9f50:	4d06      	ldr	r5, [pc, #24]	; (23f9f6c <_ZN12Adafruit_GFXC1Ess+0x2c>)
 23f9f52:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
 23f9f54:	8181      	strh	r1, [r0, #12]
 23f9f56:	6044      	str	r4, [r0, #4]
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 23f9f58:	2104      	movs	r1, #4
  WIDTH(w), HEIGHT(h)
 23f9f5a:	6005      	str	r5, [r0, #0]
  cursor_y  = cursor_x    = 0;
 23f9f5c:	6104      	str	r4, [r0, #16]
  textsize  = 1;
 23f9f5e:	8302      	strh	r2, [r0, #24]
  wrap      = true;
 23f9f60:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 23f9f64:	f7ff ffda 	bl	23f9f1c <_ZN12Adafruit_GFX7setFontEh>
 }
 23f9f68:	bd38      	pop	{r3, r4, r5, pc}
 23f9f6a:	bf00      	nop
 23f9f6c:	023fed94 	.word	0x023fed94

023f9f70 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    uint8_t cornername, int16_t delta, uint16_t color) {
 23f9f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9f74:	461c      	mov	r4, r3
 23f9f76:	b08d      	sub	sp, #52	; 0x34
 23f9f78:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23f9f7c:	4683      	mov	fp, r0
 23f9f7e:	9309      	str	r3, [sp, #36]	; 0x24
 23f9f80:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
  int16_t ddF_y = -2 * r;
 23f9f84:	2703      	movs	r7, #3
    uint8_t cornername, int16_t delta, uint16_t color) {
 23f9f86:	930a      	str	r3, [sp, #40]	; 0x28
 23f9f88:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 23f9f8c:	9208      	str	r2, [sp, #32]
 23f9f8e:	9304      	str	r3, [sp, #16]
  int16_t f     = 1 - r;
 23f9f90:	b2a3      	uxth	r3, r4
 23f9f92:	f1c3 0501 	rsb	r5, r3, #1
  int16_t ddF_y = -2 * r;
 23f9f96:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 23f9f9a:	005b      	lsls	r3, r3, #1
 23f9f9c:	b21b      	sxth	r3, r3
 23f9f9e:	9307      	str	r3, [sp, #28]
  int16_t x     = 0;
 23f9fa0:	2300      	movs	r3, #0
 23f9fa2:	9306      	str	r3, [sp, #24]
    if (cornername & 0x1) {
 23f9fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  int16_t f     = 1 - r;
 23f9fa6:	b22a      	sxth	r2, r5
    if (cornername & 0x1) {
 23f9fa8:	f003 0301 	and.w	r3, r3, #1
 23f9fac:	930b      	str	r3, [sp, #44]	; 0x2c
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 23f9fae:	b28b      	uxth	r3, r1
  int16_t f     = 1 - r;
 23f9fb0:	9203      	str	r2, [sp, #12]
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 23f9fb2:	9305      	str	r3, [sp, #20]
  while (x<y) {
 23f9fb4:	9b06      	ldr	r3, [sp, #24]
 23f9fb6:	42a3      	cmp	r3, r4
 23f9fb8:	da70      	bge.n	23fa09c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x12c>
    if (f >= 0) {
 23f9fba:	9b03      	ldr	r3, [sp, #12]
 23f9fbc:	2b00      	cmp	r3, #0
 23f9fbe:	db0a      	blt.n	23f9fd6 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x66>
      ddF_y += 2;
 23f9fc0:	9b07      	ldr	r3, [sp, #28]
      y--;
 23f9fc2:	3c01      	subs	r4, #1
      ddF_y += 2;
 23f9fc4:	3302      	adds	r3, #2
 23f9fc6:	b21a      	sxth	r2, r3
 23f9fc8:	9207      	str	r2, [sp, #28]
      f     += ddF_y;
 23f9fca:	9a03      	ldr	r2, [sp, #12]
      y--;
 23f9fcc:	b224      	sxth	r4, r4
      f     += ddF_y;
 23f9fce:	fa12 f583 	uxtah	r5, r2, r3
 23f9fd2:	b22b      	sxth	r3, r5
 23f9fd4:	9303      	str	r3, [sp, #12]
    x++;
 23f9fd6:	9b06      	ldr	r3, [sp, #24]
 23f9fd8:	3301      	adds	r3, #1
 23f9fda:	fa1f fa83 	uxth.w	sl, r3
 23f9fde:	b21b      	sxth	r3, r3
 23f9fe0:	9306      	str	r3, [sp, #24]
    f     += ddF_x;
 23f9fe2:	9b03      	ldr	r3, [sp, #12]
 23f9fe4:	443b      	add	r3, r7
 23f9fe6:	b21b      	sxth	r3, r3
 23f9fe8:	9303      	str	r3, [sp, #12]
    if (cornername & 0x1) {
 23f9fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f9fec:	b33b      	cbz	r3, 23fa03e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xce>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 23f9fee:	9804      	ldr	r0, [sp, #16]
 23f9ff0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 23f9ff4:	9000      	str	r0, [sp, #0]
 23f9ff6:	f8db 0000 	ldr.w	r0, [fp]
 23f9ffa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 23f9ffe:	9905      	ldr	r1, [sp, #20]
 23fa000:	b2a6      	uxth	r6, r4
 23fa002:	6980      	ldr	r0, [r0, #24]
 23fa004:	f108 0301 	add.w	r3, r8, #1
 23fa008:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 23fa00c:	eba9 0206 	sub.w	r2, r9, r6
 23fa010:	4451      	add	r1, sl
 23fa012:	4605      	mov	r5, r0
 23fa014:	b21b      	sxth	r3, r3
 23fa016:	4658      	mov	r0, fp
 23fa018:	b212      	sxth	r2, r2
 23fa01a:	b209      	sxth	r1, r1
 23fa01c:	47a8      	blx	r5
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 23fa01e:	9905      	ldr	r1, [sp, #20]
 23fa020:	9804      	ldr	r0, [sp, #16]
 23fa022:	4431      	add	r1, r6
 23fa024:	f8db 6000 	ldr.w	r6, [fp]
 23fa028:	9000      	str	r0, [sp, #0]
 23fa02a:	eb08 0307 	add.w	r3, r8, r7
 23fa02e:	eba9 020a 	sub.w	r2, r9, sl
 23fa032:	4658      	mov	r0, fp
 23fa034:	69b6      	ldr	r6, [r6, #24]
 23fa036:	b21b      	sxth	r3, r3
 23fa038:	b212      	sxth	r2, r2
 23fa03a:	b209      	sxth	r1, r1
 23fa03c:	47b0      	blx	r6
    if (cornername & 0x2) {
 23fa03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fa040:	079b      	lsls	r3, r3, #30
 23fa042:	d528      	bpl.n	23fa096 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x126>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 23fa044:	9804      	ldr	r0, [sp, #16]
 23fa046:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 23fa04a:	9000      	str	r0, [sp, #0]
 23fa04c:	f8db 0000 	ldr.w	r0, [fp]
 23fa050:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 23fa054:	9905      	ldr	r1, [sp, #20]
 23fa056:	b2a6      	uxth	r6, r4
 23fa058:	6980      	ldr	r0, [r0, #24]
 23fa05a:	f109 0301 	add.w	r3, r9, #1
 23fa05e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 23fa062:	eba8 0206 	sub.w	r2, r8, r6
 23fa066:	eba1 010a 	sub.w	r1, r1, sl
 23fa06a:	4605      	mov	r5, r0
 23fa06c:	b21b      	sxth	r3, r3
 23fa06e:	4658      	mov	r0, fp
 23fa070:	b212      	sxth	r2, r2
 23fa072:	b209      	sxth	r1, r1
 23fa074:	47a8      	blx	r5
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 23fa076:	9905      	ldr	r1, [sp, #20]
 23fa078:	9804      	ldr	r0, [sp, #16]
 23fa07a:	1b89      	subs	r1, r1, r6
 23fa07c:	f8db 6000 	ldr.w	r6, [fp]
 23fa080:	9000      	str	r0, [sp, #0]
 23fa082:	eb09 0307 	add.w	r3, r9, r7
 23fa086:	eba8 020a 	sub.w	r2, r8, sl
 23fa08a:	4658      	mov	r0, fp
 23fa08c:	69b6      	ldr	r6, [r6, #24]
 23fa08e:	b21b      	sxth	r3, r3
 23fa090:	b212      	sxth	r2, r2
 23fa092:	b209      	sxth	r1, r1
 23fa094:	47b0      	blx	r6
 23fa096:	3702      	adds	r7, #2
 23fa098:	b2bf      	uxth	r7, r7
 23fa09a:	e78b      	b.n	23f9fb4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x44>
}
 23fa09c:	b00d      	add	sp, #52	; 0x34
 23fa09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fa0a2 <_ZN12Adafruit_GFX10fillCircleEssst>:
			      uint16_t color) {
 23fa0a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fa0a6:	4615      	mov	r5, r2
 23fa0a8:	b085      	sub	sp, #20
 23fa0aa:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
  drawFastVLine(x0, y0-r, 2*r+1, color);
 23fa0ae:	b29a      	uxth	r2, r3
 23fa0b0:	f8cd 8000 	str.w	r8, [sp]
			      uint16_t color) {
 23fa0b4:	461e      	mov	r6, r3
  drawFastVLine(x0, y0-r, 2*r+1, color);
 23fa0b6:	0053      	lsls	r3, r2, #1
 23fa0b8:	f103 0c01 	add.w	ip, r3, #1
 23fa0bc:	6803      	ldr	r3, [r0, #0]
 23fa0be:	1aaa      	subs	r2, r5, r2
 23fa0c0:	f8d3 9018 	ldr.w	r9, [r3, #24]
 23fa0c4:	b212      	sxth	r2, r2
 23fa0c6:	fa0f f38c 	sxth.w	r3, ip
			      uint16_t color) {
 23fa0ca:	4604      	mov	r4, r0
 23fa0cc:	460f      	mov	r7, r1
  drawFastVLine(x0, y0-r, 2*r+1, color);
 23fa0ce:	47c8      	blx	r9
  fillCircleHelper(x0, y0, r, 3, 0, color);
 23fa0d0:	2303      	movs	r3, #3
 23fa0d2:	2200      	movs	r2, #0
 23fa0d4:	4639      	mov	r1, r7
 23fa0d6:	e9cd 3200 	strd	r3, r2, [sp]
 23fa0da:	4620      	mov	r0, r4
 23fa0dc:	4633      	mov	r3, r6
 23fa0de:	462a      	mov	r2, r5
 23fa0e0:	f8cd 8008 	str.w	r8, [sp, #8]
 23fa0e4:	f7ff ff44 	bl	23f9f70 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
}
 23fa0e8:	b005      	add	sp, #20
 23fa0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fa0ee <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fa0ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa0f2:	ed2d 8b02 	vpush	{d8}
 23fa0f6:	b089      	sub	sp, #36	; 0x24
 23fa0f8:	4690      	mov	r8, r2
 23fa0fa:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 23fa0fe:	4682      	mov	sl, r0
 23fa100:	9204      	str	r2, [sp, #16]
 23fa102:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 23fa106:	2500      	movs	r5, #0
 23fa108:	9205      	str	r2, [sp, #20]
  if (c < fontStart || c > fontEnd) {
 23fa10a:	7ec2      	ldrb	r2, [r0, #27]
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fa10c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
  if (c < fontStart || c > fontEnd) {
 23fa110:	429a      	cmp	r2, r3
 23fa112:	d863      	bhi.n	23fa1dc <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
 23fa114:	7f04      	ldrb	r4, [r0, #28]
 23fa116:	429c      	cmp	r4, r3
 23fa118:	d360      	bcc.n	23fa1dc <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
    c -= fontStart;
 23fa11a:	1a9b      	subs	r3, r3, r2
 23fa11c:	b2db      	uxtb	r3, r3
  if((x >= _width)            || // Clip right
 23fa11e:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 23fa122:	428a      	cmp	r2, r1
 23fa124:	f340 8084 	ble.w	23fa230 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
 23fa128:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 23fa12c:	4542      	cmp	r2, r8
 23fa12e:	dd7f      	ble.n	23fa230 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 23fa130:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 23fa134:	009a      	lsls	r2, r3, #2
 23fa136:	9207      	str	r2, [sp, #28]
 23fa138:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 23fa13c:	f814 3023 	ldrb.w	r3, [r4, r3, lsl #2]
 23fa140:	fb03 1307 	mla	r3, r3, r7, r1
     (y >= _height)           || // Clip bottom
 23fa144:	2b00      	cmp	r3, #0
 23fa146:	dd73      	ble.n	23fa230 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
 23fa148:	7853      	ldrb	r3, [r2, #1]
 23fa14a:	fb03 8307 	mla	r3, r3, r7, r8
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 23fa14e:	2b00      	cmp	r3, #0
 23fa150:	dd6e      	ble.n	23fa230 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 23fa152:	8853      	ldrh	r3, [r2, #2]
          drawPixel(x+j, y+i, color);
 23fa154:	b28c      	uxth	r4, r1
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 23fa156:	3302      	adds	r3, #2
 23fa158:	b29b      	uxth	r3, r3
 23fa15a:	9302      	str	r3, [sp, #8]
 23fa15c:	2300      	movs	r3, #0
 23fa15e:	9303      	str	r3, [sp, #12]
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fa160:	b2bb      	uxth	r3, r7
 23fa162:	9306      	str	r3, [sp, #24]
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 23fa164:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 23fa168:	9a07      	ldr	r2, [sp, #28]
 23fa16a:	f99d 600c 	ldrsb.w	r6, [sp, #12]
 23fa16e:	4413      	add	r3, r2
 23fa170:	785b      	ldrb	r3, [r3, #1]
 23fa172:	429e      	cmp	r6, r3
 23fa174:	da5c      	bge.n	23fa230 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fa176:	9b06      	ldr	r3, [sp, #24]
 23fa178:	f04f 0900 	mov.w	r9, #0
 23fa17c:	4373      	muls	r3, r6
 23fa17e:	fa13 f388 	uxtah	r3, r3, r8
 23fa182:	b21b      	sxth	r3, r3
 23fa184:	ee08 3a10 	vmov	s16, r3
          drawPixel(x+j, y+i, bg);
 23fa188:	4446      	add	r6, r8
 23fa18a:	b236      	sxth	r6, r6
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 23fa18c:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 23fa190:	9807      	ldr	r0, [sp, #28]
 23fa192:	fa4f f189 	sxtb.w	r1, r9
 23fa196:	5c12      	ldrb	r2, [r2, r0]
 23fa198:	fa5f f389 	uxtb.w	r3, r9
 23fa19c:	4291      	cmp	r1, r2
 23fa19e:	da43      	bge.n	23fa228 <_ZN12Adafruit_GFX8drawCharEsshtth+0x13a>
      if (bitCount++%8 == 0) {
 23fa1a0:	075a      	lsls	r2, r3, #29
 23fa1a2:	d107      	bne.n	23fa1b4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc6>
        line = pgm_read_byte(fontData+fontIndex++);
 23fa1a4:	9b02      	ldr	r3, [sp, #8]
 23fa1a6:	9802      	ldr	r0, [sp, #8]
 23fa1a8:	f8da 2020 	ldr.w	r2, [sl, #32]
 23fa1ac:	3301      	adds	r3, #1
 23fa1ae:	b29b      	uxth	r3, r3
 23fa1b0:	5c15      	ldrb	r5, [r2, r0]
 23fa1b2:	9302      	str	r3, [sp, #8]
      if (line & 0x80) {
 23fa1b4:	062b      	lsls	r3, r5, #24
 23fa1b6:	d523      	bpl.n	23fa200 <_ZN12Adafruit_GFX8drawCharEsshtth+0x112>
        if (size == 1) {// default sizeFast
 23fa1b8:	2f01      	cmp	r7, #1
          drawPixel(x+j, y+i, color);
 23fa1ba:	f8da 2000 	ldr.w	r2, [sl]
 23fa1be:	b289      	uxth	r1, r1
        if (size == 1) {// default sizeFast
 23fa1c0:	d10e      	bne.n	23fa1e0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
          drawPixel(x+j, y+i, color);
 23fa1c2:	f8d2 b010 	ldr.w	fp, [r2, #16]
 23fa1c6:	9b04      	ldr	r3, [sp, #16]
 23fa1c8:	4421      	add	r1, r4
          drawPixel(x+j, y+i, bg);
 23fa1ca:	4632      	mov	r2, r6
 23fa1cc:	4650      	mov	r0, sl
 23fa1ce:	b209      	sxth	r1, r1
 23fa1d0:	47d8      	blx	fp
      line <<= 1;
 23fa1d2:	006d      	lsls	r5, r5, #1
 23fa1d4:	b2ed      	uxtb	r5, r5
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 23fa1d6:	f109 0901 	add.w	r9, r9, #1
 23fa1da:	e7d7      	b.n	23fa18c <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
    c = 0;
 23fa1dc:	462b      	mov	r3, r5
 23fa1de:	e79e      	b.n	23fa11e <_ZN12Adafruit_GFX8drawCharEsshtth+0x30>
          fillRect(x+(j*size), y+(i*size), size, size, color);
 23fa1e0:	9806      	ldr	r0, [sp, #24]
 23fa1e2:	b23b      	sxth	r3, r7
 23fa1e4:	fb10 f101 	smulbb	r1, r0, r1
 23fa1e8:	9804      	ldr	r0, [sp, #16]
 23fa1ea:	4421      	add	r1, r4
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fa1ec:	e9cd 3000 	strd	r3, r0, [sp]
 23fa1f0:	b209      	sxth	r1, r1
 23fa1f2:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 23fa1f6:	4650      	mov	r0, sl
 23fa1f8:	ee18 2a10 	vmov	r2, s16
 23fa1fc:	47d8      	blx	fp
 23fa1fe:	e7e8      	b.n	23fa1d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe4>
      } else if (bg != color) {
 23fa200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23fa204:	4293      	cmp	r3, r2
 23fa206:	d0e4      	beq.n	23fa1d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe4>
        if (size == 1) // default size
 23fa208:	2f01      	cmp	r7, #1
          drawPixel(x+j, y+i, color);
 23fa20a:	f8da 2000 	ldr.w	r2, [sl]
 23fa20e:	b289      	uxth	r1, r1
        if (size == 1) // default size
 23fa210:	d103      	bne.n	23fa21a <_ZN12Adafruit_GFX8drawCharEsshtth+0x12c>
          drawPixel(x+j, y+i, bg);
 23fa212:	f8d2 b010 	ldr.w	fp, [r2, #16]
 23fa216:	4421      	add	r1, r4
 23fa218:	e7d7      	b.n	23fa1ca <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fa21a:	9806      	ldr	r0, [sp, #24]
 23fa21c:	b23b      	sxth	r3, r7
 23fa21e:	fb10 f101 	smulbb	r1, r0, r1
 23fa222:	9805      	ldr	r0, [sp, #20]
 23fa224:	4421      	add	r1, r4
 23fa226:	e7e1      	b.n	23fa1ec <_ZN12Adafruit_GFX8drawCharEsshtth+0xfe>
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 23fa228:	9b03      	ldr	r3, [sp, #12]
 23fa22a:	3301      	adds	r3, #1
 23fa22c:	9303      	str	r3, [sp, #12]
 23fa22e:	e799      	b.n	23fa164 <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
}
 23fa230:	b009      	add	sp, #36	; 0x24
 23fa232:	ecbd 8b02 	vpop	{d8}
 23fa236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fa23a <_ZN12Adafruit_GFX12drawFastCharEsshtth>:
                                    uint16_t color, uint16_t bg, uint8_t size) {
 23fa23a:	b470      	push	{r4, r5, r6}
 23fa23c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 23fa240:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 23fa244:	f89d 6014 	ldrb.w	r6, [sp, #20]
  drawChar(x,y,c,color,bg,size);
 23fa248:	9403      	str	r4, [sp, #12]
 23fa24a:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 23fa24e:	bc70      	pop	{r4, r5, r6}
  drawChar(x,y,c,color,bg,size);
 23fa250:	f7ff bf4d 	b.w	23fa0ee <_ZN12Adafruit_GFX8drawCharEsshtth>

023fa254 <_ZN12Adafruit_GFX11getRotationEv>:
}
 23fa254:	7e40      	ldrb	r0, [r0, #25]
 23fa256:	4770      	bx	lr

023fa258 <_ZN12Adafruit_GFX5widthEv>:
}
 23fa258:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 23fa25c:	4770      	bx	lr

023fa25e <_ZN12Adafruit_GFX6heightEv>:
}
 23fa25e:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 23fa262:	4770      	bx	lr

023fa264 <_ZN6Bitmap6read16Ei>:
    }

    close(fd);
}

uint16_t Bitmap::read16(int fd) {
 23fa264:	b507      	push	{r0, r1, r2, lr}
 23fa266:	4608      	mov	r0, r1
  uint16_t result;
  int count = read(fd, &result, sizeof(result));
 23fa268:	2202      	movs	r2, #2
 23fa26a:	f10d 0106 	add.w	r1, sp, #6
 23fa26e:	f004 fba5 	bl	23fe9bc <read>
  return result;
}
 23fa272:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 23fa276:	b003      	add	sp, #12
 23fa278:	f85d fb04 	ldr.w	pc, [sp], #4

023fa27c <_ZN6Bitmap6read32Ei>:

uint32_t Bitmap::read32(int fd) {
 23fa27c:	b507      	push	{r0, r1, r2, lr}
  uint32_t result;
  int count = read(fd, &result, sizeof(result));
 23fa27e:	2204      	movs	r2, #4
uint32_t Bitmap::read32(int fd) {
 23fa280:	4608      	mov	r0, r1
  int count = read(fd, &result, sizeof(result));
 23fa282:	eb0d 0102 	add.w	r1, sp, r2
 23fa286:	f004 fb99 	bl	23fe9bc <read>
  return result;
 23fa28a:	9801      	ldr	r0, [sp, #4]
 23fa28c:	b003      	add	sp, #12
 23fa28e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fa294 <_ZN6Bitmap10drawBitmapEPKc>:
void Bitmap::drawBitmap(const char* filename) {
 23fa294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa298:	460d      	mov	r5, r1
    Log.info("filename = %s", filename);
 23fa29a:	460a      	mov	r2, r1
void Bitmap::drawBitmap(const char* filename) {
 23fa29c:	b09f      	sub	sp, #124	; 0x7c
    Log.info("filename = %s", filename);
 23fa29e:	4974      	ldr	r1, [pc, #464]	; (23fa470 <_ZN6Bitmap10drawBitmapEPKc+0x1dc>)
void Bitmap::drawBitmap(const char* filename) {
 23fa2a0:	4604      	mov	r4, r0
    Log.info("filename = %s", filename);
 23fa2a2:	4874      	ldr	r0, [pc, #464]	; (23fa474 <_ZN6Bitmap10drawBitmapEPKc+0x1e0>)
 23fa2a4:	f7fe fc38 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
    int fd = open(filename, O_RDONLY);
 23fa2a8:	2100      	movs	r1, #0
 23fa2aa:	4628      	mov	r0, r5
 23fa2ac:	f004 fb72 	bl	23fe994 <open>
 23fa2b0:	4605      	mov	r5, r0
    Log.info("file open errno=%d", errno);
 23fa2b2:	f001 f9e3 	bl	23fb67c <__errno>
 23fa2b6:	4970      	ldr	r1, [pc, #448]	; (23fa478 <_ZN6Bitmap10drawBitmapEPKc+0x1e4>)
 23fa2b8:	6802      	ldr	r2, [r0, #0]
 23fa2ba:	486e      	ldr	r0, [pc, #440]	; (23fa474 <_ZN6Bitmap10drawBitmapEPKc+0x1e0>)
 23fa2bc:	f7fe fc2c 	bl	23f8b18 <_ZNK5spark6Logger4infoEPKcz>
    if (fd == -1) {
 23fa2c0:	1c6b      	adds	r3, r5, #1
 23fa2c2:	d106      	bne.n	23fa2d2 <_ZN6Bitmap10drawBitmapEPKc+0x3e>
        Log.error("ERROR");
 23fa2c4:	496d      	ldr	r1, [pc, #436]	; (23fa47c <_ZN6Bitmap10drawBitmapEPKc+0x1e8>)
 23fa2c6:	486b      	ldr	r0, [pc, #428]	; (23fa474 <_ZN6Bitmap10drawBitmapEPKc+0x1e0>)
 23fa2c8:	f7fe fc3e 	bl	23f8b48 <_ZNK5spark6Logger5errorEPKcz>
}
 23fa2cc:	b01f      	add	sp, #124	; 0x7c
 23fa2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    delay(4000);
 23fa2d2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 23fa2d6:	f002 ff37 	bl	23fd148 <delay>
    if (read16(fd) == 0x4D42) { // BMP signature
 23fa2da:	4629      	mov	r1, r5
 23fa2dc:	4620      	mov	r0, r4
 23fa2de:	f7ff ffc1 	bl	23fa264 <_ZN6Bitmap6read16Ei>
 23fa2e2:	f644 5342 	movw	r3, #19778	; 0x4d42
 23fa2e6:	4298      	cmp	r0, r3
 23fa2e8:	f040 80bd 	bne.w	23fa466 <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
        uint32_t fileSize = read32(fd);
 23fa2ec:	4629      	mov	r1, r5
 23fa2ee:	4620      	mov	r0, r4
 23fa2f0:	f7ff ffc4 	bl	23fa27c <_ZN6Bitmap6read32Ei>
        lseek(fd, 4, SEEK_CUR); // ignore creator bytes
 23fa2f4:	2201      	movs	r2, #1
 23fa2f6:	2104      	movs	r1, #4
 23fa2f8:	4628      	mov	r0, r5
 23fa2fa:	f004 fb41 	bl	23fe980 <lseek>
        uint32_t bmpImageoffset = read32(fd); // Start of image data
 23fa2fe:	4629      	mov	r1, r5
 23fa300:	4620      	mov	r0, r4
 23fa302:	f7ff ffbb 	bl	23fa27c <_ZN6Bitmap6read32Ei>
        uint32_t headerSize = read32(fd);
 23fa306:	4629      	mov	r1, r5
        uint32_t bmpImageoffset = read32(fd); // Start of image data
 23fa308:	4680      	mov	r8, r0
        uint32_t headerSize = read32(fd);
 23fa30a:	4620      	mov	r0, r4
 23fa30c:	f7ff ffb6 	bl	23fa27c <_ZN6Bitmap6read32Ei>
        int bmpWidth  = read32(fd);
 23fa310:	4629      	mov	r1, r5
 23fa312:	4620      	mov	r0, r4
 23fa314:	f7ff ffb2 	bl	23fa27c <_ZN6Bitmap6read32Ei>
        int bmpHeight = read32(fd);
 23fa318:	4629      	mov	r1, r5
        int bmpWidth  = read32(fd);
 23fa31a:	4607      	mov	r7, r0
        int bmpHeight = read32(fd);
 23fa31c:	4620      	mov	r0, r4
 23fa31e:	f7ff ffad 	bl	23fa27c <_ZN6Bitmap6read32Ei>
        uint16_t planeCount = read16(fd);
 23fa322:	4629      	mov	r1, r5
        int bmpHeight = read32(fd);
 23fa324:	4606      	mov	r6, r0
        uint16_t planeCount = read16(fd);
 23fa326:	4620      	mov	r0, r4
 23fa328:	f7ff ff9c 	bl	23fa264 <_ZN6Bitmap6read16Ei>
        if (planeCount == 1) { // # planes -- must be '1'
 23fa32c:	2801      	cmp	r0, #1
        uint16_t planeCount = read16(fd);
 23fa32e:	4682      	mov	sl, r0
        if (planeCount == 1) { // # planes -- must be '1'
 23fa330:	f040 8099 	bne.w	23fa466 <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
            uint8_t bmpDepth = read16(fd); // bits per pixel
 23fa334:	4629      	mov	r1, r5
 23fa336:	4620      	mov	r0, r4
 23fa338:	f7ff ff94 	bl	23fa264 <_ZN6Bitmap6read16Ei>
 23fa33c:	4681      	mov	r9, r0
            uint32_t compression = read32(fd);
 23fa33e:	4629      	mov	r1, r5
 23fa340:	4620      	mov	r0, r4
            if ((bmpDepth == 24) && (compression == 0)) { // 0 = uncompressed
 23fa342:	fa5f f989 	uxtb.w	r9, r9
            uint32_t compression = read32(fd);
 23fa346:	f7ff ff99 	bl	23fa27c <_ZN6Bitmap6read32Ei>
            if ((bmpDepth == 24) && (compression == 0)) { // 0 = uncompressed
 23fa34a:	f1b9 0f18 	cmp.w	r9, #24
 23fa34e:	f040 808a 	bne.w	23fa466 <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
 23fa352:	2800      	cmp	r0, #0
 23fa354:	f040 8087 	bne.w	23fa466 <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
                uint32_t rowSize = (bmpWidth * 3 + 3) & ~3;
 23fa358:	1c7b      	adds	r3, r7, #1
 23fa35a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fa35e:	f023 0303 	bic.w	r3, r3, #3
 23fa362:	9301      	str	r3, [sp, #4]
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa364:	6823      	ldr	r3, [r4, #0]
                if(bmpHeight < 0) {
 23fa366:	2e00      	cmp	r6, #0
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa368:	681a      	ldr	r2, [r3, #0]
                    flip = false;
 23fa36a:	bfb8      	it	lt
 23fa36c:	9003      	strlt	r0, [sp, #12]
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa36e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
                    bmpHeight = -bmpHeight;
 23fa372:	bfb8      	it	lt
 23fa374:	4276      	neglt	r6, r6
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa376:	4418      	add	r0, r3
                bool flip = true;
 23fa378:	bfa8      	it	ge
 23fa37a:	f8cd a00c 	strge.w	sl, [sp, #12]
        int bmpWidth  = read32(fd);
 23fa37e:	9704      	str	r7, [sp, #16]
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa380:	f7ff ff6a 	bl	23fa258 <_ZN12Adafruit_GFX5widthEv>
 23fa384:	42b8      	cmp	r0, r7
 23fa386:	da07      	bge.n	23fa398 <_ZN6Bitmap10drawBitmapEPKc+0x104>
 23fa388:	6823      	ldr	r3, [r4, #0]
 23fa38a:	681a      	ldr	r2, [r3, #0]
 23fa38c:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23fa390:	4418      	add	r0, r3
 23fa392:	f7ff ff61 	bl	23fa258 <_ZN12Adafruit_GFX5widthEv>
 23fa396:	9004      	str	r0, [sp, #16]
                if ((h - 1) >= _tft->height()) h = _tft->height();
 23fa398:	6823      	ldr	r3, [r4, #0]
 23fa39a:	681a      	ldr	r2, [r3, #0]
 23fa39c:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23fa3a0:	4418      	add	r0, r3
 23fa3a2:	f7ff ff5c 	bl	23fa25e <_ZN12Adafruit_GFX6heightEv>
 23fa3a6:	42b0      	cmp	r0, r6
 23fa3a8:	da52      	bge.n	23fa450 <_ZN6Bitmap10drawBitmapEPKc+0x1bc>
 23fa3aa:	6823      	ldr	r3, [r4, #0]
 23fa3ac:	681a      	ldr	r2, [r3, #0]
 23fa3ae:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23fa3b2:	4418      	add	r0, r3
 23fa3b4:	f7ff ff53 	bl	23fa25e <_ZN12Adafruit_GFX6heightEv>
 23fa3b8:	9005      	str	r0, [sp, #20]
                for (int row = 0; row < h; row++) { // For each scanline...
 23fa3ba:	f04f 0900 	mov.w	r9, #0
 23fa3be:	9b01      	ldr	r3, [sp, #4]
 23fa3c0:	3e01      	subs	r6, #1
 23fa3c2:	fb03 8306 	mla	r3, r3, r6, r8
 23fa3c6:	9302      	str	r3, [sp, #8]
 23fa3c8:	9b05      	ldr	r3, [sp, #20]
 23fa3ca:	454b      	cmp	r3, r9
 23fa3cc:	dd4b      	ble.n	23fa466 <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
                    _tft->goTo(0, row);
 23fa3ce:	464a      	mov	r2, r9
 23fa3d0:	2100      	movs	r1, #0
 23fa3d2:	6820      	ldr	r0, [r4, #0]
 23fa3d4:	f7ff f908 	bl	23f95e8 <_ZN16Adafruit_SSD13514goToEii>
                    lseek(fd, pos, SEEK_SET);
 23fa3d8:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 23fa3dc:	2200      	movs	r2, #0
 23fa3de:	4628      	mov	r0, r5
 23fa3e0:	4293      	cmp	r3, r2
 23fa3e2:	bf08      	it	eq
 23fa3e4:	4641      	moveq	r1, r8
 23fa3e6:	f004 facb 	bl	23fe980 <lseek>
                    for (int col = 0; col < w; col++) { // For each pixel...
 23fa3ea:	f04f 0a00 	mov.w	sl, #0
                    buffidx = sizeof(sdbuffer); // Force buffer reload
 23fa3ee:	2760      	movs	r7, #96	; 0x60
                    for (int col = 0; col < w; col++) { // For each pixel...
 23fa3f0:	9b04      	ldr	r3, [sp, #16]
 23fa3f2:	4553      	cmp	r3, sl
 23fa3f4:	dd2e      	ble.n	23fa454 <_ZN6Bitmap10drawBitmapEPKc+0x1c0>
                        if (buffidx >= sizeof(sdbuffer)) {
 23fa3f6:	2f5f      	cmp	r7, #95	; 0x5f
 23fa3f8:	d905      	bls.n	23fa406 <_ZN6Bitmap10drawBitmapEPKc+0x172>
                            read(fd, sdbuffer, sizeof(sdbuffer));
 23fa3fa:	2260      	movs	r2, #96	; 0x60
 23fa3fc:	4628      	mov	r0, r5
 23fa3fe:	a906      	add	r1, sp, #24
 23fa400:	f004 fadc 	bl	23fe9bc <read>
                            buffidx = 0; // Set index to beginning
 23fa404:	2700      	movs	r7, #0
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa406:	f8d4 b000 	ldr.w	fp, [r4]
                        uint8_t b = sdbuffer[buffidx++];
 23fa40a:	1c7a      	adds	r2, r7, #1
                        uint8_t g = sdbuffer[buffidx++];
 23fa40c:	a81e      	add	r0, sp, #120	; 0x78
 23fa40e:	fa50 f282 	uxtab	r2, r0, r2
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa412:	f8db 0000 	ldr.w	r0, [fp]
                        uint8_t g = sdbuffer[buffidx++];
 23fa416:	1cb9      	adds	r1, r7, #2
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa418:	6800      	ldr	r0, [r0, #0]
                        uint8_t b = sdbuffer[buffidx++];
 23fa41a:	ab1e      	add	r3, sp, #120	; 0x78
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa41c:	4606      	mov	r6, r0
                        uint8_t r = sdbuffer[buffidx++];
 23fa41e:	a81e      	add	r0, sp, #120	; 0x78
                        uint8_t b = sdbuffer[buffidx++];
 23fa420:	443b      	add	r3, r7
                        uint8_t r = sdbuffer[buffidx++];
 23fa422:	fa50 f181 	uxtab	r1, r0, r1
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa426:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 23fa42a:	f812 2c60 	ldrb.w	r2, [r2, #-96]
 23fa42e:	f811 1c60 	ldrb.w	r1, [r1, #-96]
 23fa432:	4658      	mov	r0, fp
 23fa434:	f7fe ffac 	bl	23f9390 <_ZN16Adafruit_SSD13518Color565Ehhh>
                        uint8_t r = sdbuffer[buffidx++];
 23fa438:	3703      	adds	r7, #3
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa43a:	4603      	mov	r3, r0
 23fa43c:	fa0f f18a 	sxth.w	r1, sl
 23fa440:	4658      	mov	r0, fp
 23fa442:	fa0f f289 	sxth.w	r2, r9
 23fa446:	47b0      	blx	r6
                        uint8_t r = sdbuffer[buffidx++];
 23fa448:	b2ff      	uxtb	r7, r7
                    for (int col = 0; col < w; col++) { // For each pixel...
 23fa44a:	f10a 0a01 	add.w	sl, sl, #1
 23fa44e:	e7cf      	b.n	23fa3f0 <_ZN6Bitmap10drawBitmapEPKc+0x15c>
 23fa450:	9605      	str	r6, [sp, #20]
 23fa452:	e7b2      	b.n	23fa3ba <_ZN6Bitmap10drawBitmapEPKc+0x126>
                for (int row = 0; row < h; row++) { // For each scanline...
 23fa454:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 23fa458:	1ad3      	subs	r3, r2, r3
 23fa45a:	9302      	str	r3, [sp, #8]
 23fa45c:	9b01      	ldr	r3, [sp, #4]
 23fa45e:	f109 0901 	add.w	r9, r9, #1
 23fa462:	4498      	add	r8, r3
 23fa464:	e7b0      	b.n	23fa3c8 <_ZN6Bitmap10drawBitmapEPKc+0x134>
    close(fd);
 23fa466:	4628      	mov	r0, r5
 23fa468:	f004 fa82 	bl	23fe970 <close>
 23fa46c:	e72e      	b.n	23fa2cc <_ZN6Bitmap10drawBitmapEPKc+0x38>
 23fa46e:	bf00      	nop
 23fa470:	023ff9c2 	.word	0x023ff9c2
 23fa474:	1007ae7c 	.word	0x1007ae7c
 23fa478:	023ff9d0 	.word	0x023ff9d0
 23fa47c:	023ff9e3 	.word	0x023ff9e3

023fa480 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
 23fa480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fa482:	4615      	mov	r5, r2
 23fa484:	4604      	mov	r4, r0
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fa486:	0849      	lsrs	r1, r1, #1
 23fa488:	6840      	ldr	r0, [r0, #4]
{
 23fa48a:	461e      	mov	r6, r3
 23fa48c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fa490:	f003 fbbc 	bl	23fdc0c <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
 23fa494:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
 23fa496:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
 23fa498:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
 23fa49c:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
 23fa4a0:	6803      	ldr	r3, [r0, #0]
 23fa4a2:	2202      	movs	r2, #2
 23fa4a4:	68db      	ldr	r3, [r3, #12]
 23fa4a6:	a901      	add	r1, sp, #4
 23fa4a8:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
 23fa4aa:	2500      	movs	r5, #0
 23fa4ac:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
 23fa4ae:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
 23fa4b0:	dd05      	ble.n	23fa4be <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
 23fa4b2:	6803      	ldr	r3, [r0, #0]
 23fa4b4:	5d71      	ldrb	r1, [r6, r5]
 23fa4b6:	689b      	ldr	r3, [r3, #8]
 23fa4b8:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
 23fa4ba:	3501      	adds	r5, #1
 23fa4bc:	e7f6      	b.n	23fa4ac <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
 23fa4be:	2101      	movs	r1, #1
 23fa4c0:	f003 fba8 	bl	23fdc14 <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
 23fa4c4:	2000      	movs	r0, #0
 23fa4c6:	b003      	add	sp, #12
 23fa4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
 23fa4ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fa4cc:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
 23fa4d0:	2301      	movs	r3, #1
 23fa4d2:	7809      	ldrb	r1, [r1, #0]
 23fa4d4:	9300      	str	r3, [sp, #0]
 23fa4d6:	f10d 030f 	add.w	r3, sp, #15
 23fa4da:	f7ff ffd1 	bl	23fa480 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
 23fa4de:	b005      	add	sp, #20
 23fa4e0:	f85d fb04 	ldr.w	pc, [sp], #4

023fa4e4 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
 23fa4e4:	2301      	movs	r3, #1
 23fa4e6:	2286      	movs	r2, #134	; 0x86
 23fa4e8:	6981      	ldr	r1, [r0, #24]
 23fa4ea:	f7ff bfee 	b.w	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fa4ee <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
 23fa4ee:	2340      	movs	r3, #64	; 0x40
 23fa4f0:	2287      	movs	r2, #135	; 0x87
 23fa4f2:	6981      	ldr	r1, [r0, #24]
 23fa4f4:	f7ff bfe9 	b.w	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fa4f8 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
 23fa4f8:	2300      	movs	r3, #0
 23fa4fa:	2287      	movs	r2, #135	; 0x87
 23fa4fc:	6981      	ldr	r1, [r0, #24]
 23fa4fe:	f7ff bfe4 	b.w	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
 23fa502:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
 23fa504:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
 23fa506:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
 23fa50a:	2302      	movs	r3, #2
 23fa50c:	7809      	ldrb	r1, [r1, #0]
 23fa50e:	9300      	str	r3, [sp, #0]
 23fa510:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
 23fa512:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
 23fa516:	f7ff ffb3 	bl	23fa480 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
 23fa51a:	b004      	add	sp, #16
 23fa51c:	bd10      	pop	{r4, pc}

023fa51e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
 23fa51e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fa522:	4604      	mov	r4, r0
 23fa524:	4690      	mov	r8, r2
 23fa526:	461d      	mov	r5, r3
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
 23fa528:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fa52a:	084f      	lsrs	r7, r1, #1
		buffer[0] = RegisterAddr >> 8;
 23fa52c:	ea4f 2912 	mov.w	r9, r2, lsr #8
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fa530:	4639      	mov	r1, r7
 23fa532:	6860      	ldr	r0, [r4, #4]
 23fa534:	f003 fb6a 	bl	23fdc0c <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
 23fa538:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
 23fa53a:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
 23fa53e:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
 23fa542:	6803      	ldr	r3, [r0, #0]
 23fa544:	a901      	add	r1, sp, #4
 23fa546:	2202      	movs	r2, #2
 23fa548:	68db      	ldr	r3, [r3, #12]
 23fa54a:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
 23fa54c:	2100      	movs	r1, #0
 23fa54e:	6860      	ldr	r0, [r4, #4]
 23fa550:	f003 fb60 	bl	23fdc14 <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
 23fa554:	b118      	cbz	r0, 23fa55e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
 23fa556:	3e01      	subs	r6, #1
 23fa558:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 23fa55c:	d1e8      	bne.n	23fa530 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
 23fa55e:	4639      	mov	r1, r7
 23fa560:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 23fa564:	6860      	ldr	r0, [r4, #4]
 23fa566:	f003 fb4e 	bl	23fdc06 <_ZN7TwoWire11requestFromEhj>

	int i = 0;
 23fa56a:	3d01      	subs	r5, #1
	while (dev_i2c->available())
 23fa56c:	6860      	ldr	r0, [r4, #4]
 23fa56e:	6803      	ldr	r3, [r0, #0]
 23fa570:	691b      	ldr	r3, [r3, #16]
 23fa572:	4798      	blx	r3
 23fa574:	b130      	cbz	r0, 23fa584 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
 23fa576:	6860      	ldr	r0, [r4, #4]
 23fa578:	6803      	ldr	r3, [r0, #0]
 23fa57a:	695b      	ldr	r3, [r3, #20]
 23fa57c:	4798      	blx	r3
 23fa57e:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
 23fa582:	e7f3      	b.n	23fa56c <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
 23fa584:	b003      	add	sp, #12
 23fa586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fa58a <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
 23fa58a:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
 23fa58c:	2401      	movs	r4, #1
 23fa58e:	7809      	ldrb	r1, [r1, #0]
 23fa590:	9400      	str	r4, [sp, #0]
 23fa592:	f7ff ffc4 	bl	23fa51e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
 23fa596:	3800      	subs	r0, #0
 23fa598:	bf18      	it	ne
 23fa59a:	2001      	movne	r0, #1
}
 23fa59c:	4240      	negs	r0, r0
 23fa59e:	b002      	add	sp, #8
 23fa5a0:	bd10      	pop	{r4, pc}

023fa5a2 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
 23fa5a2:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
 23fa5a4:	2230      	movs	r2, #48	; 0x30
{
 23fa5a6:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
 23fa5a8:	f10d 0307 	add.w	r3, sp, #7
 23fa5ac:	6981      	ldr	r1, [r0, #24]
 23fa5ae:	f7ff ffec 	bl	23fa58a <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
 23fa5b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fa5b6:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 23fa5ba:	f003 0301 	and.w	r3, r3, #1
 23fa5be:	7023      	strb	r3, [r4, #0]
}
 23fa5c0:	b002      	add	sp, #8
 23fa5c2:	bd10      	pop	{r4, pc}

023fa5c4 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
 23fa5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa5c6:	4605      	mov	r5, r0
 23fa5c8:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
 23fa5ca:	f10d 0107 	add.w	r1, sp, #7
 23fa5ce:	f7ff ffe8 	bl	23fa5a2 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
 23fa5d2:	2231      	movs	r2, #49	; 0x31
 23fa5d4:	4628      	mov	r0, r5
 23fa5d6:	69a9      	ldr	r1, [r5, #24]
 23fa5d8:	f10d 0306 	add.w	r3, sp, #6
 23fa5dc:	f7ff ffd5 	bl	23fa58a <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
 23fa5e0:	b950      	cbnz	r0, 23fa5f8 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
 23fa5e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23fa5e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 23fa5ea:	f003 0301 	and.w	r3, r3, #1
 23fa5ee:	429a      	cmp	r2, r3
			*isDataReady = 1;
 23fa5f0:	bf0a      	itet	eq
 23fa5f2:	2301      	moveq	r3, #1
			*isDataReady = 0;
 23fa5f4:	7020      	strbne	r0, [r4, #0]
			*isDataReady = 1;
 23fa5f6:	7023      	strbeq	r3, [r4, #0]
}
 23fa5f8:	b003      	add	sp, #12
 23fa5fa:	bd30      	pop	{r4, r5, pc}

023fa5fc <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
 23fa5fc:	2300      	movs	r3, #0
{
 23fa5fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fa600:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
 23fa602:	252d      	movs	r5, #45	; 0x2d
 23fa604:	4e1b      	ldr	r6, [pc, #108]	; (23fa674 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
 23fa606:	f88d 3007 	strb.w	r3, [sp, #7]
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 23fa60a:	b2aa      	uxth	r2, r5
 23fa60c:	4620      	mov	r0, r4
 23fa60e:	f816 3b01 	ldrb.w	r3, [r6], #1
 23fa612:	69a1      	ldr	r1, [r4, #24]
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 23fa614:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 23fa616:	f7ff ff58 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 23fa61a:	2d88      	cmp	r5, #136	; 0x88
 23fa61c:	d1f5      	bne.n	23fa60a <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
 23fa61e:	4620      	mov	r0, r4
 23fa620:	f7ff ff65 	bl	23fa4ee <_ZN7VL53L1X20VL53L1X_StartRangingEv>
 23fa624:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
 23fa626:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fa62a:	b963      	cbnz	r3, 23fa646 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
 23fa62c:	4620      	mov	r0, r4
 23fa62e:	f10d 0107 	add.w	r1, sp, #7
		if (timeout++ > 150)
 23fa632:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
 23fa634:	f7ff ffc6 	bl	23fa5c4 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
 23fa638:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fa63c:	d017      	beq.n	23fa66e <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
 23fa63e:	2001      	movs	r0, #1
 23fa640:	f002 fd82 	bl	23fd148 <delay>
	while (dataReady == 0)
 23fa644:	e7ef      	b.n	23fa626 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
 23fa646:	4620      	mov	r0, r4
 23fa648:	f7ff ff4c 	bl	23fa4e4 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
 23fa64c:	4620      	mov	r0, r4
 23fa64e:	f7ff ff53 	bl	23fa4f8 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 23fa652:	2309      	movs	r3, #9
 23fa654:	2208      	movs	r2, #8
 23fa656:	69a1      	ldr	r1, [r4, #24]
 23fa658:	4620      	mov	r0, r4
 23fa65a:	f7ff ff36 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
 23fa65e:	2300      	movs	r3, #0
 23fa660:	220b      	movs	r2, #11
 23fa662:	4620      	mov	r0, r4
 23fa664:	69a1      	ldr	r1, [r4, #24]
 23fa666:	f7ff ff30 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
 23fa66a:	b002      	add	sp, #8
 23fa66c:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
 23fa66e:	f06f 0006 	mvn.w	r0, #6
 23fa672:	e7fa      	b.n	23fa66a <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
 23fa674:	023ff9e9 	.word	0x023ff9e9

023fa678 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
 23fa678:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 23fa67a:	224b      	movs	r2, #75	; 0x4b
 23fa67c:	f10d 0307 	add.w	r3, sp, #7
{
 23fa680:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 23fa682:	6981      	ldr	r1, [r0, #24]
 23fa684:	f7ff ff81 	bl	23fa58a <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
 23fa688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fa68c:	2b14      	cmp	r3, #20
 23fa68e:	d103      	bne.n	23fa698 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
 23fa690:	2301      	movs	r3, #1
		*DM = 2;
 23fa692:	8023      	strh	r3, [r4, #0]
}
 23fa694:	b002      	add	sp, #8
 23fa696:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
 23fa698:	2b0a      	cmp	r3, #10
 23fa69a:	d1fb      	bne.n	23fa694 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
 23fa69c:	2302      	movs	r3, #2
 23fa69e:	e7f8      	b.n	23fa692 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

023fa6a0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
 23fa6a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fa6a2:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
 23fa6a4:	f10d 0106 	add.w	r1, sp, #6
{
 23fa6a8:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
 23fa6aa:	f7ff ffe5 	bl	23fa678 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
 23fa6ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
 23fa6b2:	4606      	mov	r6, r0
	if (DM == 0)
 23fa6b4:	b153      	cbz	r3, 23fa6cc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
 23fa6b6:	2b01      	cmp	r3, #1
 23fa6b8:	d152      	bne.n	23fa760 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
 23fa6ba:	2d32      	cmp	r5, #50	; 0x32
 23fa6bc:	d032      	beq.n	23fa724 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
 23fa6be:	d807      	bhi.n	23fa6d0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
 23fa6c0:	2d14      	cmp	r5, #20
 23fa6c2:	d025      	beq.n	23fa710 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
 23fa6c4:	2d21      	cmp	r5, #33	; 0x21
 23fa6c6:	d02b      	beq.n	23fa720 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
 23fa6c8:	2d0f      	cmp	r5, #15
 23fa6ca:	d012      	beq.n	23fa6f2 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
 23fa6cc:	2601      	movs	r6, #1
 23fa6ce:	e01c      	b.n	23fa70a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
 23fa6d0:	2dc8      	cmp	r5, #200	; 0xc8
 23fa6d2:	d031      	beq.n	23fa738 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
 23fa6d4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 23fa6d8:	d038      	beq.n	23fa74c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
 23fa6da:	2d64      	cmp	r5, #100	; 0x64
 23fa6dc:	d1f6      	bne.n	23fa6cc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa6de:	f240 23e1 	movw	r3, #737	; 0x2e1
 23fa6e2:	225e      	movs	r2, #94	; 0x5e
 23fa6e4:	4620      	mov	r0, r4
 23fa6e6:	69a1      	ldr	r1, [r4, #24]
 23fa6e8:	f7ff ff0b 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa6ec:	f44f 7362 	mov.w	r3, #904	; 0x388
 23fa6f0:	e006      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa6f2:	231d      	movs	r3, #29
 23fa6f4:	225e      	movs	r2, #94	; 0x5e
 23fa6f6:	4620      	mov	r0, r4
 23fa6f8:	69a1      	ldr	r1, [r4, #24]
 23fa6fa:	f7ff ff02 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa6fe:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa700:	2261      	movs	r2, #97	; 0x61
 23fa702:	4620      	mov	r0, r4
 23fa704:	69a1      	ldr	r1, [r4, #24]
 23fa706:	f7ff fefc 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
 23fa70a:	4630      	mov	r0, r6
 23fa70c:	b002      	add	sp, #8
 23fa70e:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa710:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa712:	225e      	movs	r2, #94	; 0x5e
 23fa714:	4620      	mov	r0, r4
 23fa716:	69a1      	ldr	r1, [r4, #24]
 23fa718:	f7ff fef3 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa71c:	236e      	movs	r3, #110	; 0x6e
 23fa71e:	e7ef      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa720:	23d6      	movs	r3, #214	; 0xd6
 23fa722:	e7f6      	b.n	23fa712 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa724:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 23fa728:	225e      	movs	r2, #94	; 0x5e
 23fa72a:	4620      	mov	r0, r4
 23fa72c:	69a1      	ldr	r1, [r4, #24]
 23fa72e:	f7ff fee8 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa732:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 23fa736:	e7e3      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa738:	f240 33e1 	movw	r3, #993	; 0x3e1
 23fa73c:	225e      	movs	r2, #94	; 0x5e
 23fa73e:	4620      	mov	r0, r4
 23fa740:	69a1      	ldr	r1, [r4, #24]
 23fa742:	f7ff fede 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa746:	f240 4396 	movw	r3, #1174	; 0x496
 23fa74a:	e7d9      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa74c:	f240 5391 	movw	r3, #1425	; 0x591
 23fa750:	225e      	movs	r2, #94	; 0x5e
 23fa752:	4620      	mov	r0, r4
 23fa754:	69a1      	ldr	r1, [r4, #24]
 23fa756:	f7ff fed4 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa75a:	f240 53c1 	movw	r3, #1473	; 0x5c1
 23fa75e:	e7cf      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
 23fa760:	2d64      	cmp	r5, #100	; 0x64
 23fa762:	d027      	beq.n	23fa7b4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
 23fa764:	d80d      	bhi.n	23fa782 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
 23fa766:	2d21      	cmp	r5, #33	; 0x21
 23fa768:	d01a      	beq.n	23fa7a0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
 23fa76a:	2d32      	cmp	r5, #50	; 0x32
 23fa76c:	d01a      	beq.n	23fa7a4 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
 23fa76e:	2d14      	cmp	r5, #20
 23fa770:	d1ac      	bne.n	23fa6cc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa772:	231e      	movs	r3, #30
 23fa774:	225e      	movs	r2, #94	; 0x5e
 23fa776:	4620      	mov	r0, r4
 23fa778:	69a1      	ldr	r1, [r4, #24]
 23fa77a:	f7ff fec2 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa77e:	2322      	movs	r3, #34	; 0x22
 23fa780:	e7be      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
 23fa782:	2dc8      	cmp	r5, #200	; 0xc8
 23fa784:	d020      	beq.n	23fa7c8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
 23fa786:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 23fa78a:	d19f      	bne.n	23fa6cc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa78c:	f240 438f 	movw	r3, #1167	; 0x48f
 23fa790:	225e      	movs	r2, #94	; 0x5e
 23fa792:	4620      	mov	r0, r4
 23fa794:	69a1      	ldr	r1, [r4, #24]
 23fa796:	f7ff feb4 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa79a:	f240 43a4 	movw	r3, #1188	; 0x4a4
 23fa79e:	e7af      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7a0:	2360      	movs	r3, #96	; 0x60
 23fa7a2:	e7b6      	b.n	23fa712 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7a4:	23ad      	movs	r3, #173	; 0xad
 23fa7a6:	225e      	movs	r2, #94	; 0x5e
 23fa7a8:	4620      	mov	r0, r4
 23fa7aa:	69a1      	ldr	r1, [r4, #24]
 23fa7ac:	f7ff fea9 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa7b0:	23c6      	movs	r3, #198	; 0xc6
 23fa7b2:	e7a5      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7b4:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 23fa7b8:	225e      	movs	r2, #94	; 0x5e
 23fa7ba:	4620      	mov	r0, r4
 23fa7bc:	69a1      	ldr	r1, [r4, #24]
 23fa7be:	f7ff fea0 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa7c2:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 23fa7c6:	e79b      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7c8:	f240 23d9 	movw	r3, #729	; 0x2d9
 23fa7cc:	225e      	movs	r2, #94	; 0x5e
 23fa7ce:	4620      	mov	r0, r4
 23fa7d0:	69a1      	ldr	r1, [r4, #24]
 23fa7d2:	f7ff fe96 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa7d6:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 23fa7da:	e791      	b.n	23fa700 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

023fa7dc <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
 23fa7dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fa7de:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
 23fa7e0:	2300      	movs	r3, #0
 23fa7e2:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
 23fa7e6:	2302      	movs	r3, #2
 23fa7e8:	7809      	ldrb	r1, [r1, #0]
 23fa7ea:	9300      	str	r3, [sp, #0]
 23fa7ec:	ab03      	add	r3, sp, #12
 23fa7ee:	f7ff fe96 	bl	23fa51e <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
 23fa7f2:	b930      	cbnz	r0, 23fa802 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
 23fa7f4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 23fa7f8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 23fa7fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 23fa800:	8023      	strh	r3, [r4, #0]
}
 23fa802:	b004      	add	sp, #16
 23fa804:	bd10      	pop	{r4, pc}

023fa806 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
 23fa806:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 23fa808:	225e      	movs	r2, #94	; 0x5e
 23fa80a:	f10d 0306 	add.w	r3, sp, #6
{
 23fa80e:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 23fa810:	6981      	ldr	r1, [r0, #24]
 23fa812:	f7ff ffe3 	bl	23fa7dc <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
 23fa816:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fa81a:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 23fa81e:	d034      	beq.n	23fa88a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
 23fa820:	d810      	bhi.n	23fa844 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
 23fa822:	2b51      	cmp	r3, #81	; 0x51
 23fa824:	d02f      	beq.n	23fa886 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
 23fa826:	d805      	bhi.n	23fa834 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
 23fa828:	2b1d      	cmp	r3, #29
 23fa82a:	d028      	beq.n	23fa87e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
 23fa82c:	2b1e      	cmp	r3, #30
 23fa82e:	d02a      	beq.n	23fa886 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
 23fa830:	2300      	movs	r3, #0
 23fa832:	e025      	b.n	23fa880 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fa834:	2bad      	cmp	r3, #173	; 0xad
 23fa836:	d028      	beq.n	23fa88a <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
 23fa838:	2bd6      	cmp	r3, #214	; 0xd6
 23fa83a:	d001      	beq.n	23fa840 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
 23fa83c:	2b60      	cmp	r3, #96	; 0x60
 23fa83e:	d1f7      	bne.n	23fa830 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
 23fa840:	2321      	movs	r3, #33	; 0x21
 23fa842:	e01d      	b.n	23fa880 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fa844:	f240 32e1 	movw	r2, #993	; 0x3e1
 23fa848:	4293      	cmp	r3, r2
 23fa84a:	d020      	beq.n	23fa88e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
 23fa84c:	d80c      	bhi.n	23fa868 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
 23fa84e:	f240 22d9 	movw	r2, #729	; 0x2d9
 23fa852:	4293      	cmp	r3, r2
 23fa854:	d01b      	beq.n	23fa88e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
 23fa856:	f240 22e1 	movw	r2, #737	; 0x2e1
 23fa85a:	4293      	cmp	r3, r2
 23fa85c:	d002      	beq.n	23fa864 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
 23fa85e:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 23fa862:	d1e5      	bne.n	23fa830 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
 23fa864:	2364      	movs	r3, #100	; 0x64
 23fa866:	e00b      	b.n	23fa880 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fa868:	f240 428f 	movw	r2, #1167	; 0x48f
 23fa86c:	4293      	cmp	r3, r2
 23fa86e:	d003      	beq.n	23fa878 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
 23fa870:	f240 5291 	movw	r2, #1425	; 0x591
 23fa874:	4293      	cmp	r3, r2
 23fa876:	d1db      	bne.n	23fa830 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
 23fa878:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 23fa87c:	e000      	b.n	23fa880 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
 23fa87e:	230f      	movs	r3, #15
		*pTimingBudget = 0;
 23fa880:	8023      	strh	r3, [r4, #0]
}
 23fa882:	b002      	add	sp, #8
 23fa884:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
 23fa886:	2314      	movs	r3, #20
 23fa888:	e7fa      	b.n	23fa880 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
 23fa88a:	2332      	movs	r3, #50	; 0x32
 23fa88c:	e7f8      	b.n	23fa880 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
 23fa88e:	23c8      	movs	r3, #200	; 0xc8
 23fa890:	e7f6      	b.n	23fa880 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

023fa892 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
 23fa892:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa894:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
 23fa896:	f10d 0106 	add.w	r1, sp, #6
{
 23fa89a:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
 23fa89c:	f7ff ffb3 	bl	23fa806 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
 23fa8a0:	2d01      	cmp	r5, #1
 23fa8a2:	d008      	beq.n	23fa8b6 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
 23fa8a4:	2d02      	cmp	r5, #2
 23fa8a6:	d02d      	beq.n	23fa904 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
 23fa8a8:	4620      	mov	r0, r4
 23fa8aa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 23fa8ae:	f7ff fef7 	bl	23fa6a0 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
 23fa8b2:	b003      	add	sp, #12
 23fa8b4:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 23fa8b6:	2314      	movs	r3, #20
 23fa8b8:	224b      	movs	r2, #75	; 0x4b
 23fa8ba:	69a1      	ldr	r1, [r4, #24]
 23fa8bc:	4620      	mov	r0, r4
 23fa8be:	f7ff fe04 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 23fa8c2:	2307      	movs	r3, #7
 23fa8c4:	2260      	movs	r2, #96	; 0x60
 23fa8c6:	69a1      	ldr	r1, [r4, #24]
 23fa8c8:	4620      	mov	r0, r4
 23fa8ca:	f7ff fdfe 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 23fa8ce:	2305      	movs	r3, #5
 23fa8d0:	2263      	movs	r2, #99	; 0x63
 23fa8d2:	69a1      	ldr	r1, [r4, #24]
 23fa8d4:	4620      	mov	r0, r4
 23fa8d6:	f7ff fdf8 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 23fa8da:	2338      	movs	r3, #56	; 0x38
 23fa8dc:	2269      	movs	r2, #105	; 0x69
 23fa8de:	69a1      	ldr	r1, [r4, #24]
 23fa8e0:	4620      	mov	r0, r4
 23fa8e2:	f7ff fdf2 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
 23fa8e6:	f240 7305 	movw	r3, #1797	; 0x705
 23fa8ea:	2278      	movs	r2, #120	; 0x78
 23fa8ec:	4620      	mov	r0, r4
 23fa8ee:	69a1      	ldr	r1, [r4, #24]
 23fa8f0:	f7ff fe07 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 23fa8f4:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 23fa8f8:	227a      	movs	r2, #122	; 0x7a
 23fa8fa:	4620      	mov	r0, r4
 23fa8fc:	69a1      	ldr	r1, [r4, #24]
 23fa8fe:	f7ff fe00 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
 23fa902:	e7d1      	b.n	23fa8a8 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 23fa904:	230a      	movs	r3, #10
 23fa906:	224b      	movs	r2, #75	; 0x4b
 23fa908:	69a1      	ldr	r1, [r4, #24]
 23fa90a:	4620      	mov	r0, r4
 23fa90c:	f7ff fddd 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 23fa910:	230f      	movs	r3, #15
 23fa912:	2260      	movs	r2, #96	; 0x60
 23fa914:	69a1      	ldr	r1, [r4, #24]
 23fa916:	4620      	mov	r0, r4
 23fa918:	f7ff fdd7 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 23fa91c:	230d      	movs	r3, #13
 23fa91e:	2263      	movs	r2, #99	; 0x63
 23fa920:	69a1      	ldr	r1, [r4, #24]
 23fa922:	4620      	mov	r0, r4
 23fa924:	f7ff fdd1 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 23fa928:	23b8      	movs	r3, #184	; 0xb8
 23fa92a:	2269      	movs	r2, #105	; 0x69
 23fa92c:	69a1      	ldr	r1, [r4, #24]
 23fa92e:	4620      	mov	r0, r4
 23fa930:	f7ff fdcb 	bl	23fa4ca <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
 23fa934:	f640 730d 	movw	r3, #3853	; 0xf0d
 23fa938:	2278      	movs	r2, #120	; 0x78
 23fa93a:	4620      	mov	r0, r4
 23fa93c:	69a1      	ldr	r1, [r4, #24]
 23fa93e:	f7ff fde0 	bl	23fa502 <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 23fa942:	f640 630e 	movw	r3, #3598	; 0xe0e
 23fa946:	e7d7      	b.n	23fa8f8 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>

023fa948 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
	uint16_t tmp = 0;
 23fa948:	2300      	movs	r3, #0
{
 23fa94a:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 23fa94c:	f240 120f 	movw	r2, #271	; 0x10f
{
 23fa950:	460c      	mov	r4, r1
	uint16_t tmp = 0;
 23fa952:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 23fa956:	6981      	ldr	r1, [r0, #24]
 23fa958:	f10d 0306 	add.w	r3, sp, #6
 23fa95c:	f7ff ff3e 	bl	23fa7dc <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
 23fa960:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fa964:	8023      	strh	r3, [r4, #0]
}
 23fa966:	b002      	add	sp, #8
 23fa968:	bd10      	pop	{r4, pc}

023fa96a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
 23fa96a:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
 23fa96c:	2296      	movs	r2, #150	; 0x96
{
 23fa96e:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
 23fa970:	f10d 0306 	add.w	r3, sp, #6
 23fa974:	6981      	ldr	r1, [r0, #24]
 23fa976:	f7ff ff31 	bl	23fa7dc <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
 23fa97a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fa97e:	8023      	strh	r3, [r4, #0]
}
 23fa980:	b002      	add	sp, #8
 23fa982:	bd10      	pop	{r4, pc}

023fa984 <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
 23fa984:	4770      	bx	lr

023fa986 <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
 23fa986:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
 23fa988:	6880      	ldr	r0, [r0, #8]
 23fa98a:	2800      	cmp	r0, #0
 23fa98c:	db03      	blt.n	23fa996 <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
 23fa98e:	2100      	movs	r1, #0
 23fa990:	b280      	uxth	r0, r0
 23fa992:	f003 fc5a 	bl	23fe24a <digitalWrite>
       }
       delay(10);
    }
 23fa996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
 23fa99a:	200a      	movs	r0, #10
 23fa99c:	f002 bbd4 	b.w	23fd148 <delay>

023fa9a0 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
 23fa9a0:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
 23fa9a2:	6880      	ldr	r0, [r0, #8]
 23fa9a4:	2800      	cmp	r0, #0
 23fa9a6:	db03      	blt.n	23fa9b0 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
 23fa9a8:	2101      	movs	r1, #1
 23fa9aa:	b280      	uxth	r0, r0
 23fa9ac:	f003 fc4d 	bl	23fe24a <digitalWrite>
    }
 23fa9b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
 23fa9b4:	200a      	movs	r0, #10
 23fa9b6:	f002 bbc7 	b.w	23fd148 <delay>

023fa9ba <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
 23fa9ba:	b510      	push	{r4, lr}
 23fa9bc:	4604      	mov	r4, r0
 23fa9be:	211c      	movs	r1, #28
 23fa9c0:	f7fe f867 	bl	23f8a92 <_ZdlPvj>
 23fa9c4:	4620      	mov	r0, r4
 23fa9c6:	bd10      	pop	{r4, pc}

023fa9c8 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
 23fa9c8:	b513      	push	{r0, r1, r4, lr}
 23fa9ca:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
 23fa9cc:	f10d 0106 	add.w	r1, sp, #6
 23fa9d0:	f7ff ffcb 	bl	23fa96a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
 23fa9d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fa9d8:	6023      	str	r3, [r4, #0]
	return status;
    }
 23fa9da:	b002      	add	sp, #8
 23fa9dc:	bd10      	pop	{r4, pc}

023fa9de <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
 23fa9de:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
 23fa9e0:	f10d 0106 	add.w	r1, sp, #6
 23fa9e4:	f7ff ffb0 	bl	23fa948 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	}
 23fa9e8:	f64e 63ac 	movw	r3, #61100	; 0xeeac
		if (sensorId == 0xEEAC)
 23fa9ec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
 23fa9f0:	1ac0      	subs	r0, r0, r3
 23fa9f2:	bf18      	it	ne
 23fa9f4:	f04f 30ff 	movne.w	r0, #4294967295
 23fa9f8:	b003      	add	sp, #12
 23fa9fa:	f85d fb04 	ldr.w	pc, [sp], #4

023fa9fe <_ZN7VL53L1X4InitEv>:
    virtual int Init()
 23fa9fe:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
 23faa00:	f7ff fdfc 	bl	23fa5fc <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
 23faa04:	bd08      	pop	{r3, pc}
	...

023faa08 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23faa08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23faa0c:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
 23faa10:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23faa14:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
 23faa18:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23faa1a:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23faa1c:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23faa1e:	460f      	mov	r7, r1
 23faa20:	4616      	mov	r6, r2
 23faa22:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23faa24:	f7fe f82f 	bl	23f8a86 <_Znwj>
 23faa28:	4604      	mov	r4, r0
 23faa2a:	b180      	cbz	r0, 23faa4e <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23faa2c:	4b0a      	ldr	r3, [pc, #40]	; (23faa58 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       if(gpio0 >= 0)
 23faa2e:	2e00      	cmp	r6, #0
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23faa30:	e9c0 3700 	strd	r3, r7, [r0]
       Device = &MyDevice;
 23faa34:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23faa38:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
 23faa3c:	f880 9010 	strb.w	r9, [r0, #16]
       MyDevice.I2cHandle = i2c;
 23faa40:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
 23faa42:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
 23faa44:	db03      	blt.n	23faa4e <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
 23faa46:	2101      	movs	r1, #1
 23faa48:	b2b0      	uxth	r0, r6
 23faa4a:	f003 fbed 	bl	23fe228 <pinMode>
}
 23faa4e:	4628      	mov	r0, r5
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23faa50:	612c      	str	r4, [r5, #16]
}
 23faa52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23faa56:	bf00      	nop
 23faa58:	023ffa4c 	.word	0x023ffa4c

023faa5c <_ZN10SFEVL53L1X7checkIDEv>:
}

/*Checks the ID of the device, returns true if ID is correct*/

bool SFEVL53L1X::checkID()
{
 23faa5c:	b507      	push	{r0, r1, r2, lr}
	uint16_t sensorId;
	_device->VL53L1X_GetSensorId(&sensorId);
 23faa5e:	f10d 0106 	add.w	r1, sp, #6
 23faa62:	6900      	ldr	r0, [r0, #16]
 23faa64:	f7ff ff70 	bl	23fa948 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	if (sensorId == 0xEACC)
		return true;
	return false;
}
 23faa68:	f64e 23cc 	movw	r3, #60108	; 0xeacc
	if (sensorId == 0xEACC)
 23faa6c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 23faa70:	1ac3      	subs	r3, r0, r3
 23faa72:	4258      	negs	r0, r3
 23faa74:	4158      	adcs	r0, r3
 23faa76:	b003      	add	sp, #12
 23faa78:	f85d fb04 	ldr.w	pc, [sp], #4

023faa7c <_ZN10SFEVL53L1X5beginEv>:
{
 23faa7c:	b510      	push	{r4, lr}
 23faa7e:	4604      	mov	r4, r0
	if (checkID() == false)
 23faa80:	f7ff ffec 	bl	23faa5c <_ZN10SFEVL53L1X7checkIDEv>
 23faa84:	b130      	cbz	r0, 23faa94 <_ZN10SFEVL53L1X5beginEv+0x18>
	return _device->VL53L1X_SensorInit();
 23faa86:	6920      	ldr	r0, [r4, #16]
 23faa88:	f7ff fdb8 	bl	23fa5fc <_ZN7VL53L1X18VL53L1X_SensorInitEv>
 23faa8c:	3800      	subs	r0, #0
 23faa8e:	bf18      	it	ne
 23faa90:	2001      	movne	r0, #1
}
 23faa92:	bd10      	pop	{r4, pc}
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);
 23faa94:	2001      	movs	r0, #1
 23faa96:	e7fc      	b.n	23faa92 <_ZN10SFEVL53L1X5beginEv+0x16>

023faa98 <_ZN10SFEVL53L1X14clearInterruptEv>:
	return _i2cAddress;
}

void SFEVL53L1X::clearInterrupt()
{
	_device->VL53L1X_ClearInterrupt();
 23faa98:	6900      	ldr	r0, [r0, #16]
 23faa9a:	f7ff bd23 	b.w	23fa4e4 <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>

023faa9e <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
 23faa9e:	6900      	ldr	r0, [r0, #16]
 23faaa0:	f7ff bd25 	b.w	23fa4ee <_ZN7VL53L1X20VL53L1X_StartRangingEv>

023faaa4 <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
 23faaa4:	6900      	ldr	r0, [r0, #16]
 23faaa6:	f7ff bd27 	b.w	23fa4f8 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

023faaaa <_ZN10SFEVL53L1X17checkForDataReadyEv>:
}

bool SFEVL53L1X::checkForDataReady()
{
 23faaaa:	b507      	push	{r0, r1, r2, lr}
	uint8_t dataReady;
	_device->VL53L1X_CheckForDataReady(&dataReady);
 23faaac:	f10d 0107 	add.w	r1, sp, #7
 23faab0:	6900      	ldr	r0, [r0, #16]
 23faab2:	f7ff fd87 	bl	23fa5c4 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
	return (bool)dataReady;
 23faab6:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 23faaba:	3800      	subs	r0, #0
 23faabc:	bf18      	it	ne
 23faabe:	2001      	movne	r0, #1
 23faac0:	b003      	add	sp, #12
 23faac2:	f85d fb04 	ldr.w	pc, [sp], #4

023faac6 <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
 23faac6:	2102      	movs	r1, #2
 23faac8:	6900      	ldr	r0, [r0, #16]
 23faaca:	f7ff bee2 	b.w	23fa892 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

023faace <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
 23faace:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
 23faad0:	f10d 0106 	add.w	r1, sp, #6
 23faad4:	6900      	ldr	r0, [r0, #16]
 23faad6:	f7ff ff48 	bl	23fa96a <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
 23faada:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 23faade:	b003      	add	sp, #12
 23faae0:	f85d fb04 	ldr.w	pc, [sp], #4

023faae4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23faae4:	b509      	push	{r0, r3, lr}
 23faae6:	4804      	ldr	r0, [pc, #16]	; (23faaf8 <netdb_freeaddrinfo+0x14>)
 23faae8:	6800      	ldr	r0, [r0, #0]
 23faaea:	4b04      	ldr	r3, [pc, #16]	; (23faafc <netdb_freeaddrinfo+0x18>)
 23faaec:	4403      	add	r3, r0
 23faaee:	681b      	ldr	r3, [r3, #0]
 23faaf0:	689b      	ldr	r3, [r3, #8]
 23faaf2:	9302      	str	r3, [sp, #8]
 23faaf4:	bd09      	pop	{r0, r3, pc}
 23faaf6:	0000      	.short	0x0000
 23faaf8:	1007ad38 	.word	0x1007ad38
 23faafc:	00000050 	.word	0x00000050

023fab00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fab00:	b509      	push	{r0, r3, lr}
 23fab02:	4804      	ldr	r0, [pc, #16]	; (23fab14 <netdb_getaddrinfo+0x14>)
 23fab04:	6800      	ldr	r0, [r0, #0]
 23fab06:	4b04      	ldr	r3, [pc, #16]	; (23fab18 <netdb_getaddrinfo+0x18>)
 23fab08:	4403      	add	r3, r0
 23fab0a:	681b      	ldr	r3, [r3, #0]
 23fab0c:	68db      	ldr	r3, [r3, #12]
 23fab0e:	9302      	str	r3, [sp, #8]
 23fab10:	bd09      	pop	{r0, r3, pc}
 23fab12:	0000      	.short	0x0000
 23fab14:	1007ad38 	.word	0x1007ad38
 23fab18:	00000050 	.word	0x00000050

023fab1c <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23fab1c:	b509      	push	{r0, r3, lr}
 23fab1e:	4804      	ldr	r0, [pc, #16]	; (23fab30 <hal_pin_map+0x14>)
 23fab20:	6800      	ldr	r0, [r0, #0]
 23fab22:	4b04      	ldr	r3, [pc, #16]	; (23fab34 <hal_pin_map+0x18>)
 23fab24:	4403      	add	r3, r0
 23fab26:	681b      	ldr	r3, [r3, #0]
 23fab28:	681b      	ldr	r3, [r3, #0]
 23fab2a:	9302      	str	r3, [sp, #8]
 23fab2c:	bd09      	pop	{r0, r3, pc}
 23fab2e:	0000      	.short	0x0000
 23fab30:	1007ad38 	.word	0x1007ad38
 23fab34:	00000014 	.word	0x00000014

023fab38 <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fab38:	b509      	push	{r0, r3, lr}
 23fab3a:	4804      	ldr	r0, [pc, #16]	; (23fab4c <hal_gpio_mode+0x14>)
 23fab3c:	6800      	ldr	r0, [r0, #0]
 23fab3e:	4b04      	ldr	r3, [pc, #16]	; (23fab50 <hal_gpio_mode+0x18>)
 23fab40:	4403      	add	r3, r0
 23fab42:	681b      	ldr	r3, [r3, #0]
 23fab44:	689b      	ldr	r3, [r3, #8]
 23fab46:	9302      	str	r3, [sp, #8]
 23fab48:	bd09      	pop	{r0, r3, pc}
 23fab4a:	0000      	.short	0x0000
 23fab4c:	1007ad38 	.word	0x1007ad38
 23fab50:	00000014 	.word	0x00000014

023fab54 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fab54:	b509      	push	{r0, r3, lr}
 23fab56:	4804      	ldr	r0, [pc, #16]	; (23fab68 <hal_gpio_get_mode+0x14>)
 23fab58:	6800      	ldr	r0, [r0, #0]
 23fab5a:	4b04      	ldr	r3, [pc, #16]	; (23fab6c <hal_gpio_get_mode+0x18>)
 23fab5c:	4403      	add	r3, r0
 23fab5e:	681b      	ldr	r3, [r3, #0]
 23fab60:	68db      	ldr	r3, [r3, #12]
 23fab62:	9302      	str	r3, [sp, #8]
 23fab64:	bd09      	pop	{r0, r3, pc}
 23fab66:	0000      	.short	0x0000
 23fab68:	1007ad38 	.word	0x1007ad38
 23fab6c:	00000014 	.word	0x00000014

023fab70 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fab70:	b509      	push	{r0, r3, lr}
 23fab72:	4804      	ldr	r0, [pc, #16]	; (23fab84 <hal_gpio_write+0x14>)
 23fab74:	6800      	ldr	r0, [r0, #0]
 23fab76:	4b04      	ldr	r3, [pc, #16]	; (23fab88 <hal_gpio_write+0x18>)
 23fab78:	4403      	add	r3, r0
 23fab7a:	681b      	ldr	r3, [r3, #0]
 23fab7c:	691b      	ldr	r3, [r3, #16]
 23fab7e:	9302      	str	r3, [sp, #8]
 23fab80:	bd09      	pop	{r0, r3, pc}
 23fab82:	0000      	.short	0x0000
 23fab84:	1007ad38 	.word	0x1007ad38
 23fab88:	00000014 	.word	0x00000014

023fab8c <hal_interrupt_attach>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
 23fab8c:	b509      	push	{r0, r3, lr}
 23fab8e:	4804      	ldr	r0, [pc, #16]	; (23faba0 <hal_interrupt_attach+0x14>)
 23fab90:	6800      	ldr	r0, [r0, #0]
 23fab92:	4b04      	ldr	r3, [pc, #16]	; (23faba4 <hal_interrupt_attach+0x18>)
 23fab94:	4403      	add	r3, r0
 23fab96:	681b      	ldr	r3, [r3, #0]
 23fab98:	699b      	ldr	r3, [r3, #24]
 23fab9a:	9302      	str	r3, [sp, #8]
 23fab9c:	bd09      	pop	{r0, r3, pc}
 23fab9e:	0000      	.short	0x0000
 23faba0:	1007ad38 	.word	0x1007ad38
 23faba4:	00000014 	.word	0x00000014

023faba8 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
 23faba8:	b509      	push	{r0, r3, lr}
 23fabaa:	4804      	ldr	r0, [pc, #16]	; (23fabbc <hal_interrupt_detach+0x14>)
 23fabac:	6800      	ldr	r0, [r0, #0]
 23fabae:	4b04      	ldr	r3, [pc, #16]	; (23fabc0 <hal_interrupt_detach+0x18>)
 23fabb0:	4403      	add	r3, r0
 23fabb2:	681b      	ldr	r3, [r3, #0]
 23fabb4:	69db      	ldr	r3, [r3, #28]
 23fabb6:	9302      	str	r3, [sp, #8]
 23fabb8:	bd09      	pop	{r0, r3, pc}
 23fabba:	0000      	.short	0x0000
 23fabbc:	1007ad38 	.word	0x1007ad38
 23fabc0:	00000014 	.word	0x00000014

023fabc4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fabc4:	b509      	push	{r0, r3, lr}
 23fabc6:	4804      	ldr	r0, [pc, #16]	; (23fabd8 <HAL_RNG_GetRandomNumber+0x14>)
 23fabc8:	6800      	ldr	r0, [r0, #0]
 23fabca:	4b04      	ldr	r3, [pc, #16]	; (23fabdc <HAL_RNG_GetRandomNumber+0x18>)
 23fabcc:	4403      	add	r3, r0
 23fabce:	681b      	ldr	r3, [r3, #0]
 23fabd0:	685b      	ldr	r3, [r3, #4]
 23fabd2:	9302      	str	r3, [sp, #8]
 23fabd4:	bd09      	pop	{r0, r3, pc}
 23fabd6:	0000      	.short	0x0000
 23fabd8:	1007ad38 	.word	0x1007ad38
 23fabdc:	00000000 	.word	0x00000000

023fabe0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fabe0:	b509      	push	{r0, r3, lr}
 23fabe2:	4804      	ldr	r0, [pc, #16]	; (23fabf4 <HAL_Delay_Microseconds+0x14>)
 23fabe4:	6800      	ldr	r0, [r0, #0]
 23fabe6:	4b04      	ldr	r3, [pc, #16]	; (23fabf8 <HAL_Delay_Microseconds+0x18>)
 23fabe8:	4403      	add	r3, r0
 23fabea:	681b      	ldr	r3, [r3, #0]
 23fabec:	68db      	ldr	r3, [r3, #12]
 23fabee:	9302      	str	r3, [sp, #8]
 23fabf0:	bd09      	pop	{r0, r3, pc}
 23fabf2:	0000      	.short	0x0000
 23fabf4:	1007ad38 	.word	0x1007ad38
 23fabf8:	00000000 	.word	0x00000000

023fabfc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fabfc:	b509      	push	{r0, r3, lr}
 23fabfe:	4804      	ldr	r0, [pc, #16]	; (23fac10 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fac00:	6800      	ldr	r0, [r0, #0]
 23fac02:	4b04      	ldr	r3, [pc, #16]	; (23fac14 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fac04:	4403      	add	r3, r0
 23fac06:	681b      	ldr	r3, [r3, #0]
 23fac08:	695b      	ldr	r3, [r3, #20]
 23fac0a:	9302      	str	r3, [sp, #8]
 23fac0c:	bd09      	pop	{r0, r3, pc}
 23fac0e:	0000      	.short	0x0000
 23fac10:	1007ad38 	.word	0x1007ad38
 23fac14:	00000000 	.word	0x00000000

023fac18 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fac18:	b509      	push	{r0, r3, lr}
 23fac1a:	4804      	ldr	r0, [pc, #16]	; (23fac2c <hal_timer_millis+0x14>)
 23fac1c:	6800      	ldr	r0, [r0, #0]
 23fac1e:	4b04      	ldr	r3, [pc, #16]	; (23fac30 <hal_timer_millis+0x18>)
 23fac20:	4403      	add	r3, r0
 23fac22:	681b      	ldr	r3, [r3, #0]
 23fac24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fac26:	9302      	str	r3, [sp, #8]
 23fac28:	bd09      	pop	{r0, r3, pc}
 23fac2a:	0000      	.short	0x0000
 23fac2c:	1007ad38 	.word	0x1007ad38
 23fac30:	00000000 	.word	0x00000000

023fac34 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
 23fac34:	b509      	push	{r0, r3, lr}
 23fac36:	4804      	ldr	r0, [pc, #16]	; (23fac48 <_open+0x14>)
 23fac38:	6800      	ldr	r0, [r0, #0]
 23fac3a:	4b04      	ldr	r3, [pc, #16]	; (23fac4c <_open+0x18>)
 23fac3c:	4403      	add	r3, r0
 23fac3e:	681b      	ldr	r3, [r3, #0]
 23fac40:	681b      	ldr	r3, [r3, #0]
 23fac42:	9302      	str	r3, [sp, #8]
 23fac44:	bd09      	pop	{r0, r3, pc}
 23fac46:	0000      	.short	0x0000
 23fac48:	1007ad38 	.word	0x1007ad38
 23fac4c:	00000064 	.word	0x00000064

023fac50 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
 23fac50:	b509      	push	{r0, r3, lr}
 23fac52:	4804      	ldr	r0, [pc, #16]	; (23fac64 <_write+0x14>)
 23fac54:	6800      	ldr	r0, [r0, #0]
 23fac56:	4b04      	ldr	r3, [pc, #16]	; (23fac68 <_write+0x18>)
 23fac58:	4403      	add	r3, r0
 23fac5a:	681b      	ldr	r3, [r3, #0]
 23fac5c:	685b      	ldr	r3, [r3, #4]
 23fac5e:	9302      	str	r3, [sp, #8]
 23fac60:	bd09      	pop	{r0, r3, pc}
 23fac62:	0000      	.short	0x0000
 23fac64:	1007ad38 	.word	0x1007ad38
 23fac68:	00000064 	.word	0x00000064

023fac6c <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
 23fac6c:	b509      	push	{r0, r3, lr}
 23fac6e:	4804      	ldr	r0, [pc, #16]	; (23fac80 <_read+0x14>)
 23fac70:	6800      	ldr	r0, [r0, #0]
 23fac72:	4b04      	ldr	r3, [pc, #16]	; (23fac84 <_read+0x18>)
 23fac74:	4403      	add	r3, r0
 23fac76:	681b      	ldr	r3, [r3, #0]
 23fac78:	689b      	ldr	r3, [r3, #8]
 23fac7a:	9302      	str	r3, [sp, #8]
 23fac7c:	bd09      	pop	{r0, r3, pc}
 23fac7e:	0000      	.short	0x0000
 23fac80:	1007ad38 	.word	0x1007ad38
 23fac84:	00000064 	.word	0x00000064

023fac88 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
 23fac88:	b509      	push	{r0, r3, lr}
 23fac8a:	4804      	ldr	r0, [pc, #16]	; (23fac9c <_close+0x14>)
 23fac8c:	6800      	ldr	r0, [r0, #0]
 23fac8e:	4b04      	ldr	r3, [pc, #16]	; (23faca0 <_close+0x18>)
 23fac90:	4403      	add	r3, r0
 23fac92:	681b      	ldr	r3, [r3, #0]
 23fac94:	68db      	ldr	r3, [r3, #12]
 23fac96:	9302      	str	r3, [sp, #8]
 23fac98:	bd09      	pop	{r0, r3, pc}
 23fac9a:	0000      	.short	0x0000
 23fac9c:	1007ad38 	.word	0x1007ad38
 23faca0:	00000064 	.word	0x00000064

023faca4 <_lseek>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
 23faca4:	b509      	push	{r0, r3, lr}
 23faca6:	4804      	ldr	r0, [pc, #16]	; (23facb8 <_lseek+0x14>)
 23faca8:	6800      	ldr	r0, [r0, #0]
 23facaa:	4b04      	ldr	r3, [pc, #16]	; (23facbc <_lseek+0x18>)
 23facac:	4403      	add	r3, r0
 23facae:	681b      	ldr	r3, [r3, #0]
 23facb0:	6a1b      	ldr	r3, [r3, #32]
 23facb2:	9302      	str	r3, [sp, #8]
 23facb4:	bd09      	pop	{r0, r3, pc}
 23facb6:	0000      	.short	0x0000
 23facb8:	1007ad38 	.word	0x1007ad38
 23facbc:	00000064 	.word	0x00000064

023facc0 <_unlink>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
 23facc0:	b509      	push	{r0, r3, lr}
 23facc2:	4804      	ldr	r0, [pc, #16]	; (23facd4 <_unlink+0x14>)
 23facc4:	6800      	ldr	r0, [r0, #0]
 23facc6:	4b04      	ldr	r3, [pc, #16]	; (23facd8 <_unlink+0x18>)
 23facc8:	4403      	add	r3, r0
 23facca:	681b      	ldr	r3, [r3, #0]
 23faccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23facce:	9302      	str	r3, [sp, #8]
 23facd0:	bd09      	pop	{r0, r3, pc}
 23facd2:	0000      	.short	0x0000
 23facd4:	1007ad38 	.word	0x1007ad38
 23facd8:	00000064 	.word	0x00000064

023facdc <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
 23facdc:	b509      	push	{r0, r3, lr}
 23facde:	4804      	ldr	r0, [pc, #16]	; (23facf0 <opendir+0x14>)
 23face0:	6800      	ldr	r0, [r0, #0]
 23face2:	4b04      	ldr	r3, [pc, #16]	; (23facf4 <opendir+0x18>)
 23face4:	4403      	add	r3, r0
 23face6:	681b      	ldr	r3, [r3, #0]
 23face8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23facea:	9302      	str	r3, [sp, #8]
 23facec:	bd09      	pop	{r0, r3, pc}
 23facee:	0000      	.short	0x0000
 23facf0:	1007ad38 	.word	0x1007ad38
 23facf4:	00000064 	.word	0x00000064

023facf8 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
 23facf8:	b509      	push	{r0, r3, lr}
 23facfa:	4804      	ldr	r0, [pc, #16]	; (23fad0c <readdir+0x14>)
 23facfc:	6800      	ldr	r0, [r0, #0]
 23facfe:	4b04      	ldr	r3, [pc, #16]	; (23fad10 <readdir+0x18>)
 23fad00:	4403      	add	r3, r0
 23fad02:	681b      	ldr	r3, [r3, #0]
 23fad04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fad06:	9302      	str	r3, [sp, #8]
 23fad08:	bd09      	pop	{r0, r3, pc}
 23fad0a:	0000      	.short	0x0000
 23fad0c:	1007ad38 	.word	0x1007ad38
 23fad10:	00000064 	.word	0x00000064

023fad14 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
 23fad14:	b509      	push	{r0, r3, lr}
 23fad16:	4804      	ldr	r0, [pc, #16]	; (23fad28 <closedir+0x14>)
 23fad18:	6800      	ldr	r0, [r0, #0]
 23fad1a:	4b04      	ldr	r3, [pc, #16]	; (23fad2c <closedir+0x18>)
 23fad1c:	4403      	add	r3, r0
 23fad1e:	681b      	ldr	r3, [r3, #0]
 23fad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fad22:	9302      	str	r3, [sp, #8]
 23fad24:	bd09      	pop	{r0, r3, pc}
 23fad26:	0000      	.short	0x0000
 23fad28:	1007ad38 	.word	0x1007ad38
 23fad2c:	00000064 	.word	0x00000064

023fad30 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fad30:	b509      	push	{r0, r3, lr}
 23fad32:	4804      	ldr	r0, [pc, #16]	; (23fad44 <os_mutex_recursive_create+0x14>)
 23fad34:	6800      	ldr	r0, [r0, #0]
 23fad36:	4b04      	ldr	r3, [pc, #16]	; (23fad48 <os_mutex_recursive_create+0x18>)
 23fad38:	4403      	add	r3, r0
 23fad3a:	681b      	ldr	r3, [r3, #0]
 23fad3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fad3e:	9302      	str	r3, [sp, #8]
 23fad40:	bd09      	pop	{r0, r3, pc}
 23fad42:	0000      	.short	0x0000
 23fad44:	1007ad38 	.word	0x1007ad38
 23fad48:	00000030 	.word	0x00000030

023fad4c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fad4c:	b509      	push	{r0, r3, lr}
 23fad4e:	4804      	ldr	r0, [pc, #16]	; (23fad60 <os_mutex_recursive_destroy+0x14>)
 23fad50:	6800      	ldr	r0, [r0, #0]
 23fad52:	4b04      	ldr	r3, [pc, #16]	; (23fad64 <os_mutex_recursive_destroy+0x18>)
 23fad54:	4403      	add	r3, r0
 23fad56:	681b      	ldr	r3, [r3, #0]
 23fad58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fad5a:	9302      	str	r3, [sp, #8]
 23fad5c:	bd09      	pop	{r0, r3, pc}
 23fad5e:	0000      	.short	0x0000
 23fad60:	1007ad38 	.word	0x1007ad38
 23fad64:	00000030 	.word	0x00000030

023fad68 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fad68:	b509      	push	{r0, r3, lr}
 23fad6a:	4804      	ldr	r0, [pc, #16]	; (23fad7c <os_mutex_recursive_lock+0x14>)
 23fad6c:	6800      	ldr	r0, [r0, #0]
 23fad6e:	4b04      	ldr	r3, [pc, #16]	; (23fad80 <os_mutex_recursive_lock+0x18>)
 23fad70:	4403      	add	r3, r0
 23fad72:	681b      	ldr	r3, [r3, #0]
 23fad74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fad76:	9302      	str	r3, [sp, #8]
 23fad78:	bd09      	pop	{r0, r3, pc}
 23fad7a:	0000      	.short	0x0000
 23fad7c:	1007ad38 	.word	0x1007ad38
 23fad80:	00000030 	.word	0x00000030

023fad84 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fad84:	b509      	push	{r0, r3, lr}
 23fad86:	4804      	ldr	r0, [pc, #16]	; (23fad98 <os_mutex_recursive_unlock+0x14>)
 23fad88:	6800      	ldr	r0, [r0, #0]
 23fad8a:	4b04      	ldr	r3, [pc, #16]	; (23fad9c <os_mutex_recursive_unlock+0x18>)
 23fad8c:	4403      	add	r3, r0
 23fad8e:	681b      	ldr	r3, [r3, #0]
 23fad90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fad92:	9302      	str	r3, [sp, #8]
 23fad94:	bd09      	pop	{r0, r3, pc}
 23fad96:	0000      	.short	0x0000
 23fad98:	1007ad38 	.word	0x1007ad38
 23fad9c:	00000030 	.word	0x00000030

023fada0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fada0:	b509      	push	{r0, r3, lr}
 23fada2:	4804      	ldr	r0, [pc, #16]	; (23fadb4 <inet_inet_ntop+0x14>)
 23fada4:	6800      	ldr	r0, [r0, #0]
 23fada6:	4b04      	ldr	r3, [pc, #16]	; (23fadb8 <inet_inet_ntop+0x18>)
 23fada8:	4403      	add	r3, r0
 23fadaa:	681b      	ldr	r3, [r3, #0]
 23fadac:	695b      	ldr	r3, [r3, #20]
 23fadae:	9302      	str	r3, [sp, #8]
 23fadb0:	bd09      	pop	{r0, r3, pc}
 23fadb2:	0000      	.short	0x0000
 23fadb4:	1007ad38 	.word	0x1007ad38
 23fadb8:	0000004c 	.word	0x0000004c

023fadbc <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fadbc:	b509      	push	{r0, r3, lr}
 23fadbe:	4804      	ldr	r0, [pc, #16]	; (23fadd0 <hal_usart_end+0x14>)
 23fadc0:	6800      	ldr	r0, [r0, #0]
 23fadc2:	4b04      	ldr	r3, [pc, #16]	; (23fadd4 <hal_usart_end+0x18>)
 23fadc4:	4403      	add	r3, r0
 23fadc6:	681b      	ldr	r3, [r3, #0]
 23fadc8:	689b      	ldr	r3, [r3, #8]
 23fadca:	9302      	str	r3, [sp, #8]
 23fadcc:	bd09      	pop	{r0, r3, pc}
 23fadce:	0000      	.short	0x0000
 23fadd0:	1007ad38 	.word	0x1007ad38
 23fadd4:	00000024 	.word	0x00000024

023fadd8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fadd8:	b509      	push	{r0, r3, lr}
 23fadda:	4804      	ldr	r0, [pc, #16]	; (23fadec <hal_usart_write+0x14>)
 23faddc:	6800      	ldr	r0, [r0, #0]
 23fadde:	4b04      	ldr	r3, [pc, #16]	; (23fadf0 <hal_usart_write+0x18>)
 23fade0:	4403      	add	r3, r0
 23fade2:	681b      	ldr	r3, [r3, #0]
 23fade4:	68db      	ldr	r3, [r3, #12]
 23fade6:	9302      	str	r3, [sp, #8]
 23fade8:	bd09      	pop	{r0, r3, pc}
 23fadea:	0000      	.short	0x0000
 23fadec:	1007ad38 	.word	0x1007ad38
 23fadf0:	00000024 	.word	0x00000024

023fadf4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fadf4:	b509      	push	{r0, r3, lr}
 23fadf6:	4804      	ldr	r0, [pc, #16]	; (23fae08 <hal_usart_available+0x14>)
 23fadf8:	6800      	ldr	r0, [r0, #0]
 23fadfa:	4b04      	ldr	r3, [pc, #16]	; (23fae0c <hal_usart_available+0x18>)
 23fadfc:	4403      	add	r3, r0
 23fadfe:	681b      	ldr	r3, [r3, #0]
 23fae00:	691b      	ldr	r3, [r3, #16]
 23fae02:	9302      	str	r3, [sp, #8]
 23fae04:	bd09      	pop	{r0, r3, pc}
 23fae06:	0000      	.short	0x0000
 23fae08:	1007ad38 	.word	0x1007ad38
 23fae0c:	00000024 	.word	0x00000024

023fae10 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fae10:	b509      	push	{r0, r3, lr}
 23fae12:	4804      	ldr	r0, [pc, #16]	; (23fae24 <hal_usart_read+0x14>)
 23fae14:	6800      	ldr	r0, [r0, #0]
 23fae16:	4b04      	ldr	r3, [pc, #16]	; (23fae28 <hal_usart_read+0x18>)
 23fae18:	4403      	add	r3, r0
 23fae1a:	681b      	ldr	r3, [r3, #0]
 23fae1c:	695b      	ldr	r3, [r3, #20]
 23fae1e:	9302      	str	r3, [sp, #8]
 23fae20:	bd09      	pop	{r0, r3, pc}
 23fae22:	0000      	.short	0x0000
 23fae24:	1007ad38 	.word	0x1007ad38
 23fae28:	00000024 	.word	0x00000024

023fae2c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fae2c:	b509      	push	{r0, r3, lr}
 23fae2e:	4804      	ldr	r0, [pc, #16]	; (23fae40 <hal_usart_peek+0x14>)
 23fae30:	6800      	ldr	r0, [r0, #0]
 23fae32:	4b04      	ldr	r3, [pc, #16]	; (23fae44 <hal_usart_peek+0x18>)
 23fae34:	4403      	add	r3, r0
 23fae36:	681b      	ldr	r3, [r3, #0]
 23fae38:	699b      	ldr	r3, [r3, #24]
 23fae3a:	9302      	str	r3, [sp, #8]
 23fae3c:	bd09      	pop	{r0, r3, pc}
 23fae3e:	0000      	.short	0x0000
 23fae40:	1007ad38 	.word	0x1007ad38
 23fae44:	00000024 	.word	0x00000024

023fae48 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fae48:	b509      	push	{r0, r3, lr}
 23fae4a:	4804      	ldr	r0, [pc, #16]	; (23fae5c <hal_usart_flush+0x14>)
 23fae4c:	6800      	ldr	r0, [r0, #0]
 23fae4e:	4b04      	ldr	r3, [pc, #16]	; (23fae60 <hal_usart_flush+0x18>)
 23fae50:	4403      	add	r3, r0
 23fae52:	681b      	ldr	r3, [r3, #0]
 23fae54:	69db      	ldr	r3, [r3, #28]
 23fae56:	9302      	str	r3, [sp, #8]
 23fae58:	bd09      	pop	{r0, r3, pc}
 23fae5a:	0000      	.short	0x0000
 23fae5c:	1007ad38 	.word	0x1007ad38
 23fae60:	00000024 	.word	0x00000024

023fae64 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fae64:	b509      	push	{r0, r3, lr}
 23fae66:	4804      	ldr	r0, [pc, #16]	; (23fae78 <hal_usart_is_enabled+0x14>)
 23fae68:	6800      	ldr	r0, [r0, #0]
 23fae6a:	4b04      	ldr	r3, [pc, #16]	; (23fae7c <hal_usart_is_enabled+0x18>)
 23fae6c:	4403      	add	r3, r0
 23fae6e:	681b      	ldr	r3, [r3, #0]
 23fae70:	6a1b      	ldr	r3, [r3, #32]
 23fae72:	9302      	str	r3, [sp, #8]
 23fae74:	bd09      	pop	{r0, r3, pc}
 23fae76:	0000      	.short	0x0000
 23fae78:	1007ad38 	.word	0x1007ad38
 23fae7c:	00000024 	.word	0x00000024

023fae80 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fae80:	b509      	push	{r0, r3, lr}
 23fae82:	4804      	ldr	r0, [pc, #16]	; (23fae94 <hal_usart_available_data_for_write+0x14>)
 23fae84:	6800      	ldr	r0, [r0, #0]
 23fae86:	4b04      	ldr	r3, [pc, #16]	; (23fae98 <hal_usart_available_data_for_write+0x18>)
 23fae88:	4403      	add	r3, r0
 23fae8a:	681b      	ldr	r3, [r3, #0]
 23fae8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fae8e:	9302      	str	r3, [sp, #8]
 23fae90:	bd09      	pop	{r0, r3, pc}
 23fae92:	0000      	.short	0x0000
 23fae94:	1007ad38 	.word	0x1007ad38
 23fae98:	00000024 	.word	0x00000024

023fae9c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fae9c:	b509      	push	{r0, r3, lr}
 23fae9e:	4804      	ldr	r0, [pc, #16]	; (23faeb0 <hal_usart_begin_config+0x14>)
 23faea0:	6800      	ldr	r0, [r0, #0]
 23faea2:	4b04      	ldr	r3, [pc, #16]	; (23faeb4 <hal_usart_begin_config+0x18>)
 23faea4:	4403      	add	r3, r0
 23faea6:	681b      	ldr	r3, [r3, #0]
 23faea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23faeaa:	9302      	str	r3, [sp, #8]
 23faeac:	bd09      	pop	{r0, r3, pc}
 23faeae:	0000      	.short	0x0000
 23faeb0:	1007ad38 	.word	0x1007ad38
 23faeb4:	00000024 	.word	0x00000024

023faeb8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23faeb8:	b509      	push	{r0, r3, lr}
 23faeba:	4804      	ldr	r0, [pc, #16]	; (23faecc <hal_usart_init_ex+0x14>)
 23faebc:	6800      	ldr	r0, [r0, #0]
 23faebe:	4b04      	ldr	r3, [pc, #16]	; (23faed0 <hal_usart_init_ex+0x18>)
 23faec0:	4403      	add	r3, r0
 23faec2:	681b      	ldr	r3, [r3, #0]
 23faec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23faec6:	9302      	str	r3, [sp, #8]
 23faec8:	bd09      	pop	{r0, r3, pc}
 23faeca:	0000      	.short	0x0000
 23faecc:	1007ad38 	.word	0x1007ad38
 23faed0:	00000024 	.word	0x00000024

023faed4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23faed4:	b509      	push	{r0, r3, lr}
 23faed6:	4804      	ldr	r0, [pc, #16]	; (23faee8 <hal_i2c_begin+0x14>)
 23faed8:	6800      	ldr	r0, [r0, #0]
 23faeda:	4b04      	ldr	r3, [pc, #16]	; (23faeec <hal_i2c_begin+0x18>)
 23faedc:	4403      	add	r3, r0
 23faede:	681b      	ldr	r3, [r3, #0]
 23faee0:	68db      	ldr	r3, [r3, #12]
 23faee2:	9302      	str	r3, [sp, #8]
 23faee4:	bd09      	pop	{r0, r3, pc}
 23faee6:	0000      	.short	0x0000
 23faee8:	1007ad38 	.word	0x1007ad38
 23faeec:	00000010 	.word	0x00000010

023faef0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23faef0:	b509      	push	{r0, r3, lr}
 23faef2:	4804      	ldr	r0, [pc, #16]	; (23faf04 <hal_i2c_begin_transmission+0x14>)
 23faef4:	6800      	ldr	r0, [r0, #0]
 23faef6:	4b04      	ldr	r3, [pc, #16]	; (23faf08 <hal_i2c_begin_transmission+0x18>)
 23faef8:	4403      	add	r3, r0
 23faefa:	681b      	ldr	r3, [r3, #0]
 23faefc:	699b      	ldr	r3, [r3, #24]
 23faefe:	9302      	str	r3, [sp, #8]
 23faf00:	bd09      	pop	{r0, r3, pc}
 23faf02:	0000      	.short	0x0000
 23faf04:	1007ad38 	.word	0x1007ad38
 23faf08:	00000010 	.word	0x00000010

023faf0c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23faf0c:	b509      	push	{r0, r3, lr}
 23faf0e:	4804      	ldr	r0, [pc, #16]	; (23faf20 <hal_i2c_end_transmission+0x14>)
 23faf10:	6800      	ldr	r0, [r0, #0]
 23faf12:	4b04      	ldr	r3, [pc, #16]	; (23faf24 <hal_i2c_end_transmission+0x18>)
 23faf14:	4403      	add	r3, r0
 23faf16:	681b      	ldr	r3, [r3, #0]
 23faf18:	69db      	ldr	r3, [r3, #28]
 23faf1a:	9302      	str	r3, [sp, #8]
 23faf1c:	bd09      	pop	{r0, r3, pc}
 23faf1e:	0000      	.short	0x0000
 23faf20:	1007ad38 	.word	0x1007ad38
 23faf24:	00000010 	.word	0x00000010

023faf28 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23faf28:	b509      	push	{r0, r3, lr}
 23faf2a:	4804      	ldr	r0, [pc, #16]	; (23faf3c <hal_i2c_write+0x14>)
 23faf2c:	6800      	ldr	r0, [r0, #0]
 23faf2e:	4b04      	ldr	r3, [pc, #16]	; (23faf40 <hal_i2c_write+0x18>)
 23faf30:	4403      	add	r3, r0
 23faf32:	681b      	ldr	r3, [r3, #0]
 23faf34:	6a1b      	ldr	r3, [r3, #32]
 23faf36:	9302      	str	r3, [sp, #8]
 23faf38:	bd09      	pop	{r0, r3, pc}
 23faf3a:	0000      	.short	0x0000
 23faf3c:	1007ad38 	.word	0x1007ad38
 23faf40:	00000010 	.word	0x00000010

023faf44 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23faf44:	b509      	push	{r0, r3, lr}
 23faf46:	4804      	ldr	r0, [pc, #16]	; (23faf58 <hal_i2c_available+0x14>)
 23faf48:	6800      	ldr	r0, [r0, #0]
 23faf4a:	4b04      	ldr	r3, [pc, #16]	; (23faf5c <hal_i2c_available+0x18>)
 23faf4c:	4403      	add	r3, r0
 23faf4e:	681b      	ldr	r3, [r3, #0]
 23faf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23faf52:	9302      	str	r3, [sp, #8]
 23faf54:	bd09      	pop	{r0, r3, pc}
 23faf56:	0000      	.short	0x0000
 23faf58:	1007ad38 	.word	0x1007ad38
 23faf5c:	00000010 	.word	0x00000010

023faf60 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23faf60:	b509      	push	{r0, r3, lr}
 23faf62:	4804      	ldr	r0, [pc, #16]	; (23faf74 <hal_i2c_read+0x14>)
 23faf64:	6800      	ldr	r0, [r0, #0]
 23faf66:	4b04      	ldr	r3, [pc, #16]	; (23faf78 <hal_i2c_read+0x18>)
 23faf68:	4403      	add	r3, r0
 23faf6a:	681b      	ldr	r3, [r3, #0]
 23faf6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23faf6e:	9302      	str	r3, [sp, #8]
 23faf70:	bd09      	pop	{r0, r3, pc}
 23faf72:	0000      	.short	0x0000
 23faf74:	1007ad38 	.word	0x1007ad38
 23faf78:	00000010 	.word	0x00000010

023faf7c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23faf7c:	b509      	push	{r0, r3, lr}
 23faf7e:	4804      	ldr	r0, [pc, #16]	; (23faf90 <hal_i2c_peek+0x14>)
 23faf80:	6800      	ldr	r0, [r0, #0]
 23faf82:	4b04      	ldr	r3, [pc, #16]	; (23faf94 <hal_i2c_peek+0x18>)
 23faf84:	4403      	add	r3, r0
 23faf86:	681b      	ldr	r3, [r3, #0]
 23faf88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23faf8a:	9302      	str	r3, [sp, #8]
 23faf8c:	bd09      	pop	{r0, r3, pc}
 23faf8e:	0000      	.short	0x0000
 23faf90:	1007ad38 	.word	0x1007ad38
 23faf94:	00000010 	.word	0x00000010

023faf98 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23faf98:	b509      	push	{r0, r3, lr}
 23faf9a:	4804      	ldr	r0, [pc, #16]	; (23fafac <hal_i2c_flush+0x14>)
 23faf9c:	6800      	ldr	r0, [r0, #0]
 23faf9e:	4b04      	ldr	r3, [pc, #16]	; (23fafb0 <hal_i2c_flush+0x18>)
 23fafa0:	4403      	add	r3, r0
 23fafa2:	681b      	ldr	r3, [r3, #0]
 23fafa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fafa6:	9302      	str	r3, [sp, #8]
 23fafa8:	bd09      	pop	{r0, r3, pc}
 23fafaa:	0000      	.short	0x0000
 23fafac:	1007ad38 	.word	0x1007ad38
 23fafb0:	00000010 	.word	0x00000010

023fafb4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fafb4:	b509      	push	{r0, r3, lr}
 23fafb6:	4804      	ldr	r0, [pc, #16]	; (23fafc8 <hal_i2c_is_enabled+0x14>)
 23fafb8:	6800      	ldr	r0, [r0, #0]
 23fafba:	4b04      	ldr	r3, [pc, #16]	; (23fafcc <hal_i2c_is_enabled+0x18>)
 23fafbc:	4403      	add	r3, r0
 23fafbe:	681b      	ldr	r3, [r3, #0]
 23fafc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fafc2:	9302      	str	r3, [sp, #8]
 23fafc4:	bd09      	pop	{r0, r3, pc}
 23fafc6:	0000      	.short	0x0000
 23fafc8:	1007ad38 	.word	0x1007ad38
 23fafcc:	00000010 	.word	0x00000010

023fafd0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fafd0:	b509      	push	{r0, r3, lr}
 23fafd2:	4804      	ldr	r0, [pc, #16]	; (23fafe4 <hal_i2c_init+0x14>)
 23fafd4:	6800      	ldr	r0, [r0, #0]
 23fafd6:	4b04      	ldr	r3, [pc, #16]	; (23fafe8 <hal_i2c_init+0x18>)
 23fafd8:	4403      	add	r3, r0
 23fafda:	681b      	ldr	r3, [r3, #0]
 23fafdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fafde:	9302      	str	r3, [sp, #8]
 23fafe0:	bd09      	pop	{r0, r3, pc}
 23fafe2:	0000      	.short	0x0000
 23fafe4:	1007ad38 	.word	0x1007ad38
 23fafe8:	00000010 	.word	0x00000010

023fafec <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fafec:	b509      	push	{r0, r3, lr}
 23fafee:	4804      	ldr	r0, [pc, #16]	; (23fb000 <hal_i2c_request_ex+0x14>)
 23faff0:	6800      	ldr	r0, [r0, #0]
 23faff2:	4b04      	ldr	r3, [pc, #16]	; (23fb004 <hal_i2c_request_ex+0x18>)
 23faff4:	4403      	add	r3, r0
 23faff6:	681b      	ldr	r3, [r3, #0]
 23faff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23faffa:	9302      	str	r3, [sp, #8]
 23faffc:	bd09      	pop	{r0, r3, pc}
 23faffe:	0000      	.short	0x0000
 23fb000:	1007ad38 	.word	0x1007ad38
 23fb004:	00000010 	.word	0x00000010

023fb008 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fb008:	b509      	push	{r0, r3, lr}
 23fb00a:	4804      	ldr	r0, [pc, #16]	; (23fb01c <hal_spi_begin+0x14>)
 23fb00c:	6800      	ldr	r0, [r0, #0]
 23fb00e:	4b04      	ldr	r3, [pc, #16]	; (23fb020 <hal_spi_begin+0x18>)
 23fb010:	4403      	add	r3, r0
 23fb012:	681b      	ldr	r3, [r3, #0]
 23fb014:	681b      	ldr	r3, [r3, #0]
 23fb016:	9302      	str	r3, [sp, #8]
 23fb018:	bd09      	pop	{r0, r3, pc}
 23fb01a:	0000      	.short	0x0000
 23fb01c:	1007ad38 	.word	0x1007ad38
 23fb020:	00000018 	.word	0x00000018

023fb024 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fb024:	b509      	push	{r0, r3, lr}
 23fb026:	4804      	ldr	r0, [pc, #16]	; (23fb038 <hal_spi_set_data_mode+0x14>)
 23fb028:	6800      	ldr	r0, [r0, #0]
 23fb02a:	4b04      	ldr	r3, [pc, #16]	; (23fb03c <hal_spi_set_data_mode+0x18>)
 23fb02c:	4403      	add	r3, r0
 23fb02e:	681b      	ldr	r3, [r3, #0]
 23fb030:	68db      	ldr	r3, [r3, #12]
 23fb032:	9302      	str	r3, [sp, #8]
 23fb034:	bd09      	pop	{r0, r3, pc}
 23fb036:	0000      	.short	0x0000
 23fb038:	1007ad38 	.word	0x1007ad38
 23fb03c:	00000018 	.word	0x00000018

023fb040 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fb040:	b509      	push	{r0, r3, lr}
 23fb042:	4804      	ldr	r0, [pc, #16]	; (23fb054 <hal_spi_set_clock_divider+0x14>)
 23fb044:	6800      	ldr	r0, [r0, #0]
 23fb046:	4b04      	ldr	r3, [pc, #16]	; (23fb058 <hal_spi_set_clock_divider+0x18>)
 23fb048:	4403      	add	r3, r0
 23fb04a:	681b      	ldr	r3, [r3, #0]
 23fb04c:	691b      	ldr	r3, [r3, #16]
 23fb04e:	9302      	str	r3, [sp, #8]
 23fb050:	bd09      	pop	{r0, r3, pc}
 23fb052:	0000      	.short	0x0000
 23fb054:	1007ad38 	.word	0x1007ad38
 23fb058:	00000018 	.word	0x00000018

023fb05c <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fb05c:	b509      	push	{r0, r3, lr}
 23fb05e:	4804      	ldr	r0, [pc, #16]	; (23fb070 <hal_spi_transfer+0x14>)
 23fb060:	6800      	ldr	r0, [r0, #0]
 23fb062:	4b04      	ldr	r3, [pc, #16]	; (23fb074 <hal_spi_transfer+0x18>)
 23fb064:	4403      	add	r3, r0
 23fb066:	681b      	ldr	r3, [r3, #0]
 23fb068:	695b      	ldr	r3, [r3, #20]
 23fb06a:	9302      	str	r3, [sp, #8]
 23fb06c:	bd09      	pop	{r0, r3, pc}
 23fb06e:	0000      	.short	0x0000
 23fb070:	1007ad38 	.word	0x1007ad38
 23fb074:	00000018 	.word	0x00000018

023fb078 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fb078:	b509      	push	{r0, r3, lr}
 23fb07a:	4804      	ldr	r0, [pc, #16]	; (23fb08c <hal_spi_init+0x14>)
 23fb07c:	6800      	ldr	r0, [r0, #0]
 23fb07e:	4b04      	ldr	r3, [pc, #16]	; (23fb090 <hal_spi_init+0x18>)
 23fb080:	4403      	add	r3, r0
 23fb082:	681b      	ldr	r3, [r3, #0]
 23fb084:	69db      	ldr	r3, [r3, #28]
 23fb086:	9302      	str	r3, [sp, #8]
 23fb088:	bd09      	pop	{r0, r3, pc}
 23fb08a:	0000      	.short	0x0000
 23fb08c:	1007ad38 	.word	0x1007ad38
 23fb090:	00000018 	.word	0x00000018

023fb094 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fb094:	b509      	push	{r0, r3, lr}
 23fb096:	4804      	ldr	r0, [pc, #16]	; (23fb0a8 <hal_spi_is_enabled+0x14>)
 23fb098:	6800      	ldr	r0, [r0, #0]
 23fb09a:	4b04      	ldr	r3, [pc, #16]	; (23fb0ac <hal_spi_is_enabled+0x18>)
 23fb09c:	4403      	add	r3, r0
 23fb09e:	681b      	ldr	r3, [r3, #0]
 23fb0a0:	6a1b      	ldr	r3, [r3, #32]
 23fb0a2:	9302      	str	r3, [sp, #8]
 23fb0a4:	bd09      	pop	{r0, r3, pc}
 23fb0a6:	0000      	.short	0x0000
 23fb0a8:	1007ad38 	.word	0x1007ad38
 23fb0ac:	00000018 	.word	0x00000018

023fb0b0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fb0b0:	b509      	push	{r0, r3, lr}
 23fb0b2:	4804      	ldr	r0, [pc, #16]	; (23fb0c4 <hal_spi_info+0x14>)
 23fb0b4:	6800      	ldr	r0, [r0, #0]
 23fb0b6:	4b04      	ldr	r3, [pc, #16]	; (23fb0c8 <hal_spi_info+0x18>)
 23fb0b8:	4403      	add	r3, r0
 23fb0ba:	681b      	ldr	r3, [r3, #0]
 23fb0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb0be:	9302      	str	r3, [sp, #8]
 23fb0c0:	bd09      	pop	{r0, r3, pc}
 23fb0c2:	0000      	.short	0x0000
 23fb0c4:	1007ad38 	.word	0x1007ad38
 23fb0c8:	00000018 	.word	0x00000018

023fb0cc <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fb0cc:	b509      	push	{r0, r3, lr}
 23fb0ce:	4804      	ldr	r0, [pc, #16]	; (23fb0e0 <hal_spi_acquire+0x14>)
 23fb0d0:	6800      	ldr	r0, [r0, #0]
 23fb0d2:	4b04      	ldr	r3, [pc, #16]	; (23fb0e4 <hal_spi_acquire+0x18>)
 23fb0d4:	4403      	add	r3, r0
 23fb0d6:	681b      	ldr	r3, [r3, #0]
 23fb0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb0da:	9302      	str	r3, [sp, #8]
 23fb0dc:	bd09      	pop	{r0, r3, pc}
 23fb0de:	0000      	.short	0x0000
 23fb0e0:	1007ad38 	.word	0x1007ad38
 23fb0e4:	00000018 	.word	0x00000018

023fb0e8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fb0e8:	b509      	push	{r0, r3, lr}
 23fb0ea:	4804      	ldr	r0, [pc, #16]	; (23fb0fc <hal_spi_release+0x14>)
 23fb0ec:	6800      	ldr	r0, [r0, #0]
 23fb0ee:	4b04      	ldr	r3, [pc, #16]	; (23fb100 <hal_spi_release+0x18>)
 23fb0f0:	4403      	add	r3, r0
 23fb0f2:	681b      	ldr	r3, [r3, #0]
 23fb0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb0f6:	9302      	str	r3, [sp, #8]
 23fb0f8:	bd09      	pop	{r0, r3, pc}
 23fb0fa:	0000      	.short	0x0000
 23fb0fc:	1007ad38 	.word	0x1007ad38
 23fb100:	00000018 	.word	0x00000018

023fb104 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fb104:	b509      	push	{r0, r3, lr}
 23fb106:	4804      	ldr	r0, [pc, #16]	; (23fb118 <HAL_USB_USART_Init+0x14>)
 23fb108:	6800      	ldr	r0, [r0, #0]
 23fb10a:	4b04      	ldr	r3, [pc, #16]	; (23fb11c <HAL_USB_USART_Init+0x18>)
 23fb10c:	4403      	add	r3, r0
 23fb10e:	681b      	ldr	r3, [r3, #0]
 23fb110:	681b      	ldr	r3, [r3, #0]
 23fb112:	9302      	str	r3, [sp, #8]
 23fb114:	bd09      	pop	{r0, r3, pc}
 23fb116:	0000      	.short	0x0000
 23fb118:	1007ad38 	.word	0x1007ad38
 23fb11c:	00000034 	.word	0x00000034

023fb120 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fb120:	b509      	push	{r0, r3, lr}
 23fb122:	4804      	ldr	r0, [pc, #16]	; (23fb134 <HAL_USB_USART_Begin+0x14>)
 23fb124:	6800      	ldr	r0, [r0, #0]
 23fb126:	4b04      	ldr	r3, [pc, #16]	; (23fb138 <HAL_USB_USART_Begin+0x18>)
 23fb128:	4403      	add	r3, r0
 23fb12a:	681b      	ldr	r3, [r3, #0]
 23fb12c:	685b      	ldr	r3, [r3, #4]
 23fb12e:	9302      	str	r3, [sp, #8]
 23fb130:	bd09      	pop	{r0, r3, pc}
 23fb132:	0000      	.short	0x0000
 23fb134:	1007ad38 	.word	0x1007ad38
 23fb138:	00000034 	.word	0x00000034

023fb13c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fb13c:	b509      	push	{r0, r3, lr}
 23fb13e:	4804      	ldr	r0, [pc, #16]	; (23fb150 <HAL_USB_USART_End+0x14>)
 23fb140:	6800      	ldr	r0, [r0, #0]
 23fb142:	4b04      	ldr	r3, [pc, #16]	; (23fb154 <HAL_USB_USART_End+0x18>)
 23fb144:	4403      	add	r3, r0
 23fb146:	681b      	ldr	r3, [r3, #0]
 23fb148:	689b      	ldr	r3, [r3, #8]
 23fb14a:	9302      	str	r3, [sp, #8]
 23fb14c:	bd09      	pop	{r0, r3, pc}
 23fb14e:	0000      	.short	0x0000
 23fb150:	1007ad38 	.word	0x1007ad38
 23fb154:	00000034 	.word	0x00000034

023fb158 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fb158:	b509      	push	{r0, r3, lr}
 23fb15a:	4804      	ldr	r0, [pc, #16]	; (23fb16c <HAL_USB_USART_Available_Data+0x14>)
 23fb15c:	6800      	ldr	r0, [r0, #0]
 23fb15e:	4b04      	ldr	r3, [pc, #16]	; (23fb170 <HAL_USB_USART_Available_Data+0x18>)
 23fb160:	4403      	add	r3, r0
 23fb162:	681b      	ldr	r3, [r3, #0]
 23fb164:	691b      	ldr	r3, [r3, #16]
 23fb166:	9302      	str	r3, [sp, #8]
 23fb168:	bd09      	pop	{r0, r3, pc}
 23fb16a:	0000      	.short	0x0000
 23fb16c:	1007ad38 	.word	0x1007ad38
 23fb170:	00000034 	.word	0x00000034

023fb174 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fb174:	b509      	push	{r0, r3, lr}
 23fb176:	4804      	ldr	r0, [pc, #16]	; (23fb188 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fb178:	6800      	ldr	r0, [r0, #0]
 23fb17a:	4b04      	ldr	r3, [pc, #16]	; (23fb18c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fb17c:	4403      	add	r3, r0
 23fb17e:	681b      	ldr	r3, [r3, #0]
 23fb180:	695b      	ldr	r3, [r3, #20]
 23fb182:	9302      	str	r3, [sp, #8]
 23fb184:	bd09      	pop	{r0, r3, pc}
 23fb186:	0000      	.short	0x0000
 23fb188:	1007ad38 	.word	0x1007ad38
 23fb18c:	00000034 	.word	0x00000034

023fb190 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb190:	b509      	push	{r0, r3, lr}
 23fb192:	4804      	ldr	r0, [pc, #16]	; (23fb1a4 <HAL_USB_USART_Receive_Data+0x14>)
 23fb194:	6800      	ldr	r0, [r0, #0]
 23fb196:	4b04      	ldr	r3, [pc, #16]	; (23fb1a8 <HAL_USB_USART_Receive_Data+0x18>)
 23fb198:	4403      	add	r3, r0
 23fb19a:	681b      	ldr	r3, [r3, #0]
 23fb19c:	699b      	ldr	r3, [r3, #24]
 23fb19e:	9302      	str	r3, [sp, #8]
 23fb1a0:	bd09      	pop	{r0, r3, pc}
 23fb1a2:	0000      	.short	0x0000
 23fb1a4:	1007ad38 	.word	0x1007ad38
 23fb1a8:	00000034 	.word	0x00000034

023fb1ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb1ac:	b509      	push	{r0, r3, lr}
 23fb1ae:	4804      	ldr	r0, [pc, #16]	; (23fb1c0 <HAL_USB_USART_Send_Data+0x14>)
 23fb1b0:	6800      	ldr	r0, [r0, #0]
 23fb1b2:	4b04      	ldr	r3, [pc, #16]	; (23fb1c4 <HAL_USB_USART_Send_Data+0x18>)
 23fb1b4:	4403      	add	r3, r0
 23fb1b6:	681b      	ldr	r3, [r3, #0]
 23fb1b8:	69db      	ldr	r3, [r3, #28]
 23fb1ba:	9302      	str	r3, [sp, #8]
 23fb1bc:	bd09      	pop	{r0, r3, pc}
 23fb1be:	0000      	.short	0x0000
 23fb1c0:	1007ad38 	.word	0x1007ad38
 23fb1c4:	00000034 	.word	0x00000034

023fb1c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fb1c8:	b509      	push	{r0, r3, lr}
 23fb1ca:	4804      	ldr	r0, [pc, #16]	; (23fb1dc <HAL_USB_USART_Flush_Data+0x14>)
 23fb1cc:	6800      	ldr	r0, [r0, #0]
 23fb1ce:	4b04      	ldr	r3, [pc, #16]	; (23fb1e0 <HAL_USB_USART_Flush_Data+0x18>)
 23fb1d0:	4403      	add	r3, r0
 23fb1d2:	681b      	ldr	r3, [r3, #0]
 23fb1d4:	6a1b      	ldr	r3, [r3, #32]
 23fb1d6:	9302      	str	r3, [sp, #8]
 23fb1d8:	bd09      	pop	{r0, r3, pc}
 23fb1da:	0000      	.short	0x0000
 23fb1dc:	1007ad38 	.word	0x1007ad38
 23fb1e0:	00000034 	.word	0x00000034

023fb1e4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fb1e4:	b509      	push	{r0, r3, lr}
 23fb1e6:	4804      	ldr	r0, [pc, #16]	; (23fb1f8 <HAL_USB_USART_Is_Connected+0x14>)
 23fb1e8:	6800      	ldr	r0, [r0, #0]
 23fb1ea:	4b04      	ldr	r3, [pc, #16]	; (23fb1fc <HAL_USB_USART_Is_Connected+0x18>)
 23fb1ec:	4403      	add	r3, r0
 23fb1ee:	681b      	ldr	r3, [r3, #0]
 23fb1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb1f2:	9302      	str	r3, [sp, #8]
 23fb1f4:	bd09      	pop	{r0, r3, pc}
 23fb1f6:	0000      	.short	0x0000
 23fb1f8:	1007ad38 	.word	0x1007ad38
 23fb1fc:	00000034 	.word	0x00000034

023fb200 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fb200:	b509      	push	{r0, r3, lr}
 23fb202:	4804      	ldr	r0, [pc, #16]	; (23fb214 <panic_+0x14>)
 23fb204:	6800      	ldr	r0, [r0, #0]
 23fb206:	4b04      	ldr	r3, [pc, #16]	; (23fb218 <panic_+0x18>)
 23fb208:	4403      	add	r3, r0
 23fb20a:	681b      	ldr	r3, [r3, #0]
 23fb20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb20e:	9302      	str	r3, [sp, #8]
 23fb210:	bd09      	pop	{r0, r3, pc}
 23fb212:	0000      	.short	0x0000
 23fb214:	1007ad38 	.word	0x1007ad38
 23fb218:	00000048 	.word	0x00000048

023fb21c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fb21c:	b509      	push	{r0, r3, lr}
 23fb21e:	4804      	ldr	r0, [pc, #16]	; (23fb230 <log_message_v+0x14>)
 23fb220:	6800      	ldr	r0, [r0, #0]
 23fb222:	4b04      	ldr	r3, [pc, #16]	; (23fb234 <log_message_v+0x18>)
 23fb224:	4403      	add	r3, r0
 23fb226:	681b      	ldr	r3, [r3, #0]
 23fb228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb22a:	9302      	str	r3, [sp, #8]
 23fb22c:	bd09      	pop	{r0, r3, pc}
 23fb22e:	0000      	.short	0x0000
 23fb230:	1007ad38 	.word	0x1007ad38
 23fb234:	00000048 	.word	0x00000048

023fb238 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fb238:	b509      	push	{r0, r3, lr}
 23fb23a:	4804      	ldr	r0, [pc, #16]	; (23fb24c <log_level_name+0x14>)
 23fb23c:	6800      	ldr	r0, [r0, #0]
 23fb23e:	4b04      	ldr	r3, [pc, #16]	; (23fb250 <log_level_name+0x18>)
 23fb240:	4403      	add	r3, r0
 23fb242:	681b      	ldr	r3, [r3, #0]
 23fb244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fb246:	9302      	str	r3, [sp, #8]
 23fb248:	bd09      	pop	{r0, r3, pc}
 23fb24a:	0000      	.short	0x0000
 23fb24c:	1007ad38 	.word	0x1007ad38
 23fb250:	00000048 	.word	0x00000048

023fb254 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fb254:	b509      	push	{r0, r3, lr}
 23fb256:	4804      	ldr	r0, [pc, #16]	; (23fb268 <log_set_callbacks+0x14>)
 23fb258:	6800      	ldr	r0, [r0, #0]
 23fb25a:	4b04      	ldr	r3, [pc, #16]	; (23fb26c <log_set_callbacks+0x18>)
 23fb25c:	4403      	add	r3, r0
 23fb25e:	681b      	ldr	r3, [r3, #0]
 23fb260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fb262:	9302      	str	r3, [sp, #8]
 23fb264:	bd09      	pop	{r0, r3, pc}
 23fb266:	0000      	.short	0x0000
 23fb268:	1007ad38 	.word	0x1007ad38
 23fb26c:	00000048 	.word	0x00000048

023fb270 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fb270:	b509      	push	{r0, r3, lr}
 23fb272:	4804      	ldr	r0, [pc, #16]	; (23fb284 <set_system_mode+0x14>)
 23fb274:	6800      	ldr	r0, [r0, #0]
 23fb276:	4b04      	ldr	r3, [pc, #16]	; (23fb288 <set_system_mode+0x18>)
 23fb278:	4403      	add	r3, r0
 23fb27a:	681b      	ldr	r3, [r3, #0]
 23fb27c:	685b      	ldr	r3, [r3, #4]
 23fb27e:	9302      	str	r3, [sp, #8]
 23fb280:	bd09      	pop	{r0, r3, pc}
 23fb282:	0000      	.short	0x0000
 23fb284:	1007ad38 	.word	0x1007ad38
 23fb288:	00000008 	.word	0x00000008

023fb28c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fb28c:	b509      	push	{r0, r3, lr}
 23fb28e:	4804      	ldr	r0, [pc, #16]	; (23fb2a0 <system_delay_ms+0x14>)
 23fb290:	6800      	ldr	r0, [r0, #0]
 23fb292:	4b04      	ldr	r3, [pc, #16]	; (23fb2a4 <system_delay_ms+0x18>)
 23fb294:	4403      	add	r3, r0
 23fb296:	681b      	ldr	r3, [r3, #0]
 23fb298:	695b      	ldr	r3, [r3, #20]
 23fb29a:	9302      	str	r3, [sp, #8]
 23fb29c:	bd09      	pop	{r0, r3, pc}
 23fb29e:	0000      	.short	0x0000
 23fb2a0:	1007ad38 	.word	0x1007ad38
 23fb2a4:	00000008 	.word	0x00000008

023fb2a8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fb2a8:	b509      	push	{r0, r3, lr}
 23fb2aa:	4804      	ldr	r0, [pc, #16]	; (23fb2bc <application_thread_current+0x14>)
 23fb2ac:	6800      	ldr	r0, [r0, #0]
 23fb2ae:	4b04      	ldr	r3, [pc, #16]	; (23fb2c0 <application_thread_current+0x18>)
 23fb2b0:	4403      	add	r3, r0
 23fb2b2:	681b      	ldr	r3, [r3, #0]
 23fb2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb2b6:	9302      	str	r3, [sp, #8]
 23fb2b8:	bd09      	pop	{r0, r3, pc}
 23fb2ba:	0000      	.short	0x0000
 23fb2bc:	1007ad38 	.word	0x1007ad38
 23fb2c0:	00000008 	.word	0x00000008

023fb2c4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fb2c4:	b509      	push	{r0, r3, lr}
 23fb2c6:	4804      	ldr	r0, [pc, #16]	; (23fb2d8 <application_thread_invoke+0x14>)
 23fb2c8:	6800      	ldr	r0, [r0, #0]
 23fb2ca:	4b04      	ldr	r3, [pc, #16]	; (23fb2dc <application_thread_invoke+0x18>)
 23fb2cc:	4403      	add	r3, r0
 23fb2ce:	681b      	ldr	r3, [r3, #0]
 23fb2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb2d2:	9302      	str	r3, [sp, #8]
 23fb2d4:	bd09      	pop	{r0, r3, pc}
 23fb2d6:	0000      	.short	0x0000
 23fb2d8:	1007ad38 	.word	0x1007ad38
 23fb2dc:	00000008 	.word	0x00000008

023fb2e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fb2e0:	b509      	push	{r0, r3, lr}
 23fb2e2:	4804      	ldr	r0, [pc, #16]	; (23fb2f4 <system_ctrl_set_app_request_handler+0x14>)
 23fb2e4:	6800      	ldr	r0, [r0, #0]
 23fb2e6:	4b04      	ldr	r3, [pc, #16]	; (23fb2f8 <system_ctrl_set_app_request_handler+0x18>)
 23fb2e8:	4403      	add	r3, r0
 23fb2ea:	681b      	ldr	r3, [r3, #0]
 23fb2ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fb2f0:	9302      	str	r3, [sp, #8]
 23fb2f2:	bd09      	pop	{r0, r3, pc}
 23fb2f4:	1007ad38 	.word	0x1007ad38
 23fb2f8:	00000008 	.word	0x00000008

023fb2fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fb2fc:	b509      	push	{r0, r3, lr}
 23fb2fe:	4804      	ldr	r0, [pc, #16]	; (23fb310 <system_ctrl_set_result+0x14>)
 23fb300:	6800      	ldr	r0, [r0, #0]
 23fb302:	4b04      	ldr	r3, [pc, #16]	; (23fb314 <system_ctrl_set_result+0x18>)
 23fb304:	4403      	add	r3, r0
 23fb306:	681b      	ldr	r3, [r3, #0]
 23fb308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fb30c:	9302      	str	r3, [sp, #8]
 23fb30e:	bd09      	pop	{r0, r3, pc}
 23fb310:	1007ad38 	.word	0x1007ad38
 23fb314:	00000008 	.word	0x00000008

023fb318 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb318:	b509      	push	{r0, r3, lr}
 23fb31a:	4804      	ldr	r0, [pc, #16]	; (23fb32c <network_connect+0x14>)
 23fb31c:	6800      	ldr	r0, [r0, #0]
 23fb31e:	4b04      	ldr	r3, [pc, #16]	; (23fb330 <network_connect+0x18>)
 23fb320:	4403      	add	r3, r0
 23fb322:	681b      	ldr	r3, [r3, #0]
 23fb324:	685b      	ldr	r3, [r3, #4]
 23fb326:	9302      	str	r3, [sp, #8]
 23fb328:	bd09      	pop	{r0, r3, pc}
 23fb32a:	0000      	.short	0x0000
 23fb32c:	1007ad38 	.word	0x1007ad38
 23fb330:	00000028 	.word	0x00000028

023fb334 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fb334:	b509      	push	{r0, r3, lr}
 23fb336:	4804      	ldr	r0, [pc, #16]	; (23fb348 <network_connecting+0x14>)
 23fb338:	6800      	ldr	r0, [r0, #0]
 23fb33a:	4b04      	ldr	r3, [pc, #16]	; (23fb34c <network_connecting+0x18>)
 23fb33c:	4403      	add	r3, r0
 23fb33e:	681b      	ldr	r3, [r3, #0]
 23fb340:	689b      	ldr	r3, [r3, #8]
 23fb342:	9302      	str	r3, [sp, #8]
 23fb344:	bd09      	pop	{r0, r3, pc}
 23fb346:	0000      	.short	0x0000
 23fb348:	1007ad38 	.word	0x1007ad38
 23fb34c:	00000028 	.word	0x00000028

023fb350 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fb350:	b509      	push	{r0, r3, lr}
 23fb352:	4804      	ldr	r0, [pc, #16]	; (23fb364 <network_disconnect+0x14>)
 23fb354:	6800      	ldr	r0, [r0, #0]
 23fb356:	4b04      	ldr	r3, [pc, #16]	; (23fb368 <network_disconnect+0x18>)
 23fb358:	4403      	add	r3, r0
 23fb35a:	681b      	ldr	r3, [r3, #0]
 23fb35c:	68db      	ldr	r3, [r3, #12]
 23fb35e:	9302      	str	r3, [sp, #8]
 23fb360:	bd09      	pop	{r0, r3, pc}
 23fb362:	0000      	.short	0x0000
 23fb364:	1007ad38 	.word	0x1007ad38
 23fb368:	00000028 	.word	0x00000028

023fb36c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fb36c:	b509      	push	{r0, r3, lr}
 23fb36e:	4804      	ldr	r0, [pc, #16]	; (23fb380 <network_ready+0x14>)
 23fb370:	6800      	ldr	r0, [r0, #0]
 23fb372:	4b04      	ldr	r3, [pc, #16]	; (23fb384 <network_ready+0x18>)
 23fb374:	4403      	add	r3, r0
 23fb376:	681b      	ldr	r3, [r3, #0]
 23fb378:	691b      	ldr	r3, [r3, #16]
 23fb37a:	9302      	str	r3, [sp, #8]
 23fb37c:	bd09      	pop	{r0, r3, pc}
 23fb37e:	0000      	.short	0x0000
 23fb380:	1007ad38 	.word	0x1007ad38
 23fb384:	00000028 	.word	0x00000028

023fb388 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb388:	b509      	push	{r0, r3, lr}
 23fb38a:	4804      	ldr	r0, [pc, #16]	; (23fb39c <network_on+0x14>)
 23fb38c:	6800      	ldr	r0, [r0, #0]
 23fb38e:	4b04      	ldr	r3, [pc, #16]	; (23fb3a0 <network_on+0x18>)
 23fb390:	4403      	add	r3, r0
 23fb392:	681b      	ldr	r3, [r3, #0]
 23fb394:	695b      	ldr	r3, [r3, #20]
 23fb396:	9302      	str	r3, [sp, #8]
 23fb398:	bd09      	pop	{r0, r3, pc}
 23fb39a:	0000      	.short	0x0000
 23fb39c:	1007ad38 	.word	0x1007ad38
 23fb3a0:	00000028 	.word	0x00000028

023fb3a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb3a4:	b509      	push	{r0, r3, lr}
 23fb3a6:	4804      	ldr	r0, [pc, #16]	; (23fb3b8 <network_off+0x14>)
 23fb3a8:	6800      	ldr	r0, [r0, #0]
 23fb3aa:	4b04      	ldr	r3, [pc, #16]	; (23fb3bc <network_off+0x18>)
 23fb3ac:	4403      	add	r3, r0
 23fb3ae:	681b      	ldr	r3, [r3, #0]
 23fb3b0:	699b      	ldr	r3, [r3, #24]
 23fb3b2:	9302      	str	r3, [sp, #8]
 23fb3b4:	bd09      	pop	{r0, r3, pc}
 23fb3b6:	0000      	.short	0x0000
 23fb3b8:	1007ad38 	.word	0x1007ad38
 23fb3bc:	00000028 	.word	0x00000028

023fb3c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fb3c0:	b509      	push	{r0, r3, lr}
 23fb3c2:	4804      	ldr	r0, [pc, #16]	; (23fb3d4 <network_listen+0x14>)
 23fb3c4:	6800      	ldr	r0, [r0, #0]
 23fb3c6:	4b04      	ldr	r3, [pc, #16]	; (23fb3d8 <network_listen+0x18>)
 23fb3c8:	4403      	add	r3, r0
 23fb3ca:	681b      	ldr	r3, [r3, #0]
 23fb3cc:	69db      	ldr	r3, [r3, #28]
 23fb3ce:	9302      	str	r3, [sp, #8]
 23fb3d0:	bd09      	pop	{r0, r3, pc}
 23fb3d2:	0000      	.short	0x0000
 23fb3d4:	1007ad38 	.word	0x1007ad38
 23fb3d8:	00000028 	.word	0x00000028

023fb3dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fb3dc:	b509      	push	{r0, r3, lr}
 23fb3de:	4804      	ldr	r0, [pc, #16]	; (23fb3f0 <network_listening+0x14>)
 23fb3e0:	6800      	ldr	r0, [r0, #0]
 23fb3e2:	4b04      	ldr	r3, [pc, #16]	; (23fb3f4 <network_listening+0x18>)
 23fb3e4:	4403      	add	r3, r0
 23fb3e6:	681b      	ldr	r3, [r3, #0]
 23fb3e8:	6a1b      	ldr	r3, [r3, #32]
 23fb3ea:	9302      	str	r3, [sp, #8]
 23fb3ec:	bd09      	pop	{r0, r3, pc}
 23fb3ee:	0000      	.short	0x0000
 23fb3f0:	1007ad38 	.word	0x1007ad38
 23fb3f4:	00000028 	.word	0x00000028

023fb3f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fb3f8:	b509      	push	{r0, r3, lr}
 23fb3fa:	4804      	ldr	r0, [pc, #16]	; (23fb40c <network_set_listen_timeout+0x14>)
 23fb3fc:	6800      	ldr	r0, [r0, #0]
 23fb3fe:	4b04      	ldr	r3, [pc, #16]	; (23fb410 <network_set_listen_timeout+0x18>)
 23fb400:	4403      	add	r3, r0
 23fb402:	681b      	ldr	r3, [r3, #0]
 23fb404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb406:	9302      	str	r3, [sp, #8]
 23fb408:	bd09      	pop	{r0, r3, pc}
 23fb40a:	0000      	.short	0x0000
 23fb40c:	1007ad38 	.word	0x1007ad38
 23fb410:	00000028 	.word	0x00000028

023fb414 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fb414:	b509      	push	{r0, r3, lr}
 23fb416:	4804      	ldr	r0, [pc, #16]	; (23fb428 <network_get_listen_timeout+0x14>)
 23fb418:	6800      	ldr	r0, [r0, #0]
 23fb41a:	4b04      	ldr	r3, [pc, #16]	; (23fb42c <network_get_listen_timeout+0x18>)
 23fb41c:	4403      	add	r3, r0
 23fb41e:	681b      	ldr	r3, [r3, #0]
 23fb420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb422:	9302      	str	r3, [sp, #8]
 23fb424:	bd09      	pop	{r0, r3, pc}
 23fb426:	0000      	.short	0x0000
 23fb428:	1007ad38 	.word	0x1007ad38
 23fb42c:	00000028 	.word	0x00000028

023fb430 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fb430:	b509      	push	{r0, r3, lr}
 23fb432:	4804      	ldr	r0, [pc, #16]	; (23fb444 <network_is_on+0x14>)
 23fb434:	6800      	ldr	r0, [r0, #0]
 23fb436:	4b04      	ldr	r3, [pc, #16]	; (23fb448 <network_is_on+0x18>)
 23fb438:	4403      	add	r3, r0
 23fb43a:	681b      	ldr	r3, [r3, #0]
 23fb43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb43e:	9302      	str	r3, [sp, #8]
 23fb440:	bd09      	pop	{r0, r3, pc}
 23fb442:	0000      	.short	0x0000
 23fb444:	1007ad38 	.word	0x1007ad38
 23fb448:	00000028 	.word	0x00000028

023fb44c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fb44c:	b509      	push	{r0, r3, lr}
 23fb44e:	4804      	ldr	r0, [pc, #16]	; (23fb460 <network_is_off+0x14>)
 23fb450:	6800      	ldr	r0, [r0, #0]
 23fb452:	4b04      	ldr	r3, [pc, #16]	; (23fb464 <network_is_off+0x18>)
 23fb454:	4403      	add	r3, r0
 23fb456:	681b      	ldr	r3, [r3, #0]
 23fb458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb45a:	9302      	str	r3, [sp, #8]
 23fb45c:	bd09      	pop	{r0, r3, pc}
 23fb45e:	0000      	.short	0x0000
 23fb460:	1007ad38 	.word	0x1007ad38
 23fb464:	00000028 	.word	0x00000028

023fb468 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fb468:	b509      	push	{r0, r3, lr}
 23fb46a:	4804      	ldr	r0, [pc, #16]	; (23fb47c <spark_process+0x14>)
 23fb46c:	6800      	ldr	r0, [r0, #0]
 23fb46e:	4b04      	ldr	r3, [pc, #16]	; (23fb480 <spark_process+0x18>)
 23fb470:	4403      	add	r3, r0
 23fb472:	681b      	ldr	r3, [r3, #0]
 23fb474:	689b      	ldr	r3, [r3, #8]
 23fb476:	9302      	str	r3, [sp, #8]
 23fb478:	bd09      	pop	{r0, r3, pc}
 23fb47a:	0000      	.short	0x0000
 23fb47c:	1007ad38 	.word	0x1007ad38
 23fb480:	0000002c 	.word	0x0000002c

023fb484 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fb484:	b509      	push	{r0, r3, lr}
 23fb486:	4804      	ldr	r0, [pc, #16]	; (23fb498 <spark_cloud_flag_connected+0x14>)
 23fb488:	6800      	ldr	r0, [r0, #0]
 23fb48a:	4b04      	ldr	r3, [pc, #16]	; (23fb49c <spark_cloud_flag_connected+0x18>)
 23fb48c:	4403      	add	r3, r0
 23fb48e:	681b      	ldr	r3, [r3, #0]
 23fb490:	695b      	ldr	r3, [r3, #20]
 23fb492:	9302      	str	r3, [sp, #8]
 23fb494:	bd09      	pop	{r0, r3, pc}
 23fb496:	0000      	.short	0x0000
 23fb498:	1007ad38 	.word	0x1007ad38
 23fb49c:	0000002c 	.word	0x0000002c

023fb4a0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fb4a0:	b509      	push	{r0, r3, lr}
 23fb4a2:	4804      	ldr	r0, [pc, #16]	; (23fb4b4 <spark_send_event+0x14>)
 23fb4a4:	6800      	ldr	r0, [r0, #0]
 23fb4a6:	4b04      	ldr	r3, [pc, #16]	; (23fb4b8 <spark_send_event+0x18>)
 23fb4a8:	4403      	add	r3, r0
 23fb4aa:	681b      	ldr	r3, [r3, #0]
 23fb4ac:	6a1b      	ldr	r3, [r3, #32]
 23fb4ae:	9302      	str	r3, [sp, #8]
 23fb4b0:	bd09      	pop	{r0, r3, pc}
 23fb4b2:	0000      	.short	0x0000
 23fb4b4:	1007ad38 	.word	0x1007ad38
 23fb4b8:	0000002c 	.word	0x0000002c

023fb4bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fb4bc:	b509      	push	{r0, r3, lr}
 23fb4be:	4804      	ldr	r0, [pc, #16]	; (23fb4d0 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fb4c0:	6800      	ldr	r0, [r0, #0]
 23fb4c2:	4b04      	ldr	r3, [pc, #16]	; (23fb4d4 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fb4c4:	4403      	add	r3, r0
 23fb4c6:	681b      	ldr	r3, [r3, #0]
 23fb4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb4ca:	9302      	str	r3, [sp, #8]
 23fb4cc:	bd09      	pop	{r0, r3, pc}
 23fb4ce:	0000      	.short	0x0000
 23fb4d0:	1007ad38 	.word	0x1007ad38
 23fb4d4:	0000002c 	.word	0x0000002c

023fb4d8 <asset_manager_get_info>:
#endif // DYNALIB_EXPORT

DYNALIB_BEGIN(system_asset_manager)

DYNALIB_FN(0, system_asset_manager, asset_manager_set_notify_hook, int(asset_manager_notify_hook, void*, void*))
DYNALIB_FN(1, system_asset_manager, asset_manager_get_info, int(asset_manager_info*, void*))
 23fb4d8:	b509      	push	{r0, r3, lr}
 23fb4da:	4804      	ldr	r0, [pc, #16]	; (23fb4ec <asset_manager_get_info+0x14>)
 23fb4dc:	6800      	ldr	r0, [r0, #0]
 23fb4de:	4b04      	ldr	r3, [pc, #16]	; (23fb4f0 <asset_manager_get_info+0x18>)
 23fb4e0:	4403      	add	r3, r0
 23fb4e2:	681b      	ldr	r3, [r3, #0]
 23fb4e4:	685b      	ldr	r3, [r3, #4]
 23fb4e6:	9302      	str	r3, [sp, #8]
 23fb4e8:	bd09      	pop	{r0, r3, pc}
 23fb4ea:	0000      	.short	0x0000
 23fb4ec:	1007ad38 	.word	0x1007ad38
 23fb4f0:	00000074 	.word	0x00000074

023fb4f4 <asset_manager_free_info>:
DYNALIB_FN(2, system_asset_manager, asset_manager_free_info, void(asset_manager_info*, void*))
 23fb4f4:	b509      	push	{r0, r3, lr}
 23fb4f6:	4804      	ldr	r0, [pc, #16]	; (23fb508 <asset_manager_free_info+0x14>)
 23fb4f8:	6800      	ldr	r0, [r0, #0]
 23fb4fa:	4b04      	ldr	r3, [pc, #16]	; (23fb50c <asset_manager_free_info+0x18>)
 23fb4fc:	4403      	add	r3, r0
 23fb4fe:	681b      	ldr	r3, [r3, #0]
 23fb500:	689b      	ldr	r3, [r3, #8]
 23fb502:	9302      	str	r3, [sp, #8]
 23fb504:	bd09      	pop	{r0, r3, pc}
 23fb506:	0000      	.short	0x0000
 23fb508:	1007ad38 	.word	0x1007ad38
 23fb50c:	00000074 	.word	0x00000074

023fb510 <asset_manager_set_consumer_state>:
DYNALIB_FN(3, system_asset_manager, asset_manager_set_consumer_state, int(asset_manager_consumer_state, void*))
 23fb510:	b509      	push	{r0, r3, lr}
 23fb512:	4804      	ldr	r0, [pc, #16]	; (23fb524 <asset_manager_set_consumer_state+0x14>)
 23fb514:	6800      	ldr	r0, [r0, #0]
 23fb516:	4b04      	ldr	r3, [pc, #16]	; (23fb528 <asset_manager_set_consumer_state+0x18>)
 23fb518:	4403      	add	r3, r0
 23fb51a:	681b      	ldr	r3, [r3, #0]
 23fb51c:	68db      	ldr	r3, [r3, #12]
 23fb51e:	9302      	str	r3, [sp, #8]
 23fb520:	bd09      	pop	{r0, r3, pc}
 23fb522:	0000      	.short	0x0000
 23fb524:	1007ad38 	.word	0x1007ad38
 23fb528:	00000074 	.word	0x00000074

023fb52c <asset_manager_open>:
DYNALIB_FN(4, system_asset_manager, asset_manager_open, int(asset_manager_stream**, const asset_manager_asset*, void*))
 23fb52c:	b509      	push	{r0, r3, lr}
 23fb52e:	4804      	ldr	r0, [pc, #16]	; (23fb540 <asset_manager_open+0x14>)
 23fb530:	6800      	ldr	r0, [r0, #0]
 23fb532:	4b04      	ldr	r3, [pc, #16]	; (23fb544 <asset_manager_open+0x18>)
 23fb534:	4403      	add	r3, r0
 23fb536:	681b      	ldr	r3, [r3, #0]
 23fb538:	691b      	ldr	r3, [r3, #16]
 23fb53a:	9302      	str	r3, [sp, #8]
 23fb53c:	bd09      	pop	{r0, r3, pc}
 23fb53e:	0000      	.short	0x0000
 23fb540:	1007ad38 	.word	0x1007ad38
 23fb544:	00000074 	.word	0x00000074

023fb548 <asset_manager_available>:
DYNALIB_FN(5, system_asset_manager, asset_manager_available, int(asset_manager_stream*, void*))
 23fb548:	b509      	push	{r0, r3, lr}
 23fb54a:	4804      	ldr	r0, [pc, #16]	; (23fb55c <asset_manager_available+0x14>)
 23fb54c:	6800      	ldr	r0, [r0, #0]
 23fb54e:	4b04      	ldr	r3, [pc, #16]	; (23fb560 <asset_manager_available+0x18>)
 23fb550:	4403      	add	r3, r0
 23fb552:	681b      	ldr	r3, [r3, #0]
 23fb554:	695b      	ldr	r3, [r3, #20]
 23fb556:	9302      	str	r3, [sp, #8]
 23fb558:	bd09      	pop	{r0, r3, pc}
 23fb55a:	0000      	.short	0x0000
 23fb55c:	1007ad38 	.word	0x1007ad38
 23fb560:	00000074 	.word	0x00000074

023fb564 <asset_manager_read>:
DYNALIB_FN(6, system_asset_manager, asset_manager_read, int(asset_manager_stream*, char*, size_t, void*))
 23fb564:	b509      	push	{r0, r3, lr}
 23fb566:	4804      	ldr	r0, [pc, #16]	; (23fb578 <asset_manager_read+0x14>)
 23fb568:	6800      	ldr	r0, [r0, #0]
 23fb56a:	4b04      	ldr	r3, [pc, #16]	; (23fb57c <asset_manager_read+0x18>)
 23fb56c:	4403      	add	r3, r0
 23fb56e:	681b      	ldr	r3, [r3, #0]
 23fb570:	699b      	ldr	r3, [r3, #24]
 23fb572:	9302      	str	r3, [sp, #8]
 23fb574:	bd09      	pop	{r0, r3, pc}
 23fb576:	0000      	.short	0x0000
 23fb578:	1007ad38 	.word	0x1007ad38
 23fb57c:	00000074 	.word	0x00000074

023fb580 <asset_manager_peek>:
DYNALIB_FN(7, system_asset_manager, asset_manager_peek, int(asset_manager_stream*, char*, size_t, void*))
 23fb580:	b509      	push	{r0, r3, lr}
 23fb582:	4804      	ldr	r0, [pc, #16]	; (23fb594 <asset_manager_peek+0x14>)
 23fb584:	6800      	ldr	r0, [r0, #0]
 23fb586:	4b04      	ldr	r3, [pc, #16]	; (23fb598 <asset_manager_peek+0x18>)
 23fb588:	4403      	add	r3, r0
 23fb58a:	681b      	ldr	r3, [r3, #0]
 23fb58c:	69db      	ldr	r3, [r3, #28]
 23fb58e:	9302      	str	r3, [sp, #8]
 23fb590:	bd09      	pop	{r0, r3, pc}
 23fb592:	0000      	.short	0x0000
 23fb594:	1007ad38 	.word	0x1007ad38
 23fb598:	00000074 	.word	0x00000074

023fb59c <asset_manager_skip>:
DYNALIB_FN(8, system_asset_manager, asset_manager_skip, int(asset_manager_stream*, size_t, void*))
 23fb59c:	b509      	push	{r0, r3, lr}
 23fb59e:	4804      	ldr	r0, [pc, #16]	; (23fb5b0 <asset_manager_skip+0x14>)
 23fb5a0:	6800      	ldr	r0, [r0, #0]
 23fb5a2:	4b04      	ldr	r3, [pc, #16]	; (23fb5b4 <asset_manager_skip+0x18>)
 23fb5a4:	4403      	add	r3, r0
 23fb5a6:	681b      	ldr	r3, [r3, #0]
 23fb5a8:	6a1b      	ldr	r3, [r3, #32]
 23fb5aa:	9302      	str	r3, [sp, #8]
 23fb5ac:	bd09      	pop	{r0, r3, pc}
 23fb5ae:	0000      	.short	0x0000
 23fb5b0:	1007ad38 	.word	0x1007ad38
 23fb5b4:	00000074 	.word	0x00000074

023fb5b8 <asset_manager_close>:
DYNALIB_FN(9, system_asset_manager, asset_manager_seek, int(asset_manager_stream*, size_t, void*))
DYNALIB_FN(10, system_asset_manager, asset_manager_close, void(asset_manager_stream*, void*))
 23fb5b8:	b509      	push	{r0, r3, lr}
 23fb5ba:	4804      	ldr	r0, [pc, #16]	; (23fb5cc <asset_manager_close+0x14>)
 23fb5bc:	6800      	ldr	r0, [r0, #0]
 23fb5be:	4b04      	ldr	r3, [pc, #16]	; (23fb5d0 <asset_manager_close+0x18>)
 23fb5c0:	4403      	add	r3, r0
 23fb5c2:	681b      	ldr	r3, [r3, #0]
 23fb5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb5c6:	9302      	str	r3, [sp, #8]
 23fb5c8:	bd09      	pop	{r0, r3, pc}
 23fb5ca:	0000      	.short	0x0000
 23fb5cc:	1007ad38 	.word	0x1007ad38
 23fb5d0:	00000074 	.word	0x00000074

023fb5d4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fb5d4:	b509      	push	{r0, r3, lr}
 23fb5d6:	4804      	ldr	r0, [pc, #16]	; (23fb5e8 <malloc+0x14>)
 23fb5d8:	6800      	ldr	r0, [r0, #0]
 23fb5da:	4b04      	ldr	r3, [pc, #16]	; (23fb5ec <malloc+0x18>)
 23fb5dc:	4403      	add	r3, r0
 23fb5de:	681b      	ldr	r3, [r3, #0]
 23fb5e0:	681b      	ldr	r3, [r3, #0]
 23fb5e2:	9302      	str	r3, [sp, #8]
 23fb5e4:	bd09      	pop	{r0, r3, pc}
 23fb5e6:	0000      	.short	0x0000
 23fb5e8:	1007ad38 	.word	0x1007ad38
 23fb5ec:	00000004 	.word	0x00000004

023fb5f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fb5f0:	b509      	push	{r0, r3, lr}
 23fb5f2:	4804      	ldr	r0, [pc, #16]	; (23fb604 <free+0x14>)
 23fb5f4:	6800      	ldr	r0, [r0, #0]
 23fb5f6:	4b04      	ldr	r3, [pc, #16]	; (23fb608 <free+0x18>)
 23fb5f8:	4403      	add	r3, r0
 23fb5fa:	681b      	ldr	r3, [r3, #0]
 23fb5fc:	685b      	ldr	r3, [r3, #4]
 23fb5fe:	9302      	str	r3, [sp, #8]
 23fb600:	bd09      	pop	{r0, r3, pc}
 23fb602:	0000      	.short	0x0000
 23fb604:	1007ad38 	.word	0x1007ad38
 23fb608:	00000004 	.word	0x00000004

023fb60c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fb60c:	b509      	push	{r0, r3, lr}
 23fb60e:	4804      	ldr	r0, [pc, #16]	; (23fb620 <realloc+0x14>)
 23fb610:	6800      	ldr	r0, [r0, #0]
 23fb612:	4b04      	ldr	r3, [pc, #16]	; (23fb624 <realloc+0x18>)
 23fb614:	4403      	add	r3, r0
 23fb616:	681b      	ldr	r3, [r3, #0]
 23fb618:	689b      	ldr	r3, [r3, #8]
 23fb61a:	9302      	str	r3, [sp, #8]
 23fb61c:	bd09      	pop	{r0, r3, pc}
 23fb61e:	0000      	.short	0x0000
 23fb620:	1007ad38 	.word	0x1007ad38
 23fb624:	00000004 	.word	0x00000004

023fb628 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fb628:	b509      	push	{r0, r3, lr}
 23fb62a:	4804      	ldr	r0, [pc, #16]	; (23fb63c <vsnprintf+0x14>)
 23fb62c:	6800      	ldr	r0, [r0, #0]
 23fb62e:	4b04      	ldr	r3, [pc, #16]	; (23fb640 <vsnprintf+0x18>)
 23fb630:	4403      	add	r3, r0
 23fb632:	681b      	ldr	r3, [r3, #0]
 23fb634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb636:	9302      	str	r3, [sp, #8]
 23fb638:	bd09      	pop	{r0, r3, pc}
 23fb63a:	0000      	.short	0x0000
 23fb63c:	1007ad38 	.word	0x1007ad38
 23fb640:	00000004 	.word	0x00000004

023fb644 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fb644:	b509      	push	{r0, r3, lr}
 23fb646:	4804      	ldr	r0, [pc, #16]	; (23fb658 <abort+0x14>)
 23fb648:	6800      	ldr	r0, [r0, #0]
 23fb64a:	4b04      	ldr	r3, [pc, #16]	; (23fb65c <abort+0x18>)
 23fb64c:	4403      	add	r3, r0
 23fb64e:	681b      	ldr	r3, [r3, #0]
 23fb650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb652:	9302      	str	r3, [sp, #8]
 23fb654:	bd09      	pop	{r0, r3, pc}
 23fb656:	0000      	.short	0x0000
 23fb658:	1007ad38 	.word	0x1007ad38
 23fb65c:	00000004 	.word	0x00000004

023fb660 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fb660:	b509      	push	{r0, r3, lr}
 23fb662:	4804      	ldr	r0, [pc, #16]	; (23fb674 <_malloc_r+0x14>)
 23fb664:	6800      	ldr	r0, [r0, #0]
 23fb666:	4b04      	ldr	r3, [pc, #16]	; (23fb678 <_malloc_r+0x18>)
 23fb668:	4403      	add	r3, r0
 23fb66a:	681b      	ldr	r3, [r3, #0]
 23fb66c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb66e:	9302      	str	r3, [sp, #8]
 23fb670:	bd09      	pop	{r0, r3, pc}
 23fb672:	0000      	.short	0x0000
 23fb674:	1007ad38 	.word	0x1007ad38
 23fb678:	00000004 	.word	0x00000004

023fb67c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fb67c:	b509      	push	{r0, r3, lr}
 23fb67e:	4804      	ldr	r0, [pc, #16]	; (23fb690 <__errno+0x14>)
 23fb680:	6800      	ldr	r0, [r0, #0]
 23fb682:	4b04      	ldr	r3, [pc, #16]	; (23fb694 <__errno+0x18>)
 23fb684:	4403      	add	r3, r0
 23fb686:	681b      	ldr	r3, [r3, #0]
 23fb688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb68a:	9302      	str	r3, [sp, #8]
 23fb68c:	bd09      	pop	{r0, r3, pc}
 23fb68e:	0000      	.short	0x0000
 23fb690:	1007ad38 	.word	0x1007ad38
 23fb694:	00000004 	.word	0x00000004

023fb698 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fb698:	b509      	push	{r0, r3, lr}
 23fb69a:	4804      	ldr	r0, [pc, #16]	; (23fb6ac <__assert_func+0x14>)
 23fb69c:	6800      	ldr	r0, [r0, #0]
 23fb69e:	4b04      	ldr	r3, [pc, #16]	; (23fb6b0 <__assert_func+0x18>)
 23fb6a0:	4403      	add	r3, r0
 23fb6a2:	681b      	ldr	r3, [r3, #0]
 23fb6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb6a6:	9302      	str	r3, [sp, #8]
 23fb6a8:	bd09      	pop	{r0, r3, pc}
 23fb6aa:	0000      	.short	0x0000
 23fb6ac:	1007ad38 	.word	0x1007ad38
 23fb6b0:	00000004 	.word	0x00000004

023fb6b4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fb6b4:	b509      	push	{r0, r3, lr}
 23fb6b6:	4804      	ldr	r0, [pc, #16]	; (23fb6c8 <newlib_impure_ptr_callback+0x14>)
 23fb6b8:	6800      	ldr	r0, [r0, #0]
 23fb6ba:	4b04      	ldr	r3, [pc, #16]	; (23fb6cc <newlib_impure_ptr_callback+0x18>)
 23fb6bc:	4403      	add	r3, r0
 23fb6be:	681b      	ldr	r3, [r3, #0]
 23fb6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb6c2:	9302      	str	r3, [sp, #8]
 23fb6c4:	bd09      	pop	{r0, r3, pc}
 23fb6c6:	0000      	.short	0x0000
 23fb6c8:	1007ad38 	.word	0x1007ad38
 23fb6cc:	00000004 	.word	0x00000004

023fb6d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fb6d0:	2200      	movs	r2, #0
 23fb6d2:	6840      	ldr	r0, [r0, #4]
 23fb6d4:	4611      	mov	r1, r2
 23fb6d6:	f7ff be81 	b.w	23fb3dc <network_listening>

023fb6da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fb6da:	2200      	movs	r2, #0
 23fb6dc:	6840      	ldr	r0, [r0, #4]
 23fb6de:	4611      	mov	r1, r2
 23fb6e0:	f7ff be98 	b.w	23fb414 <network_get_listen_timeout>

023fb6e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fb6e4:	2200      	movs	r2, #0
 23fb6e6:	6840      	ldr	r0, [r0, #4]
 23fb6e8:	f7ff be86 	b.w	23fb3f8 <network_set_listen_timeout>

023fb6ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fb6ec:	2200      	movs	r2, #0
 23fb6ee:	6840      	ldr	r0, [r0, #4]
 23fb6f0:	f081 0101 	eor.w	r1, r1, #1
 23fb6f4:	f7ff be64 	b.w	23fb3c0 <network_listen>

023fb6f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fb6f8:	2300      	movs	r3, #0
 23fb6fa:	6840      	ldr	r0, [r0, #4]
 23fb6fc:	461a      	mov	r2, r3
 23fb6fe:	4619      	mov	r1, r3
 23fb700:	f7ff be50 	b.w	23fb3a4 <network_off>

023fb704 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fb704:	2300      	movs	r3, #0
 23fb706:	6840      	ldr	r0, [r0, #4]
 23fb708:	461a      	mov	r2, r3
 23fb70a:	4619      	mov	r1, r3
 23fb70c:	f7ff be3c 	b.w	23fb388 <network_on>

023fb710 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fb710:	2200      	movs	r2, #0
 23fb712:	6840      	ldr	r0, [r0, #4]
 23fb714:	4611      	mov	r1, r2
 23fb716:	f7ff be29 	b.w	23fb36c <network_ready>

023fb71a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fb71a:	2200      	movs	r2, #0
 23fb71c:	6840      	ldr	r0, [r0, #4]
 23fb71e:	4611      	mov	r1, r2
 23fb720:	f7ff be08 	b.w	23fb334 <network_connecting>

023fb724 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fb724:	2200      	movs	r2, #0
 23fb726:	2102      	movs	r1, #2
 23fb728:	6840      	ldr	r0, [r0, #4]
 23fb72a:	f7ff be11 	b.w	23fb350 <network_disconnect>

023fb72e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fb72e:	2300      	movs	r3, #0
 23fb730:	6840      	ldr	r0, [r0, #4]
 23fb732:	461a      	mov	r2, r3
 23fb734:	f7ff bdf0 	b.w	23fb318 <network_connect>

023fb738 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fb738:	2203      	movs	r2, #3
 23fb73a:	4b02      	ldr	r3, [pc, #8]	; (23fb744 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fb73c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fb73e:	4a02      	ldr	r2, [pc, #8]	; (23fb748 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fb740:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fb742:	4770      	bx	lr
 23fb744:	1007ae54 	.word	0x1007ae54
 23fb748:	023ffa70 	.word	0x023ffa70

023fb74c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fb74c:	2100      	movs	r1, #0
 23fb74e:	f7ff bccb 	b.w	23fb0e8 <hal_spi_release>

023fb752 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fb752:	2100      	movs	r1, #0
 23fb754:	f7ff bcba 	b.w	23fb0cc <hal_spi_acquire>

023fb758 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fb758:	b510      	push	{r4, lr}
 23fb75a:	4604      	mov	r4, r0
 23fb75c:	4608      	mov	r0, r1
{
    _spi = spi;
 23fb75e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fb760:	f7ff fc8a 	bl	23fb078 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fb764:	2300      	movs	r3, #0
}
 23fb766:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fb768:	6063      	str	r3, [r4, #4]
}
 23fb76a:	bd10      	pop	{r4, pc}

023fb76c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fb76c:	b513      	push	{r0, r1, r4, lr}
 23fb76e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fb770:	7800      	ldrb	r0, [r0, #0]
 23fb772:	f7ff ffee 	bl	23fb752 <_ZN8SPIClass4lockEv.isra.0>
 23fb776:	b958      	cbnz	r0, 23fb790 <_ZN8SPIClass5beginEv+0x24>
 23fb778:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fb77a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fb77e:	9001      	str	r0, [sp, #4]
 23fb780:	f7ff fc42 	bl	23fb008 <hal_spi_begin>
        unlock();
 23fb784:	9801      	ldr	r0, [sp, #4]
    }
}
 23fb786:	b002      	add	sp, #8
 23fb788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fb78c:	f7ff bfde 	b.w	23fb74c <_ZN8SPIClass6unlockEv.isra.0>
 23fb790:	b002      	add	sp, #8
 23fb792:	bd10      	pop	{r4, pc}

023fb794 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23fb794:	b513      	push	{r0, r1, r4, lr}
 23fb796:	4604      	mov	r4, r0
    if (!lock())
 23fb798:	7800      	ldrb	r0, [r0, #0]
{
 23fb79a:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fb79c:	f7ff ffd9 	bl	23fb752 <_ZN8SPIClass4lockEv.isra.0>
 23fb7a0:	9901      	ldr	r1, [sp, #4]
 23fb7a2:	b948      	cbnz	r0, 23fb7b8 <_ZN8SPIClass11setDataModeEh+0x24>
 23fb7a4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fb7a6:	9001      	str	r0, [sp, #4]
 23fb7a8:	f7ff fc3c 	bl	23fb024 <hal_spi_set_data_mode>
        unlock();
 23fb7ac:	9801      	ldr	r0, [sp, #4]
    }
}
 23fb7ae:	b002      	add	sp, #8
 23fb7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fb7b4:	f7ff bfca 	b.w	23fb74c <_ZN8SPIClass6unlockEv.isra.0>
 23fb7b8:	b002      	add	sp, #8
 23fb7ba:	bd10      	pop	{r4, pc}

023fb7bc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fb7bc:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fb7be:	2400      	movs	r4, #0
 23fb7c0:	0840      	lsrs	r0, r0, #1
 23fb7c2:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fb7c4:	6818      	ldr	r0, [r3, #0]
 23fb7c6:	b2e5      	uxtb	r5, r4
 23fb7c8:	4288      	cmp	r0, r1
 23fb7ca:	d906      	bls.n	23fb7da <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fb7cc:	3401      	adds	r4, #1
 23fb7ce:	2c08      	cmp	r4, #8
 23fb7d0:	d002      	beq.n	23fb7d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fb7d2:	0840      	lsrs	r0, r0, #1
 23fb7d4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fb7d6:	e7f5      	b.n	23fb7c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fb7d8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fb7da:	4b02      	ldr	r3, [pc, #8]	; (23fb7e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fb7dc:	5d5b      	ldrb	r3, [r3, r5]
 23fb7de:	7013      	strb	r3, [r2, #0]
}
 23fb7e0:	bd30      	pop	{r4, r5, pc}
 23fb7e2:	bf00      	nop
 23fb7e4:	023ffaa4 	.word	0x023ffaa4

023fb7e8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fb7e8:	2300      	movs	r3, #0
{
 23fb7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb7ee:	4604      	mov	r4, r0
 23fb7f0:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fb7f2:	7800      	ldrb	r0, [r0, #0]
{
 23fb7f4:	460e      	mov	r6, r1
 23fb7f6:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fb7f8:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fb7fa:	f7ff ffaa 	bl	23fb752 <_ZN8SPIClass4lockEv.isra.0>
 23fb7fe:	4605      	mov	r5, r0
 23fb800:	bb00      	cbnz	r0, 23fb844 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fb802:	4601      	mov	r1, r0
 23fb804:	2214      	movs	r2, #20
 23fb806:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fb808:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fb80c:	f002 ff87 	bl	23fe71e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fb810:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fb812:	462a      	mov	r2, r5
 23fb814:	4640      	mov	r0, r8
 23fb816:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fb818:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fb81c:	f7ff fc48 	bl	23fb0b0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fb820:	fb07 f106 	mul.w	r1, r7, r6
 23fb824:	9804      	ldr	r0, [sp, #16]
 23fb826:	ab02      	add	r3, sp, #8
 23fb828:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fb82c:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fb830:	f7ff ffc4 	bl	23fb7bc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fb834:	7820      	ldrb	r0, [r4, #0]
 23fb836:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fb83a:	f7ff fc01 	bl	23fb040 <hal_spi_set_clock_divider>
        unlock();
 23fb83e:	7820      	ldrb	r0, [r4, #0]
 23fb840:	f7ff ff84 	bl	23fb74c <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23fb844:	9802      	ldr	r0, [sp, #8]
 23fb846:	b008      	add	sp, #32
 23fb848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb84c <_ZN8SPIClass15setClockDividerEh>:
{
 23fb84c:	b538      	push	{r3, r4, r5, lr}
 23fb84e:	4604      	mov	r4, r0
    if (!lock())
 23fb850:	7800      	ldrb	r0, [r0, #0]
{
 23fb852:	460d      	mov	r5, r1
    if (!lock())
 23fb854:	f7ff ff7d 	bl	23fb752 <_ZN8SPIClass4lockEv.isra.0>
 23fb858:	4603      	mov	r3, r0
 23fb85a:	b9d0      	cbnz	r0, 23fb892 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
 23fb85c:	6861      	ldr	r1, [r4, #4]
 23fb85e:	b199      	cbz	r1, 23fb888 <_ZN8SPIClass15setClockDividerEh+0x3c>
 23fb860:	4a0c      	ldr	r2, [pc, #48]	; (23fb894 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
 23fb862:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fb866:	4285      	cmp	r5, r0
 23fb868:	d002      	beq.n	23fb870 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
 23fb86a:	3301      	adds	r3, #1
 23fb86c:	2b08      	cmp	r3, #8
 23fb86e:	d1f8      	bne.n	23fb862 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
 23fb870:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 23fb872:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 23fb874:	2201      	movs	r2, #1
 23fb876:	4620      	mov	r0, r4
 23fb878:	40d9      	lsrs	r1, r3
 23fb87a:	f7ff ffb5 	bl	23fb7e8 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 23fb87e:	7820      	ldrb	r0, [r4, #0]
}
 23fb880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
 23fb884:	f7ff bf62 	b.w	23fb74c <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
 23fb888:	4629      	mov	r1, r5
 23fb88a:	7820      	ldrb	r0, [r4, #0]
 23fb88c:	f7ff fbd8 	bl	23fb040 <hal_spi_set_clock_divider>
 23fb890:	e7f5      	b.n	23fb87e <_ZN8SPIClass15setClockDividerEh+0x32>
}
 23fb892:	bd38      	pop	{r3, r4, r5, pc}
 23fb894:	023ffaa4 	.word	0x023ffaa4

023fb898 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 23fb898:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fb89a:	7800      	ldrb	r0, [r0, #0]
 23fb89c:	f7ff fbde 	bl	23fb05c <hal_spi_transfer>
}
 23fb8a0:	b2c0      	uxtb	r0, r0
 23fb8a2:	bd08      	pop	{r3, pc}

023fb8a4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23fb8a4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23fb8a6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fb8a8:	4604      	mov	r4, r0
      if (_M_manager)
 23fb8aa:	b113      	cbz	r3, 23fb8b2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fb8ac:	2203      	movs	r2, #3
 23fb8ae:	4601      	mov	r1, r0
 23fb8b0:	4798      	blx	r3
    }
 23fb8b2:	4620      	mov	r0, r4
 23fb8b4:	bd10      	pop	{r4, pc}

023fb8b6 <_ZN11SystemClass13assetsHandledEb>:
    }
    return assets;
}

int SystemClass::assetsHandled(bool state) {
    return asset_manager_set_consumer_state(state ? ASSET_MANAGER_CONSUMER_STATE_HANDLED : ASSET_MANAGER_CONSUMER_STATE_WANT, nullptr);
 23fb8b6:	2800      	cmp	r0, #0
 23fb8b8:	f04f 0100 	mov.w	r1, #0
 23fb8bc:	bf14      	ite	ne
 23fb8be:	2001      	movne	r0, #1
 23fb8c0:	2002      	moveq	r0, #2
 23fb8c2:	f7ff be25 	b.w	23fb510 <asset_manager_set_consumer_state>

023fb8c6 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 23fb8c6:	b510      	push	{r4, lr}
 23fb8c8:	4604      	mov	r4, r0
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23fb8ca:	6800      	ldr	r0, [r0, #0]
 23fb8cc:	b108      	cbz	r0, 23fb8d2 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev+0xc>
	  delete [] __ptr;
 23fb8ce:	f7fd f8de 	bl	23f8a8e <_ZdaPv>
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
 23fb8d2:	4620      	mov	r0, r4
 23fb8d4:	bd10      	pop	{r4, pc}

023fb8d6 <_ZN8particle6BufferC1Ej>:
private:
    std::unique_ptr<char[]> buffer_;
    size_t size_;
};

inline Buffer::Buffer(size_t size)
 23fb8d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 23fb8d8:	2700      	movs	r7, #0
 23fb8da:	4604      	mov	r4, r0
 23fb8dc:	460d      	mov	r5, r1
        : size_(size) {
 23fb8de:	e9c0 7100 	strd	r7, r1, [r0]
    if (size_ > 0) {
 23fb8e2:	b1c9      	cbz	r1, 23fb918 <_ZN8particle6BufferC1Ej+0x42>

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 23fb8e4:	4608      	mov	r0, r1
 23fb8e6:	f7fd f8d0 	bl	23f8a8a <_Znaj>
 23fb8ea:	4606      	mov	r6, r0
 23fb8ec:	b138      	cbz	r0, 23fb8fe <_ZN8particle6BufferC1Ej+0x28>
 23fb8ee:	1e6b      	subs	r3, r5, #1
 23fb8f0:	3301      	adds	r3, #1
 23fb8f2:	bfac      	ite	ge
 23fb8f4:	462a      	movge	r2, r5
 23fb8f6:	463a      	movlt	r2, r7
 23fb8f8:	4639      	mov	r1, r7
 23fb8fa:	f002 ff10 	bl	23fe71e <memset>
	_M_ptr() = nullptr;
 23fb8fe:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 23fb900:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = nullptr;
 23fb902:	9301      	str	r3, [sp, #4]
	_M_ptr() = __p;
 23fb904:	6026      	str	r6, [r4, #0]
	if (__old_p)
 23fb906:	b108      	cbz	r0, 23fb90c <_ZN8particle6BufferC1Ej+0x36>
	  delete [] __ptr;
 23fb908:	f7fd f8c1 	bl	23f8a8e <_ZdaPv>
        buffer_ = std::make_unique<char[]>(size_);
 23fb90c:	a801      	add	r0, sp, #4
 23fb90e:	f7ff ffda 	bl	23fb8c6 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
        if (!buffer_) {
 23fb912:	6823      	ldr	r3, [r4, #0]
 23fb914:	b903      	cbnz	r3, 23fb918 <_ZN8particle6BufferC1Ej+0x42>
            size_ = 0;
 23fb916:	6063      	str	r3, [r4, #4]
        }
    }
}
 23fb918:	4620      	mov	r0, r4
 23fb91a:	b003      	add	sp, #12
 23fb91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fb920 <_ZN8particle16ApplicationAssetC1ERKS0_>:
/**
 * Application asset.
 * 
 * Instances of this class are returned in `System.assetsAvailable()` and `System.assetsRequired()`
 */
class ApplicationAsset: public Stream {
 23fb920:	b538      	push	{r3, r4, r5, lr}
 23fb922:	460d      	mov	r5, r1
 23fb924:	4604      	mov	r4, r0
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 23fb926:	684b      	ldr	r3, [r1, #4]
 23fb928:	3110      	adds	r1, #16
 23fb92a:	6043      	str	r3, [r0, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 23fb92c:	f851 3c08 	ldr.w	r3, [r1, #-8]
 23fb930:	6083      	str	r3, [r0, #8]
 23fb932:	f851 3c04 	ldr.w	r3, [r1, #-4]
 23fb936:	60c3      	str	r3, [r0, #12]
 23fb938:	4b13      	ldr	r3, [pc, #76]	; (23fb988 <_ZN8particle16ApplicationAssetC1ERKS0_+0x68>)
 23fb93a:	f840 3b10 	str.w	r3, [r0], #16
 23fb93e:	f000 f99a 	bl	23fbc76 <_ZN6StringC1ERKS_>
    /**
     * Copy cosntructor.
     * 
     * @param other Asset Hash object to copy from.
     */
    AssetHash(const AssetHash& other) = default;
 23fb942:	f895 3020 	ldrb.w	r3, [r5, #32]
inline Buffer::Buffer(const uint8_t* data, size_t size)
        : Buffer((const char*)data, size) {

}
inline Buffer::Buffer(const Buffer& other)
        : Buffer(other.size()) {
 23fb946:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fb94a:	f884 3020 	strb.w	r3, [r4, #32]
 23fb94e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 23fb950:	f7ff ffc1 	bl	23fb8d6 <_ZN8particle6BufferC1Ej>
    if (size_ > 0 && other.size() > 0) {
 23fb954:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23fb956:	b12a      	cbz	r2, 23fb964 <_ZN8particle16ApplicationAssetC1ERKS0_+0x44>
 23fb958:	6aab      	ldr	r3, [r5, #40]	; 0x28
 23fb95a:	b11b      	cbz	r3, 23fb964 <_ZN8particle16ApplicationAssetC1ERKS0_+0x44>
        memcpy(buffer_.get(), other.buffer_.get(), size_);
 23fb95c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 23fb95e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb960:	f002 feb6 	bl	23fe6d0 <memcpy>
 23fb964:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 23fb966:	62e3      	str	r3, [r4, #44]	; 0x2c
 23fb968:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 23fb96a:	6323      	str	r3, [r4, #48]	; 0x30
 23fb96c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23fb970:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fb974:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fb976:	63a3      	str	r3, [r4, #56]	; 0x38
      : _M_pi(__r._M_pi)
 23fb978:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23fb97a:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (_M_pi != 0)
 23fb97c:	b113      	cbz	r3, 23fb984 <_ZN8particle16ApplicationAssetC1ERKS0_+0x64>
    { ++_M_use_count; }
 23fb97e:	685a      	ldr	r2, [r3, #4]
 23fb980:	3201      	adds	r2, #1
 23fb982:	605a      	str	r2, [r3, #4]
 23fb984:	4620      	mov	r0, r4
 23fb986:	bd38      	pop	{r3, r4, r5, pc}
 23fb988:	023ffad8 	.word	0x023ffad8

023fb98c <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 23fb98c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb990:	4606      	mov	r6, r0
 23fb992:	460c      	mov	r4, r1
 23fb994:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 23fb996:	d915      	bls.n	23fb9c4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
 23fb998:	4290      	cmp	r0, r2
 23fb99a:	d214      	bcs.n	23fb9c6 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3a>
            // Move elements in reverse order
            --p;
            --end;
 23fb99c:	f1a2 0540 	sub.w	r5, r2, #64	; 0x40
            dest += end - p - 1;
 23fb9a0:	1a6b      	subs	r3, r5, r1
 23fb9a2:	f1a1 0740 	sub.w	r7, r1, #64	; 0x40
 23fb9a6:	441e      	add	r6, r3
            for (; end != p; --end, --dest) {
 23fb9a8:	42af      	cmp	r7, r5
 23fb9aa:	d01a      	beq.n	23fb9e2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
                new(dest) T(std::move(*end));
 23fb9ac:	b11e      	cbz	r6, 23fb9b6 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fb9ae:	4629      	mov	r1, r5
 23fb9b0:	4630      	mov	r0, r6
 23fb9b2:	f7ff ffb5 	bl	23fb920 <_ZN8particle16ApplicationAssetC1ERKS0_>
                end->~T();
 23fb9b6:	682b      	ldr	r3, [r5, #0]
 23fb9b8:	4628      	mov	r0, r5
 23fb9ba:	681b      	ldr	r3, [r3, #0]
 23fb9bc:	4798      	blx	r3
            for (; end != p; --end, --dest) {
 23fb9be:	3d40      	subs	r5, #64	; 0x40
 23fb9c0:	3e40      	subs	r6, #64	; 0x40
 23fb9c2:	e7f1      	b.n	23fb9a8 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
            }
        } else if (dest != p) {
 23fb9c4:	d00d      	beq.n	23fb9e2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
            for (; p != end; ++p, ++dest) {
 23fb9c6:	42ac      	cmp	r4, r5
 23fb9c8:	d00b      	beq.n	23fb9e2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
                new(dest) T(std::move(*p));
 23fb9ca:	b11e      	cbz	r6, 23fb9d4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x48>
 23fb9cc:	4621      	mov	r1, r4
 23fb9ce:	4630      	mov	r0, r6
 23fb9d0:	f7ff ffa6 	bl	23fb920 <_ZN8particle16ApplicationAssetC1ERKS0_>
                p->~T();
 23fb9d4:	6823      	ldr	r3, [r4, #0]
 23fb9d6:	4620      	mov	r0, r4
 23fb9d8:	681b      	ldr	r3, [r3, #0]
 23fb9da:	4798      	blx	r3
            for (; p != end; ++p, ++dest) {
 23fb9dc:	3440      	adds	r4, #64	; 0x40
 23fb9de:	3640      	adds	r6, #64	; 0x40
 23fb9e0:	e7f1      	b.n	23fb9c6 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3a>
            }
        }
    }
 23fb9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb9e4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fb9e4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fb9e6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fb9e8:	4605      	mov	r5, r0
        if (n > 0) {
 23fb9ea:	dd11      	ble.n	23fba10 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 23fb9ec:	01b0      	lsls	r0, r6, #6
 23fb9ee:	f7ff fdf1 	bl	23fb5d4 <malloc>
            if (!d) {
 23fb9f2:	4604      	mov	r4, r0
 23fb9f4:	b158      	cbz	r0, 23fba0e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fb9f6:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fb9fa:	eb01 1282 	add.w	r2, r1, r2, lsl #6
 23fb9fe:	f7ff ffc5 	bl	23fb98c <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 23fba02:	6828      	ldr	r0, [r5, #0]
 23fba04:	f7ff fdf4 	bl	23fb5f0 <free>
        return true;
 23fba08:	2001      	movs	r0, #1
        data_ = d;
 23fba0a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fba0c:	60ae      	str	r6, [r5, #8]
    }
 23fba0e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fba10:	2400      	movs	r4, #0
 23fba12:	e7f6      	b.n	23fba02 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fba14 <_ZN8particle16ApplicationAssetD1Ev>:

    /**
     * Destroy the Application Asset object.
     * 
     */
    virtual ~ApplicationAsset() = default;
 23fba14:	b538      	push	{r3, r4, r5, lr}
 23fba16:	4b0f      	ldr	r3, [pc, #60]	; (23fba54 <_ZN8particle16ApplicationAssetD1Ev+0x40>)
	if (_M_pi != nullptr)
 23fba18:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 23fba1a:	4605      	mov	r5, r0
 23fba1c:	6003      	str	r3, [r0, #0]
 23fba1e:	b17c      	cbz	r4, 23fba40 <_ZN8particle16ApplicationAssetD1Ev+0x2c>
      if (--_M_use_count == 0)
 23fba20:	6863      	ldr	r3, [r4, #4]
 23fba22:	3b01      	subs	r3, #1
 23fba24:	6063      	str	r3, [r4, #4]
 23fba26:	b95b      	cbnz	r3, 23fba40 <_ZN8particle16ApplicationAssetD1Ev+0x2c>
          _M_dispose();
 23fba28:	6823      	ldr	r3, [r4, #0]
 23fba2a:	4620      	mov	r0, r4
 23fba2c:	689b      	ldr	r3, [r3, #8]
 23fba2e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fba30:	68a3      	ldr	r3, [r4, #8]
 23fba32:	3b01      	subs	r3, #1
 23fba34:	60a3      	str	r3, [r4, #8]
 23fba36:	b91b      	cbnz	r3, 23fba40 <_ZN8particle16ApplicationAssetD1Ev+0x2c>
            _M_destroy();
 23fba38:	6823      	ldr	r3, [r4, #0]
 23fba3a:	4620      	mov	r0, r4
 23fba3c:	68db      	ldr	r3, [r3, #12]
 23fba3e:	4798      	blx	r3
class Buffer {
 23fba40:	f105 0024 	add.w	r0, r5, #36	; 0x24
 23fba44:	f7ff ff3f 	bl	23fb8c6 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
 23fba48:	f105 0010 	add.w	r0, r5, #16
 23fba4c:	f000 f87c 	bl	23fbb48 <_ZN6StringD1Ev>
 23fba50:	4628      	mov	r0, r5
 23fba52:	bd38      	pop	{r3, r4, r5, pc}
 23fba54:	023ffad8 	.word	0x023ffad8

023fba58 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fba58:	b530      	push	{r4, r5, lr}
 23fba5a:	4604      	mov	r4, r0
 23fba5c:	b091      	sub	sp, #68	; 0x44
    return insert(size_, std::move(value));
 23fba5e:	6845      	ldr	r5, [r0, #4]
 23fba60:	4668      	mov	r0, sp
 23fba62:	f7ff ff5d 	bl	23fb920 <_ZN8particle16ApplicationAssetC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fba66:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fba6a:	4299      	cmp	r1, r3
 23fba6c:	da0f      	bge.n	23fba8e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x36>
        return false;
    }
    T* const p = data_ + i;
 23fba6e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fba70:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fba72:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    move(p + 1, p, data_ + size_);
 23fba76:	4629      	mov	r1, r5
 23fba78:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 23fba7c:	f105 0040 	add.w	r0, r5, #64	; 0x40
 23fba80:	f7ff ff84 	bl	23fb98c <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fba84:	b975      	cbnz	r5, 23fbaa4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x4c>
    ++size_;
 23fba86:	6863      	ldr	r3, [r4, #4]
 23fba88:	3301      	adds	r3, #1
 23fba8a:	6063      	str	r3, [r4, #4]
    return true;
 23fba8c:	e005      	b.n	23fba9a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x42>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fba8e:	4620      	mov	r0, r4
 23fba90:	3101      	adds	r1, #1
 23fba92:	f7ff ffa7 	bl	23fb9e4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fba96:	2800      	cmp	r0, #0
 23fba98:	d1e9      	bne.n	23fba6e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x16>
    return insert(size_, std::move(value));
 23fba9a:	4668      	mov	r0, sp
 23fba9c:	f7ff ffba 	bl	23fba14 <_ZN8particle16ApplicationAssetD1Ev>
}
 23fbaa0:	b011      	add	sp, #68	; 0x44
 23fbaa2:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
 23fbaa4:	4669      	mov	r1, sp
 23fbaa6:	4628      	mov	r0, r5
 23fbaa8:	f7ff ff3a 	bl	23fb920 <_ZN8particle16ApplicationAssetC1ERKS0_>
 23fbaac:	e7eb      	b.n	23fba86 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x2e>

023fbaae <_ZN11SystemClass15assetsAvailableEv>:
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fbaae:	b570      	push	{r4, r5, r6, lr}
        capacity_(0) {
 23fbab0:	2400      	movs	r4, #0
    asset_manager_info info = {};
 23fbab2:	261c      	movs	r6, #28
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fbab4:	b098      	sub	sp, #96	; 0x60
    asset_manager_info info = {};
 23fbab6:	4621      	mov	r1, r4
 23fbab8:	e9c0 4400 	strd	r4, r4, [r0]
 23fbabc:	6084      	str	r4, [r0, #8]
 23fbabe:	4632      	mov	r2, r6
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fbac0:	4605      	mov	r5, r0
    asset_manager_info info = {};
 23fbac2:	a801      	add	r0, sp, #4
 23fbac4:	f002 fe2b 	bl	23fe71e <memset>
    int r = asset_manager_get_info(&info, nullptr);
 23fbac8:	4621      	mov	r1, r4
 23fbaca:	a801      	add	r0, sp, #4
    info.size = sizeof(info);
 23fbacc:	f8ad 6004 	strh.w	r6, [sp, #4]
    int r = asset_manager_get_info(&info, nullptr);
 23fbad0:	f7ff fd02 	bl	23fb4d8 <asset_manager_get_info>
    if (r) {
 23fbad4:	4604      	mov	r4, r0
 23fbad6:	b9c0      	cbnz	r0, 23fbb0a <_ZN11SystemClass15assetsAvailableEv+0x5c>
    for (size_t i = 0; i < info.available_count; i++) {
 23fbad8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 23fbadc:	42a3      	cmp	r3, r4
 23fbade:	d910      	bls.n	23fbb02 <_ZN11SystemClass15assetsAvailableEv+0x54>
        assets.append(ApplicationAsset(a));
 23fbae0:	9b06      	ldr	r3, [sp, #24]
        asset_manager_asset* a = (asset_manager_asset*)(((uint8_t*)info.available) + info.asset_size * i);
 23fbae2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        assets.append(ApplicationAsset(a));
 23fbae6:	a808      	add	r0, sp, #32
 23fbae8:	fb04 3101 	mla	r1, r4, r1, r3
 23fbaec:	f000 fa0e 	bl	23fbf0c <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset>
 23fbaf0:	4628      	mov	r0, r5
 23fbaf2:	a908      	add	r1, sp, #32
 23fbaf4:	f7ff ffb0 	bl	23fba58 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0>
 23fbaf8:	a808      	add	r0, sp, #32
 23fbafa:	f7ff ff8b 	bl	23fba14 <_ZN8particle16ApplicationAssetD1Ev>
    for (size_t i = 0; i < info.available_count; i++) {
 23fbafe:	3401      	adds	r4, #1
 23fbb00:	e7ea      	b.n	23fbad8 <_ZN11SystemClass15assetsAvailableEv+0x2a>
    SCOPE_GUARD({
 23fbb02:	2100      	movs	r1, #0
 23fbb04:	a801      	add	r0, sp, #4
 23fbb06:	f7ff fcf5 	bl	23fb4f4 <asset_manager_free_info>
}
 23fbb0a:	4628      	mov	r0, r5
 23fbb0c:	b018      	add	sp, #96	; 0x60
 23fbb0e:	bd70      	pop	{r4, r5, r6, pc}

023fbb10 <_ZN8particle16ApplicationAssetD0Ev>:
 23fbb10:	b510      	push	{r4, lr}
 23fbb12:	4604      	mov	r4, r0
 23fbb14:	f7ff ff7e 	bl	23fba14 <_ZN8particle16ApplicationAssetD1Ev>
 23fbb18:	4620      	mov	r0, r4
 23fbb1a:	2140      	movs	r1, #64	; 0x40
 23fbb1c:	f7fc ffb9 	bl	23f8a92 <_ZdlPvj>
 23fbb20:	4620      	mov	r0, r4
 23fbb22:	bd10      	pop	{r4, pc}

023fbb24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fbb24:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fbb26:	2000      	movs	r0, #0
 23fbb28:	4b04      	ldr	r3, [pc, #16]	; (23fbb3c <_GLOBAL__sub_I_System+0x18>)
 23fbb2a:	601a      	str	r2, [r3, #0]
 23fbb2c:	4b04      	ldr	r3, [pc, #16]	; (23fbb40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fbb2e:	4a05      	ldr	r2, [pc, #20]	; (23fbb44 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fbb30:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fbb34:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fbb36:	f7ff bb9b 	b.w	23fb270 <set_system_mode>
 23fbb3a:	bf00      	nop
 23fbb3c:	1007ae68 	.word	0x1007ae68
 23fbb40:	1007ae5c 	.word	0x1007ae5c
 23fbb44:	ffff0000 	.word	0xffff0000

023fbb48 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fbb48:	b510      	push	{r4, lr}
 23fbb4a:	4604      	mov	r4, r0
{
	free(buffer);
 23fbb4c:	6800      	ldr	r0, [r0, #0]
 23fbb4e:	f7ff fd4f 	bl	23fb5f0 <free>
}
 23fbb52:	4620      	mov	r0, r4
 23fbb54:	bd10      	pop	{r4, pc}

023fbb56 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fbb56:	b510      	push	{r4, lr}
 23fbb58:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fbb5a:	6800      	ldr	r0, [r0, #0]
 23fbb5c:	b108      	cbz	r0, 23fbb62 <_ZN6String10invalidateEv+0xc>
 23fbb5e:	f7ff fd47 	bl	23fb5f0 <free>
	buffer = NULL;
 23fbb62:	2300      	movs	r3, #0
	capacity = len = 0;
 23fbb64:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fbb68:	6023      	str	r3, [r4, #0]
}
 23fbb6a:	bd10      	pop	{r4, pc}

023fbb6c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fbb6c:	b538      	push	{r3, r4, r5, lr}
 23fbb6e:	4604      	mov	r4, r0
 23fbb70:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fbb72:	6800      	ldr	r0, [r0, #0]
 23fbb74:	3101      	adds	r1, #1
 23fbb76:	f7ff fd49 	bl	23fb60c <realloc>
	if (newbuffer) {
 23fbb7a:	b110      	cbz	r0, 23fbb82 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fbb7c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fbb80:	2001      	movs	r0, #1
	}
	return 0;
}
 23fbb82:	bd38      	pop	{r3, r4, r5, pc}

023fbb84 <_ZN6String7reserveEj>:
{
 23fbb84:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fbb86:	6803      	ldr	r3, [r0, #0]
{
 23fbb88:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fbb8a:	b123      	cbz	r3, 23fbb96 <_ZN6String7reserveEj+0x12>
 23fbb8c:	6843      	ldr	r3, [r0, #4]
 23fbb8e:	428b      	cmp	r3, r1
 23fbb90:	d301      	bcc.n	23fbb96 <_ZN6String7reserveEj+0x12>
 23fbb92:	2001      	movs	r0, #1
}
 23fbb94:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fbb96:	4620      	mov	r0, r4
 23fbb98:	f7ff ffe8 	bl	23fbb6c <_ZN6String12changeBufferEj>
 23fbb9c:	2800      	cmp	r0, #0
 23fbb9e:	d0f9      	beq.n	23fbb94 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fbba0:	68a3      	ldr	r3, [r4, #8]
 23fbba2:	2b00      	cmp	r3, #0
 23fbba4:	d1f5      	bne.n	23fbb92 <_ZN6String7reserveEj+0xe>
 23fbba6:	6822      	ldr	r2, [r4, #0]
 23fbba8:	7013      	strb	r3, [r2, #0]
 23fbbaa:	e7f2      	b.n	23fbb92 <_ZN6String7reserveEj+0xe>

023fbbac <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fbbac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbbae:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fbbb0:	4611      	mov	r1, r2
 23fbbb2:	9201      	str	r2, [sp, #4]
{
 23fbbb4:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fbbb6:	f7ff ffe5 	bl	23fbb84 <_ZN6String7reserveEj>
 23fbbba:	9a01      	ldr	r2, [sp, #4]
 23fbbbc:	b928      	cbnz	r0, 23fbbca <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fbbbe:	4620      	mov	r0, r4
 23fbbc0:	f7ff ffc9 	bl	23fbb56 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fbbc4:	4620      	mov	r0, r4
 23fbbc6:	b003      	add	sp, #12
 23fbbc8:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fbbca:	4629      	mov	r1, r5
	len = length;
 23fbbcc:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fbbce:	6820      	ldr	r0, [r4, #0]
 23fbbd0:	f002 fd7e 	bl	23fe6d0 <memcpy>
	buffer[len] = 0;
 23fbbd4:	2100      	movs	r1, #0
 23fbbd6:	6822      	ldr	r2, [r4, #0]
 23fbbd8:	68a3      	ldr	r3, [r4, #8]
 23fbbda:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fbbdc:	e7f2      	b.n	23fbbc4 <_ZN6String4copyEPKcj+0x18>

023fbbde <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fbbde:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fbbe0:	b513      	push	{r0, r1, r4, lr}
 23fbbe2:	4604      	mov	r4, r0
	capacity = 0;
 23fbbe4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fbbe8:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fbbea:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fbbec:	b141      	cbz	r1, 23fbc00 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fbbee:	4608      	mov	r0, r1
 23fbbf0:	9101      	str	r1, [sp, #4]
 23fbbf2:	f7fc ff23 	bl	23f8a3c <strlen>
 23fbbf6:	9901      	ldr	r1, [sp, #4]
 23fbbf8:	4602      	mov	r2, r0
 23fbbfa:	4620      	mov	r0, r4
 23fbbfc:	f7ff ffd6 	bl	23fbbac <_ZN6String4copyEPKcj>
}
 23fbc00:	4620      	mov	r0, r4
 23fbc02:	b002      	add	sp, #8
 23fbc04:	bd10      	pop	{r4, pc}

023fbc06 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fbc06:	b538      	push	{r3, r4, r5, lr}
 23fbc08:	4605      	mov	r5, r0
	if (buffer) {
 23fbc0a:	6800      	ldr	r0, [r0, #0]
{
 23fbc0c:	460c      	mov	r4, r1
	if (buffer) {
 23fbc0e:	b170      	cbz	r0, 23fbc2e <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fbc10:	686a      	ldr	r2, [r5, #4]
 23fbc12:	688b      	ldr	r3, [r1, #8]
 23fbc14:	429a      	cmp	r2, r3
 23fbc16:	d308      	bcc.n	23fbc2a <_ZN6String4moveERS_+0x24>
 23fbc18:	6809      	ldr	r1, [r1, #0]
 23fbc1a:	b131      	cbz	r1, 23fbc2a <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fbc1c:	f002 fdcd 	bl	23fe7ba <strcpy>
			len = rhs.len;
 23fbc20:	68a3      	ldr	r3, [r4, #8]
 23fbc22:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fbc24:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fbc26:	60a3      	str	r3, [r4, #8]
}
 23fbc28:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fbc2a:	f7ff fce1 	bl	23fb5f0 <free>
	buffer = rhs.buffer;
 23fbc2e:	6823      	ldr	r3, [r4, #0]
 23fbc30:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fbc32:	6863      	ldr	r3, [r4, #4]
 23fbc34:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fbc36:	68a3      	ldr	r3, [r4, #8]
 23fbc38:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fbc3a:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fbc3c:	e9c4 3300 	strd	r3, r3, [r4]
 23fbc40:	e7f1      	b.n	23fbc26 <_ZN6String4moveERS_+0x20>

023fbc42 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fbc42:	2300      	movs	r3, #0
String::String(String &&rval)
 23fbc44:	b510      	push	{r4, lr}
 23fbc46:	4604      	mov	r4, r0
	capacity = 0;
 23fbc48:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fbc4c:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fbc4e:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fbc50:	f7ff ffd9 	bl	23fbc06 <_ZN6String4moveERS_>
}
 23fbc54:	4620      	mov	r0, r4
 23fbc56:	bd10      	pop	{r4, pc}

023fbc58 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fbc58:	4288      	cmp	r0, r1
{
 23fbc5a:	b510      	push	{r4, lr}
 23fbc5c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fbc5e:	d005      	beq.n	23fbc6c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fbc60:	680b      	ldr	r3, [r1, #0]
 23fbc62:	b12b      	cbz	r3, 23fbc70 <_ZN6StringaSERKS_+0x18>
 23fbc64:	688a      	ldr	r2, [r1, #8]
 23fbc66:	4619      	mov	r1, r3
 23fbc68:	f7ff ffa0 	bl	23fbbac <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fbc6c:	4620      	mov	r0, r4
 23fbc6e:	bd10      	pop	{r4, pc}
	else invalidate();
 23fbc70:	f7ff ff71 	bl	23fbb56 <_ZN6String10invalidateEv>
 23fbc74:	e7fa      	b.n	23fbc6c <_ZN6StringaSERKS_+0x14>

023fbc76 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fbc76:	2300      	movs	r3, #0
String::String(const String &value)
 23fbc78:	b510      	push	{r4, lr}
 23fbc7a:	4604      	mov	r4, r0
	capacity = 0;
 23fbc7c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fbc80:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fbc82:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fbc84:	f7ff ffe8 	bl	23fbc58 <_ZN6StringaSERKS_>
}
 23fbc88:	4620      	mov	r0, r4
 23fbc8a:	bd10      	pop	{r4, pc}

023fbc8c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 23fbc8c:	4288      	cmp	r0, r1
{
 23fbc8e:	b510      	push	{r4, lr}
 23fbc90:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 23fbc92:	d001      	beq.n	23fbc98 <_ZN6StringaSEOS_+0xc>
 23fbc94:	f7ff ffb7 	bl	23fbc06 <_ZN6String4moveERS_>
	return *this;
}
 23fbc98:	4620      	mov	r0, r4
 23fbc9a:	bd10      	pop	{r4, pc}

023fbc9c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 23fbc9c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23fbc9e:	6882      	ldr	r2, [r0, #8]
 23fbca0:	b93a      	cbnz	r2, 23fbcb2 <_ZNK6String6equalsEPKc+0x16>
 23fbca2:	b121      	cbz	r1, 23fbcae <_ZNK6String6equalsEPKc+0x12>
 23fbca4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 23fbca6:	fab0 f080 	clz	r0, r0
 23fbcaa:	0940      	lsrs	r0, r0, #5
 23fbcac:	e000      	b.n	23fbcb0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23fbcae:	2001      	movs	r0, #1
}
 23fbcb0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 23fbcb2:	6800      	ldr	r0, [r0, #0]
 23fbcb4:	b909      	cbnz	r1, 23fbcba <_ZNK6String6equalsEPKc+0x1e>
 23fbcb6:	7800      	ldrb	r0, [r0, #0]
 23fbcb8:	e7f5      	b.n	23fbca6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 23fbcba:	f7fc feb5 	bl	23f8a28 <strcmp>
 23fbcbe:	e7f2      	b.n	23fbca6 <_ZNK6String6equalsEPKc+0xa>

023fbcc0 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 23fbcc0:	4613      	mov	r3, r2
 23fbcc2:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 23fbcc4:	688a      	ldr	r2, [r1, #8]
 23fbcc6:	6884      	ldr	r4, [r0, #8]
 23fbcc8:	1aa4      	subs	r4, r4, r2
 23fbcca:	429c      	cmp	r4, r3
 23fbccc:	d30a      	bcc.n	23fbce4 <_ZNK6String10startsWithERKS_j+0x24>
 23fbcce:	6800      	ldr	r0, [r0, #0]
 23fbcd0:	b138      	cbz	r0, 23fbce2 <_ZNK6String10startsWithERKS_j+0x22>
 23fbcd2:	6809      	ldr	r1, [r1, #0]
 23fbcd4:	b141      	cbz	r1, 23fbce8 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 23fbcd6:	4418      	add	r0, r3
 23fbcd8:	f002 fd95 	bl	23fe806 <strncmp>
 23fbcdc:	fab0 f080 	clz	r0, r0
 23fbce0:	0940      	lsrs	r0, r0, #5
}
 23fbce2:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 23fbce4:	2000      	movs	r0, #0
 23fbce6:	e7fc      	b.n	23fbce2 <_ZNK6String10startsWithERKS_j+0x22>
 23fbce8:	4608      	mov	r0, r1
 23fbcea:	e7fa      	b.n	23fbce2 <_ZNK6String10startsWithERKS_j+0x22>

023fbcec <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 23fbcec:	6882      	ldr	r2, [r0, #8]
 23fbcee:	688b      	ldr	r3, [r1, #8]
 23fbcf0:	429a      	cmp	r2, r3
 23fbcf2:	d302      	bcc.n	23fbcfa <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 23fbcf4:	2200      	movs	r2, #0
 23fbcf6:	f7ff bfe3 	b.w	23fbcc0 <_ZNK6String10startsWithERKS_j>
}
 23fbcfa:	2000      	movs	r0, #0
 23fbcfc:	4770      	bx	lr

023fbcfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fbcfe:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fbd00:	6843      	ldr	r3, [r0, #4]
    {
 23fbd02:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fbd04:	3b01      	subs	r3, #1
 23fbd06:	6043      	str	r3, [r0, #4]
 23fbd08:	b963      	cbnz	r3, 23fbd24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fbd0a:	6803      	ldr	r3, [r0, #0]
 23fbd0c:	689b      	ldr	r3, [r3, #8]
 23fbd0e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fbd10:	68a3      	ldr	r3, [r4, #8]
 23fbd12:	3b01      	subs	r3, #1
 23fbd14:	60a3      	str	r3, [r4, #8]
 23fbd16:	b92b      	cbnz	r3, 23fbd24 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fbd18:	6823      	ldr	r3, [r4, #0]
 23fbd1a:	4620      	mov	r0, r4
    }
 23fbd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fbd20:	68db      	ldr	r3, [r3, #12]
 23fbd22:	4718      	bx	r3
    }
 23fbd24:	bd10      	pop	{r4, pc}

023fbd26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbd26:	b570      	push	{r4, r5, r6, lr}
 23fbd28:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbd2a:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fbd2e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fbd32:	42ae      	cmp	r6, r5
 23fbd34:	d004      	beq.n	23fbd40 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fbd36:	4628      	mov	r0, r5
 23fbd38:	f7ff ff06 	bl	23fbb48 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fbd3c:	3510      	adds	r5, #16
 23fbd3e:	e7f8      	b.n	23fbd32 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fbd40:	6820      	ldr	r0, [r4, #0]
 23fbd42:	f7ff fc55 	bl	23fb5f0 <free>
}
 23fbd46:	4620      	mov	r0, r4
 23fbd48:	bd70      	pop	{r4, r5, r6, pc}

023fbd4a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fbd4a:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbd4c:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fbd4e:	460b      	mov	r3, r1
 23fbd50:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbd52:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fbd56:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fbd5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fbd5e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fbd62:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fbd66:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fbd6a:	b002      	add	sp, #8
 23fbd6c:	bd10      	pop	{r4, pc}
	...

023fbd70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fbd70:	2300      	movs	r3, #0
 23fbd72:	4802      	ldr	r0, [pc, #8]	; (23fbd7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fbd74:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fbd76:	f7fe bfdb 	b.w	23fad30 <os_mutex_recursive_create>
 23fbd7a:	bf00      	nop
 23fbd7c:	1007ae6c 	.word	0x1007ae6c

023fbd80 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fbd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbd82:	4606      	mov	r6, r0
 23fbd84:	460d      	mov	r5, r1
  size_t n = 0;
 23fbd86:	2400      	movs	r4, #0
 23fbd88:	188f      	adds	r7, r1, r2
  while (size--) {
 23fbd8a:	42bd      	cmp	r5, r7
 23fbd8c:	d00c      	beq.n	23fbda8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fbd8e:	6833      	ldr	r3, [r6, #0]
 23fbd90:	4630      	mov	r0, r6
 23fbd92:	689b      	ldr	r3, [r3, #8]
 23fbd94:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fbd98:	4798      	blx	r3
     if (chunk>=0)
 23fbd9a:	1e03      	subs	r3, r0, #0
 23fbd9c:	db01      	blt.n	23fbda2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fbd9e:	441c      	add	r4, r3
  while (size--) {
 23fbda0:	e7f3      	b.n	23fbd8a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fbda2:	2c00      	cmp	r4, #0
 23fbda4:	bf08      	it	eq
 23fbda6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fbda8:	4620      	mov	r0, r4
 23fbdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbdac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fbdac:	6803      	ldr	r3, [r0, #0]
 23fbdae:	689b      	ldr	r3, [r3, #8]
 23fbdb0:	4718      	bx	r3

023fbdb2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fbdb2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fbdb4:	2a01      	cmp	r2, #1
 23fbdb6:	bf98      	it	ls
 23fbdb8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fbdba:	b530      	push	{r4, r5, lr}
 23fbdbc:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fbdbe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fbdc2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fbdc4:	460d      	mov	r5, r1
 23fbdc6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fbdca:	fb01 5312 	mls	r3, r1, r2, r5
 23fbdce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fbdd2:	2b09      	cmp	r3, #9
 23fbdd4:	bf94      	ite	ls
 23fbdd6:	3330      	addls	r3, #48	; 0x30
 23fbdd8:	3337      	addhi	r3, #55	; 0x37
 23fbdda:	b2db      	uxtb	r3, r3
  } while(n);
 23fbddc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fbdde:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fbde2:	d9ef      	bls.n	23fbdc4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fbde4:	4621      	mov	r1, r4
 23fbde6:	f7fd fa37 	bl	23f9258 <_ZN5Print5writeEPKc>
}
 23fbdea:	b00b      	add	sp, #44	; 0x2c
 23fbdec:	bd30      	pop	{r4, r5, pc}

023fbdee <_ZN8particle16ApplicationAsset4readEv>:
        return r;
    }
    return 0;
}

int ApplicationAsset::read() {
 23fbdee:	b507      	push	{r0, r1, r2, lr}
    char c;
    int r = read(&c, sizeof(c));
 23fbdf0:	6803      	ldr	r3, [r0, #0]
 23fbdf2:	2201      	movs	r2, #1
 23fbdf4:	6a1b      	ldr	r3, [r3, #32]
 23fbdf6:	f10d 0107 	add.w	r1, sp, #7
 23fbdfa:	4798      	blx	r3
    if (r == 1) {
 23fbdfc:	2801      	cmp	r0, #1
        return c;
 23fbdfe:	bf08      	it	eq
 23fbe00:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
    return r;
}
 23fbe04:	b003      	add	sp, #12
 23fbe06:	f85d fb04 	ldr.w	pc, [sp], #4

023fbe0a <_ZN8particle16ApplicationAsset4peekEv>:
        size -= actuallyRead;
    }
    return pos;
}

int ApplicationAsset::peek() {
 23fbe0a:	b507      	push	{r0, r1, r2, lr}
    char c;
    int r = peek(&c, sizeof(c));
 23fbe0c:	6803      	ldr	r3, [r0, #0]
 23fbe0e:	2201      	movs	r2, #1
 23fbe10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbe12:	f10d 0107 	add.w	r1, sp, #7
 23fbe16:	4798      	blx	r3
    if (r == 1) {
 23fbe18:	2801      	cmp	r0, #1
        return c;
 23fbe1a:	bf08      	it	eq
 23fbe1c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
    return r;
}
 23fbe20:	b003      	add	sp, #12
 23fbe22:	f85d fb04 	ldr.w	pc, [sp], #4

023fbe26 <_ZN8particle16ApplicationAsset5flushEv>:
    return asset_manager_skip(data_->stream, size, nullptr);
}

void ApplicationAsset::flush() {
    return;
}
 23fbe26:	4770      	bx	lr

023fbe28 <_ZN8particle16ApplicationAsset5writeEh>:
    data_.reset();
}

size_t ApplicationAsset::write(uint8_t c) {
    return 0;
}
 23fbe28:	2000      	movs	r0, #0
 23fbe2a:	4770      	bx	lr

023fbe2c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbe2c:	4770      	bx	lr
	...

023fbe30 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fbe30:	4b06      	ldr	r3, [pc, #24]	; (23fbe4c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fbe32:	b510      	push	{r4, lr}
	    ||
 23fbe34:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fbe36:	f100 040c 	add.w	r4, r0, #12
 23fbe3a:	d005      	beq.n	23fbe48 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fbe3c:	4608      	mov	r0, r1
 23fbe3e:	f002 fb27 	bl	23fe490 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fbe42:	2800      	cmp	r0, #0
 23fbe44:	bf08      	it	eq
 23fbe46:	2400      	moveq	r4, #0
      }
 23fbe48:	4620      	mov	r0, r4
 23fbe4a:	bd10      	pop	{r4, pc}
 23fbe4c:	023ffaac 	.word	0x023ffaac

023fbe50 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbe50:	b510      	push	{r4, lr}
 23fbe52:	4604      	mov	r4, r0
 23fbe54:	2110      	movs	r1, #16
 23fbe56:	f7fc fe1c 	bl	23f8a92 <_ZdlPvj>
 23fbe5a:	4620      	mov	r0, r4
 23fbe5c:	bd10      	pop	{r4, pc}

023fbe5e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
 23fbe5e:	2110      	movs	r1, #16
 23fbe60:	f7fc be17 	b.w	23f8a92 <_ZdlPvj>

023fbe64 <_ZNK8particle16ApplicationAsset4nameEv>:
String ApplicationAsset::name() const {
 23fbe64:	b510      	push	{r4, lr}
 23fbe66:	4604      	mov	r4, r0
    return name_;
 23fbe68:	3110      	adds	r1, #16
 23fbe6a:	f7ff ff04 	bl	23fbc76 <_ZN6StringC1ERKS_>
}
 23fbe6e:	4620      	mov	r0, r4
 23fbe70:	bd10      	pop	{r4, pc}

023fbe72 <_ZNK8particle16ApplicationAsset4sizeEv>:
}
 23fbe72:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23fbe74:	4770      	bx	lr

023fbe76 <_ZNK8particle16ApplicationAsset7isValidEv>:
    return name_.length() > 0 && hash_.isValid();
 23fbe76:	6983      	ldr	r3, [r0, #24]
 23fbe78:	b143      	cbz	r3, 23fbe8c <_ZNK8particle16ApplicationAsset7isValidEv+0x16>
inline const Buffer& AssetHash::hash() const {
    return hash_;
}

inline bool AssetHash::isValid() const {
    return type_ != Type::INVALID && hash_.size() > 0;
 23fbe7a:	f990 3020 	ldrsb.w	r3, [r0, #32]
 23fbe7e:	3301      	adds	r3, #1
 23fbe80:	d004      	beq.n	23fbe8c <_ZNK8particle16ApplicationAsset7isValidEv+0x16>
 23fbe82:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23fbe84:	3800      	subs	r0, #0
 23fbe86:	bf18      	it	ne
 23fbe88:	2001      	movne	r0, #1
 23fbe8a:	4770      	bx	lr
 23fbe8c:	2000      	movs	r0, #0
}
 23fbe8e:	4770      	bx	lr

023fbe90 <_ZN8particle16ApplicationAsset4DataD1Ev>:

ApplicationAsset::Data::Data(asset_manager_stream* s)
        : stream(s) {
}

ApplicationAsset::Data::~Data() {
 23fbe90:	b510      	push	{r4, lr}
 23fbe92:	4604      	mov	r4, r0
    if (stream) {
 23fbe94:	6800      	ldr	r0, [r0, #0]
 23fbe96:	b110      	cbz	r0, 23fbe9e <_ZN8particle16ApplicationAsset4DataD1Ev+0xe>
        asset_manager_close(stream, nullptr);
 23fbe98:	2100      	movs	r1, #0
 23fbe9a:	f7ff fb8d 	bl	23fb5b8 <asset_manager_close>
        stream = nullptr;
    }
}
 23fbe9e:	4620      	mov	r0, r4
 23fbea0:	bd10      	pop	{r4, pc}

023fbea2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fbea2:	300c      	adds	r0, #12
 23fbea4:	f7ff bff4 	b.w	23fbe90 <_ZN8particle16ApplicationAsset4DataD1Ev>

023fbea8 <_ZN8particle6BufferC1ERKS0_>:
inline Buffer::Buffer(const Buffer& other)
 23fbea8:	b538      	push	{r3, r4, r5, lr}
 23fbeaa:	4604      	mov	r4, r0
 23fbeac:	460d      	mov	r5, r1
        : Buffer(other.size()) {
 23fbeae:	6849      	ldr	r1, [r1, #4]
 23fbeb0:	f7ff fd11 	bl	23fb8d6 <_ZN8particle6BufferC1Ej>
    if (size_ > 0 && other.size() > 0) {
 23fbeb4:	6862      	ldr	r2, [r4, #4]
 23fbeb6:	b12a      	cbz	r2, 23fbec4 <_ZN8particle6BufferC1ERKS0_+0x1c>
 23fbeb8:	686b      	ldr	r3, [r5, #4]
 23fbeba:	b11b      	cbz	r3, 23fbec4 <_ZN8particle6BufferC1ERKS0_+0x1c>
        memcpy(buffer_.get(), other.buffer_.get(), size_);
 23fbebc:	6829      	ldr	r1, [r5, #0]
 23fbebe:	6820      	ldr	r0, [r4, #0]
 23fbec0:	f002 fc06 	bl	23fe6d0 <memcpy>
    }
}
 23fbec4:	4620      	mov	r0, r4
 23fbec6:	bd38      	pop	{r3, r4, r5, pc}

023fbec8 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE>:
        : type_(Type::INVALID) {
 23fbec8:	23ff      	movs	r3, #255	; 0xff
inline AssetHash::AssetHash(const Buffer& hash, Type type)
 23fbeca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fbecc:	4615      	mov	r5, r2
 23fbece:	4604      	mov	r4, r0
 23fbed0:	460e      	mov	r6, r1
        : type_(Type::INVALID) {
 23fbed2:	f800 3b04 	strb.w	r3, [r0], #4
 23fbed6:	2100      	movs	r1, #0
 23fbed8:	f7ff fcfd 	bl	23fb8d6 <_ZN8particle6BufferC1Ej>
    if (type == Type::SHA256 && hash.size() == SHA256_HASH_SIZE) {
 23fbedc:	b995      	cbnz	r5, 23fbf04 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE+0x3c>
 23fbede:	6873      	ldr	r3, [r6, #4]
 23fbee0:	2b20      	cmp	r3, #32
 23fbee2:	d10f      	bne.n	23fbf04 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE+0x3c>
        hash_ = hash;
 23fbee4:	4631      	mov	r1, r6
 23fbee6:	4668      	mov	r0, sp
 23fbee8:	f7ff ffde 	bl	23fbea8 <_ZN8particle6BufferC1ERKS0_>
      __a = _GLIBCXX_MOVE(__b);
 23fbeec:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbeee:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fbef0:	6062      	str	r2, [r4, #4]
 23fbef2:	9a01      	ldr	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbef4:	9300      	str	r3, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbef6:	68a3      	ldr	r3, [r4, #8]
class Buffer {
 23fbef8:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23fbefa:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbefc:	9301      	str	r3, [sp, #4]
 23fbefe:	f7ff fce2 	bl	23fb8c6 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
        type_ = type;
 23fbf02:	7025      	strb	r5, [r4, #0]
}
 23fbf04:	4620      	mov	r0, r4
 23fbf06:	b002      	add	sp, #8
 23fbf08:	bd70      	pop	{r4, r5, r6, pc}
	...

023fbf0c <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset>:
ApplicationAsset::ApplicationAsset(const asset_manager_asset* asset)
 23fbf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fbf0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbf12:	2600      	movs	r6, #0
    ApplicationAsset() = default;
 23fbf14:	4607      	mov	r7, r0
 23fbf16:	e9c0 6301 	strd	r6, r3, [r0, #4]
 23fbf1a:	4b31      	ldr	r3, [pc, #196]	; (23fbfe0 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xd4>)
 23fbf1c:	4604      	mov	r4, r0
 23fbf1e:	f847 3b10 	str.w	r3, [r7], #16
 23fbf22:	b089      	sub	sp, #36	; 0x24
 23fbf24:	460d      	mov	r5, r1
 23fbf26:	4638      	mov	r0, r7
 23fbf28:	492e      	ldr	r1, [pc, #184]	; (23fbfe4 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xd8>)
 23fbf2a:	f7ff fe58 	bl	23fbbde <_ZN6StringC1EPK19__FlashStringHelper>
        : type_(Type::INVALID) {
 23fbf2e:	23ff      	movs	r3, #255	; 0xff
 23fbf30:	4631      	mov	r1, r6
 23fbf32:	f884 3020 	strb.w	r3, [r4, #32]
 23fbf36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fbf3a:	f7ff fccc 	bl	23fb8d6 <_ZN8particle6BufferC1Ej>
 23fbf3e:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
      constexpr __shared_count() noexcept : _M_pi(0)
 23fbf42:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
 23fbf46:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    if (!asset) {
 23fbf4a:	2d00      	cmp	r5, #0
 23fbf4c:	d045      	beq.n	23fbfda <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xce>
    if (asset->name) {
 23fbf4e:	6829      	ldr	r1, [r5, #0]
 23fbf50:	b149      	cbz	r1, 23fbf66 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0x5a>
        name_ = String(asset->name);
 23fbf52:	a804      	add	r0, sp, #16
 23fbf54:	f7ff fe43 	bl	23fbbde <_ZN6StringC1EPK19__FlashStringHelper>
 23fbf58:	4638      	mov	r0, r7
 23fbf5a:	a904      	add	r1, sp, #16
 23fbf5c:	f7ff fe96 	bl	23fbc8c <_ZN6StringaSEOS_>
 23fbf60:	a804      	add	r0, sp, #16
 23fbf62:	f7ff fdf1 	bl	23fbb48 <_ZN6StringD1Ev>
    if (asset->hash && asset->hash_length) {
 23fbf66:	686e      	ldr	r6, [r5, #4]
 23fbf68:	2e00      	cmp	r6, #0
 23fbf6a:	d031      	beq.n	23fbfd0 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xc4>
 23fbf6c:	892a      	ldrh	r2, [r5, #8]
 23fbf6e:	2a00      	cmp	r2, #0
 23fbf70:	d02e      	beq.n	23fbfd0 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xc4>
        : Buffer(size) {
 23fbf72:	4611      	mov	r1, r2
 23fbf74:	a802      	add	r0, sp, #8
        hash_ = AssetHash(asset->hash, asset->hash_length, (AssetHash::Type)asset->hash_type);
 23fbf76:	f995 700a 	ldrsb.w	r7, [r5, #10]
 23fbf7a:	9201      	str	r2, [sp, #4]
 23fbf7c:	f7ff fcab 	bl	23fb8d6 <_ZN8particle6BufferC1Ej>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fbf80:	9802      	ldr	r0, [sp, #8]
    if (buffer_ && data && size > 0) {
 23fbf82:	b118      	cbz	r0, 23fbf8c <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0x80>
        memcpy(buffer_.get(), data, size);
 23fbf84:	4631      	mov	r1, r6
 23fbf86:	9a01      	ldr	r2, [sp, #4]
 23fbf88:	f002 fba2 	bl	23fe6d0 <memcpy>
        : AssetHash(Buffer(hash, length), type) {
 23fbf8c:	463a      	mov	r2, r7
 23fbf8e:	a902      	add	r1, sp, #8
 23fbf90:	a804      	add	r0, sp, #16
 23fbf92:	f7ff ff99 	bl	23fbec8 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE>
class Buffer {
 23fbf96:	a802      	add	r0, sp, #8
 23fbf98:	f7ff fc95 	bl	23fb8c6 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
    AssetHash& operator=(AssetHash&& other) = default;
 23fbf9c:	f89d 3010 	ldrb.w	r3, [sp, #16]

inline Buffer::Buffer(Buffer&& other)
        : Buffer() {
 23fbfa0:	2100      	movs	r1, #0
 23fbfa2:	f884 3020 	strb.w	r3, [r4, #32]
 23fbfa6:	a802      	add	r0, sp, #8
 23fbfa8:	f7ff fc95 	bl	23fb8d6 <_ZN8particle6BufferC1Ej>
 23fbfac:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fbfae:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbfb0:	9305      	str	r3, [sp, #20]
 23fbfb2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fbfb4:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbfb6:	9306      	str	r3, [sp, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbfb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
class Buffer {
 23fbfba:	a802      	add	r0, sp, #8
      __b = _GLIBCXX_MOVE(__tmp);
 23fbfbc:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbfbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 23fbfc0:	6261      	str	r1, [r4, #36]	; 0x24
 23fbfc2:	62a2      	str	r2, [r4, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fbfc4:	9303      	str	r3, [sp, #12]
 23fbfc6:	f7ff fc7e 	bl	23fb8c6 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
 23fbfca:	a805      	add	r0, sp, #20
 23fbfcc:	f7ff fc7b 	bl	23fb8c6 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
    if (asset->size) {
 23fbfd0:	68eb      	ldr	r3, [r5, #12]
 23fbfd2:	b103      	cbz	r3, 23fbfd6 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xca>
        size_ = asset->size;
 23fbfd4:	62e3      	str	r3, [r4, #44]	; 0x2c
    storageSize_ = asset->storage_size;
 23fbfd6:	692b      	ldr	r3, [r5, #16]
 23fbfd8:	6323      	str	r3, [r4, #48]	; 0x30
}
 23fbfda:	4620      	mov	r0, r4
 23fbfdc:	b009      	add	sp, #36	; 0x24
 23fbfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fbfe0:	023ffad8 	.word	0x023ffad8
 23fbfe4:	023ffb5e 	.word	0x023ffb5e

023fbfe8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>:
int ApplicationAsset::prepareForReading(bool keepOpen) {
 23fbfe8:	b570      	push	{r4, r5, r6, lr}
 23fbfea:	b08a      	sub	sp, #40	; 0x28
 23fbfec:	4604      	mov	r4, r0
 23fbfee:	460e      	mov	r6, r1
    if (!isValid()) {
 23fbff0:	f7ff ff41 	bl	23fbe76 <_ZNK8particle16ApplicationAsset7isValidEv>
 23fbff4:	2800      	cmp	r0, #0
 23fbff6:	d04e      	beq.n	23fc096 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xae>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const // never throws
      { return _M_ptr == 0 ? false : true; }
 23fbff8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (data_ && data_->stream) {
 23fbffa:	b113      	cbz	r3, 23fc002 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x1a>
 23fbffc:	681b      	ldr	r3, [r3, #0]
 23fbffe:	2b00      	cmp	r3, #0
 23fc000:	d13c      	bne.n	23fc07c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
    } else if (eof_) {
 23fc002:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 23fc006:	2d00      	cmp	r5, #0
 23fc008:	d148      	bne.n	23fc09c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xb4>
    if (size() == 0) {
 23fc00a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fc00c:	2b00      	cmp	r3, #0
 23fc00e:	d048      	beq.n	23fc0a2 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xba>
    a.name = name_.c_str();
 23fc010:	6923      	ldr	r3, [r4, #16]
    asset_manager_asset a = {};
 23fc012:	e9cd 5507 	strd	r5, r5, [sp, #28]
    a.name = name_.c_str();
 23fc016:	9305      	str	r3, [sp, #20]
    a.hash = hash_.hash().data();
 23fc018:	6a63      	ldr	r3, [r4, #36]	; 0x24
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc01a:	462a      	mov	r2, r5
    a.hash = hash_.hash().data();
 23fc01c:	9306      	str	r3, [sp, #24]
    a.hash_length = hash_.hash().size();
 23fc01e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc020:	4668      	mov	r0, sp
    a.hash_length = hash_.hash().size();
 23fc022:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.hash_type = hash_.type();
 23fc026:	f894 3020 	ldrb.w	r3, [r4, #32]
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc02a:	a905      	add	r1, sp, #20
    asset_manager_stream* stream = nullptr;
 23fc02c:	9500      	str	r5, [sp, #0]
    asset_manager_asset a = {};
 23fc02e:	9509      	str	r5, [sp, #36]	; 0x24
    a.hash_type = hash_.type();
 23fc030:	f88d 301e 	strb.w	r3, [sp, #30]
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc034:	f7ff fa7a 	bl	23fb52c <asset_manager_open>
 23fc038:	2800      	cmp	r0, #0
 23fc03a:	db2a      	blt.n	23fc092 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
    if (keepOpen) {
 23fc03c:	b1e6      	cbz	r6, 23fc078 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x90>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fc03e:	2010      	movs	r0, #16

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fc040:	9501      	str	r5, [sp, #4]
 23fc042:	f7fc fd20 	bl	23f8a86 <_Znwj>
	  auto __pi = ::new (__mem)
 23fc046:	b130      	cbz	r0, 23fc056 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x6e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fc048:	2301      	movs	r3, #1
 23fc04a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fc04e:	4b16      	ldr	r3, [pc, #88]	; (23fc0a8 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xc0>)
 23fc050:	6003      	str	r3, [r0, #0]
        : stream(s) {
 23fc052:	9b00      	ldr	r3, [sp, #0]
 23fc054:	60c3      	str	r3, [r0, #12]
	__r._M_pi = _M_pi;
 23fc056:	2300      	movs	r3, #0
	__r._M_ptr = 0;
 23fc058:	e9cd 3301 	strd	r3, r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc05c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fc05e:	9303      	str	r3, [sp, #12]
 23fc060:	f100 030c 	add.w	r3, r0, #12
      __b = _GLIBCXX_MOVE(__tmp);
 23fc064:	63a3      	str	r3, [r4, #56]	; 0x38
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fc066:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	__r._M_pi = _M_pi;
 23fc068:	63e0      	str	r0, [r4, #60]	; 0x3c
      ~__shared_ptr() = default;
 23fc06a:	a804      	add	r0, sp, #16
	_M_pi = __tmp;
 23fc06c:	9304      	str	r3, [sp, #16]
      ~__shared_ptr() = default;
 23fc06e:	f7fc fd83 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc072:	a802      	add	r0, sp, #8
 23fc074:	f7fc fd80 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!data_) {
 23fc078:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 23fc07a:	b109      	cbz	r1, 23fc080 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x98>
        return 0;
 23fc07c:	2000      	movs	r0, #0
 23fc07e:	e008      	b.n	23fc092 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        asset_manager_close(stream, nullptr);
 23fc080:	9800      	ldr	r0, [sp, #0]
 23fc082:	f7ff fa99 	bl	23fb5b8 <asset_manager_close>
    if (keepOpen && !data_) {
 23fc086:	2e00      	cmp	r6, #0
 23fc088:	d0f8      	beq.n	23fc07c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
 23fc08a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fc08c:	2b00      	cmp	r3, #0
 23fc08e:	d1f5      	bne.n	23fc07c <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
        return SYSTEM_ERROR_NO_MEMORY;
 23fc090:	4806      	ldr	r0, [pc, #24]	; (23fc0ac <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xc4>)
}
 23fc092:	b00a      	add	sp, #40	; 0x28
 23fc094:	bd70      	pop	{r4, r5, r6, pc}
        return SYSTEM_ERROR_INVALID_STATE;
 23fc096:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fc09a:	e7fa      	b.n	23fc092 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        return SYSTEM_ERROR_END_OF_STREAM;
 23fc09c:	f06f 00c8 	mvn.w	r0, #200	; 0xc8
 23fc0a0:	e7f7      	b.n	23fc092 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        return SYSTEM_ERROR_NOT_ENOUGH_DATA;
 23fc0a2:	f06f 00be 	mvn.w	r0, #190	; 0xbe
 23fc0a6:	e7f4      	b.n	23fc092 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
 23fc0a8:	023ffabc 	.word	0x023ffabc
 23fc0ac:	fffffefc 	.word	0xfffffefc

023fc0b0 <_ZN8particle16ApplicationAsset4peekEPcj>:
int ApplicationAsset::peek(char* buffer, size_t size) {
 23fc0b0:	b570      	push	{r4, r5, r6, lr}
 23fc0b2:	460c      	mov	r4, r1
    CHECK(prepareForReading());
 23fc0b4:	2101      	movs	r1, #1
int ApplicationAsset::peek(char* buffer, size_t size) {
 23fc0b6:	4606      	mov	r6, r0
 23fc0b8:	4615      	mov	r5, r2
    CHECK(prepareForReading());
 23fc0ba:	f7ff ff95 	bl	23fbfe8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fc0be:	2800      	cmp	r0, #0
 23fc0c0:	db0b      	blt.n	23fc0da <_ZN8particle16ApplicationAsset4peekEPcj+0x2a>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc0c2:	b14c      	cbz	r4, 23fc0d8 <_ZN8particle16ApplicationAsset4peekEPcj+0x28>
 23fc0c4:	b145      	cbz	r5, 23fc0d8 <_ZN8particle16ApplicationAsset4peekEPcj+0x28>
    return asset_manager_peek(data_->stream, buffer, size, nullptr);
 23fc0c6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 23fc0c8:	462a      	mov	r2, r5
 23fc0ca:	4621      	mov	r1, r4
}
 23fc0cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return asset_manager_peek(data_->stream, buffer, size, nullptr);
 23fc0d0:	2300      	movs	r3, #0
 23fc0d2:	6800      	ldr	r0, [r0, #0]
 23fc0d4:	f7ff ba54 	b.w	23fb580 <asset_manager_peek>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc0d8:	4800      	ldr	r0, [pc, #0]	; (23fc0dc <_ZN8particle16ApplicationAsset4peekEPcj+0x2c>)
}
 23fc0da:	bd70      	pop	{r4, r5, r6, pc}
 23fc0dc:	fffffef2 	.word	0xfffffef2

023fc0e0 <_ZN8particle16ApplicationAsset4skipEj>:
int ApplicationAsset::skip(size_t size) {
 23fc0e0:	b538      	push	{r3, r4, r5, lr}
 23fc0e2:	460c      	mov	r4, r1
    CHECK(prepareForReading());
 23fc0e4:	2101      	movs	r1, #1
int ApplicationAsset::skip(size_t size) {
 23fc0e6:	4605      	mov	r5, r0
    CHECK(prepareForReading());
 23fc0e8:	f7ff ff7e 	bl	23fbfe8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fc0ec:	2800      	cmp	r0, #0
 23fc0ee:	db07      	blt.n	23fc100 <_ZN8particle16ApplicationAsset4skipEj+0x20>
    return asset_manager_skip(data_->stream, size, nullptr);
 23fc0f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc0f2:	4621      	mov	r1, r4
 23fc0f4:	6818      	ldr	r0, [r3, #0]
 23fc0f6:	2200      	movs	r2, #0
}
 23fc0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return asset_manager_skip(data_->stream, size, nullptr);
 23fc0fc:	f7ff ba4e 	b.w	23fb59c <asset_manager_skip>
}
 23fc100:	bd38      	pop	{r3, r4, r5, pc}

023fc102 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>:
      reset() noexcept
 23fc102:	b507      	push	{r0, r1, r2, lr}
      __a = _GLIBCXX_MOVE(__b);
 23fc104:	6803      	ldr	r3, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fc106:	6842      	ldr	r2, [r0, #4]
 23fc108:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc10a:	2300      	movs	r3, #0
 23fc10c:	6003      	str	r3, [r0, #0]
	__r._M_pi = _M_pi;
 23fc10e:	6043      	str	r3, [r0, #4]
      ~__shared_ptr() = default;
 23fc110:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
 23fc112:	9201      	str	r2, [sp, #4]
      ~__shared_ptr() = default;
 23fc114:	f7fc fd30 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      { __shared_ptr().swap(*this); }
 23fc118:	b003      	add	sp, #12
 23fc11a:	f85d fb04 	ldr.w	pc, [sp], #4

023fc11e <_ZN8particle16ApplicationAsset9availableEv>:
int ApplicationAsset::available() {
 23fc11e:	b538      	push	{r3, r4, r5, lr}
    int r = prepareForReading();
 23fc120:	2101      	movs	r1, #1
int ApplicationAsset::available() {
 23fc122:	4605      	mov	r5, r0
    int r = prepareForReading();
 23fc124:	f7ff ff60 	bl	23fbfe8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
    if (!r) {
 23fc128:	4604      	mov	r4, r0
 23fc12a:	b928      	cbnz	r0, 23fc138 <_ZN8particle16ApplicationAsset9availableEv+0x1a>
        r = asset_manager_available(data_->stream, nullptr);
 23fc12c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc12e:	4601      	mov	r1, r0
 23fc130:	6818      	ldr	r0, [r3, #0]
 23fc132:	f7ff fa09 	bl	23fb548 <asset_manager_available>
 23fc136:	4604      	mov	r4, r0
    if (r == SYSTEM_ERROR_END_OF_STREAM && !eof_) {
 23fc138:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fc13c:	d109      	bne.n	23fc152 <_ZN8particle16ApplicationAsset9availableEv+0x34>
 23fc13e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23fc142:	b933      	cbnz	r3, 23fc152 <_ZN8particle16ApplicationAsset9availableEv+0x34>
        data_.reset();
 23fc144:	f105 0038 	add.w	r0, r5, #56	; 0x38
 23fc148:	f7ff ffdb 	bl	23fc102 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>
        eof_ = true;
 23fc14c:	2301      	movs	r3, #1
 23fc14e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 23fc152:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 23fc156:	bd38      	pop	{r3, r4, r5, pc}

023fc158 <_ZN8particle16ApplicationAsset4readEPcj>:
int ApplicationAsset::read(char* buffer, size_t size) {
 23fc158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc15c:	4688      	mov	r8, r1
    CHECK(prepareForReading());
 23fc15e:	2101      	movs	r1, #1
int ApplicationAsset::read(char* buffer, size_t size) {
 23fc160:	4607      	mov	r7, r0
 23fc162:	4615      	mov	r5, r2
    CHECK(prepareForReading());
 23fc164:	f7ff ff40 	bl	23fbfe8 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fc168:	1e04      	subs	r4, r0, #0
 23fc16a:	db1b      	blt.n	23fc1a4 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc16c:	f1b8 0f00 	cmp.w	r8, #0
 23fc170:	d020      	beq.n	23fc1b4 <_ZN8particle16ApplicationAsset4readEPcj+0x5c>
 23fc172:	b1fd      	cbz	r5, 23fc1b4 <_ZN8particle16ApplicationAsset4readEPcj+0x5c>
 23fc174:	2600      	movs	r6, #0
        int actuallyRead = asset_manager_read(data_->stream, buffer + pos, size, nullptr);
 23fc176:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 23fc178:	2300      	movs	r3, #0
 23fc17a:	462a      	mov	r2, r5
 23fc17c:	6800      	ldr	r0, [r0, #0]
 23fc17e:	eb08 0106 	add.w	r1, r8, r6
 23fc182:	f7ff f9ef 	bl	23fb564 <asset_manager_read>
        if (actuallyRead <= 0) {
 23fc186:	1e04      	subs	r4, r0, #0
 23fc188:	dc0f      	bgt.n	23fc1aa <_ZN8particle16ApplicationAsset4readEPcj+0x52>
            if (actuallyRead == SYSTEM_ERROR_END_OF_STREAM) {
 23fc18a:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fc18e:	d106      	bne.n	23fc19e <_ZN8particle16ApplicationAsset4readEPcj+0x46>
                data_.reset();
 23fc190:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23fc194:	f7ff ffb5 	bl	23fc102 <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>
                eof_ = true;
 23fc198:	2301      	movs	r3, #1
 23fc19a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            return pos > 0 ? pos : actuallyRead;
 23fc19e:	2e00      	cmp	r6, #0
 23fc1a0:	bf18      	it	ne
 23fc1a2:	4634      	movne	r4, r6
}
 23fc1a4:	4620      	mov	r0, r4
 23fc1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (size > 0) {
 23fc1aa:	1b2d      	subs	r5, r5, r4
        pos += actuallyRead;
 23fc1ac:	4426      	add	r6, r4
    while (size > 0) {
 23fc1ae:	d1e2      	bne.n	23fc176 <_ZN8particle16ApplicationAsset4readEPcj+0x1e>
    return pos;
 23fc1b0:	4634      	mov	r4, r6
 23fc1b2:	e7f7      	b.n	23fc1a4 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc1b4:	4c00      	ldr	r4, [pc, #0]	; (23fc1b8 <_ZN8particle16ApplicationAsset4readEPcj+0x60>)
 23fc1b6:	e7f5      	b.n	23fc1a4 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
 23fc1b8:	fffffef2 	.word	0xfffffef2

023fc1bc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fc1bc:	6880      	ldr	r0, [r0, #8]
 23fc1be:	6803      	ldr	r3, [r0, #0]
 23fc1c0:	68db      	ldr	r3, [r3, #12]
 23fc1c2:	4718      	bx	r3

023fc1c4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fc1c4:	4770      	bx	lr

023fc1c6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fc1c6:	4608      	mov	r0, r1
 23fc1c8:	b111      	cbz	r1, 23fc1d0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fc1ca:	680b      	ldr	r3, [r1, #0]
 23fc1cc:	685b      	ldr	r3, [r3, #4]
 23fc1ce:	4718      	bx	r3
}
 23fc1d0:	4770      	bx	lr

023fc1d2 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fc1d2:	4770      	bx	lr

023fc1d4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc1d4:	4770      	bx	lr

023fc1d6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fc1d6:	4770      	bx	lr

023fc1d8 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fc1d8:	4770      	bx	lr

023fc1da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fc1da:	b538      	push	{r3, r4, r5, lr}
 23fc1dc:	4604      	mov	r4, r0
 23fc1de:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fc1e0:	6800      	ldr	r0, [r0, #0]
 23fc1e2:	212e      	movs	r1, #46	; 0x2e
 23fc1e4:	f002 fadf 	bl	23fe7a6 <strchrnul>
    size = s - category;
 23fc1e8:	6823      	ldr	r3, [r4, #0]
 23fc1ea:	1ac3      	subs	r3, r0, r3
 23fc1ec:	602b      	str	r3, [r5, #0]
    if (size) {
 23fc1ee:	b123      	cbz	r3, 23fc1fa <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fc1f0:	7803      	ldrb	r3, [r0, #0]
 23fc1f2:	b103      	cbz	r3, 23fc1f6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fc1f4:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fc1f6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc1f8:	6020      	str	r0, [r4, #0]
}
 23fc1fa:	4618      	mov	r0, r3
 23fc1fc:	bd38      	pop	{r3, r4, r5, pc}

023fc1fe <_ZN5spark16JSONStreamWriterD0Ev>:
 23fc1fe:	b510      	push	{r4, lr}
 23fc200:	4604      	mov	r4, r0
 23fc202:	210c      	movs	r1, #12
 23fc204:	f7fc fc45 	bl	23f8a92 <_ZdlPvj>
 23fc208:	4620      	mov	r0, r4
 23fc20a:	bd10      	pop	{r4, pc}

023fc20c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fc20c:	b510      	push	{r4, lr}
 23fc20e:	4604      	mov	r4, r0
 23fc210:	2104      	movs	r1, #4
 23fc212:	f7fc fc3e 	bl	23f8a92 <_ZdlPvj>
 23fc216:	4620      	mov	r0, r4
 23fc218:	bd10      	pop	{r4, pc}

023fc21a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc21a:	b510      	push	{r4, lr}
 23fc21c:	4604      	mov	r4, r0
 23fc21e:	2104      	movs	r1, #4
 23fc220:	f7fc fc37 	bl	23f8a92 <_ZdlPvj>
 23fc224:	4620      	mov	r0, r4
 23fc226:	bd10      	pop	{r4, pc}

023fc228 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fc228:	f7fe bd9e 	b.w	23fad68 <os_mutex_recursive_lock>

023fc22c <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fc22c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fc22e:	f7fc fbfb 	bl	23f8a28 <strcmp>
}
 23fc232:	fab0 f080 	clz	r0, r0
 23fc236:	0940      	lsrs	r0, r0, #5
 23fc238:	bd08      	pop	{r3, pc}

023fc23a <__tcf_1>:
 23fc23a:	4770      	bx	lr

023fc23c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fc23c:	b510      	push	{r4, lr}
 23fc23e:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fc240:	f001 fba6 	bl	23fd990 <_Z16_fetch_usbserialv>
 23fc244:	4284      	cmp	r4, r0
 23fc246:	d105      	bne.n	23fc254 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fc248:	f001 fba2 	bl	23fd990 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fc24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fc250:	f001 bb90 	b.w	23fd974 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fc254:	f002 f842 	bl	23fe2dc <_Z22__fetch_global_Serial1v>
 23fc258:	4284      	cmp	r4, r0
 23fc25a:	d105      	bne.n	23fc268 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fc25c:	f002 f83e 	bl	23fe2dc <_Z22__fetch_global_Serial1v>
}
 23fc260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fc264:	f001 bc3b 	b.w	23fdade <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fc268:	b12c      	cbz	r4, 23fc276 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fc26a:	6823      	ldr	r3, [r4, #0]
 23fc26c:	4620      	mov	r0, r4
}
 23fc26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc272:	685b      	ldr	r3, [r3, #4]
 23fc274:	4718      	bx	r3
 23fc276:	bd10      	pop	{r4, pc}

023fc278 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc278:	680b      	ldr	r3, [r1, #0]
 23fc27a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fc27c:	684b      	ldr	r3, [r1, #4]
 23fc27e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fc280:	b113      	cbz	r3, 23fc288 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fc282:	685a      	ldr	r2, [r3, #4]
 23fc284:	3201      	adds	r2, #1
 23fc286:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc288:	4770      	bx	lr

023fc28a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fc28a:	b513      	push	{r0, r1, r4, lr}
 23fc28c:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fc28e:	4608      	mov	r0, r1
 23fc290:	9101      	str	r1, [sp, #4]
 23fc292:	f7fc fbd3 	bl	23f8a3c <strlen>
 23fc296:	4602      	mov	r2, r0
 23fc298:	4620      	mov	r0, r4
 23fc29a:	9901      	ldr	r1, [sp, #4]
}
 23fc29c:	b002      	add	sp, #8
 23fc29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fc2a2:	f001 bf73 	b.w	23fe18c <_ZN5spark10JSONWriter5valueEPKcj>

023fc2a6 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fc2a6:	b513      	push	{r0, r1, r4, lr}
 23fc2a8:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fc2aa:	4608      	mov	r0, r1
 23fc2ac:	9101      	str	r1, [sp, #4]
 23fc2ae:	f7fc fbc5 	bl	23f8a3c <strlen>
 23fc2b2:	4602      	mov	r2, r0
 23fc2b4:	4620      	mov	r0, r4
 23fc2b6:	6823      	ldr	r3, [r4, #0]
 23fc2b8:	9901      	ldr	r1, [sp, #4]
 23fc2ba:	68db      	ldr	r3, [r3, #12]
}
 23fc2bc:	b002      	add	sp, #8
 23fc2be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fc2c2:	4718      	bx	r3

023fc2c4 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fc2c4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc2c6:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fc2c8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc2cc:	2201      	movs	r2, #1
 23fc2ce:	68db      	ldr	r3, [r3, #12]
 23fc2d0:	f10d 0107 	add.w	r1, sp, #7
 23fc2d4:	4798      	blx	r3
}
 23fc2d6:	b003      	add	sp, #12
 23fc2d8:	f85d fb04 	ldr.w	pc, [sp], #4

023fc2dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fc2dc:	680a      	ldr	r2, [r1, #0]
 23fc2de:	b510      	push	{r4, lr}
 23fc2e0:	6002      	str	r2, [r0, #0]
 23fc2e2:	684a      	ldr	r2, [r1, #4]
 23fc2e4:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fc2e6:	2200      	movs	r2, #0
 23fc2e8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fc2ec:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc2ee:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc2f0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc2f2:	6084      	str	r4, [r0, #8]
 23fc2f4:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc2f6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc2f8:	60c4      	str	r4, [r0, #12]
 23fc2fa:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc2fc:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc2fe:	6104      	str	r4, [r0, #16]
 23fc300:	bd10      	pop	{r4, pc}
	...

023fc304 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fc308:	f04f 0a14 	mov.w	sl, #20
 23fc30c:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fc310:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fc312:	4645      	mov	r5, r8
 23fc314:	fb0a f404 	mul.w	r4, sl, r4
 23fc318:	9300      	str	r3, [sp, #0]
 23fc31a:	4b17      	ldr	r3, [pc, #92]	; (23fc378 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc31c:	10a4      	asrs	r4, r4, #2
 23fc31e:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fc320:	2c00      	cmp	r4, #0
 23fc322:	dd21      	ble.n	23fc368 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fc324:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fc326:	fb0a f006 	mul.w	r0, sl, r6
 23fc32a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fc32e:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fc332:	463a      	mov	r2, r7
 23fc334:	455f      	cmp	r7, fp
 23fc336:	bf28      	it	cs
 23fc338:	465a      	movcs	r2, fp
 23fc33a:	5828      	ldr	r0, [r5, r0]
 23fc33c:	9101      	str	r1, [sp, #4]
 23fc33e:	f002 fa62 	bl	23fe806 <strncmp>
                if (cmp == 0) {
 23fc342:	2800      	cmp	r0, #0
 23fc344:	f04f 0301 	mov.w	r3, #1
 23fc348:	9901      	ldr	r1, [sp, #4]
 23fc34a:	d10b      	bne.n	23fc364 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fc34c:	455f      	cmp	r7, fp
 23fc34e:	d103      	bne.n	23fc358 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fc350:	9a00      	ldr	r2, [sp, #0]
 23fc352:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc354:	4634      	mov	r4, r6
 23fc356:	e7e3      	b.n	23fc320 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fc358:	d9fc      	bls.n	23fc354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fc35a:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fc35c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fc360:	3e01      	subs	r6, #1
 23fc362:	e7f7      	b.n	23fc354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fc364:	dbf9      	blt.n	23fc35a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fc366:	e7f5      	b.n	23fc354 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fc368:	eba5 0508 	sub.w	r5, r5, r8
}
 23fc36c:	4802      	ldr	r0, [pc, #8]	; (23fc378 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc36e:	10ad      	asrs	r5, r5, #2
 23fc370:	4368      	muls	r0, r5
 23fc372:	b003      	add	sp, #12
 23fc374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc378:	cccccccd 	.word	0xcccccccd

023fc37c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc37c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fc37e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fc380:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc382:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fc384:	b303      	cbz	r3, 23fc3c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fc386:	b1f9      	cbz	r1, 23fc3c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fc388:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fc38a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fc38e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fc390:	a903      	add	r1, sp, #12
 23fc392:	a801      	add	r0, sp, #4
 23fc394:	f7ff ff21 	bl	23fc1da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fc398:	4601      	mov	r1, r0
 23fc39a:	b1a8      	cbz	r0, 23fc3c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc39c:	f10d 030b 	add.w	r3, sp, #11
 23fc3a0:	4620      	mov	r0, r4
 23fc3a2:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fc3a4:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc3a8:	f7ff ffac 	bl	23fc304 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fc3ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fc3b0:	b153      	cbz	r3, 23fc3c8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fc3b2:	6823      	ldr	r3, [r4, #0]
 23fc3b4:	2414      	movs	r4, #20
 23fc3b6:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fc3ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fc3be:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fc3c0:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fc3c2:	bfa8      	it	ge
 23fc3c4:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fc3c6:	e7e3      	b.n	23fc390 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fc3c8:	4628      	mov	r0, r5
 23fc3ca:	b004      	add	sp, #16
 23fc3cc:	bd70      	pop	{r4, r5, r6, pc}

023fc3ce <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fc3ce:	b40e      	push	{r1, r2, r3}
 23fc3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc3d2:	b08c      	sub	sp, #48	; 0x30
 23fc3d4:	af00      	add	r7, sp, #0
 23fc3d6:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fc3da:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc3de:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc3e0:	462b      	mov	r3, r5
 23fc3e2:	2120      	movs	r1, #32
 23fc3e4:	f107 0010 	add.w	r0, r7, #16
 23fc3e8:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc3ea:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc3ec:	f7ff f91c 	bl	23fb628 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fc3f0:	281f      	cmp	r0, #31
 23fc3f2:	687a      	ldr	r2, [r7, #4]
 23fc3f4:	d91a      	bls.n	23fc42c <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fc3f6:	f100 0308 	add.w	r3, r0, #8
 23fc3fa:	f023 0307 	bic.w	r3, r3, #7
        }
 23fc3fe:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fc400:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc404:	1c41      	adds	r1, r0, #1
 23fc406:	462b      	mov	r3, r5
 23fc408:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc40a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc40c:	f7ff f90c 	bl	23fb628 <vsnprintf>
        if (n > 0) {
 23fc410:	1e02      	subs	r2, r0, #0
 23fc412:	dd04      	ble.n	23fc41e <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fc414:	6823      	ldr	r3, [r4, #0]
 23fc416:	4669      	mov	r1, sp
 23fc418:	4620      	mov	r0, r4
 23fc41a:	68db      	ldr	r3, [r3, #12]
 23fc41c:	4798      	blx	r3
 23fc41e:	46b5      	mov	sp, r6
}
 23fc420:	3730      	adds	r7, #48	; 0x30
 23fc422:	46bd      	mov	sp, r7
 23fc424:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc428:	b003      	add	sp, #12
 23fc42a:	4770      	bx	lr
    } else if (n > 0) {
 23fc42c:	2800      	cmp	r0, #0
 23fc42e:	d0f7      	beq.n	23fc420 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fc430:	6823      	ldr	r3, [r4, #0]
 23fc432:	4602      	mov	r2, r0
 23fc434:	68db      	ldr	r3, [r3, #12]
 23fc436:	4620      	mov	r0, r4
 23fc438:	f107 0110 	add.w	r1, r7, #16
 23fc43c:	4798      	blx	r3
}
 23fc43e:	e7ef      	b.n	23fc420 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fc440 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fc440:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fc442:	4c08      	ldr	r4, [pc, #32]	; (23fc464 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fc444:	e8d4 3f8f 	ldab	r3, [r4]
 23fc448:	07db      	lsls	r3, r3, #31
 23fc44a:	d409      	bmi.n	23fc460 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc44c:	4620      	mov	r0, r4
 23fc44e:	f7fc fb2f 	bl	23f8ab0 <__cxa_guard_acquire>
 23fc452:	b128      	cbz	r0, 23fc460 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc454:	4620      	mov	r0, r4
 23fc456:	f7fc fb30 	bl	23f8aba <__cxa_guard_release>
 23fc45a:	4803      	ldr	r0, [pc, #12]	; (23fc468 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fc45c:	f002 f92a 	bl	23fe6b4 <atexit>
}
 23fc460:	4802      	ldr	r0, [pc, #8]	; (23fc46c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fc462:	bd10      	pop	{r4, pc}
 23fc464:	1007ae74 	.word	0x1007ae74
 23fc468:	023fc1d3 	.word	0x023fc1d3
 23fc46c:	1007ad3c 	.word	0x1007ad3c

023fc470 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fc470:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fc472:	4c08      	ldr	r4, [pc, #32]	; (23fc494 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fc474:	e8d4 3f8f 	ldab	r3, [r4]
 23fc478:	07db      	lsls	r3, r3, #31
 23fc47a:	d409      	bmi.n	23fc490 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc47c:	4620      	mov	r0, r4
 23fc47e:	f7fc fb17 	bl	23f8ab0 <__cxa_guard_acquire>
 23fc482:	b128      	cbz	r0, 23fc490 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc484:	4620      	mov	r0, r4
 23fc486:	f7fc fb18 	bl	23f8aba <__cxa_guard_release>
 23fc48a:	4803      	ldr	r0, [pc, #12]	; (23fc498 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fc48c:	f002 f912 	bl	23fe6b4 <atexit>
    return &factory;
}
 23fc490:	4802      	ldr	r0, [pc, #8]	; (23fc49c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fc492:	bd10      	pop	{r4, pc}
 23fc494:	1007ae78 	.word	0x1007ae78
 23fc498:	023fc23b 	.word	0x023fc23b
 23fc49c:	1007ad40 	.word	0x1007ad40

023fc4a0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fc4a0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fc4a2:	2500      	movs	r5, #0
 23fc4a4:	4604      	mov	r4, r0
 23fc4a6:	e9c0 5500 	strd	r5, r5, [r0]
 23fc4aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fc4ae:	6085      	str	r5, [r0, #8]
 23fc4b0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fc4b2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fc4b6:	f7fe fc3b 	bl	23fad30 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fc4ba:	f7ff ffc1 	bl	23fc440 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fc4be:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fc4c0:	f7ff ffd6 	bl	23fc470 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fc4c4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fc4c6:	6220      	str	r0, [r4, #32]
}
 23fc4c8:	4620      	mov	r0, r4
 23fc4ca:	bd38      	pop	{r3, r4, r5, pc}

023fc4cc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fc4cc:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fc4ce:	4c0a      	ldr	r4, [pc, #40]	; (23fc4f8 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fc4d0:	e8d4 3f8f 	ldab	r3, [r4]
 23fc4d4:	07db      	lsls	r3, r3, #31
 23fc4d6:	d40c      	bmi.n	23fc4f2 <_ZN5spark10LogManager8instanceEv+0x26>
 23fc4d8:	4620      	mov	r0, r4
 23fc4da:	f7fc fae9 	bl	23f8ab0 <__cxa_guard_acquire>
 23fc4de:	b140      	cbz	r0, 23fc4f2 <_ZN5spark10LogManager8instanceEv+0x26>
 23fc4e0:	4806      	ldr	r0, [pc, #24]	; (23fc4fc <_ZN5spark10LogManager8instanceEv+0x30>)
 23fc4e2:	f7ff ffdd 	bl	23fc4a0 <_ZN5spark10LogManagerC1Ev>
 23fc4e6:	4620      	mov	r0, r4
 23fc4e8:	f7fc fae7 	bl	23f8aba <__cxa_guard_release>
 23fc4ec:	4804      	ldr	r0, [pc, #16]	; (23fc500 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fc4ee:	f002 f8e1 	bl	23fe6b4 <atexit>
    return &mgr;
}
 23fc4f2:	4802      	ldr	r0, [pc, #8]	; (23fc4fc <_ZN5spark10LogManager8instanceEv+0x30>)
 23fc4f4:	bd10      	pop	{r4, pc}
 23fc4f6:	bf00      	nop
 23fc4f8:	1007ae70 	.word	0x1007ae70
 23fc4fc:	1007ae80 	.word	0x1007ae80
 23fc500:	023fca1d 	.word	0x023fca1d

023fc504 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fc504:	2300      	movs	r3, #0
 23fc506:	4a02      	ldr	r2, [pc, #8]	; (23fc510 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fc508:	4902      	ldr	r1, [pc, #8]	; (23fc514 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fc50a:	4803      	ldr	r0, [pc, #12]	; (23fc518 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fc50c:	f7fe bea2 	b.w	23fb254 <log_set_callbacks>
 23fc510:	023fc805 	.word	0x023fc805
 23fc514:	023fc791 	.word	0x023fc791
 23fc518:	023fc711 	.word	0x023fc711

023fc51c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fc51c:	2300      	movs	r3, #0
 23fc51e:	461a      	mov	r2, r3
 23fc520:	4619      	mov	r1, r3
 23fc522:	4618      	mov	r0, r3
 23fc524:	f7fe be96 	b.w	23fb254 <log_set_callbacks>

023fc528 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fc528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc52a:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fc52c:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fc52e:	4668      	mov	r0, sp
 23fc530:	f7ff fea2 	bl	23fc278 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc534:	466a      	mov	r2, sp
 23fc536:	4629      	mov	r1, r5
 23fc538:	4620      	mov	r0, r4
 23fc53a:	f001 fd47 	bl	23fdfcc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fc53e:	a801      	add	r0, sp, #4
 23fc540:	f7fc fb1a 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc544:	4620      	mov	r0, r4
 23fc546:	b003      	add	sp, #12
 23fc548:	bd30      	pop	{r4, r5, pc}

023fc54a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fc54a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc54c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fc54e:	68cd      	ldr	r5, [r1, #12]
 23fc550:	4668      	mov	r0, sp
 23fc552:	f7ff fe91 	bl	23fc278 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc556:	466a      	mov	r2, sp
 23fc558:	4629      	mov	r1, r5
 23fc55a:	4620      	mov	r0, r4
 23fc55c:	f001 fd12 	bl	23fdf84 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc560:	a801      	add	r0, sp, #4
 23fc562:	f7fc fb09 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc566:	4620      	mov	r0, r4
 23fc568:	b003      	add	sp, #12
 23fc56a:	bd30      	pop	{r4, r5, pc}

023fc56c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fc56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc56e:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fc570:	690d      	ldr	r5, [r1, #16]
 23fc572:	4668      	mov	r0, sp
 23fc574:	f7ff fe80 	bl	23fc278 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc578:	466a      	mov	r2, sp
 23fc57a:	4629      	mov	r1, r5
 23fc57c:	4620      	mov	r0, r4
 23fc57e:	f001 fcaa 	bl	23fded6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc582:	a801      	add	r0, sp, #4
 23fc584:	f7fc faf8 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc588:	4620      	mov	r0, r4
 23fc58a:	b003      	add	sp, #12
 23fc58c:	bd30      	pop	{r4, r5, pc}
	...

023fc590 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fc590:	b570      	push	{r4, r5, r6, lr}
 23fc592:	b08a      	sub	sp, #40	; 0x28
 23fc594:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fc596:	4601      	mov	r1, r0
 23fc598:	a804      	add	r0, sp, #16
 23fc59a:	f7ff ffc5 	bl	23fc528 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fc59e:	4e14      	ldr	r6, [pc, #80]	; (23fc5f0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fc5a0:	a804      	add	r0, sp, #16
 23fc5a2:	f001 fd2b 	bl	23fdffc <_ZN5spark18JSONObjectIterator4nextEv>
 23fc5a6:	b1e8      	cbz	r0, 23fc5e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fc5a8:	4668      	mov	r0, sp
 23fc5aa:	a904      	add	r1, sp, #16
 23fc5ac:	f7ff ffcd 	bl	23fc54a <_ZNK5spark18JSONObjectIterator4nameEv>
 23fc5b0:	4631      	mov	r1, r6
 23fc5b2:	9802      	ldr	r0, [sp, #8]
 23fc5b4:	f7ff fe3a 	bl	23fc22c <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fc5b8:	4604      	mov	r4, r0
 23fc5ba:	b110      	cbz	r0, 23fc5c2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fc5bc:	1e2c      	subs	r4, r5, #0
 23fc5be:	bf18      	it	ne
 23fc5c0:	2401      	movne	r4, #1
 23fc5c2:	a801      	add	r0, sp, #4
 23fc5c4:	f7fc fad8 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc5c8:	2c00      	cmp	r4, #0
 23fc5ca:	d0e9      	beq.n	23fc5a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fc5cc:	4668      	mov	r0, sp
 23fc5ce:	a904      	add	r1, sp, #16
 23fc5d0:	f7ff ffcc 	bl	23fc56c <_ZNK5spark18JSONObjectIterator5valueEv>
 23fc5d4:	4668      	mov	r0, sp
 23fc5d6:	f001 fcb4 	bl	23fdf42 <_ZNK5spark9JSONValue5toIntEv>
 23fc5da:	6028      	str	r0, [r5, #0]
 23fc5dc:	a801      	add	r0, sp, #4
 23fc5de:	f7fc facb 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc5e2:	e7dd      	b.n	23fc5a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fc5e4:	a805      	add	r0, sp, #20
 23fc5e6:	f7fc fac7 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc5ea:	b00a      	add	sp, #40	; 0x28
 23fc5ec:	bd70      	pop	{r4, r5, r6, pc}
 23fc5ee:	bf00      	nop
 23fc5f0:	023ffb04 	.word	0x023ffb04

023fc5f4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fc5f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc5f6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fc5f8:	4913      	ldr	r1, [pc, #76]	; (23fc648 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fc5fa:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fc5fc:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fc5fe:	f7fc fa13 	bl	23f8a28 <strcmp>
 23fc602:	b950      	cbnz	r0, 23fc61a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fc604:	f001 f9c4 	bl	23fd990 <_Z16_fetch_usbserialv>
 23fc608:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc60c:	f001 f9ae 	bl	23fd96c <_ZN9USBSerial5beginEl>
}
 23fc610:	b003      	add	sp, #12
 23fc612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fc616:	f001 b9bb 	b.w	23fd990 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fc61a:	4620      	mov	r0, r4
 23fc61c:	490b      	ldr	r1, [pc, #44]	; (23fc64c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fc61e:	f7fc fa03 	bl	23f8a28 <strcmp>
 23fc622:	b978      	cbnz	r0, 23fc644 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fc624:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fc628:	a901      	add	r1, sp, #4
 23fc62a:	4628      	mov	r0, r5
        int baud = 9600;
 23fc62c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fc62e:	f7ff ffaf 	bl	23fc590 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fc632:	f001 fe53 	bl	23fe2dc <_Z22__fetch_global_Serial1v>
 23fc636:	9901      	ldr	r1, [sp, #4]
 23fc638:	f001 fa4e 	bl	23fdad8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fc63c:	f001 fe4e 	bl	23fe2dc <_Z22__fetch_global_Serial1v>
}
 23fc640:	b003      	add	sp, #12
 23fc642:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fc644:	2000      	movs	r0, #0
 23fc646:	e7fb      	b.n	23fc640 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fc648:	023ffb09 	.word	0x023ffb09
 23fc64c:	023ffb10 	.word	0x023ffb10

023fc650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc650:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fc652:	2614      	movs	r6, #20
 23fc654:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc658:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc65a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc65e:	42ae      	cmp	r6, r5
 23fc660:	d005      	beq.n	23fc66e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fc662:	f105 0008 	add.w	r0, r5, #8
 23fc666:	f7ff fff3 	bl	23fc650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc66a:	3514      	adds	r5, #20
 23fc66c:	e7f7      	b.n	23fc65e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fc66e:	6820      	ldr	r0, [r4, #0]
 23fc670:	f7fe ffbe 	bl	23fb5f0 <free>
}
 23fc674:	4620      	mov	r0, r4
 23fc676:	bd70      	pop	{r4, r5, r6, pc}

023fc678 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fc678:	b510      	push	{r4, lr}
 23fc67a:	4604      	mov	r4, r0
 23fc67c:	300c      	adds	r0, #12
 23fc67e:	f7ff ffe7 	bl	23fc650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc682:	4620      	mov	r0, r4
 23fc684:	f7ff fb4f 	bl	23fbd26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fc688:	4620      	mov	r0, r4
 23fc68a:	bd10      	pop	{r4, pc}

023fc68c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fc68c:	b510      	push	{r4, lr}
 23fc68e:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fc690:	4b03      	ldr	r3, [pc, #12]	; (23fc6a0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fc692:	f840 3b04 	str.w	r3, [r0], #4
 23fc696:	f7ff ffef 	bl	23fc678 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fc69a:	4620      	mov	r0, r4
 23fc69c:	bd10      	pop	{r4, pc}
 23fc69e:	bf00      	nop
 23fc6a0:	023fecd4 	.word	0x023fecd4

023fc6a4 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fc6a4:	b510      	push	{r4, lr}
 23fc6a6:	4604      	mov	r4, r0
 23fc6a8:	f7ff fff0 	bl	23fc68c <_ZN5spark16StreamLogHandlerD1Ev>
 23fc6ac:	4620      	mov	r0, r4
 23fc6ae:	2124      	movs	r1, #36	; 0x24
 23fc6b0:	f7fc f9ef 	bl	23f8a92 <_ZdlPvj>
 23fc6b4:	4620      	mov	r0, r4
 23fc6b6:	bd10      	pop	{r4, pc}

023fc6b8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fc6b8:	b510      	push	{r4, lr}
 23fc6ba:	4604      	mov	r4, r0
 23fc6bc:	4b02      	ldr	r3, [pc, #8]	; (23fc6c8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fc6be:	6003      	str	r3, [r0, #0]
 23fc6c0:	f7ff ffe4 	bl	23fc68c <_ZN5spark16StreamLogHandlerD1Ev>
 23fc6c4:	4620      	mov	r0, r4
 23fc6c6:	bd10      	pop	{r4, pc}
 23fc6c8:	023ffbb0 	.word	0x023ffbb0

023fc6cc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fc6cc:	b510      	push	{r4, lr}
 23fc6ce:	4604      	mov	r4, r0
 23fc6d0:	f7ff fff2 	bl	23fc6b8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fc6d4:	4620      	mov	r0, r4
 23fc6d6:	2124      	movs	r1, #36	; 0x24
 23fc6d8:	f7fc f9db 	bl	23f8a92 <_ZdlPvj>
 23fc6dc:	4620      	mov	r0, r4
 23fc6de:	bd10      	pop	{r4, pc}

023fc6e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fc6e0:	2200      	movs	r2, #0
 23fc6e2:	e9c0 2200 	strd	r2, r2, [r0]
 23fc6e6:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fc6e8:	b510      	push	{r4, lr}
 23fc6ea:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc6ec:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fc6ee:	6004      	str	r4, [r0, #0]
 23fc6f0:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc6f2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc6f4:	6044      	str	r4, [r0, #4]
 23fc6f6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc6f8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc6fa:	6084      	str	r4, [r0, #8]
}
 23fc6fc:	bd10      	pop	{r4, pc}

023fc6fe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fc6fe:	b510      	push	{r4, lr}
 23fc700:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fc702:	6803      	ldr	r3, [r0, #0]
 23fc704:	6818      	ldr	r0, [r3, #0]
 23fc706:	f7fe fb3d 	bl	23fad84 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fc70a:	4620      	mov	r0, r4
 23fc70c:	bd10      	pop	{r4, pc}
	...

023fc710 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fc710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc714:	b087      	sub	sp, #28
 23fc716:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fc718:	4b1c      	ldr	r3, [pc, #112]	; (23fc78c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fc71a:	4680      	mov	r8, r0
 23fc71c:	685b      	ldr	r3, [r3, #4]
 23fc71e:	4689      	mov	r9, r1
 23fc720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fc724:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fc726:	b96b      	cbnz	r3, 23fc744 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fc728:	f7ff fed0 	bl	23fc4cc <_ZN5spark10LogManager8instanceEv>
 23fc72c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc72e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fc732:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc734:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fc736:	f7ff fd77 	bl	23fc228 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fc73a:	7b23      	ldrb	r3, [r4, #12]
 23fc73c:	b12b      	cbz	r3, 23fc74a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fc73e:	a805      	add	r0, sp, #20
 23fc740:	f7ff ffdd 	bl	23fc6fe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fc744:	b007      	add	sp, #28
 23fc746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fc74a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fc74c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fc750:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fc752:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fc756:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc75a:	45aa      	cmp	sl, r5
 23fc75c:	d012      	beq.n	23fc784 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fc75e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fc762:	4631      	mov	r1, r6
 23fc764:	1d38      	adds	r0, r7, #4
 23fc766:	f7ff fe09 	bl	23fc37c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fc76a:	4581      	cmp	r9, r0
 23fc76c:	d3f5      	bcc.n	23fc75a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fc76e:	9a03      	ldr	r2, [sp, #12]
 23fc770:	683b      	ldr	r3, [r7, #0]
 23fc772:	9200      	str	r2, [sp, #0]
 23fc774:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fc778:	464a      	mov	r2, r9
 23fc77a:	4633      	mov	r3, r6
 23fc77c:	4641      	mov	r1, r8
 23fc77e:	4638      	mov	r0, r7
 23fc780:	47d8      	blx	fp
 23fc782:	e7ea      	b.n	23fc75a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fc784:	2300      	movs	r3, #0
 23fc786:	7323      	strb	r3, [r4, #12]
 23fc788:	e7d9      	b.n	23fc73e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fc78a:	bf00      	nop
 23fc78c:	e000ed00 	.word	0xe000ed00

023fc790 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fc790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc794:	469b      	mov	fp, r3
 23fc796:	4b1a      	ldr	r3, [pc, #104]	; (23fc800 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fc798:	4680      	mov	r8, r0
 23fc79a:	685b      	ldr	r3, [r3, #4]
 23fc79c:	4689      	mov	r9, r1
 23fc79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fc7a2:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fc7a4:	b96b      	cbnz	r3, 23fc7c2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fc7a6:	f7ff fe91 	bl	23fc4cc <_ZN5spark10LogManager8instanceEv>
 23fc7aa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc7ac:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc7b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc7b2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fc7b4:	f7ff fd38 	bl	23fc228 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fc7b8:	7b23      	ldrb	r3, [r4, #12]
 23fc7ba:	b12b      	cbz	r3, 23fc7c8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fc7bc:	a801      	add	r0, sp, #4
 23fc7be:	f7ff ff9e 	bl	23fc6fe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fc7c2:	b003      	add	sp, #12
 23fc7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fc7c8:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fc7ca:	b2f6      	uxtb	r6, r6
 23fc7cc:	7323      	strb	r3, [r4, #12]
 23fc7ce:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fc7d2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc7d6:	4555      	cmp	r5, sl
 23fc7d8:	d00e      	beq.n	23fc7f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fc7da:	f855 7b04 	ldr.w	r7, [r5], #4
 23fc7de:	4659      	mov	r1, fp
 23fc7e0:	1d38      	adds	r0, r7, #4
 23fc7e2:	f7ff fdcb 	bl	23fc37c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fc7e6:	4286      	cmp	r6, r0
 23fc7e8:	d3f5      	bcc.n	23fc7d6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fc7ea:	683b      	ldr	r3, [r7, #0]
 23fc7ec:	464a      	mov	r2, r9
 23fc7ee:	4641      	mov	r1, r8
 23fc7f0:	4638      	mov	r0, r7
 23fc7f2:	68db      	ldr	r3, [r3, #12]
 23fc7f4:	4798      	blx	r3
 23fc7f6:	e7ee      	b.n	23fc7d6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fc7f8:	2300      	movs	r3, #0
 23fc7fa:	7323      	strb	r3, [r4, #12]
 23fc7fc:	e7de      	b.n	23fc7bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fc7fe:	bf00      	nop
 23fc800:	e000ed00 	.word	0xe000ed00

023fc804 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fc804:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc808:	4b16      	ldr	r3, [pc, #88]	; (23fc864 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fc80a:	4605      	mov	r5, r0
 23fc80c:	685b      	ldr	r3, [r3, #4]
 23fc80e:	460f      	mov	r7, r1
 23fc810:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fc814:	bb1b      	cbnz	r3, 23fc85e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fc816:	f7ff fe59 	bl	23fc4cc <_ZN5spark10LogManager8instanceEv>
 23fc81a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc81c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc820:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc822:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fc824:	f7ff fd00 	bl	23fc228 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fc828:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fc82c:	2446      	movs	r4, #70	; 0x46
 23fc82e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc832:	45b0      	cmp	r8, r6
 23fc834:	d109      	bne.n	23fc84a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fc836:	a801      	add	r0, sp, #4
 23fc838:	f7ff ff61 	bl	23fc6fe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fc83c:	42a5      	cmp	r5, r4
 23fc83e:	bfb4      	ite	lt
 23fc840:	2000      	movlt	r0, #0
 23fc842:	2001      	movge	r0, #1
}
 23fc844:	b002      	add	sp, #8
 23fc846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fc84a:	f856 0b04 	ldr.w	r0, [r6], #4
 23fc84e:	4639      	mov	r1, r7
 23fc850:	3004      	adds	r0, #4
 23fc852:	f7ff fd93 	bl	23fc37c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fc856:	4284      	cmp	r4, r0
 23fc858:	bfa8      	it	ge
 23fc85a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fc85c:	e7e9      	b.n	23fc832 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fc85e:	2000      	movs	r0, #0
 23fc860:	e7f0      	b.n	23fc844 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fc862:	bf00      	nop
 23fc864:	e000ed00 	.word	0xe000ed00

023fc868 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc86a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fc86e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc870:	4604      	mov	r4, r0
 23fc872:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc874:	db0d      	blt.n	23fc892 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fc876:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fc878:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fc87a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fc87c:	dd04      	ble.n	23fc888 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fc87e:	00b9      	lsls	r1, r7, #2
 23fc880:	f7fe fec4 	bl	23fb60c <realloc>
            if (!d) {
 23fc884:	b918      	cbnz	r0, 23fc88e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fc886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fc888:	f7fe feb2 	bl	23fb5f0 <free>
        T* d = nullptr;
 23fc88c:	2000      	movs	r0, #0
        data_ = d;
 23fc88e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fc890:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fc892:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc894:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc896:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fc89a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc89c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fc8a0:	1d08      	adds	r0, r1, #4
 23fc8a2:	f001 ff22 	bl	23fe6ea <memmove>
    new(p) T(std::move(value));
 23fc8a6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fc8aa:	6863      	ldr	r3, [r4, #4]
    return true;
 23fc8ac:	2001      	movs	r0, #1
    ++size_;
 23fc8ae:	3301      	adds	r3, #1
 23fc8b0:	6063      	str	r3, [r4, #4]
    return true;
 23fc8b2:	e7e8      	b.n	23fc886 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fc8b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fc8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc8b6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fc8b8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc8bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc8be:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fc8c0:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fc8c2:	f7ff fcb1 	bl	23fc228 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fc8c6:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fc8ca:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fc8ce:	4293      	cmp	r3, r2
 23fc8d0:	4619      	mov	r1, r3
 23fc8d2:	d00a      	beq.n	23fc8ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fc8d4:	6809      	ldr	r1, [r1, #0]
 23fc8d6:	3304      	adds	r3, #4
 23fc8d8:	42a9      	cmp	r1, r5
 23fc8da:	d1f8      	bne.n	23fc8ce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fc8dc:	a801      	add	r0, sp, #4
 23fc8de:	f7ff ff0e 	bl	23fc6fe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fc8e2:	2500      	movs	r5, #0
}
 23fc8e4:	4628      	mov	r0, r5
 23fc8e6:	b003      	add	sp, #12
 23fc8e8:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fc8ea:	4629      	mov	r1, r5
 23fc8ec:	4620      	mov	r0, r4
 23fc8ee:	f7ff ffbb 	bl	23fc868 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fc8f2:	4605      	mov	r5, r0
 23fc8f4:	2800      	cmp	r0, #0
 23fc8f6:	d0f1      	beq.n	23fc8dc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fc8f8:	6863      	ldr	r3, [r4, #4]
 23fc8fa:	2b01      	cmp	r3, #1
 23fc8fc:	d101      	bne.n	23fc902 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fc8fe:	f7ff fe01 	bl	23fc504 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fc902:	a801      	add	r0, sp, #4
 23fc904:	f7ff fefb 	bl	23fc6fe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fc908:	e7ec      	b.n	23fc8e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fc90a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fc90a:	460b      	mov	r3, r1
 23fc90c:	b570      	push	{r4, r5, r6, lr}
 23fc90e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fc910:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fc914:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fc918:	4282      	cmp	r2, r0
 23fc91a:	d00f      	beq.n	23fc93c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fc91c:	4601      	mov	r1, r0
            if (*p == value) {
 23fc91e:	681d      	ldr	r5, [r3, #0]
 23fc920:	f851 6b04 	ldr.w	r6, [r1], #4
 23fc924:	42ae      	cmp	r6, r5
 23fc926:	d107      	bne.n	23fc938 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc928:	1a52      	subs	r2, r2, r1
 23fc92a:	f001 fede 	bl	23fe6ea <memmove>
    return true;
 23fc92e:	2001      	movs	r0, #1
    --size_;
 23fc930:	6863      	ldr	r3, [r4, #4]
 23fc932:	3b01      	subs	r3, #1
 23fc934:	6063      	str	r3, [r4, #4]
}
 23fc936:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fc938:	4608      	mov	r0, r1
 23fc93a:	e7ed      	b.n	23fc918 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fc93c:	2000      	movs	r0, #0
 23fc93e:	e7fa      	b.n	23fc936 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fc940 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fc940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fc942:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fc944:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc948:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fc94a:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc94c:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fc94e:	f7ff fc6b 	bl	23fc228 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fc952:	4620      	mov	r0, r4
 23fc954:	a901      	add	r1, sp, #4
 23fc956:	f7ff ffd8 	bl	23fc90a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fc95a:	b118      	cbz	r0, 23fc964 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fc95c:	6863      	ldr	r3, [r4, #4]
 23fc95e:	b90b      	cbnz	r3, 23fc964 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fc960:	f7ff fddc 	bl	23fc51c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fc964:	a803      	add	r0, sp, #12
 23fc966:	f7ff feca 	bl	23fc6fe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fc96a:	b004      	add	sp, #16
 23fc96c:	bd10      	pop	{r4, pc}

023fc96e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fc96e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fc970:	b570      	push	{r4, r5, r6, lr}
 23fc972:	4604      	mov	r4, r0
 23fc974:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fc978:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fc97c:	42ae      	cmp	r6, r5
 23fc97e:	d015      	beq.n	23fc9ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fc980:	4620      	mov	r0, r4
 23fc982:	f105 0110 	add.w	r1, r5, #16
 23fc986:	f7ff ffc0 	bl	23fc90a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fc98a:	6863      	ldr	r3, [r4, #4]
 23fc98c:	b90b      	cbnz	r3, 23fc992 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fc98e:	f7ff fdc5 	bl	23fc51c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fc992:	69e0      	ldr	r0, [r4, #28]
 23fc994:	6929      	ldr	r1, [r5, #16]
 23fc996:	6803      	ldr	r3, [r0, #0]
 23fc998:	68db      	ldr	r3, [r3, #12]
 23fc99a:	4798      	blx	r3
        if (h.stream) {
 23fc99c:	6969      	ldr	r1, [r5, #20]
 23fc99e:	b119      	cbz	r1, 23fc9a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fc9a0:	6a20      	ldr	r0, [r4, #32]
 23fc9a2:	6803      	ldr	r3, [r0, #0]
 23fc9a4:	68db      	ldr	r3, [r3, #12]
 23fc9a6:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fc9a8:	3518      	adds	r5, #24
 23fc9aa:	e7e7      	b.n	23fc97c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fc9ac:	2618      	movs	r6, #24
 23fc9ae:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fc9b2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc9b6:	42ae      	cmp	r6, r5
 23fc9b8:	d004      	beq.n	23fc9c4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fc9ba:	4628      	mov	r0, r5
 23fc9bc:	f7ff f8c4 	bl	23fbb48 <_ZN6StringD1Ev>
 23fc9c0:	3518      	adds	r5, #24
 23fc9c2:	e7f8      	b.n	23fc9b6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fc9c4:	2300      	movs	r3, #0
 23fc9c6:	6163      	str	r3, [r4, #20]
}
 23fc9c8:	bd70      	pop	{r4, r5, r6, pc}

023fc9ca <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fc9ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc9cc:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fc9ce:	f7ff fda5 	bl	23fc51c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fc9d2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fc9d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc9d8:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fc9da:	f7ff fc25 	bl	23fc228 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fc9de:	4620      	mov	r0, r4
 23fc9e0:	f7ff ffc5 	bl	23fc96e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fc9e4:	a801      	add	r0, sp, #4
 23fc9e6:	f7ff fe8a 	bl	23fc6fe <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fc9ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fc9ec:	b108      	cbz	r0, 23fc9f2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fc9ee:	f7fe f9ad 	bl	23fad4c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fc9f2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fc9f6:	2618      	movs	r6, #24
 23fc9f8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc9fc:	42ae      	cmp	r6, r5
 23fc9fe:	d004      	beq.n	23fca0a <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fca00:	4628      	mov	r0, r5
 23fca02:	f7ff f8a1 	bl	23fbb48 <_ZN6StringD1Ev>
 23fca06:	3518      	adds	r5, #24
 23fca08:	e7f8      	b.n	23fc9fc <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fca0a:	6920      	ldr	r0, [r4, #16]
 23fca0c:	f7fe fdf0 	bl	23fb5f0 <free>
 23fca10:	6820      	ldr	r0, [r4, #0]
 23fca12:	f7fe fded 	bl	23fb5f0 <free>
}
 23fca16:	4620      	mov	r0, r4
 23fca18:	b002      	add	sp, #8
 23fca1a:	bd70      	pop	{r4, r5, r6, pc}

023fca1c <__tcf_2>:
    static LogManager mgr;
 23fca1c:	4801      	ldr	r0, [pc, #4]	; (23fca24 <__tcf_2+0x8>)
 23fca1e:	f7ff bfd4 	b.w	23fc9ca <_ZN5spark10LogManagerD1Ev>
 23fca22:	bf00      	nop
 23fca24:	1007ae80 	.word	0x1007ae80

023fca28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fca28:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fca2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fca2c:	4604      	mov	r4, r0
 23fca2e:	460d      	mov	r5, r1
 23fca30:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fca32:	d915      	bls.n	23fca60 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fca34:	4290      	cmp	r0, r2
 23fca36:	d214      	bcs.n	23fca62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fca38:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fca3c:	1a75      	subs	r5, r6, r1
 23fca3e:	f1a1 0714 	sub.w	r7, r1, #20
 23fca42:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fca44:	42b7      	cmp	r7, r6
 23fca46:	d01a      	beq.n	23fca7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fca48:	b11c      	cbz	r4, 23fca52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fca4a:	4631      	mov	r1, r6
 23fca4c:	4620      	mov	r0, r4
 23fca4e:	f7ff fc45 	bl	23fc2dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fca52:	f106 0008 	add.w	r0, r6, #8
 23fca56:	f7ff fdfb 	bl	23fc650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fca5a:	3e14      	subs	r6, #20
 23fca5c:	3c14      	subs	r4, #20
 23fca5e:	e7f1      	b.n	23fca44 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fca60:	d00d      	beq.n	23fca7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fca62:	42b5      	cmp	r5, r6
 23fca64:	d00b      	beq.n	23fca7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fca66:	b11c      	cbz	r4, 23fca70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fca68:	4629      	mov	r1, r5
 23fca6a:	4620      	mov	r0, r4
 23fca6c:	f7ff fc36 	bl	23fc2dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fca70:	f105 0008 	add.w	r0, r5, #8
 23fca74:	f7ff fdec 	bl	23fc650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fca78:	3514      	adds	r5, #20
 23fca7a:	3414      	adds	r4, #20
 23fca7c:	e7f1      	b.n	23fca62 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fca7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fca80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fca80:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fca82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fca84:	4604      	mov	r4, r0
 23fca86:	460d      	mov	r5, r1
 23fca88:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fca8a:	d914      	bls.n	23fcab6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fca8c:	4290      	cmp	r0, r2
 23fca8e:	d213      	bcs.n	23fcab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fca90:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fca94:	1a75      	subs	r5, r6, r1
 23fca96:	f1a1 0710 	sub.w	r7, r1, #16
 23fca9a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fca9c:	42b7      	cmp	r7, r6
 23fca9e:	d018      	beq.n	23fcad2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fcaa0:	b11c      	cbz	r4, 23fcaaa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fcaa2:	4631      	mov	r1, r6
 23fcaa4:	4620      	mov	r0, r4
 23fcaa6:	f7ff f8cc 	bl	23fbc42 <_ZN6StringC1EOS_>
                end->~T();
 23fcaaa:	4630      	mov	r0, r6
 23fcaac:	f7ff f84c 	bl	23fbb48 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fcab0:	3e10      	subs	r6, #16
 23fcab2:	3c10      	subs	r4, #16
 23fcab4:	e7f2      	b.n	23fca9c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fcab6:	d00c      	beq.n	23fcad2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fcab8:	42b5      	cmp	r5, r6
 23fcaba:	d00a      	beq.n	23fcad2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fcabc:	b11c      	cbz	r4, 23fcac6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fcabe:	4629      	mov	r1, r5
 23fcac0:	4620      	mov	r0, r4
 23fcac2:	f7ff f8be 	bl	23fbc42 <_ZN6StringC1EOS_>
                p->~T();
 23fcac6:	4628      	mov	r0, r5
 23fcac8:	f7ff f83e 	bl	23fbb48 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fcacc:	3510      	adds	r5, #16
 23fcace:	3410      	adds	r4, #16
 23fcad0:	e7f2      	b.n	23fcab8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fcad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcad4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fcad4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fcad6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fcad8:	4605      	mov	r5, r0
        if (n > 0) {
 23fcada:	dd11      	ble.n	23fcb00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fcadc:	0130      	lsls	r0, r6, #4
 23fcade:	f7fe fd79 	bl	23fb5d4 <malloc>
            if (!d) {
 23fcae2:	4604      	mov	r4, r0
 23fcae4:	b158      	cbz	r0, 23fcafe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fcae6:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fcaea:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fcaee:	f7ff ffc7 	bl	23fca80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fcaf2:	6828      	ldr	r0, [r5, #0]
 23fcaf4:	f7fe fd7c 	bl	23fb5f0 <free>
        return true;
 23fcaf8:	2001      	movs	r0, #1
        data_ = d;
 23fcafa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fcafc:	60ae      	str	r6, [r5, #8]
    }
 23fcafe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fcb00:	2400      	movs	r4, #0
 23fcb02:	e7f6      	b.n	23fcaf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fcb04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fcb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcb08:	4690      	mov	r8, r2
        capacity_(0) {
 23fcb0a:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fcb0c:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fcb0e:	b095      	sub	sp, #84	; 0x54
 23fcb10:	9103      	str	r1, [sp, #12]
    return size_;
 23fcb12:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fcb16:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fcb18:	4299      	cmp	r1, r3
        capacity_(0) {
 23fcb1a:	e9c0 3300 	strd	r3, r3, [r0]
 23fcb1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fcb22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fcb26:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fcb2a:	7602      	strb	r2, [r0, #24]
 23fcb2c:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fcb2e:	dc23      	bgt.n	23fcb78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fcb30:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fcb34:	2314      	movs	r3, #20
 23fcb36:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fcb3a:	42af      	cmp	r7, r5
 23fcb3c:	d03b      	beq.n	23fcbb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fcb3e:	4629      	mov	r1, r5
 23fcb40:	a80b      	add	r0, sp, #44	; 0x2c
 23fcb42:	f7ff f87e 	bl	23fbc42 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fcb46:	a90b      	add	r1, sp, #44	; 0x2c
 23fcb48:	a80f      	add	r0, sp, #60	; 0x3c
 23fcb4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fcb4c:	f7ff f879 	bl	23fbc42 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb50:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fcb54:	4299      	cmp	r1, r3
 23fcb56:	da1b      	bge.n	23fcb90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fcb58:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fcb5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fcb5c:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fcb60:	4631      	mov	r1, r6
 23fcb62:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fcb66:	f106 0010 	add.w	r0, r6, #16
 23fcb6a:	f7ff ff89 	bl	23fca80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fcb6e:	b9ee      	cbnz	r6, 23fcbac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fcb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fcb72:	3301      	adds	r3, #1
 23fcb74:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fcb76:	e011      	b.n	23fcb9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fcb78:	a808      	add	r0, sp, #32
 23fcb7a:	f7ff ffab 	bl	23fcad4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fcb7e:	2800      	cmp	r0, #0
 23fcb80:	d1d6      	bne.n	23fcb30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fcb82:	a808      	add	r0, sp, #32
 23fcb84:	f7ff f8cf 	bl	23fbd26 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fcb88:	4620      	mov	r0, r4
 23fcb8a:	b015      	add	sp, #84	; 0x54
 23fcb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb90:	3101      	adds	r1, #1
 23fcb92:	a808      	add	r0, sp, #32
 23fcb94:	f7ff ff9e 	bl	23fcad4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fcb98:	2800      	cmp	r0, #0
 23fcb9a:	d1dd      	bne.n	23fcb58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fcb9c:	a80f      	add	r0, sp, #60	; 0x3c
 23fcb9e:	f7fe ffd3 	bl	23fbb48 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fcba2:	a80b      	add	r0, sp, #44	; 0x2c
 23fcba4:	f7fe ffd0 	bl	23fbb48 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fcba8:	3514      	adds	r5, #20
 23fcbaa:	e7c6      	b.n	23fcb3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fcbac:	4630      	mov	r0, r6
 23fcbae:	a90f      	add	r1, sp, #60	; 0x3c
 23fcbb0:	f7ff f847 	bl	23fbc42 <_ZN6StringC1EOS_>
 23fcbb4:	e7dc      	b.n	23fcb70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fcbb6:	2600      	movs	r6, #0
 23fcbb8:	f04f 0914 	mov.w	r9, #20
 23fcbbc:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fcbc0:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fcbc2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fcbc6:	429e      	cmp	r6, r3
 23fcbc8:	da7c      	bge.n	23fccc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fcbca:	0133      	lsls	r3, r6, #4
 23fcbcc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fcbce:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fcbd0:	b90b      	cbnz	r3, 23fcbd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fcbd2:	3601      	adds	r6, #1
 23fcbd4:	e7f5      	b.n	23fcbc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fcbd6:	2300      	movs	r3, #0
 23fcbd8:	9307      	str	r3, [sp, #28]
 23fcbda:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fcbde:	ad0b      	add	r5, sp, #44	; 0x2c
 23fcbe0:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fcbe2:	a907      	add	r1, sp, #28
 23fcbe4:	a806      	add	r0, sp, #24
 23fcbe6:	f7ff faf8 	bl	23fc1da <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fcbea:	4682      	mov	sl, r0
 23fcbec:	2800      	cmp	r0, #0
 23fcbee:	d0f0      	beq.n	23fcbd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fcbf0:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcbf4:	4601      	mov	r1, r0
            bool found = false;
 23fcbf6:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcbfa:	4628      	mov	r0, r5
 23fcbfc:	9a07      	ldr	r2, [sp, #28]
 23fcbfe:	f10d 0317 	add.w	r3, sp, #23
 23fcc02:	f7ff fb7f 	bl	23fc304 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcc06:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcc0a:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcc0c:	2f00      	cmp	r7, #0
 23fcc0e:	d14a      	bne.n	23fcca6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fcc10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fcc14:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fcc18:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fcc1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fcc20:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fcc24:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fcc28:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcc2a:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fcc2e:	4293      	cmp	r3, r2
 23fcc30:	db17      	blt.n	23fcc62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fcc32:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fcc36:	f1ba 0f00 	cmp.w	sl, #0
 23fcc3a:	dd30      	ble.n	23fcc9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fcc3c:	fb09 f00a 	mul.w	r0, r9, sl
 23fcc40:	f7fe fcc8 	bl	23fb5d4 <malloc>
            if (!d) {
 23fcc44:	4683      	mov	fp, r0
 23fcc46:	b360      	cbz	r0, 23fcca2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fcc48:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fcc4c:	fb09 1202 	mla	r2, r9, r2, r1
 23fcc50:	f7ff feea 	bl	23fca28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fcc54:	6828      	ldr	r0, [r5, #0]
 23fcc56:	f7fe fccb 	bl	23fb5f0 <free>
        data_ = d;
 23fcc5a:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fcc5e:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fcc62:	682b      	ldr	r3, [r5, #0]
 23fcc64:	9a01      	ldr	r2, [sp, #4]
 23fcc66:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fcc6a:	686a      	ldr	r2, [r5, #4]
 23fcc6c:	4651      	mov	r1, sl
 23fcc6e:	fb09 3202 	mla	r2, r9, r2, r3
 23fcc72:	f10a 0014 	add.w	r0, sl, #20
 23fcc76:	f7ff fed7 	bl	23fca28 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fcc7a:	f1ba 0f00 	cmp.w	sl, #0
 23fcc7e:	d003      	beq.n	23fcc88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fcc80:	4650      	mov	r0, sl
 23fcc82:	a90f      	add	r1, sp, #60	; 0x3c
 23fcc84:	f7ff fb2a 	bl	23fc2dc <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fcc88:	686b      	ldr	r3, [r5, #4]
 23fcc8a:	3301      	adds	r3, #1
 23fcc8c:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fcc8e:	a811      	add	r0, sp, #68	; 0x44
 23fcc90:	f7ff fcde 	bl	23fc650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcc94:	b13f      	cbz	r7, 23fcca6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fcc96:	a80b      	add	r0, sp, #44	; 0x2c
 23fcc98:	f7ff fcda 	bl	23fc650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fcc9c:	e771      	b.n	23fcb82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fcc9e:	46bb      	mov	fp, r7
 23fcca0:	e7d8      	b.n	23fcc54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcca2:	2701      	movs	r7, #1
 23fcca4:	e7f3      	b.n	23fcc8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fcca6:	9b01      	ldr	r3, [sp, #4]
 23fcca8:	682d      	ldr	r5, [r5, #0]
 23fccaa:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fccae:	9b06      	ldr	r3, [sp, #24]
 23fccb0:	781b      	ldrb	r3, [r3, #0]
 23fccb2:	b92b      	cbnz	r3, 23fccc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fccb4:	f8d8 3000 	ldr.w	r3, [r8]
 23fccb8:	9a02      	ldr	r2, [sp, #8]
 23fccba:	4413      	add	r3, r2
 23fccbc:	7c1b      	ldrb	r3, [r3, #16]
 23fccbe:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fccc0:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fccc2:	e78e      	b.n	23fcbe2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccc4:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fccc6:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccc8:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fccca:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcccc:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fccce:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fccd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fccd2:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccd4:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fccd6:	60a2      	str	r2, [r4, #8]
 23fccd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fccda:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccdc:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fccde:	60e2      	str	r2, [r4, #12]
 23fcce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fcce2:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcce4:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fcce6:	6122      	str	r2, [r4, #16]
 23fcce8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fccea:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fccec:	9b03      	ldr	r3, [sp, #12]
 23fccee:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fccf0:	6162      	str	r2, [r4, #20]
 23fccf2:	7623      	strb	r3, [r4, #24]
 23fccf4:	e7cf      	b.n	23fcc96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fccf8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fccfa:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fccfc:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fccfe:	4617      	mov	r7, r2
 23fcd00:	b087      	sub	sp, #28
 23fcd02:	460d      	mov	r5, r1
        stream_(&stream) {
 23fcd04:	4668      	mov	r0, sp
 23fcd06:	4619      	mov	r1, r3
 23fcd08:	f7fc f842 	bl	23f8d90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fcd0c:	4b0b      	ldr	r3, [pc, #44]	; (23fcd3c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fcd0e:	4669      	mov	r1, sp
 23fcd10:	f846 3b04 	str.w	r3, [r6], #4
 23fcd14:	a803      	add	r0, sp, #12
 23fcd16:	f7fc f83b 	bl	23f8d90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fcd1a:	4639      	mov	r1, r7
 23fcd1c:	aa03      	add	r2, sp, #12
 23fcd1e:	4630      	mov	r0, r6
 23fcd20:	f7ff fef0 	bl	23fcb04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcd24:	a803      	add	r0, sp, #12
 23fcd26:	f7fb ffdf 	bl	23f8ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fcd2a:	4668      	mov	r0, sp
 23fcd2c:	f7fb ffdc 	bl	23f8ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fcd30:	4620      	mov	r0, r4
        stream_(&stream) {
 23fcd32:	4b03      	ldr	r3, [pc, #12]	; (23fcd40 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fcd34:	6225      	str	r5, [r4, #32]
 23fcd36:	6023      	str	r3, [r4, #0]
}
 23fcd38:	b007      	add	sp, #28
 23fcd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcd3c:	023fecd4 	.word	0x023fecd4
 23fcd40:	023ffb98 	.word	0x023ffb98

023fcd44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fcd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcd46:	460f      	mov	r7, r1
 23fcd48:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fcd4a:	4638      	mov	r0, r7
 23fcd4c:	491c      	ldr	r1, [pc, #112]	; (23fcdc0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fcd4e:	4616      	mov	r6, r2
 23fcd50:	461d      	mov	r5, r3
 23fcd52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fcd54:	f7fb fe68 	bl	23f8a28 <strcmp>
 23fcd58:	b9c0      	cbnz	r0, 23fcd8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fcd5a:	b1a4      	cbz	r4, 23fcd86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fcd5c:	4629      	mov	r1, r5
 23fcd5e:	a801      	add	r0, sp, #4
 23fcd60:	f7ff fcbe 	bl	23fc6e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fcd64:	2024      	movs	r0, #36	; 0x24
 23fcd66:	4917      	ldr	r1, [pc, #92]	; (23fcdc4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fcd68:	f001 fb88 	bl	23fe47c <_ZnwjRKSt9nothrow_t>
 23fcd6c:	4605      	mov	r5, r0
 23fcd6e:	b130      	cbz	r0, 23fcd7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fcd70:	ab01      	add	r3, sp, #4
 23fcd72:	4632      	mov	r2, r6
 23fcd74:	4621      	mov	r1, r4
 23fcd76:	f7ff ffbf 	bl	23fccf8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcd7a:	4b13      	ldr	r3, [pc, #76]	; (23fcdc8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fcd7c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fcd7e:	a801      	add	r0, sp, #4
 23fcd80:	f7fb ffb2 	bl	23f8ce8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fcd84:	462c      	mov	r4, r5
}
 23fcd86:	4620      	mov	r0, r4
 23fcd88:	b005      	add	sp, #20
 23fcd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fcd8c:	4638      	mov	r0, r7
 23fcd8e:	490f      	ldr	r1, [pc, #60]	; (23fcdcc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fcd90:	f7fb fe4a 	bl	23f8a28 <strcmp>
 23fcd94:	b990      	cbnz	r0, 23fcdbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fcd96:	2c00      	cmp	r4, #0
 23fcd98:	d0f5      	beq.n	23fcd86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fcd9a:	4629      	mov	r1, r5
 23fcd9c:	a801      	add	r0, sp, #4
 23fcd9e:	f7ff fc9f 	bl	23fc6e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fcda2:	2024      	movs	r0, #36	; 0x24
 23fcda4:	4907      	ldr	r1, [pc, #28]	; (23fcdc4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fcda6:	f001 fb69 	bl	23fe47c <_ZnwjRKSt9nothrow_t>
 23fcdaa:	4605      	mov	r5, r0
 23fcdac:	2800      	cmp	r0, #0
 23fcdae:	d0e6      	beq.n	23fcd7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fcdb0:	4632      	mov	r2, r6
 23fcdb2:	4621      	mov	r1, r4
 23fcdb4:	ab01      	add	r3, sp, #4
 23fcdb6:	f7ff ff9f 	bl	23fccf8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcdba:	e7e0      	b.n	23fcd7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fcdbc:	2400      	movs	r4, #0
 23fcdbe:	e7e2      	b.n	23fcd86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fcdc0:	023ffb18 	.word	0x023ffb18
 23fcdc4:	023ffd45 	.word	0x023ffd45
 23fcdc8:	023ffbb0 	.word	0x023ffbb0
 23fcdcc:	023ffb1c 	.word	0x023ffb1c

023fcdd0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fcdd0:	4b01      	ldr	r3, [pc, #4]	; (23fcdd8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fcdd2:	4a02      	ldr	r2, [pc, #8]	; (23fcddc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fcdd4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fcdd6:	4770      	bx	lr
 23fcdd8:	1007ae7c 	.word	0x1007ae7c
 23fcddc:	023ffb2d 	.word	0x023ffb2d

023fcde0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fcde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fcde4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fcde6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fcdea:	4604      	mov	r4, r0
 23fcdec:	460e      	mov	r6, r1
 23fcdee:	4617      	mov	r7, r2
 23fcdf0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fcdf2:	f000 fdcd 	bl	23fd990 <_Z16_fetch_usbserialv>
 23fcdf6:	4581      	cmp	r9, r0
 23fcdf8:	d04d      	beq.n	23fce96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fcdfa:	792b      	ldrb	r3, [r5, #4]
 23fcdfc:	0719      	lsls	r1, r3, #28
 23fcdfe:	d504      	bpl.n	23fce0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fce00:	4620      	mov	r0, r4
 23fce02:	696a      	ldr	r2, [r5, #20]
 23fce04:	4954      	ldr	r1, [pc, #336]	; (23fcf58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fce06:	f7ff fae2 	bl	23fc3ce <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fce0a:	f1b8 0f00 	cmp.w	r8, #0
 23fce0e:	d00d      	beq.n	23fce2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fce10:	215b      	movs	r1, #91	; 0x5b
 23fce12:	4620      	mov	r0, r4
 23fce14:	f7ff fa56 	bl	23fc2c4 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fce18:	4641      	mov	r1, r8
 23fce1a:	4620      	mov	r0, r4
 23fce1c:	f7ff fa43 	bl	23fc2a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fce20:	6823      	ldr	r3, [r4, #0]
 23fce22:	2202      	movs	r2, #2
 23fce24:	4620      	mov	r0, r4
 23fce26:	68db      	ldr	r3, [r3, #12]
 23fce28:	494c      	ldr	r1, [pc, #304]	; (23fcf5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fce2a:	4798      	blx	r3
    if (attr.has_file) {
 23fce2c:	792b      	ldrb	r3, [r5, #4]
 23fce2e:	07da      	lsls	r2, r3, #31
 23fce30:	d524      	bpl.n	23fce7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fce32:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fce36:	212f      	movs	r1, #47	; 0x2f
 23fce38:	4640      	mov	r0, r8
 23fce3a:	f001 fcf8 	bl	23fe82e <strrchr>
    if (s1) {
 23fce3e:	b108      	cbz	r0, 23fce44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fce40:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fce44:	4641      	mov	r1, r8
 23fce46:	4620      	mov	r0, r4
 23fce48:	f7ff fa2d 	bl	23fc2a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fce4c:	792b      	ldrb	r3, [r5, #4]
 23fce4e:	079b      	lsls	r3, r3, #30
 23fce50:	d508      	bpl.n	23fce64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fce52:	213a      	movs	r1, #58	; 0x3a
 23fce54:	4620      	mov	r0, r4
 23fce56:	f7ff fa35 	bl	23fc2c4 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fce5a:	4620      	mov	r0, r4
 23fce5c:	68ea      	ldr	r2, [r5, #12]
 23fce5e:	4940      	ldr	r1, [pc, #256]	; (23fcf60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fce60:	f7ff fab5 	bl	23fc3ce <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fce64:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fce66:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fce68:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fce6c:	4620      	mov	r0, r4
            write(", ", 2);
 23fce6e:	f04f 0202 	mov.w	r2, #2
 23fce72:	68db      	ldr	r3, [r3, #12]
 23fce74:	bf14      	ite	ne
 23fce76:	493b      	ldrne	r1, [pc, #236]	; (23fcf64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fce78:	493b      	ldreq	r1, [pc, #236]	; (23fcf68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fce7a:	4798      	blx	r3
    if (attr.has_function) {
 23fce7c:	792b      	ldrb	r3, [r5, #4]
 23fce7e:	0758      	lsls	r0, r3, #29
 23fce80:	d51d      	bpl.n	23fcebe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fce82:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fce84:	460b      	mov	r3, r1
 23fce86:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fce88:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fce8c:	b160      	cbz	r0, 23fcea8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fce8e:	2820      	cmp	r0, #32
 23fce90:	d108      	bne.n	23fcea4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fce92:	4619      	mov	r1, r3
 23fce94:	e7f7      	b.n	23fce86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fce96:	4835      	ldr	r0, [pc, #212]	; (23fcf6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fce98:	f000 ff35 	bl	23fdd06 <_ZN5spark12NetworkClass9listeningEv>
 23fce9c:	2800      	cmp	r0, #0
 23fce9e:	d0ac      	beq.n	23fcdfa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fcea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fcea4:	2828      	cmp	r0, #40	; 0x28
 23fcea6:	d1ee      	bne.n	23fce86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fcea8:	6823      	ldr	r3, [r4, #0]
 23fceaa:	1a52      	subs	r2, r2, r1
 23fceac:	4620      	mov	r0, r4
 23fceae:	68db      	ldr	r3, [r3, #12]
 23fceb0:	4798      	blx	r3
        write("(): ", 4);
 23fceb2:	6823      	ldr	r3, [r4, #0]
 23fceb4:	2204      	movs	r2, #4
 23fceb6:	4620      	mov	r0, r4
 23fceb8:	68db      	ldr	r3, [r3, #12]
 23fceba:	492d      	ldr	r1, [pc, #180]	; (23fcf70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fcebc:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fcebe:	2100      	movs	r1, #0
 23fcec0:	4638      	mov	r0, r7
 23fcec2:	f7fe f9b9 	bl	23fb238 <log_level_name>
 23fcec6:	4601      	mov	r1, r0
    write(s);
 23fcec8:	4620      	mov	r0, r4
 23fceca:	f7ff f9ec 	bl	23fc2a6 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fcece:	6823      	ldr	r3, [r4, #0]
 23fced0:	2202      	movs	r2, #2
 23fced2:	4620      	mov	r0, r4
 23fced4:	68db      	ldr	r3, [r3, #12]
 23fced6:	4924      	ldr	r1, [pc, #144]	; (23fcf68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fced8:	4798      	blx	r3
    if (msg) {
 23fceda:	b11e      	cbz	r6, 23fcee4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fcedc:	4631      	mov	r1, r6
 23fcede:	4620      	mov	r0, r4
 23fcee0:	f7ff f9e1 	bl	23fc2a6 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fcee4:	792b      	ldrb	r3, [r5, #4]
 23fcee6:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fceea:	d02c      	beq.n	23fcf46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fceec:	6823      	ldr	r3, [r4, #0]
 23fceee:	4921      	ldr	r1, [pc, #132]	; (23fcf74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fcef0:	68db      	ldr	r3, [r3, #12]
 23fcef2:	2202      	movs	r2, #2
 23fcef4:	4620      	mov	r0, r4
 23fcef6:	4798      	blx	r3
        if (attr.has_code) {
 23fcef8:	792b      	ldrb	r3, [r5, #4]
 23fcefa:	06d9      	lsls	r1, r3, #27
 23fcefc:	d50a      	bpl.n	23fcf14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fcefe:	6823      	ldr	r3, [r4, #0]
 23fcf00:	2207      	movs	r2, #7
 23fcf02:	4620      	mov	r0, r4
 23fcf04:	491c      	ldr	r1, [pc, #112]	; (23fcf78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fcf06:	68db      	ldr	r3, [r3, #12]
 23fcf08:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fcf0a:	4620      	mov	r0, r4
 23fcf0c:	69aa      	ldr	r2, [r5, #24]
 23fcf0e:	491b      	ldr	r1, [pc, #108]	; (23fcf7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fcf10:	f7ff fa5d 	bl	23fc3ce <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fcf14:	792b      	ldrb	r3, [r5, #4]
 23fcf16:	069a      	lsls	r2, r3, #26
 23fcf18:	d511      	bpl.n	23fcf3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fcf1a:	06db      	lsls	r3, r3, #27
 23fcf1c:	d505      	bpl.n	23fcf2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fcf1e:	6823      	ldr	r3, [r4, #0]
 23fcf20:	2202      	movs	r2, #2
 23fcf22:	4620      	mov	r0, r4
 23fcf24:	68db      	ldr	r3, [r3, #12]
 23fcf26:	490f      	ldr	r1, [pc, #60]	; (23fcf64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fcf28:	4798      	blx	r3
            write("details = ", 10);
 23fcf2a:	6823      	ldr	r3, [r4, #0]
 23fcf2c:	4620      	mov	r0, r4
 23fcf2e:	4914      	ldr	r1, [pc, #80]	; (23fcf80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fcf30:	220a      	movs	r2, #10
 23fcf32:	68db      	ldr	r3, [r3, #12]
 23fcf34:	4798      	blx	r3
            write(attr.details);
 23fcf36:	4620      	mov	r0, r4
 23fcf38:	69e9      	ldr	r1, [r5, #28]
 23fcf3a:	f7ff f9b4 	bl	23fc2a6 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fcf3e:	215d      	movs	r1, #93	; 0x5d
 23fcf40:	4620      	mov	r0, r4
 23fcf42:	f7ff f9bf 	bl	23fc2c4 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fcf46:	6823      	ldr	r3, [r4, #0]
 23fcf48:	4620      	mov	r0, r4
}
 23fcf4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fcf4e:	2202      	movs	r2, #2
 23fcf50:	68db      	ldr	r3, [r3, #12]
 23fcf52:	490c      	ldr	r1, [pc, #48]	; (23fcf84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fcf54:	4718      	bx	r3
 23fcf56:	bf00      	nop
 23fcf58:	023ffb31 	.word	0x023ffb31
 23fcf5c:	023ffb38 	.word	0x023ffb38
 23fcf60:	023febf6 	.word	0x023febf6
 23fcf64:	023ffb3b 	.word	0x023ffb3b
 23fcf68:	023ffb40 	.word	0x023ffb40
 23fcf6c:	1007aee4 	.word	0x1007aee4
 23fcf70:	023ffb3e 	.word	0x023ffb3e
 23fcf74:	023ffb43 	.word	0x023ffb43
 23fcf78:	023ffb46 	.word	0x023ffb46
 23fcf7c:	023ffb4e 	.word	0x023ffb4e
 23fcf80:	023ffb51 	.word	0x023ffb51
 23fcf84:	023ffb5c 	.word	0x023ffb5c

023fcf88 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fcf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcf8c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fcf8e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fcf90:	460d      	mov	r5, r1
 23fcf92:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fcf94:	f000 fcfc 	bl	23fd990 <_Z16_fetch_usbserialv>
 23fcf98:	4287      	cmp	r7, r0
 23fcf9a:	d007      	beq.n	23fcfac <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fcf9c:	6a20      	ldr	r0, [r4, #32]
 23fcf9e:	4632      	mov	r2, r6
 23fcfa0:	6803      	ldr	r3, [r0, #0]
 23fcfa2:	4629      	mov	r1, r5
}
 23fcfa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fcfa8:	68db      	ldr	r3, [r3, #12]
 23fcfaa:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fcfac:	4803      	ldr	r0, [pc, #12]	; (23fcfbc <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fcfae:	f000 feaa 	bl	23fdd06 <_ZN5spark12NetworkClass9listeningEv>
 23fcfb2:	2800      	cmp	r0, #0
 23fcfb4:	d0f2      	beq.n	23fcf9c <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fcfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fcfba:	bf00      	nop
 23fcfbc:	1007aee4 	.word	0x1007aee4

023fcfc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fcfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fcfc4:	b085      	sub	sp, #20
    return stream_;
 23fcfc6:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fcfca:	4605      	mov	r5, r0
 23fcfcc:	460f      	mov	r7, r1
 23fcfce:	4690      	mov	r8, r2
 23fcfd0:	461e      	mov	r6, r3
 23fcfd2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fcfd4:	f000 fcdc 	bl	23fd990 <_Z16_fetch_usbserialv>
 23fcfd8:	4581      	cmp	r9, r0
 23fcfda:	d105      	bne.n	23fcfe8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fcfdc:	4849      	ldr	r0, [pc, #292]	; (23fd104 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fcfde:	f000 fe92 	bl	23fdd06 <_ZN5spark12NetworkClass9listeningEv>
 23fcfe2:	2800      	cmp	r0, #0
 23fcfe4:	f040 808a 	bne.w	23fd0fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fcfe8:	f04f 0900 	mov.w	r9, #0
 23fcfec:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fcfee:	4a46      	ldr	r2, [pc, #280]	; (23fd108 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fcff0:	a801      	add	r0, sp, #4
 23fcff2:	9201      	str	r2, [sp, #4]
 23fcff4:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fcff6:	f88d 9008 	strb.w	r9, [sp, #8]
 23fcffa:	f001 f828 	bl	23fe04e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fcffe:	4649      	mov	r1, r9
 23fd000:	4640      	mov	r0, r8
 23fd002:	f7fe f919 	bl	23fb238 <log_level_name>
 23fd006:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fd008:	4940      	ldr	r1, [pc, #256]	; (23fd10c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fd00a:	2201      	movs	r2, #1
 23fd00c:	a801      	add	r0, sp, #4
 23fd00e:	f001 f8ad 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd012:	4641      	mov	r1, r8
 23fd014:	f7ff f939 	bl	23fc28a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fd018:	b13f      	cbz	r7, 23fd02a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fd01a:	493d      	ldr	r1, [pc, #244]	; (23fd110 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fd01c:	2201      	movs	r2, #1
 23fd01e:	a801      	add	r0, sp, #4
 23fd020:	f001 f8a4 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd024:	4639      	mov	r1, r7
 23fd026:	f7ff f930 	bl	23fc28a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fd02a:	b13e      	cbz	r6, 23fd03c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fd02c:	4939      	ldr	r1, [pc, #228]	; (23fd114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fd02e:	2201      	movs	r2, #1
 23fd030:	a801      	add	r0, sp, #4
 23fd032:	f001 f89b 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd036:	4631      	mov	r1, r6
 23fd038:	f7ff f927 	bl	23fc28a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fd03c:	7923      	ldrb	r3, [r4, #4]
 23fd03e:	07df      	lsls	r7, r3, #31
 23fd040:	d50e      	bpl.n	23fd060 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fd042:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fd044:	212f      	movs	r1, #47	; 0x2f
 23fd046:	4630      	mov	r0, r6
 23fd048:	f001 fbf1 	bl	23fe82e <strrchr>
    if (s1) {
 23fd04c:	b100      	cbz	r0, 23fd050 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fd04e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fd050:	4931      	ldr	r1, [pc, #196]	; (23fd118 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fd052:	2201      	movs	r2, #1
 23fd054:	a801      	add	r0, sp, #4
 23fd056:	f001 f889 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd05a:	4631      	mov	r1, r6
 23fd05c:	f7ff f915 	bl	23fc28a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fd060:	7923      	ldrb	r3, [r4, #4]
 23fd062:	079e      	lsls	r6, r3, #30
 23fd064:	d507      	bpl.n	23fd076 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fd066:	492d      	ldr	r1, [pc, #180]	; (23fd11c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fd068:	2202      	movs	r2, #2
 23fd06a:	a801      	add	r0, sp, #4
 23fd06c:	f001 f87e 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd070:	68e1      	ldr	r1, [r4, #12]
 23fd072:	f000 fff9 	bl	23fe068 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd076:	7923      	ldrb	r3, [r4, #4]
 23fd078:	0758      	lsls	r0, r3, #29
 23fd07a:	d514      	bpl.n	23fd0a6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd07c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd07e:	4633      	mov	r3, r6
 23fd080:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd082:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd086:	b12a      	cbz	r2, 23fd094 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd088:	2a20      	cmp	r2, #32
 23fd08a:	d101      	bne.n	23fd090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd08c:	461e      	mov	r6, r3
 23fd08e:	e7f7      	b.n	23fd080 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd090:	2a28      	cmp	r2, #40	; 0x28
 23fd092:	d1f5      	bne.n	23fd080 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd094:	2202      	movs	r2, #2
 23fd096:	4922      	ldr	r1, [pc, #136]	; (23fd120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd098:	a801      	add	r0, sp, #4
 23fd09a:	f001 f867 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd09e:	4631      	mov	r1, r6
 23fd0a0:	1bba      	subs	r2, r7, r6
 23fd0a2:	f001 f873 	bl	23fe18c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd0a6:	7923      	ldrb	r3, [r4, #4]
 23fd0a8:	0719      	lsls	r1, r3, #28
 23fd0aa:	d507      	bpl.n	23fd0bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd0ac:	491d      	ldr	r1, [pc, #116]	; (23fd124 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd0ae:	2201      	movs	r2, #1
 23fd0b0:	a801      	add	r0, sp, #4
 23fd0b2:	f001 f85b 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd0b6:	6961      	ldr	r1, [r4, #20]
 23fd0b8:	f000 ffe8 	bl	23fe08c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd0bc:	7923      	ldrb	r3, [r4, #4]
 23fd0be:	06da      	lsls	r2, r3, #27
 23fd0c0:	d508      	bpl.n	23fd0d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd0c2:	2204      	movs	r2, #4
 23fd0c4:	4918      	ldr	r1, [pc, #96]	; (23fd128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd0c6:	eb0d 0002 	add.w	r0, sp, r2
 23fd0ca:	f001 f84f 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd0ce:	69a1      	ldr	r1, [r4, #24]
 23fd0d0:	f000 ffca 	bl	23fe068 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd0d4:	7923      	ldrb	r3, [r4, #4]
 23fd0d6:	069b      	lsls	r3, r3, #26
 23fd0d8:	d507      	bpl.n	23fd0ea <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd0da:	4914      	ldr	r1, [pc, #80]	; (23fd12c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd0dc:	2206      	movs	r2, #6
 23fd0de:	a801      	add	r0, sp, #4
 23fd0e0:	f001 f844 	bl	23fe16c <_ZN5spark10JSONWriter4nameEPKcj>
 23fd0e4:	69e1      	ldr	r1, [r4, #28]
 23fd0e6:	f7ff f8d0 	bl	23fc28a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd0ea:	a801      	add	r0, sp, #4
 23fd0ec:	f000 ff99 	bl	23fe022 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd0f0:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd0f2:	2202      	movs	r2, #2
 23fd0f4:	6803      	ldr	r3, [r0, #0]
 23fd0f6:	490e      	ldr	r1, [pc, #56]	; (23fd130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd0f8:	68db      	ldr	r3, [r3, #12]
 23fd0fa:	4798      	blx	r3
}
 23fd0fc:	b005      	add	sp, #20
 23fd0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd102:	bf00      	nop
 23fd104:	1007aee4 	.word	0x1007aee4
 23fd108:	023ffb80 	.word	0x023ffb80
 23fd10c:	023ffb0e 	.word	0x023ffb0e
 23fd110:	023ffb5f 	.word	0x023ffb5f
 23fd114:	023ffecb 	.word	0x023ffecb
 23fd118:	023ffb61 	.word	0x023ffb61
 23fd11c:	023ffb63 	.word	0x023ffb63
 23fd120:	023ffb66 	.word	0x023ffb66
 23fd124:	023fecc7 	.word	0x023fecc7
 23fd128:	023ffb69 	.word	0x023ffb69
 23fd12c:	023ffb6e 	.word	0x023ffb6e
 23fd130:	023ffb5c 	.word	0x023ffb5c

023fd134 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fd134:	4b02      	ldr	r3, [pc, #8]	; (23fd140 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fd136:	681a      	ldr	r2, [r3, #0]
 23fd138:	4b02      	ldr	r3, [pc, #8]	; (23fd144 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fd13a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fd13c:	4770      	bx	lr
 23fd13e:	bf00      	nop
 23fd140:	1007ad44 	.word	0x1007ad44
 23fd144:	1007aea8 	.word	0x1007aea8

023fd148 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fd148:	2100      	movs	r1, #0
 23fd14a:	f7fe b89f 	b.w	23fb28c <system_delay_ms>
	...

023fd150 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fd150:	2200      	movs	r2, #0
 23fd152:	4b01      	ldr	r3, [pc, #4]	; (23fd158 <_GLOBAL__sub_I_RGB+0x8>)
 23fd154:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd156:	4770      	bx	lr
 23fd158:	1007aeac 	.word	0x1007aeac

023fd15c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fd15c:	4b01      	ldr	r3, [pc, #4]	; (23fd164 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fd15e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fd160:	4770      	bx	lr
 23fd162:	bf00      	nop
 23fd164:	1007ad48 	.word	0x1007ad48

023fd168 <serialEventRun>:
{
 23fd168:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fd16a:	4b0f      	ldr	r3, [pc, #60]	; (23fd1a8 <serialEventRun+0x40>)
 23fd16c:	b143      	cbz	r3, 23fd180 <serialEventRun+0x18>
 23fd16e:	f000 fc0f 	bl	23fd990 <_Z16_fetch_usbserialv>
 23fd172:	6803      	ldr	r3, [r0, #0]
 23fd174:	691b      	ldr	r3, [r3, #16]
 23fd176:	4798      	blx	r3
 23fd178:	2800      	cmp	r0, #0
 23fd17a:	dd01      	ble.n	23fd180 <serialEventRun+0x18>
        serialEvent();
 23fd17c:	e000      	b.n	23fd180 <serialEventRun+0x18>
 23fd17e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fd180:	4b0a      	ldr	r3, [pc, #40]	; (23fd1ac <serialEventRun+0x44>)
 23fd182:	b143      	cbz	r3, 23fd196 <serialEventRun+0x2e>
 23fd184:	f001 f8aa 	bl	23fe2dc <_Z22__fetch_global_Serial1v>
 23fd188:	6803      	ldr	r3, [r0, #0]
 23fd18a:	691b      	ldr	r3, [r3, #16]
 23fd18c:	4798      	blx	r3
 23fd18e:	2800      	cmp	r0, #0
 23fd190:	dd01      	ble.n	23fd196 <serialEventRun+0x2e>
        serialEvent1();
 23fd192:	e000      	b.n	23fd196 <serialEventRun+0x2e>
 23fd194:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fd196:	4b06      	ldr	r3, [pc, #24]	; (23fd1b0 <serialEventRun+0x48>)
 23fd198:	b10b      	cbz	r3, 23fd19e <serialEventRun+0x36>
 23fd19a:	f001 f8e5 	bl	23fe368 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fd19e:	4b05      	ldr	r3, [pc, #20]	; (23fd1b4 <serialEventRun+0x4c>)
 23fd1a0:	b10b      	cbz	r3, 23fd1a6 <serialEventRun+0x3e>
 23fd1a2:	f001 f917 	bl	23fe3d4 <_Z15serialEventRun3v>
}
 23fd1a6:	bd08      	pop	{r3, pc}
	...

023fd1b8 <_post_loop>:
{
 23fd1b8:	b508      	push	{r3, lr}
	serialEventRun();
 23fd1ba:	f7ff ffd5 	bl	23fd168 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fd1be:	f7fd fd1d 	bl	23fabfc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fd1c2:	4b01      	ldr	r3, [pc, #4]	; (23fd1c8 <_post_loop+0x10>)
 23fd1c4:	6018      	str	r0, [r3, #0]
}
 23fd1c6:	bd08      	pop	{r3, pc}
 23fd1c8:	1007af34 	.word	0x1007af34

023fd1cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd1cc:	4805      	ldr	r0, [pc, #20]	; (23fd1e4 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fd1ce:	4a06      	ldr	r2, [pc, #24]	; (23fd1e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fd1d0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd1d2:	1a12      	subs	r2, r2, r0
 23fd1d4:	4905      	ldr	r1, [pc, #20]	; (23fd1ec <_Z33system_initialize_user_backup_ramv+0x20>)
 23fd1d6:	f001 fa7b 	bl	23fe6d0 <memcpy>
    __backup_sram_signature = signature;
 23fd1da:	4b05      	ldr	r3, [pc, #20]	; (23fd1f0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fd1dc:	4a05      	ldr	r2, [pc, #20]	; (23fd1f4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fd1de:	601a      	str	r2, [r3, #0]
}
 23fd1e0:	bd08      	pop	{r3, pc}
 23fd1e2:	bf00      	nop
 23fd1e4:	1007b400 	.word	0x1007b400
 23fd1e8:	1007b404 	.word	0x1007b404
 23fd1ec:	085ff6f4 	.word	0x085ff6f4
 23fd1f0:	1007b400 	.word	0x1007b400
 23fd1f4:	9a271c1e 	.word	0x9a271c1e

023fd1f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd1f8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fd1fa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd1fc:	461a      	mov	r2, r3
 23fd1fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd202:	9300      	str	r3, [sp, #0]
 23fd204:	f7fe f87a 	bl	23fb2fc <system_ctrl_set_result>
}
 23fd208:	b003      	add	sp, #12
 23fd20a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fd210 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fd210:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fd212:	8843      	ldrh	r3, [r0, #2]
 23fd214:	2b0a      	cmp	r3, #10
 23fd216:	d008      	beq.n	23fd22a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fd218:	2b50      	cmp	r3, #80	; 0x50
 23fd21a:	d10b      	bne.n	23fd234 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fd21c:	4b09      	ldr	r3, [pc, #36]	; (23fd244 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fd21e:	681b      	ldr	r3, [r3, #0]
 23fd220:	b14b      	cbz	r3, 23fd236 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fd222:	b003      	add	sp, #12
 23fd224:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fd228:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fd22a:	f7ff ffe5 	bl	23fd1f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fd22e:	b003      	add	sp, #12
 23fd230:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd234:	2300      	movs	r3, #0
 23fd236:	461a      	mov	r2, r3
 23fd238:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd23c:	9300      	str	r3, [sp, #0]
 23fd23e:	f7fe f85d 	bl	23fb2fc <system_ctrl_set_result>
}
 23fd242:	e7f4      	b.n	23fd22e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fd244:	1007aec0 	.word	0x1007aec0

023fd248 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd248:	2100      	movs	r1, #0
{
 23fd24a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd24c:	4811      	ldr	r0, [pc, #68]	; (23fd294 <module_user_init_hook+0x4c>)
 23fd24e:	f7fe fa31 	bl	23fb6b4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fd252:	4b11      	ldr	r3, [pc, #68]	; (23fd298 <module_user_init_hook+0x50>)
 23fd254:	681a      	ldr	r2, [r3, #0]
 23fd256:	4b11      	ldr	r3, [pc, #68]	; (23fd29c <module_user_init_hook+0x54>)
 23fd258:	429a      	cmp	r2, r3
 23fd25a:	bf0c      	ite	eq
 23fd25c:	2201      	moveq	r2, #1
 23fd25e:	2200      	movne	r2, #0
 23fd260:	4b0f      	ldr	r3, [pc, #60]	; (23fd2a0 <module_user_init_hook+0x58>)
 23fd262:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fd264:	d001      	beq.n	23fd26a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fd266:	f7ff ffb1 	bl	23fd1cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fd26a:	f7fd fcab 	bl	23fabc4 <HAL_RNG_GetRandomNumber>
 23fd26e:	4604      	mov	r4, r0
    srand(seed);
 23fd270:	f001 fa5e 	bl	23fe730 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fd274:	4b0b      	ldr	r3, [pc, #44]	; (23fd2a4 <module_user_init_hook+0x5c>)
 23fd276:	b113      	cbz	r3, 23fd27e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fd278:	4620      	mov	r0, r4
 23fd27a:	e000      	b.n	23fd27e <module_user_init_hook+0x36>
 23fd27c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fd27e:	2100      	movs	r1, #0
 23fd280:	4808      	ldr	r0, [pc, #32]	; (23fd2a4 <module_user_init_hook+0x5c>)
 23fd282:	f7fe f91b 	bl	23fb4bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fd286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fd28a:	2100      	movs	r1, #0
 23fd28c:	4806      	ldr	r0, [pc, #24]	; (23fd2a8 <module_user_init_hook+0x60>)
 23fd28e:	f7fe b827 	b.w	23fb2e0 <system_ctrl_set_app_request_handler>
 23fd292:	bf00      	nop
 23fd294:	023fd15d 	.word	0x023fd15d
 23fd298:	1007b400 	.word	0x1007b400
 23fd29c:	9a271c1e 	.word	0x9a271c1e
 23fd2a0:	1007aebc 	.word	0x1007aebc
 23fd2a4:	00000000 	.word	0x00000000
 23fd2a8:	023fd211 	.word	0x023fd211

023fd2ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fd2ac:	4770      	bx	lr

023fd2ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fd2ae:	2000      	movs	r0, #0
 23fd2b0:	4770      	bx	lr

023fd2b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fd2b2:	b510      	push	{r4, lr}
 23fd2b4:	4604      	mov	r4, r0
 23fd2b6:	2110      	movs	r1, #16
 23fd2b8:	f7fb fbeb 	bl	23f8a92 <_ZdlPvj>
 23fd2bc:	4620      	mov	r0, r4
 23fd2be:	bd10      	pop	{r4, pc}

023fd2c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fd2c0:	b508      	push	{r3, lr}
      { delete this; }
 23fd2c2:	f7ff fff6 	bl	23fd2b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fd2c6:	bd08      	pop	{r3, pc}

023fd2c8 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fd2c8:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fd2ca:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fd2cc:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fd2d0:	6002      	str	r2, [r0, #0]
 23fd2d2:	8084      	strh	r4, [r0, #4]
 23fd2d4:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd2d6:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd2d8:	680c      	ldr	r4, [r1, #0]
 23fd2da:	8085      	strh	r5, [r0, #4]
 23fd2dc:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd2de:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fd2e0:	bd30      	pop	{r4, r5, pc}

023fd2e2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fd2e2:	b510      	push	{r4, lr}
 23fd2e4:	4604      	mov	r4, r0
    free((void*)msg_);
 23fd2e6:	6800      	ldr	r0, [r0, #0]
 23fd2e8:	f7fe f982 	bl	23fb5f0 <free>
}
 23fd2ec:	4620      	mov	r0, r4
 23fd2ee:	bd10      	pop	{r4, pc}

023fd2f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fd2f0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fd2f2:	68c4      	ldr	r4, [r0, #12]
 23fd2f4:	b314      	cbz	r4, 23fd33c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fd2f6:	7823      	ldrb	r3, [r4, #0]
 23fd2f8:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fd2fa:	2b02      	cmp	r3, #2
 23fd2fc:	d103      	bne.n	23fd306 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fd2fe:	f104 000c 	add.w	r0, r4, #12
 23fd302:	f7ff ffee 	bl	23fd2e2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fd306:	1d23      	adds	r3, r4, #4
 23fd308:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fd30a:	b135      	cbz	r5, 23fd31a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 23fd30c:	4628      	mov	r0, r5
 23fd30e:	f7fe fac9 	bl	23fb8a4 <_ZNSt14_Function_baseD1Ev>
 23fd312:	2110      	movs	r1, #16
 23fd314:	4628      	mov	r0, r5
 23fd316:	f7fb fbbc 	bl	23f8a92 <_ZdlPvj>
 23fd31a:	f104 0308 	add.w	r3, r4, #8
 23fd31e:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fd320:	b135      	cbz	r5, 23fd330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fd322:	4628      	mov	r0, r5
 23fd324:	f7fe fabe 	bl	23fb8a4 <_ZNSt14_Function_baseD1Ev>
 23fd328:	2110      	movs	r1, #16
 23fd32a:	4628      	mov	r0, r5
 23fd32c:	f7fb fbb1 	bl	23f8a92 <_ZdlPvj>
 23fd330:	4620      	mov	r0, r4
 23fd332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fd336:	2114      	movs	r1, #20
 23fd338:	f7fb bbab 	b.w	23f8a92 <_ZdlPvj>
 23fd33c:	bd38      	pop	{r3, r4, r5, pc}

023fd33e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd33e:	680b      	ldr	r3, [r1, #0]
 23fd340:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd342:	684b      	ldr	r3, [r1, #4]
 23fd344:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd346:	b113      	cbz	r3, 23fd34e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fd348:	685a      	ldr	r2, [r3, #4]
 23fd34a:	3201      	adds	r2, #1
 23fd34c:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd34e:	4770      	bx	lr

023fd350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fd350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd352:	4604      	mov	r4, r0
 23fd354:	4668      	mov	r0, sp
 23fd356:	460d      	mov	r5, r1
 23fd358:	f7ff fff1 	bl	23fd33e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd35c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fd35e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd360:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fd362:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fd364:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fd366:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fd368:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 23fd36a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fd36c:	f7fb fc04 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fd370:	b135      	cbz	r5, 23fd380 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fd372:	1d28      	adds	r0, r5, #4
 23fd374:	f7fb fc00 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd378:	2108      	movs	r1, #8
 23fd37a:	4628      	mov	r0, r5
 23fd37c:	f7fb fb89 	bl	23f8a92 <_ZdlPvj>
        return p;
    }
 23fd380:	4620      	mov	r0, r4
 23fd382:	b003      	add	sp, #12
 23fd384:	bd30      	pop	{r4, r5, pc}

023fd386 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fd386:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fd388:	b510      	push	{r4, lr}
      if (_M_empty())
 23fd38a:	b90a      	cbnz	r2, 23fd390 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fd38c:	f001 f87d 	bl	23fe48a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd390:	68c3      	ldr	r3, [r0, #12]
    }
 23fd392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd396:	4718      	bx	r3

023fd398 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fd398:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fd39a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fd39c:	f100 0110 	add.w	r1, r0, #16
 23fd3a0:	f7ff fff1 	bl	23fd386 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fd3a4:	bd08      	pop	{r3, pc}

023fd3a6 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fd3a6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fd3a8:	b510      	push	{r4, lr}
      if (_M_empty())
 23fd3aa:	b90a      	cbnz	r2, 23fd3b0 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fd3ac:	f001 f86d 	bl	23fe48a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd3b0:	68c3      	ldr	r3, [r0, #12]
    }
 23fd3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd3b6:	4718      	bx	r3

023fd3b8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fd3b8:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fd3ba:	6800      	ldr	r0, [r0, #0]
 23fd3bc:	f100 0110 	add.w	r1, r0, #16
 23fd3c0:	f7ff fff1 	bl	23fd3a6 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fd3c4:	bd08      	pop	{r3, pc}
	...

023fd3c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fd3c8:	b538      	push	{r3, r4, r5, lr}
 23fd3ca:	2300      	movs	r3, #0
 23fd3cc:	4604      	mov	r4, r0
 23fd3ce:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd3d0:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fd3d2:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd3d4:	f7fb fb57 	bl	23f8a86 <_Znwj>
 23fd3d8:	b128      	cbz	r0, 23fd3e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fd3da:	2301      	movs	r3, #1
 23fd3dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fd3e0:	4b02      	ldr	r3, [pc, #8]	; (23fd3ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fd3e2:	60c5      	str	r5, [r0, #12]
 23fd3e4:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd3e6:	6020      	str	r0, [r4, #0]
	}
 23fd3e8:	4620      	mov	r0, r4
 23fd3ea:	bd38      	pop	{r3, r4, r5, pc}
 23fd3ec:	023ffc14 	.word	0x023ffc14

023fd3f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fd3f0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd3f2:	2300      	movs	r3, #0
 23fd3f4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fd3f6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fd3f8:	4604      	mov	r4, r0
 23fd3fa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fd3fc:	b12b      	cbz	r3, 23fd40a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fd3fe:	2202      	movs	r2, #2
 23fd400:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fd402:	68eb      	ldr	r3, [r5, #12]
 23fd404:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fd406:	68ab      	ldr	r3, [r5, #8]
 23fd408:	60a3      	str	r3, [r4, #8]
    }
 23fd40a:	4620      	mov	r0, r4
 23fd40c:	bd38      	pop	{r3, r4, r5, pc}
	...

023fd410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fd410:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd412:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
 23fd414:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fd416:	4668      	mov	r0, sp
 23fd418:	f7ff ff56 	bl	23fd2c8 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fd41c:	f04f 0302 	mov.w	r3, #2
 23fd420:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fd424:	2a00      	cmp	r2, #0
 23fd426:	d103      	bne.n	23fd430 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fd428:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fd42c:	2900      	cmp	r1, #0
 23fd42e:	d1f7      	bne.n	23fd420 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fd430:	d121      	bne.n	23fd476 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fd432:	f104 050c 	add.w	r5, r4, #12
 23fd436:	4669      	mov	r1, sp
 23fd438:	4628      	mov	r0, r5
 23fd43a:	f7ff ff45 	bl	23fd2c8 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fd43e:	2201      	movs	r2, #1
 23fd440:	1c63      	adds	r3, r4, #1
 23fd442:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fd446:	2000      	movs	r0, #0
 23fd448:	f104 0308 	add.w	r3, r4, #8
 23fd44c:	e8d3 6fef 	ldaex	r6, [r3]
 23fd450:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fd454:	2a00      	cmp	r2, #0
 23fd456:	d1f9      	bne.n	23fd44c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fd458:	b16e      	cbz	r6, 23fd476 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fd45a:	f7fd ff25 	bl	23fb2a8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fd45e:	b178      	cbz	r0, 23fd480 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fd460:	4629      	mov	r1, r5
 23fd462:	4630      	mov	r0, r6
 23fd464:	f7ff ff8f 	bl	23fd386 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fd468:	4630      	mov	r0, r6
 23fd46a:	f7fe fa1b 	bl	23fb8a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fd46e:	2110      	movs	r1, #16
 23fd470:	4630      	mov	r0, r6
 23fd472:	f7fb fb0e 	bl	23f8a92 <_ZdlPvj>
        p_->setError(std::move(error));
 23fd476:	4668      	mov	r0, sp
 23fd478:	f7ff ff33 	bl	23fd2e2 <_ZN8particle5ErrorD1Ev>
    }
 23fd47c:	b009      	add	sp, #36	; 0x24
 23fd47e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fd480:	4631      	mov	r1, r6
 23fd482:	a802      	add	r0, sp, #8
 23fd484:	f7ff ffb4 	bl	23fd3f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fd488:	68e0      	ldr	r0, [r4, #12]
 23fd48a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd48e:	b108      	cbz	r0, 23fd494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fd490:	f001 f99c 	bl	23fe7cc <strdup>
        type_(type) {
 23fd494:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fd496:	2010      	movs	r0, #16
 23fd498:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fd49c:	f7fb faf3 	bl	23f8a86 <_Znwj>
 23fd4a0:	4605      	mov	r5, r0
 23fd4a2:	b1e8      	cbz	r0, 23fd4e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fd4a4:	2700      	movs	r7, #0
 23fd4a6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd4a8:	2018      	movs	r0, #24
 23fd4aa:	f7fb faec 	bl	23f8a86 <_Znwj>
 23fd4ae:	4604      	mov	r4, r0
 23fd4b0:	b188      	cbz	r0, 23fd4d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fd4b2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd4b4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fd4b6:	a802      	add	r0, sp, #8
 23fd4b8:	f7fe fc47 	bl	23fbd4a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd4be:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4c0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4c2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd4c4:	9204      	str	r2, [sp, #16]
 23fd4c6:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd4c8:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4ca:	60e3      	str	r3, [r4, #12]
 23fd4cc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fd4d0:	9205      	str	r2, [sp, #20]
 23fd4d2:	f7ff fef9 	bl	23fd2c8 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fd4d6:	4b08      	ldr	r3, [pc, #32]	; (23fd4f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd4d8:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd4da:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd4dc:	4b07      	ldr	r3, [pc, #28]	; (23fd4fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fd4de:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fd4e0:	a806      	add	r0, sp, #24
 23fd4e2:	f7ff fefe 	bl	23fd2e2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fd4e6:	a802      	add	r0, sp, #8
 23fd4e8:	f7fe f9dc 	bl	23fb8a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd4ec:	2200      	movs	r2, #0
 23fd4ee:	4629      	mov	r1, r5
 23fd4f0:	4803      	ldr	r0, [pc, #12]	; (23fd500 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fd4f2:	f7fd fee7 	bl	23fb2c4 <application_thread_invoke>
 23fd4f6:	e7b7      	b.n	23fd468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fd4f8:	023fd399 	.word	0x023fd399
 23fd4fc:	023fd615 	.word	0x023fd615
 23fd500:	023fdaeb 	.word	0x023fdaeb

023fd504 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fd504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd508:	b08b      	sub	sp, #44	; 0x2c
 23fd50a:	4605      	mov	r5, r0
 23fd50c:	460f      	mov	r7, r1
 23fd50e:	4690      	mov	r8, r2
 23fd510:	4699      	mov	r9, r3
 23fd512:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fd516:	f7fd ffb5 	bl	23fb484 <spark_cloud_flag_connected>
 23fd51a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fd51c:	4683      	mov	fp, r0
 23fd51e:	bb38      	cbnz	r0, 23fd570 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fd520:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fd524:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fd526:	a905      	add	r1, sp, #20
 23fd528:	4630      	mov	r0, r6
 23fd52a:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd52e:	f7ff fecb 	bl	23fd2c8 <_ZN8particle5ErrorC1EOS0_>
 23fd532:	2014      	movs	r0, #20
 23fd534:	f7fb faa7 	bl	23f8a86 <_Znwj>
 23fd538:	4604      	mov	r4, r0
 23fd53a:	b148      	cbz	r0, 23fd550 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fd53c:	2302      	movs	r3, #2
 23fd53e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd540:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fd542:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd546:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fd548:	4631      	mov	r1, r6
 23fd54a:	300c      	adds	r0, #12
 23fd54c:	f7ff febc 	bl	23fd2c8 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd550:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fd552:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd554:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fd558:	f7ff ff36 	bl	23fd3c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fd55c:	4630      	mov	r0, r6
 23fd55e:	f7ff fec0 	bl	23fd2e2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fd562:	a805      	add	r0, sp, #20
 23fd564:	f7ff febd 	bl	23fd2e2 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fd568:	4628      	mov	r0, r5
 23fd56a:	b00b      	add	sp, #44	; 0x2c
 23fd56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fd570:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fd572:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fd574:	2014      	movs	r0, #20
 23fd576:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fd57a:	9307      	str	r3, [sp, #28]
 23fd57c:	f7fb fa83 	bl	23f8a86 <_Znwj>
 23fd580:	4601      	mov	r1, r0
 23fd582:	b118      	cbz	r0, 23fd58c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fd584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fd588:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd58a:	7044      	strb	r4, [r0, #1]
 23fd58c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd58e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fd590:	f7ff ff1a 	bl	23fd3c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fd594:	4b1e      	ldr	r3, [pc, #120]	; (23fd610 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fd596:	2008      	movs	r0, #8
 23fd598:	9308      	str	r3, [sp, #32]
 23fd59a:	f7fb fa74 	bl	23f8a86 <_Znwj>
 23fd59e:	4604      	mov	r4, r0
 23fd5a0:	b110      	cbz	r0, 23fd5a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fd5a2:	a903      	add	r1, sp, #12
 23fd5a4:	f7ff fecb 	bl	23fd33e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fd5a8:	464a      	mov	r2, r9
 23fd5aa:	4641      	mov	r1, r8
 23fd5ac:	4638      	mov	r0, r7
 23fd5ae:	9600      	str	r6, [sp, #0]
 23fd5b0:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fd5b4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fd5b6:	f7fd ff73 	bl	23fb4a0 <spark_send_event>
 23fd5ba:	b9b8      	cbnz	r0, 23fd5ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fd5bc:	9b03      	ldr	r3, [sp, #12]
 23fd5be:	3301      	adds	r3, #1
 23fd5c0:	781b      	ldrb	r3, [r3, #0]
 23fd5c2:	b2db      	uxtb	r3, r3
 23fd5c4:	b993      	cbnz	r3, 23fd5ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fd5c6:	9305      	str	r3, [sp, #20]
 23fd5c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fd5cc:	a905      	add	r1, sp, #20
 23fd5ce:	a803      	add	r0, sp, #12
 23fd5d0:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd5d4:	f7ff ff1c 	bl	23fd410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fd5d8:	a805      	add	r0, sp, #20
 23fd5da:	f7ff fe82 	bl	23fd2e2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fd5de:	a805      	add	r0, sp, #20
 23fd5e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fd5e2:	f7ff feb5 	bl	23fd350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fd5e6:	a806      	add	r0, sp, #24
 23fd5e8:	f7fb fac6 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd5ec:	a903      	add	r1, sp, #12
 23fd5ee:	a805      	add	r0, sp, #20
 23fd5f0:	f7ff fea5 	bl	23fd33e <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd5f4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fd5f6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd5f8:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fd5fa:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fd5fc:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fd5fe:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fd600:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fd602:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fd604:	f7fb fab8 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd608:	a804      	add	r0, sp, #16
 23fd60a:	f7fb fab5 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fd60e:	e7ab      	b.n	23fd568 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fd610:	023fd691 	.word	0x023fd691

023fd614 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fd614:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd616:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd618:	4605      	mov	r5, r0
	switch (__op)
 23fd61a:	d103      	bne.n	23fd624 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd61c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd61e:	6003      	str	r3, [r0, #0]
      }
 23fd620:	2000      	movs	r0, #0
 23fd622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fd624:	2a02      	cmp	r2, #2
 23fd626:	d010      	beq.n	23fd64a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fd628:	2a03      	cmp	r2, #3
 23fd62a:	d1f9      	bne.n	23fd620 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd62c:	6804      	ldr	r4, [r0, #0]
 23fd62e:	2c00      	cmp	r4, #0
 23fd630:	d0f6      	beq.n	23fd620 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fd632:	f104 0010 	add.w	r0, r4, #16
 23fd636:	f7ff fe54 	bl	23fd2e2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fd63a:	4620      	mov	r0, r4
 23fd63c:	f7fe f932 	bl	23fb8a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd640:	2118      	movs	r1, #24
 23fd642:	4620      	mov	r0, r4
 23fd644:	f7fb fa25 	bl	23f8a92 <_ZdlPvj>
 23fd648:	e7ea      	b.n	23fd620 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd64a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fd64c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd64e:	f7fb fa1a 	bl	23f8a86 <_Znwj>
 23fd652:	4604      	mov	r4, r0
 23fd654:	b150      	cbz	r0, 23fd66c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fd656:	4631      	mov	r1, r6
 23fd658:	f7ff feca 	bl	23fd3f0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fd65c:	6930      	ldr	r0, [r6, #16]
 23fd65e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd662:	b108      	cbz	r0, 23fd668 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fd664:	f001 f8b2 	bl	23fe7cc <strdup>
        type_(type) {
 23fd668:	6120      	str	r0, [r4, #16]
 23fd66a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fd66c:	602c      	str	r4, [r5, #0]
	}
 23fd66e:	e7d7      	b.n	23fd620 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fd670 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fd670:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd672:	2300      	movs	r3, #0
 23fd674:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fd676:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fd678:	4604      	mov	r4, r0
 23fd67a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fd67c:	b12b      	cbz	r3, 23fd68a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fd67e:	2202      	movs	r2, #2
 23fd680:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fd682:	68eb      	ldr	r3, [r5, #12]
 23fd684:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fd686:	68ab      	ldr	r3, [r5, #8]
 23fd688:	60a3      	str	r3, [r4, #8]
    }
 23fd68a:	4620      	mov	r0, r4
 23fd68c:	bd38      	pop	{r3, r4, r5, pc}
	...

023fd690 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fd690:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd692:	4604      	mov	r4, r0
 23fd694:	b089      	sub	sp, #36	; 0x24
 23fd696:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fd698:	a801      	add	r0, sp, #4
 23fd69a:	4611      	mov	r1, r2
 23fd69c:	f7ff fe58 	bl	23fd350 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fd6a0:	b1a4      	cbz	r4, 23fd6cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fd6a2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd6a4:	b11d      	cbz	r5, 23fd6ae <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fd6a6:	4628      	mov	r0, r5
 23fd6a8:	f001 f890 	bl	23fe7cc <strdup>
 23fd6ac:	4605      	mov	r5, r0
 23fd6ae:	a801      	add	r0, sp, #4
 23fd6b0:	a903      	add	r1, sp, #12
        type_(type) {
 23fd6b2:	9503      	str	r5, [sp, #12]
 23fd6b4:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fd6b8:	f7ff feaa 	bl	23fd410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fd6bc:	a803      	add	r0, sp, #12
 23fd6be:	f7ff fe10 	bl	23fd2e2 <_ZN8particle5ErrorD1Ev>
 23fd6c2:	a802      	add	r0, sp, #8
 23fd6c4:	f7fb fa58 	bl	23f8b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd6c8:	b009      	add	sp, #36	; 0x24
 23fd6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fd6cc:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fd6ce:	9d01      	ldr	r5, [sp, #4]
 23fd6d0:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fd6d4:	2a00      	cmp	r2, #0
 23fd6d6:	d103      	bne.n	23fd6e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fd6d8:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fd6dc:	2900      	cmp	r1, #0
 23fd6de:	d1f7      	bne.n	23fd6d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fd6e0:	d1ef      	bne.n	23fd6c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fd6e2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fd6e4:	2201      	movs	r2, #1
 23fd6e6:	18eb      	adds	r3, r5, r3
 23fd6e8:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fd6ec:	1d2b      	adds	r3, r5, #4
 23fd6ee:	e8d3 6fef 	ldaex	r6, [r3]
 23fd6f2:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fd6f6:	2a00      	cmp	r2, #0
 23fd6f8:	d1f9      	bne.n	23fd6ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fd6fa:	2e00      	cmp	r6, #0
 23fd6fc:	d0e1      	beq.n	23fd6c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fd6fe:	4620      	mov	r0, r4
 23fd700:	f7fd fdd2 	bl	23fb2a8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fd704:	4607      	mov	r7, r0
 23fd706:	b160      	cbz	r0, 23fd722 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fd708:	4630      	mov	r0, r6
 23fd70a:	f105 010c 	add.w	r1, r5, #12
 23fd70e:	f7ff fe4a 	bl	23fd3a6 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fd712:	4630      	mov	r0, r6
 23fd714:	f7fe f8c6 	bl	23fb8a4 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fd718:	2110      	movs	r1, #16
 23fd71a:	4630      	mov	r0, r6
 23fd71c:	f7fb f9b9 	bl	23f8a92 <_ZdlPvj>
 23fd720:	e7cf      	b.n	23fd6c2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fd722:	4631      	mov	r1, r6
 23fd724:	a803      	add	r0, sp, #12
 23fd726:	f7ff ffa3 	bl	23fd670 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd72a:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fd72c:	2010      	movs	r0, #16
 23fd72e:	f88d 301c 	strb.w	r3, [sp, #28]
 23fd732:	f7fb f9a8 	bl	23f8a86 <_Znwj>
 23fd736:	4605      	mov	r5, r0
 23fd738:	b1d0      	cbz	r0, 23fd770 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fd73a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd73c:	2014      	movs	r0, #20
 23fd73e:	f7fb f9a2 	bl	23f8a86 <_Znwj>
 23fd742:	4604      	mov	r4, r0
 23fd744:	b178      	cbz	r0, 23fd766 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fd746:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd748:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fd74a:	a803      	add	r0, sp, #12
 23fd74c:	f7fe fafd 	bl	23fbd4a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd750:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd752:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd754:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd756:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fd758:	9205      	str	r2, [sp, #20]
 23fd75a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd75c:	60e3      	str	r3, [r4, #12]
 23fd75e:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fd762:	9206      	str	r2, [sp, #24]
 23fd764:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd766:	4b07      	ldr	r3, [pc, #28]	; (23fd784 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd768:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd76a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd76c:	4b06      	ldr	r3, [pc, #24]	; (23fd788 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fd76e:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fd770:	a803      	add	r0, sp, #12
 23fd772:	f7fe f897 	bl	23fb8a4 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd776:	2200      	movs	r2, #0
 23fd778:	4629      	mov	r1, r5
 23fd77a:	4804      	ldr	r0, [pc, #16]	; (23fd78c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fd77c:	f7fd fda2 	bl	23fb2c4 <application_thread_invoke>
 23fd780:	e7c7      	b.n	23fd712 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fd782:	bf00      	nop
 23fd784:	023fd3b9 	.word	0x023fd3b9
 23fd788:	023fd791 	.word	0x023fd791
 23fd78c:	023fdaeb 	.word	0x023fdaeb

023fd790 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fd790:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd792:	b570      	push	{r4, r5, r6, lr}
 23fd794:	4604      	mov	r4, r0
	switch (__op)
 23fd796:	d103      	bne.n	23fd7a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd798:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd79a:	6003      	str	r3, [r0, #0]
      }
 23fd79c:	2000      	movs	r0, #0
 23fd79e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fd7a0:	2a02      	cmp	r2, #2
 23fd7a2:	d00c      	beq.n	23fd7be <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fd7a4:	2a03      	cmp	r2, #3
 23fd7a6:	d1f9      	bne.n	23fd79c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd7a8:	6804      	ldr	r4, [r0, #0]
 23fd7aa:	2c00      	cmp	r4, #0
 23fd7ac:	d0f6      	beq.n	23fd79c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fd7ae:	4620      	mov	r0, r4
 23fd7b0:	f7fe f878 	bl	23fb8a4 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd7b4:	2114      	movs	r1, #20
 23fd7b6:	4620      	mov	r0, r4
 23fd7b8:	f7fb f96b 	bl	23f8a92 <_ZdlPvj>
 23fd7bc:	e7ee      	b.n	23fd79c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd7be:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fd7c0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd7c2:	f7fb f960 	bl	23f8a86 <_Znwj>
 23fd7c6:	4605      	mov	r5, r0
 23fd7c8:	b120      	cbz	r0, 23fd7d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fd7ca:	4631      	mov	r1, r6
 23fd7cc:	f7ff ff50 	bl	23fd670 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fd7d0:	7c33      	ldrb	r3, [r6, #16]
 23fd7d2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fd7d4:	6025      	str	r5, [r4, #0]
	}
 23fd7d6:	e7e1      	b.n	23fd79c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fd7d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd7d8:	4770      	bx	lr

023fd7da <_ZN9IPAddressD0Ev>:
 23fd7da:	b510      	push	{r4, lr}
 23fd7dc:	4604      	mov	r4, r0
 23fd7de:	2118      	movs	r1, #24
 23fd7e0:	f7fb f957 	bl	23f8a92 <_ZdlPvj>
 23fd7e4:	4620      	mov	r0, r4
 23fd7e6:	bd10      	pop	{r4, pc}

023fd7e8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd7ea:	7d03      	ldrb	r3, [r0, #20]
{
 23fd7ec:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd7ee:	2b06      	cmp	r3, #6
 23fd7f0:	f04f 0400 	mov.w	r4, #0
{
 23fd7f4:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd7f6:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd7fa:	d012      	beq.n	23fd822 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd7fc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd800:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd804:	220a      	movs	r2, #10
 23fd806:	4630      	mov	r0, r6
 23fd808:	f7fe fad3 	bl	23fbdb2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd80c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd80e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd810:	d019      	beq.n	23fd846 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd812:	2c00      	cmp	r4, #0
 23fd814:	d0f4      	beq.n	23fd800 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd816:	212e      	movs	r1, #46	; 0x2e
 23fd818:	4630      	mov	r0, r6
 23fd81a:	f7fe fac7 	bl	23fbdac <_ZN5Print5printEc>
 23fd81e:	4404      	add	r4, r0
 23fd820:	e7ee      	b.n	23fd800 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd822:	232f      	movs	r3, #47	; 0x2f
 23fd824:	466a      	mov	r2, sp
 23fd826:	4639      	mov	r1, r7
 23fd828:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd82a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd82e:	f7fd fab7 	bl	23fada0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd832:	4668      	mov	r0, sp
 23fd834:	f7fb f902 	bl	23f8a3c <strlen>
 23fd838:	6833      	ldr	r3, [r6, #0]
 23fd83a:	4602      	mov	r2, r0
 23fd83c:	4669      	mov	r1, sp
 23fd83e:	4630      	mov	r0, r6
 23fd840:	68db      	ldr	r3, [r3, #12]
 23fd842:	4798      	blx	r3
 23fd844:	4604      	mov	r4, r0
    }
    return n;
}
 23fd846:	4620      	mov	r0, r4
 23fd848:	b00d      	add	sp, #52	; 0x34
 23fd84a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd84c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd84c:	b510      	push	{r4, lr}
 23fd84e:	4604      	mov	r4, r0
 23fd850:	4b04      	ldr	r3, [pc, #16]	; (23fd864 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd852:	2211      	movs	r2, #17
 23fd854:	2100      	movs	r1, #0
 23fd856:	f840 3b04 	str.w	r3, [r0], #4
 23fd85a:	f000 ff60 	bl	23fe71e <memset>
}
 23fd85e:	4620      	mov	r0, r4
 23fd860:	bd10      	pop	{r4, pc}
 23fd862:	bf00      	nop
 23fd864:	023ffc30 	.word	0x023ffc30

023fd868 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd868:	4603      	mov	r3, r0
 23fd86a:	4a07      	ldr	r2, [pc, #28]	; (23fd888 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd86c:	b510      	push	{r4, lr}
 23fd86e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd872:	f101 0210 	add.w	r2, r1, #16
 23fd876:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd87a:	4291      	cmp	r1, r2
 23fd87c:	f843 4b04 	str.w	r4, [r3], #4
 23fd880:	d1f9      	bne.n	23fd876 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd882:	780a      	ldrb	r2, [r1, #0]
 23fd884:	701a      	strb	r2, [r3, #0]
}
 23fd886:	bd10      	pop	{r4, pc}
 23fd888:	023ffc30 	.word	0x023ffc30

023fd88c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd88c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd88e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd892:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd896:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd89a:	2304      	movs	r3, #4
 23fd89c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd8a0:	6041      	str	r1, [r0, #4]
 23fd8a2:	7503      	strb	r3, [r0, #20]
}
 23fd8a4:	bd10      	pop	{r4, pc}
	...

023fd8a8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd8a8:	b507      	push	{r0, r1, r2, lr}
 23fd8aa:	4b06      	ldr	r3, [pc, #24]	; (23fd8c4 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd8ac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd8ae:	78cb      	ldrb	r3, [r1, #3]
 23fd8b0:	9300      	str	r3, [sp, #0]
 23fd8b2:	788b      	ldrb	r3, [r1, #2]
 23fd8b4:	784a      	ldrb	r2, [r1, #1]
 23fd8b6:	7809      	ldrb	r1, [r1, #0]
 23fd8b8:	f7ff ffe8 	bl	23fd88c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd8bc:	b003      	add	sp, #12
 23fd8be:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd8c2:	bf00      	nop
 23fd8c4:	023ffc30 	.word	0x023ffc30

023fd8c8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd8c8:	7441      	strb	r1, [r0, #17]
}
 23fd8ca:	4770      	bx	lr

023fd8cc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd8cc:	4770      	bx	lr

023fd8ce <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fd8ce:	4770      	bx	lr

023fd8d0 <_ZN9USBSerial4readEv>:
{
 23fd8d0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fd8d2:	2100      	movs	r1, #0
 23fd8d4:	7c00      	ldrb	r0, [r0, #16]
 23fd8d6:	f7fd fc5b 	bl	23fb190 <HAL_USB_USART_Receive_Data>
}
 23fd8da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd8de:	bd08      	pop	{r3, pc}

023fd8e0 <_ZN9USBSerial4peekEv>:
{
 23fd8e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fd8e2:	2101      	movs	r1, #1
 23fd8e4:	7c00      	ldrb	r0, [r0, #16]
 23fd8e6:	f7fd fc53 	bl	23fb190 <HAL_USB_USART_Receive_Data>
}
 23fd8ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd8ee:	bd08      	pop	{r3, pc}

023fd8f0 <_ZN9USBSerial17availableForWriteEv>:
{
 23fd8f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fd8f2:	7c00      	ldrb	r0, [r0, #16]
 23fd8f4:	f7fd fc3e 	bl	23fb174 <HAL_USB_USART_Available_Data_For_Write>
}
 23fd8f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd8fc:	bd08      	pop	{r3, pc}

023fd8fe <_ZN9USBSerial9availableEv>:
{
 23fd8fe:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fd900:	7c00      	ldrb	r0, [r0, #16]
 23fd902:	f7fd fc29 	bl	23fb158 <HAL_USB_USART_Available_Data>
}
 23fd906:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd90a:	bd08      	pop	{r3, pc}

023fd90c <_ZN9USBSerial5writeEh>:
{
 23fd90c:	b513      	push	{r0, r1, r4, lr}
 23fd90e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd910:	7c00      	ldrb	r0, [r0, #16]
{
 23fd912:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd914:	f7fd fc2e 	bl	23fb174 <HAL_USB_USART_Available_Data_For_Write>
 23fd918:	2800      	cmp	r0, #0
 23fd91a:	9901      	ldr	r1, [sp, #4]
 23fd91c:	dc01      	bgt.n	23fd922 <_ZN9USBSerial5writeEh+0x16>
 23fd91e:	7c60      	ldrb	r0, [r4, #17]
 23fd920:	b120      	cbz	r0, 23fd92c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fd922:	7c20      	ldrb	r0, [r4, #16]
 23fd924:	f7fd fc42 	bl	23fb1ac <HAL_USB_USART_Send_Data>
 23fd928:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fd92c:	b002      	add	sp, #8
 23fd92e:	bd10      	pop	{r4, pc}

023fd930 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fd930:	7c00      	ldrb	r0, [r0, #16]
 23fd932:	f7fd bc49 	b.w	23fb1c8 <HAL_USB_USART_Flush_Data>

023fd936 <_ZN9USBSerialD0Ev>:
 23fd936:	b510      	push	{r4, lr}
 23fd938:	4604      	mov	r4, r0
 23fd93a:	2114      	movs	r1, #20
 23fd93c:	f7fb f8a9 	bl	23f8a92 <_ZdlPvj>
 23fd940:	4620      	mov	r0, r4
 23fd942:	bd10      	pop	{r4, pc}

023fd944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd944:	b510      	push	{r4, lr}
 23fd946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd94a:	4604      	mov	r4, r0
 23fd94c:	4608      	mov	r0, r1
 23fd94e:	2100      	movs	r1, #0
 23fd950:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fd954:	4b04      	ldr	r3, [pc, #16]	; (23fd968 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fd956:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd958:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd95a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fd95c:	4611      	mov	r1, r2
  _blocking = true;
 23fd95e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fd960:	f7fd fbd0 	bl	23fb104 <HAL_USB_USART_Init>
}
 23fd964:	4620      	mov	r0, r4
 23fd966:	bd10      	pop	{r4, pc}
 23fd968:	023ffc44 	.word	0x023ffc44

023fd96c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fd96c:	2200      	movs	r2, #0
 23fd96e:	7c00      	ldrb	r0, [r0, #16]
 23fd970:	f7fd bbd6 	b.w	23fb120 <HAL_USB_USART_Begin>

023fd974 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fd974:	7c00      	ldrb	r0, [r0, #16]
 23fd976:	f7fd bbe1 	b.w	23fb13c <HAL_USB_USART_End>

023fd97a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fd97a:	7c00      	ldrb	r0, [r0, #16]
 23fd97c:	f7fd bc32 	b.w	23fb1e4 <HAL_USB_USART_Is_Connected>

023fd980 <_Z19acquireSerialBufferv>:
{
 23fd980:	b510      	push	{r4, lr}
 23fd982:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fd984:	2214      	movs	r2, #20
 23fd986:	2100      	movs	r1, #0
 23fd988:	f000 fec9 	bl	23fe71e <memset>
}
 23fd98c:	4620      	mov	r0, r4
 23fd98e:	bd10      	pop	{r4, pc}

023fd990 <_Z16_fetch_usbserialv>:
{
 23fd990:	b510      	push	{r4, lr}
 23fd992:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fd994:	a803      	add	r0, sp, #12
 23fd996:	f7ff fff3 	bl	23fd980 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd99a:	4c0c      	ldr	r4, [pc, #48]	; (23fd9cc <_Z16_fetch_usbserialv+0x3c>)
 23fd99c:	e8d4 1f8f 	ldab	r1, [r4]
 23fd9a0:	f011 0101 	ands.w	r1, r1, #1
 23fd9a4:	d10f      	bne.n	23fd9c6 <_Z16_fetch_usbserialv+0x36>
 23fd9a6:	4620      	mov	r0, r4
 23fd9a8:	9101      	str	r1, [sp, #4]
 23fd9aa:	f7fb f881 	bl	23f8ab0 <__cxa_guard_acquire>
 23fd9ae:	9901      	ldr	r1, [sp, #4]
 23fd9b0:	b148      	cbz	r0, 23fd9c6 <_Z16_fetch_usbserialv+0x36>
 23fd9b2:	aa03      	add	r2, sp, #12
 23fd9b4:	4806      	ldr	r0, [pc, #24]	; (23fd9d0 <_Z16_fetch_usbserialv+0x40>)
 23fd9b6:	f7ff ffc5 	bl	23fd944 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fd9ba:	4620      	mov	r0, r4
 23fd9bc:	f7fb f87d 	bl	23f8aba <__cxa_guard_release>
 23fd9c0:	4804      	ldr	r0, [pc, #16]	; (23fd9d4 <_Z16_fetch_usbserialv+0x44>)
 23fd9c2:	f000 fe77 	bl	23fe6b4 <atexit>
	return _usbserial;
}
 23fd9c6:	4802      	ldr	r0, [pc, #8]	; (23fd9d0 <_Z16_fetch_usbserialv+0x40>)
 23fd9c8:	b008      	add	sp, #32
 23fd9ca:	bd10      	pop	{r4, pc}
 23fd9cc:	1007aec4 	.word	0x1007aec4
 23fd9d0:	1007aec8 	.word	0x1007aec8
 23fd9d4:	023fd8cd 	.word	0x023fd8cd

023fd9d8 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 23fd9d8:	4700      	bx	r0
	...

023fd9dc <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 23fd9dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23fd9e0:	461d      	mov	r5, r3
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
 23fd9e2:	2400      	movs	r4, #0
{
 23fd9e4:	460f      	mov	r7, r1
 23fd9e6:	4690      	mov	r8, r2
 23fd9e8:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
 23fd9ea:	f7fd f8dd 	bl	23faba8 <hal_interrupt_detach>
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23fd9ee:	2304      	movs	r3, #4
  if (priority >= 0) {
 23fd9f0:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 23fd9f2:	f88d 3008 	strb.w	r3, [sp, #8]
    extra.IRQChannelSubPriority = subpriority;
 23fd9f6:	bfa8      	it	ge
 23fd9f8:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    hal_interrupt_extra_configuration_t extra = {};
 23fd9fc:	f8cd 4009 	str.w	r4, [sp, #9]
    return &extra;
 23fda00:	bfa4      	itt	ge
 23fda02:	ac02      	addge	r4, sp, #8
    extra.IRQChannelSubPriority = subpriority;
 23fda04:	f88d 300a 	strbge.w	r3, [sp, #10]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23fda08:	463a      	mov	r2, r7
 23fda0a:	4643      	mov	r3, r8
 23fda0c:	4630      	mov	r0, r6
 23fda0e:	4906      	ldr	r1, [pc, #24]	; (23fda28 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4c>)
 23fda10:	9400      	str	r4, [sp, #0]
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 23fda12:	bfa8      	it	ge
 23fda14:	f88d 5009 	strbge.w	r5, [sp, #9]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
 23fda18:	f7fd f8b8 	bl	23fab8c <hal_interrupt_attach>
        return false;
    }
    return true;
}
 23fda1c:	fab0 f080 	clz	r0, r0
 23fda20:	0940      	lsrs	r0, r0, #5
 23fda22:	b004      	add	sp, #16
 23fda24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fda28:	023fd9d9 	.word	0x023fd9d9

023fda2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fda2c:	4770      	bx	lr

023fda2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fda2e:	7441      	strb	r1, [r0, #17]
}
 23fda30:	4770      	bx	lr

023fda32 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fda32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fda34:	7c00      	ldrb	r0, [r0, #16]
 23fda36:	f7fd fa23 	bl	23fae80 <hal_usart_available_data_for_write>
}
 23fda3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fda3e:	bd08      	pop	{r3, pc}

023fda40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fda40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fda42:	7c00      	ldrb	r0, [r0, #16]
 23fda44:	f7fd f9d6 	bl	23fadf4 <hal_usart_available>
}
 23fda48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fda4c:	bd08      	pop	{r3, pc}

023fda4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fda4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fda50:	7c00      	ldrb	r0, [r0, #16]
 23fda52:	f7fd f9eb 	bl	23fae2c <hal_usart_peek>
}
 23fda56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fda5a:	bd08      	pop	{r3, pc}

023fda5c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fda5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fda5e:	7c00      	ldrb	r0, [r0, #16]
 23fda60:	f7fd f9d6 	bl	23fae10 <hal_usart_read>
}
 23fda64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fda68:	bd08      	pop	{r3, pc}

023fda6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fda6a:	7c00      	ldrb	r0, [r0, #16]
 23fda6c:	f7fd b9ec 	b.w	23fae48 <hal_usart_flush>

023fda70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fda70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fda72:	7c45      	ldrb	r5, [r0, #17]
{
 23fda74:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fda76:	b12d      	cbz	r5, 23fda84 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fda78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fda7a:	b003      	add	sp, #12
 23fda7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fda80:	f7fd b9aa 	b.w	23fadd8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fda84:	7c00      	ldrb	r0, [r0, #16]
 23fda86:	9101      	str	r1, [sp, #4]
 23fda88:	f7fd f9fa 	bl	23fae80 <hal_usart_available_data_for_write>
 23fda8c:	2800      	cmp	r0, #0
 23fda8e:	9901      	ldr	r1, [sp, #4]
 23fda90:	dcf2      	bgt.n	23fda78 <_ZN11USARTSerial5writeEh+0x8>
}
 23fda92:	4628      	mov	r0, r5
 23fda94:	b003      	add	sp, #12
 23fda96:	bd30      	pop	{r4, r5, pc}

023fda98 <_ZN11USARTSerialD0Ev>:
 23fda98:	b510      	push	{r4, lr}
 23fda9a:	4604      	mov	r4, r0
 23fda9c:	2114      	movs	r1, #20
 23fda9e:	f7fa fff8 	bl	23f8a92 <_ZdlPvj>
 23fdaa2:	4620      	mov	r0, r4
 23fdaa4:	bd10      	pop	{r4, pc}
	...

023fdaa8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdaa8:	b510      	push	{r4, lr}
 23fdaaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdaae:	4604      	mov	r4, r0
 23fdab0:	4608      	mov	r0, r1
 23fdab2:	4611      	mov	r1, r2
 23fdab4:	2200      	movs	r2, #0
 23fdab6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdaba:	4b04      	ldr	r3, [pc, #16]	; (23fdacc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fdabc:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fdabe:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fdac0:	2301      	movs	r3, #1
 23fdac2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fdac4:	f7fd f9f8 	bl	23faeb8 <hal_usart_init_ex>
}
 23fdac8:	4620      	mov	r0, r4
 23fdaca:	bd10      	pop	{r4, pc}
 23fdacc:	023ffc74 	.word	0x023ffc74

023fdad0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fdad0:	2300      	movs	r3, #0
 23fdad2:	7c00      	ldrb	r0, [r0, #16]
 23fdad4:	f7fd b9e2 	b.w	23fae9c <hal_usart_begin_config>

023fdad8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fdad8:	2200      	movs	r2, #0
 23fdada:	f7ff bff9 	b.w	23fdad0 <_ZN11USARTSerial5beginEmm>

023fdade <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fdade:	7c00      	ldrb	r0, [r0, #16]
 23fdae0:	f7fd b96c 	b.w	23fadbc <hal_usart_end>

023fdae4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fdae4:	7c00      	ldrb	r0, [r0, #16]
 23fdae6:	f7fd b9bd 	b.w	23fae64 <hal_usart_is_enabled>

023fdaea <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fdaea:	b510      	push	{r4, lr}
      if (_M_empty())
 23fdaec:	6883      	ldr	r3, [r0, #8]
 23fdaee:	4604      	mov	r4, r0
 23fdaf0:	b90b      	cbnz	r3, 23fdaf6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fdaf2:	f000 fcca 	bl	23fe48a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fdaf6:	68c3      	ldr	r3, [r0, #12]
 23fdaf8:	4798      	blx	r3
      if (_M_manager)
 23fdafa:	68a3      	ldr	r3, [r4, #8]
 23fdafc:	b11b      	cbz	r3, 23fdb06 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fdafe:	2203      	movs	r2, #3
 23fdb00:	4621      	mov	r1, r4
 23fdb02:	4620      	mov	r0, r4
 23fdb04:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fdb06:	4620      	mov	r0, r4
}
 23fdb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fdb0c:	2110      	movs	r1, #16
 23fdb0e:	f7fa bfc0 	b.w	23f8a92 <_ZdlPvj>

023fdb12 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fdb12:	4770      	bx	lr

023fdb14 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fdb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdb16:	4606      	mov	r6, r0
 23fdb18:	4615      	mov	r5, r2
 23fdb1a:	460c      	mov	r4, r1
 23fdb1c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fdb1e:	42bc      	cmp	r4, r7
 23fdb20:	d006      	beq.n	23fdb30 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fdb22:	6833      	ldr	r3, [r6, #0]
 23fdb24:	4630      	mov	r0, r6
 23fdb26:	689b      	ldr	r3, [r3, #8]
 23fdb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fdb2c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fdb2e:	e7f6      	b.n	23fdb1e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fdb30:	4628      	mov	r0, r5
 23fdb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdb34 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fdb34:	2200      	movs	r2, #0
 23fdb36:	7c00      	ldrb	r0, [r0, #16]
 23fdb38:	f7fd b9f6 	b.w	23faf28 <hal_i2c_write>

023fdb3c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fdb3c:	2100      	movs	r1, #0
 23fdb3e:	7c00      	ldrb	r0, [r0, #16]
 23fdb40:	f7fd ba00 	b.w	23faf44 <hal_i2c_available>

023fdb44 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fdb44:	2100      	movs	r1, #0
 23fdb46:	7c00      	ldrb	r0, [r0, #16]
 23fdb48:	f7fd ba0a 	b.w	23faf60 <hal_i2c_read>

023fdb4c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fdb4c:	2100      	movs	r1, #0
 23fdb4e:	7c00      	ldrb	r0, [r0, #16]
 23fdb50:	f7fd ba14 	b.w	23faf7c <hal_i2c_peek>

023fdb54 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fdb54:	2100      	movs	r1, #0
 23fdb56:	7c00      	ldrb	r0, [r0, #16]
 23fdb58:	f7fd ba1e 	b.w	23faf98 <hal_i2c_flush>

023fdb5c <_ZN7TwoWireD0Ev>:
 23fdb5c:	b510      	push	{r4, lr}
 23fdb5e:	4604      	mov	r4, r0
 23fdb60:	2114      	movs	r1, #20
 23fdb62:	f7fa ff96 	bl	23f8a92 <_ZdlPvj>
 23fdb66:	4620      	mov	r0, r4
 23fdb68:	bd10      	pop	{r4, pc}
	...

023fdb6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fdb6c:	b538      	push	{r3, r4, r5, lr}
 23fdb6e:	4604      	mov	r4, r0
 23fdb70:	4615      	mov	r5, r2
 23fdb72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdb76:	2200      	movs	r2, #0
 23fdb78:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdb7c:	4b09      	ldr	r3, [pc, #36]	; (23fdba4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fdb7e:	4608      	mov	r0, r1
  _i2c = i2c;
 23fdb80:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fdb82:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fdb84:	4629      	mov	r1, r5
 23fdb86:	f7fd fa23 	bl	23fafd0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fdb8a:	30bf      	adds	r0, #191	; 0xbf
 23fdb8c:	d108      	bne.n	23fdba0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fdb8e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fdb90:	07db      	lsls	r3, r3, #31
 23fdb92:	d505      	bpl.n	23fdba0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fdb94:	6868      	ldr	r0, [r5, #4]
 23fdb96:	f7fd fd2b 	bl	23fb5f0 <free>
    free(conf.tx_buffer);
 23fdb9a:	68e8      	ldr	r0, [r5, #12]
 23fdb9c:	f7fd fd28 	bl	23fb5f0 <free>
}
 23fdba0:	4620      	mov	r0, r4
 23fdba2:	bd38      	pop	{r3, r4, r5, pc}
 23fdba4:	023ffca4 	.word	0x023ffca4

023fdba8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fdba8:	2300      	movs	r3, #0
 23fdbaa:	7c00      	ldrb	r0, [r0, #16]
 23fdbac:	461a      	mov	r2, r3
 23fdbae:	4619      	mov	r1, r3
 23fdbb0:	f7fd b990 	b.w	23faed4 <hal_i2c_begin>

023fdbb4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fdbb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fdbb6:	2200      	movs	r2, #0
 23fdbb8:	2314      	movs	r3, #20
 23fdbba:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fdbbe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fdbc2:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fdbc4:	7c00      	ldrb	r0, [r0, #16]
 23fdbc6:	f88d 3008 	strb.w	r3, [sp, #8]
 23fdbca:	684b      	ldr	r3, [r1, #4]
 23fdbcc:	9303      	str	r3, [sp, #12]
 23fdbce:	68cb      	ldr	r3, [r1, #12]
 23fdbd0:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fdbd2:	7a0b      	ldrb	r3, [r1, #8]
 23fdbd4:	a901      	add	r1, sp, #4
 23fdbd6:	9305      	str	r3, [sp, #20]
 23fdbd8:	f7fd fa08 	bl	23fafec <hal_i2c_request_ex>
}
 23fdbdc:	b007      	add	sp, #28
 23fdbde:	f85d fb04 	ldr.w	pc, [sp], #4

023fdbe2 <_ZN7TwoWire11requestFromEhjh>:
{
 23fdbe2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fdbe4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fdbe6:	f88d 1000 	strb.w	r1, [sp]
 23fdbea:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fdbee:	bf18      	it	ne
 23fdbf0:	2301      	movne	r3, #1
 23fdbf2:	9103      	str	r1, [sp, #12]
 23fdbf4:	4669      	mov	r1, sp
    size_ = size;
 23fdbf6:	9201      	str	r2, [sp, #4]
 23fdbf8:	f88d 3008 	strb.w	r3, [sp, #8]
 23fdbfc:	f7ff ffda 	bl	23fdbb4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fdc00:	b005      	add	sp, #20
 23fdc02:	f85d fb04 	ldr.w	pc, [sp], #4

023fdc06 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fdc06:	2301      	movs	r3, #1
 23fdc08:	f7ff bfeb 	b.w	23fdbe2 <_ZN7TwoWire11requestFromEhjh>

023fdc0c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fdc0c:	2200      	movs	r2, #0
 23fdc0e:	7c00      	ldrb	r0, [r0, #16]
 23fdc10:	f7fd b96e 	b.w	23faef0 <hal_i2c_begin_transmission>

023fdc14 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fdc14:	2200      	movs	r2, #0
 23fdc16:	7c00      	ldrb	r0, [r0, #16]
 23fdc18:	f7fd b978 	b.w	23faf0c <hal_i2c_end_transmission>

023fdc1c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fdc1c:	2200      	movs	r2, #0
 23fdc1e:	6840      	ldr	r0, [r0, #4]
 23fdc20:	4611      	mov	r1, r2
 23fdc22:	f7fd bba3 	b.w	23fb36c <network_ready>

023fdc26 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fdc26:	2200      	movs	r2, #0
 23fdc28:	6840      	ldr	r0, [r0, #4]
 23fdc2a:	4611      	mov	r1, r2
 23fdc2c:	f7fd bbd6 	b.w	23fb3dc <network_listening>

023fdc30 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fdc30:	2200      	movs	r2, #0
 23fdc32:	6840      	ldr	r0, [r0, #4]
 23fdc34:	4611      	mov	r1, r2
 23fdc36:	f7fd bbed 	b.w	23fb414 <network_get_listen_timeout>

023fdc3a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fdc3a:	2200      	movs	r2, #0
 23fdc3c:	6840      	ldr	r0, [r0, #4]
 23fdc3e:	f7fd bbdb 	b.w	23fb3f8 <network_set_listen_timeout>

023fdc42 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fdc42:	2200      	movs	r2, #0
 23fdc44:	6840      	ldr	r0, [r0, #4]
 23fdc46:	f081 0101 	eor.w	r1, r1, #1
 23fdc4a:	f7fd bbb9 	b.w	23fb3c0 <network_listen>

023fdc4e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fdc4e:	2300      	movs	r3, #0
 23fdc50:	6840      	ldr	r0, [r0, #4]
 23fdc52:	461a      	mov	r2, r3
 23fdc54:	4619      	mov	r1, r3
 23fdc56:	f7fd bba5 	b.w	23fb3a4 <network_off>

023fdc5a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fdc5a:	2300      	movs	r3, #0
 23fdc5c:	6840      	ldr	r0, [r0, #4]
 23fdc5e:	461a      	mov	r2, r3
 23fdc60:	4619      	mov	r1, r3
 23fdc62:	f7fd bb91 	b.w	23fb388 <network_on>

023fdc66 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fdc66:	2200      	movs	r2, #0
 23fdc68:	6840      	ldr	r0, [r0, #4]
 23fdc6a:	4611      	mov	r1, r2
 23fdc6c:	f7fd bb62 	b.w	23fb334 <network_connecting>

023fdc70 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fdc70:	2200      	movs	r2, #0
 23fdc72:	2102      	movs	r1, #2
 23fdc74:	6840      	ldr	r0, [r0, #4]
 23fdc76:	f7fd bb6b 	b.w	23fb350 <network_disconnect>

023fdc7a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fdc7a:	2300      	movs	r3, #0
 23fdc7c:	6840      	ldr	r0, [r0, #4]
 23fdc7e:	461a      	mov	r2, r3
 23fdc80:	f7fd bb4a 	b.w	23fb318 <network_connect>

023fdc84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fdc84:	2204      	movs	r2, #4
 23fdc86:	4b02      	ldr	r3, [pc, #8]	; (23fdc90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fdc88:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fdc8a:	4a02      	ldr	r2, [pc, #8]	; (23fdc94 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fdc8c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fdc8e:	4770      	bx	lr
 23fdc90:	1007aedc 	.word	0x1007aedc
 23fdc94:	023ffccc 	.word	0x023ffccc

023fdc98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fdc98:	2300      	movs	r3, #0
 23fdc9a:	6840      	ldr	r0, [r0, #4]
 23fdc9c:	461a      	mov	r2, r3
 23fdc9e:	f7fd bb3b 	b.w	23fb318 <network_connect>

023fdca2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fdca2:	2200      	movs	r2, #0
 23fdca4:	2102      	movs	r1, #2
 23fdca6:	6840      	ldr	r0, [r0, #4]
 23fdca8:	f7fd bb52 	b.w	23fb350 <network_disconnect>

023fdcac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fdcac:	2200      	movs	r2, #0
 23fdcae:	6840      	ldr	r0, [r0, #4]
 23fdcb0:	4611      	mov	r1, r2
 23fdcb2:	f7fd bb3f 	b.w	23fb334 <network_connecting>

023fdcb6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fdcb6:	2200      	movs	r2, #0
 23fdcb8:	6840      	ldr	r0, [r0, #4]
 23fdcba:	4611      	mov	r1, r2
 23fdcbc:	f7fd bb56 	b.w	23fb36c <network_ready>

023fdcc0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fdcc0:	2300      	movs	r3, #0
 23fdcc2:	6840      	ldr	r0, [r0, #4]
 23fdcc4:	461a      	mov	r2, r3
 23fdcc6:	4619      	mov	r1, r3
 23fdcc8:	f7fd bb5e 	b.w	23fb388 <network_on>

023fdccc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fdccc:	2300      	movs	r3, #0
 23fdcce:	6840      	ldr	r0, [r0, #4]
 23fdcd0:	461a      	mov	r2, r3
 23fdcd2:	4619      	mov	r1, r3
 23fdcd4:	f7fd bb66 	b.w	23fb3a4 <network_off>

023fdcd8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fdcd8:	2100      	movs	r1, #0
 23fdcda:	6840      	ldr	r0, [r0, #4]
 23fdcdc:	f7fd bba8 	b.w	23fb430 <network_is_on>

023fdce0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fdce0:	2100      	movs	r1, #0
 23fdce2:	6840      	ldr	r0, [r0, #4]
 23fdce4:	f7fd bbb2 	b.w	23fb44c <network_is_off>

023fdce8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fdce8:	2200      	movs	r2, #0
 23fdcea:	6840      	ldr	r0, [r0, #4]
 23fdcec:	f081 0101 	eor.w	r1, r1, #1
 23fdcf0:	f7fd bb66 	b.w	23fb3c0 <network_listen>

023fdcf4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fdcf4:	2200      	movs	r2, #0
 23fdcf6:	6840      	ldr	r0, [r0, #4]
 23fdcf8:	f7fd bb7e 	b.w	23fb3f8 <network_set_listen_timeout>

023fdcfc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fdcfc:	2200      	movs	r2, #0
 23fdcfe:	6840      	ldr	r0, [r0, #4]
 23fdd00:	4611      	mov	r1, r2
 23fdd02:	f7fd bb87 	b.w	23fb414 <network_get_listen_timeout>

023fdd06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fdd06:	2200      	movs	r2, #0
 23fdd08:	6840      	ldr	r0, [r0, #4]
 23fdd0a:	4611      	mov	r1, r2
 23fdd0c:	f7fd bb66 	b.w	23fb3dc <network_listening>

023fdd10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fdd10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdd14:	b095      	sub	sp, #84	; 0x54
 23fdd16:	4614      	mov	r4, r2
 23fdd18:	460d      	mov	r5, r1
 23fdd1a:	4607      	mov	r7, r0
    IPAddress addr;
 23fdd1c:	f7ff fd96 	bl	23fd84c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fdd20:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fdd22:	221c      	movs	r2, #28
 23fdd24:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fdd26:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fdd28:	f000 fcf9 	bl	23fe71e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fdd2c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fdd2e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fdd30:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fdd32:	2100      	movs	r1, #0
 23fdd34:	466b      	mov	r3, sp
 23fdd36:	aa0c      	add	r2, sp, #48	; 0x30
 23fdd38:	f7fc fee2 	bl	23fab00 <netdb_getaddrinfo>
    if (!r) {
 23fdd3c:	4604      	mov	r4, r0
 23fdd3e:	2800      	cmp	r0, #0
 23fdd40:	d14b      	bne.n	23fddda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fdd42:	4602      	mov	r2, r0
 23fdd44:	2101      	movs	r1, #1
 23fdd46:	6868      	ldr	r0, [r5, #4]
 23fdd48:	f7fd fb10 	bl	23fb36c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdd4c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fdd4e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdd50:	4622      	mov	r2, r4
 23fdd52:	6868      	ldr	r0, [r5, #4]
 23fdd54:	f7fd fb0a 	bl	23fb36c <network_ready>
        bool ok = false;
 23fdd58:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdd5a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fdd5c:	9e00      	ldr	r6, [sp, #0]
 23fdd5e:	2e00      	cmp	r6, #0
 23fdd60:	d03b      	beq.n	23fddda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fdd62:	2900      	cmp	r1, #0
 23fdd64:	d139      	bne.n	23fddda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fdd66:	6873      	ldr	r3, [r6, #4]
 23fdd68:	2b02      	cmp	r3, #2
 23fdd6a:	d003      	beq.n	23fdd74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fdd6c:	2b0a      	cmp	r3, #10
 23fdd6e:	d011      	beq.n	23fdd94 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fdd70:	69f6      	ldr	r6, [r6, #28]
 23fdd72:	e7f4      	b.n	23fdd5e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fdd74:	f1b8 0f00 	cmp.w	r8, #0
 23fdd78:	d0fa      	beq.n	23fdd70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fdd7a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fdd7c:	a806      	add	r0, sp, #24
 23fdd7e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fdd80:	1d3c      	adds	r4, r7, #4
 23fdd82:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fdd84:	f7ff fd90 	bl	23fd8a8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fdd88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fdd8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fdd8c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fdd8e:	4641      	mov	r1, r8
 23fdd90:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fdd92:	e7ed      	b.n	23fdd70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fdd94:	f1b9 0f00 	cmp.w	r9, #0
 23fdd98:	d0ea      	beq.n	23fdd70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fdd9a:	2210      	movs	r2, #16
 23fdd9c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fdd9e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fdda0:	f000 fcbd 	bl	23fe71e <memset>
                    a.v = 6;
 23fdda4:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdda6:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fdda8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fddac:	f104 0308 	add.w	r3, r4, #8
 23fddb0:	3418      	adds	r4, #24
 23fddb2:	462a      	mov	r2, r5
 23fddb4:	6818      	ldr	r0, [r3, #0]
 23fddb6:	6859      	ldr	r1, [r3, #4]
 23fddb8:	3308      	adds	r3, #8
 23fddba:	c203      	stmia	r2!, {r0, r1}
 23fddbc:	42a3      	cmp	r3, r4
 23fddbe:	4615      	mov	r5, r2
 23fddc0:	d1f7      	bne.n	23fddb2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fddc2:	a901      	add	r1, sp, #4
 23fddc4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fddc6:	1d3c      	adds	r4, r7, #4
 23fddc8:	ad07      	add	r5, sp, #28
 23fddca:	f7ff fd4d 	bl	23fd868 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fddce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fddd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fddd2:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fddd4:	4649      	mov	r1, r9
 23fddd6:	7023      	strb	r3, [r4, #0]
                    break;
 23fddd8:	e7ca      	b.n	23fdd70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fddda:	9800      	ldr	r0, [sp, #0]
 23fdddc:	f7fc fe82 	bl	23faae4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fdde0:	4638      	mov	r0, r7
 23fdde2:	b015      	add	sp, #84	; 0x54
 23fdde4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fdde8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fdde8:	4b02      	ldr	r3, [pc, #8]	; (23fddf4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fddea:	4a03      	ldr	r2, [pc, #12]	; (23fddf8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fddec:	601a      	str	r2, [r3, #0]
 23fddee:	2200      	movs	r2, #0
 23fddf0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fddf2:	4770      	bx	lr
 23fddf4:	1007aee4 	.word	0x1007aee4
 23fddf8:	023ffd08 	.word	0x023ffd08

023fddfc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fddfc:	2201      	movs	r2, #1
 23fddfe:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fde02:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fde06:	4618      	mov	r0, r3
 23fde08:	2901      	cmp	r1, #1
 23fde0a:	d108      	bne.n	23fde1e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fde0c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fde10:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fde14:	3a01      	subs	r2, #1
 23fde16:	f103 0310 	add.w	r3, r3, #16
 23fde1a:	d1f2      	bne.n	23fde02 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fde1c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fde1e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fde20:	bf04      	itt	eq
 23fde22:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fde26:	1852      	addeq	r2, r2, r1
 23fde28:	e7f4      	b.n	23fde14 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fde2a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fde2a:	b40e      	push	{r1, r2, r3}
 23fde2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fde2e:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde30:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fde32:	af00      	add	r7, sp, #0
 23fde34:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fde38:	f855 2b04 	ldr.w	r2, [r5], #4
 23fde3c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde3e:	462b      	mov	r3, r5
 23fde40:	1878      	adds	r0, r7, r1
 23fde42:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fde44:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde46:	f7fd fbef 	bl	23fb628 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fde4a:	280f      	cmp	r0, #15
 23fde4c:	687a      	ldr	r2, [r7, #4]
 23fde4e:	d91a      	bls.n	23fde86 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fde50:	f100 0308 	add.w	r3, r0, #8
 23fde54:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fde58:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fde5a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde5e:	1c41      	adds	r1, r0, #1
 23fde60:	462b      	mov	r3, r5
 23fde62:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fde64:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde66:	f7fd fbdf 	bl	23fb628 <vsnprintf>
        if (n > 0) {
 23fde6a:	1e02      	subs	r2, r0, #0
 23fde6c:	dd04      	ble.n	23fde78 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fde6e:	6823      	ldr	r3, [r4, #0]
 23fde70:	4669      	mov	r1, sp
 23fde72:	4620      	mov	r0, r4
 23fde74:	689b      	ldr	r3, [r3, #8]
 23fde76:	4798      	blx	r3
 23fde78:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fde7a:	3720      	adds	r7, #32
 23fde7c:	46bd      	mov	sp, r7
 23fde7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fde82:	b003      	add	sp, #12
 23fde84:	4770      	bx	lr
    } else if (n > 0) {
 23fde86:	2800      	cmp	r0, #0
 23fde88:	d0f7      	beq.n	23fde7a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fde8a:	6823      	ldr	r3, [r4, #0]
 23fde8c:	4602      	mov	r2, r0
 23fde8e:	689b      	ldr	r3, [r3, #8]
 23fde90:	4620      	mov	r0, r4
 23fde92:	f107 0110 	add.w	r1, r7, #16
 23fde96:	4798      	blx	r3
}
 23fde98:	e7ef      	b.n	23fde7a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fde9a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fde9a:	b538      	push	{r3, r4, r5, lr}
 23fde9c:	680b      	ldr	r3, [r1, #0]
 23fde9e:	4604      	mov	r4, r0
 23fdea0:	6003      	str	r3, [r0, #0]
 23fdea2:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fdea4:	6843      	ldr	r3, [r0, #4]
 23fdea6:	429d      	cmp	r5, r3
 23fdea8:	d008      	beq.n	23fdebc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fdeaa:	b115      	cbz	r5, 23fdeb2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fdeac:	686b      	ldr	r3, [r5, #4]
 23fdeae:	3301      	adds	r3, #1
 23fdeb0:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fdeb2:	6860      	ldr	r0, [r4, #4]
 23fdeb4:	b108      	cbz	r0, 23fdeba <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fdeb6:	f7fd ff22 	bl	23fbcfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fdeba:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fdebc:	bd38      	pop	{r3, r4, r5, pc}

023fdebe <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23fdebe:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fdec0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fdec2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fdec6:	2201      	movs	r2, #1
 23fdec8:	689b      	ldr	r3, [r3, #8]
 23fdeca:	f10d 0107 	add.w	r1, sp, #7
 23fdece:	4798      	blx	r3
}
 23fded0:	b003      	add	sp, #12
 23fded2:	f85d fb04 	ldr.w	pc, [sp], #4

023fded6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fded6:	460b      	mov	r3, r1
 23fded8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fdeda:	2200      	movs	r2, #0
 23fdedc:	b510      	push	{r4, lr}
 23fdede:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdee0:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fdee4:	6083      	str	r3, [r0, #8]
    if (t) {
 23fdee6:	b90b      	cbnz	r3, 23fdeec <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fdee8:	4620      	mov	r0, r4
 23fdeea:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fdeec:	f7ff ffd5 	bl	23fde9a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fdef0:	e7fa      	b.n	23fdee8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fdef2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fdef2:	6883      	ldr	r3, [r0, #8]
 23fdef4:	b1eb      	cbz	r3, 23fdf32 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fdef6:	781a      	ldrb	r2, [r3, #0]
 23fdef8:	2a03      	cmp	r2, #3
 23fdefa:	d81a      	bhi.n	23fdf32 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fdefc:	e8df f002 	tbb	[pc, r2]
 23fdf00:	1b021704 	.word	0x1b021704
 23fdf04:	2005      	movs	r0, #5
 23fdf06:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fdf08:	6802      	ldr	r2, [r0, #0]
 23fdf0a:	685b      	ldr	r3, [r3, #4]
 23fdf0c:	6852      	ldr	r2, [r2, #4]
 23fdf0e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fdf10:	282d      	cmp	r0, #45	; 0x2d
 23fdf12:	d012      	beq.n	23fdf3a <_ZNK5spark9JSONValue4typeEv+0x48>
 23fdf14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fdf18:	2b09      	cmp	r3, #9
 23fdf1a:	d90e      	bls.n	23fdf3a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fdf1c:	2874      	cmp	r0, #116	; 0x74
 23fdf1e:	d00e      	beq.n	23fdf3e <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fdf20:	2866      	cmp	r0, #102	; 0x66
 23fdf22:	d00c      	beq.n	23fdf3e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fdf24:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fdf28:	4258      	negs	r0, r3
 23fdf2a:	4158      	adcs	r0, r3
 23fdf2c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fdf2e:	2006      	movs	r0, #6
 23fdf30:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fdf32:	2000      	movs	r0, #0
 23fdf34:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fdf36:	2004      	movs	r0, #4
 23fdf38:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fdf3a:	2003      	movs	r0, #3
 23fdf3c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fdf3e:	2002      	movs	r0, #2
}
 23fdf40:	4770      	bx	lr

023fdf42 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fdf42:	b510      	push	{r4, lr}
 23fdf44:	4604      	mov	r4, r0
    switch (type()) {
 23fdf46:	f7ff ffd4 	bl	23fdef2 <_ZNK5spark9JSONValue4typeEv>
 23fdf4a:	2802      	cmp	r0, #2
 23fdf4c:	d00e      	beq.n	23fdf6c <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fdf4e:	1ec3      	subs	r3, r0, #3
 23fdf50:	b2db      	uxtb	r3, r3
 23fdf52:	2b01      	cmp	r3, #1
 23fdf54:	d814      	bhi.n	23fdf80 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fdf56:	6822      	ldr	r2, [r4, #0]
 23fdf58:	68a3      	ldr	r3, [r4, #8]
 23fdf5a:	6850      	ldr	r0, [r2, #4]
 23fdf5c:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fdf5e:	220a      	movs	r2, #10
}
 23fdf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fdf64:	2100      	movs	r1, #0
 23fdf66:	4418      	add	r0, r3
 23fdf68:	f000 bcf8 	b.w	23fe95c <strtol>
        const char* const s = d_->json + t_->start;
 23fdf6c:	6822      	ldr	r2, [r4, #0]
 23fdf6e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fdf70:	6852      	ldr	r2, [r2, #4]
 23fdf72:	685b      	ldr	r3, [r3, #4]
 23fdf74:	5cd0      	ldrb	r0, [r2, r3]
 23fdf76:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fdf7a:	4258      	negs	r0, r3
 23fdf7c:	4158      	adcs	r0, r3
}
 23fdf7e:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fdf80:	2000      	movs	r0, #0
 23fdf82:	e7fc      	b.n	23fdf7e <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fdf84 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdf84:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdf86:	2300      	movs	r3, #0
 23fdf88:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdf8a:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fdf8e:	480e      	ldr	r0, [pc, #56]	; (23fdfc8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fdf90:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fdf94:	b1a9      	cbz	r1, 23fdfc2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fdf96:	780b      	ldrb	r3, [r1, #0]
 23fdf98:	2b03      	cmp	r3, #3
 23fdf9a:	d006      	beq.n	23fdfaa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fdf9c:	b98b      	cbnz	r3, 23fdfc2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fdf9e:	6813      	ldr	r3, [r2, #0]
 23fdfa0:	6858      	ldr	r0, [r3, #4]
 23fdfa2:	684b      	ldr	r3, [r1, #4]
 23fdfa4:	5cc3      	ldrb	r3, [r0, r3]
 23fdfa6:	2b6e      	cmp	r3, #110	; 0x6e
 23fdfa8:	d007      	beq.n	23fdfba <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fdfaa:	6813      	ldr	r3, [r2, #0]
 23fdfac:	684d      	ldr	r5, [r1, #4]
 23fdfae:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fdfb0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fdfb2:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fdfb4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fdfb6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fdfb8:	60e3      	str	r3, [r4, #12]
 23fdfba:	4611      	mov	r1, r2
 23fdfbc:	4620      	mov	r0, r4
 23fdfbe:	f7ff ff6c 	bl	23fde9a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdfc2:	4620      	mov	r0, r4
 23fdfc4:	bd38      	pop	{r3, r4, r5, pc}
 23fdfc6:	bf00      	nop
 23fdfc8:	023ffb5e 	.word	0x023ffb5e

023fdfcc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdfcc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdfce:	2500      	movs	r5, #0
 23fdfd0:	460b      	mov	r3, r1
 23fdfd2:	4604      	mov	r4, r0
 23fdfd4:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdfd6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fdfda:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fdfde:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fdfe2:	b14b      	cbz	r3, 23fdff8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fdfe4:	781a      	ldrb	r2, [r3, #0]
 23fdfe6:	2a01      	cmp	r2, #1
 23fdfe8:	d106      	bne.n	23fdff8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fdfea:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fdfee:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fdff0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fdff2:	6143      	str	r3, [r0, #20]
 23fdff4:	f7ff ff51 	bl	23fde9a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdff8:	4620      	mov	r0, r4
 23fdffa:	bd38      	pop	{r3, r4, r5, pc}

023fdffc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fdffc:	b510      	push	{r4, lr}
    if (!n_) {
 23fdffe:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fe000:	4604      	mov	r4, r0
    if (!n_) {
 23fe002:	b163      	cbz	r3, 23fe01e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fe004:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fe006:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fe008:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fe00a:	3010      	adds	r0, #16
 23fe00c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fe00e:	6120      	str	r0, [r4, #16]
    --n_;
 23fe010:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fe012:	b113      	cbz	r3, 23fe01a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fe014:	f7ff fef2 	bl	23fddfc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fe018:	60a0      	str	r0, [r4, #8]
    return true;
 23fe01a:	2001      	movs	r0, #1
 23fe01c:	e000      	b.n	23fe020 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fe01e:	4618      	mov	r0, r3
}
 23fe020:	bd10      	pop	{r4, pc}

023fe022 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fe022:	b510      	push	{r4, lr}
    write('}');
 23fe024:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fe026:	4604      	mov	r4, r0
    write('}');
 23fe028:	f7ff ff49 	bl	23fdebe <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fe02c:	2301      	movs	r3, #1
}
 23fe02e:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe030:	7123      	strb	r3, [r4, #4]
}
 23fe032:	bd10      	pop	{r4, pc}

023fe034 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fe034:	b508      	push	{r3, lr}
    switch (state_) {
 23fe036:	7903      	ldrb	r3, [r0, #4]
 23fe038:	2b01      	cmp	r3, #1
 23fe03a:	d002      	beq.n	23fe042 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fe03c:	2b02      	cmp	r3, #2
 23fe03e:	d004      	beq.n	23fe04a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fe040:	bd08      	pop	{r3, pc}
        write(',');
 23fe042:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fe044:	f7ff ff3b 	bl	23fdebe <_ZN5spark10JSONWriter5writeEc>
}
 23fe048:	e7fa      	b.n	23fe040 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fe04a:	213a      	movs	r1, #58	; 0x3a
 23fe04c:	e7fa      	b.n	23fe044 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fe04e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fe04e:	b510      	push	{r4, lr}
 23fe050:	4604      	mov	r4, r0
    writeSeparator();
 23fe052:	f7ff ffef 	bl	23fe034 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fe056:	4620      	mov	r0, r4
 23fe058:	217b      	movs	r1, #123	; 0x7b
 23fe05a:	f7ff ff30 	bl	23fdebe <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fe05e:	2300      	movs	r3, #0
}
 23fe060:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fe062:	7123      	strb	r3, [r4, #4]
}
 23fe064:	bd10      	pop	{r4, pc}
	...

023fe068 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fe068:	b513      	push	{r0, r1, r4, lr}
 23fe06a:	4604      	mov	r4, r0
 23fe06c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe06e:	f7ff ffe1 	bl	23fe034 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fe072:	6823      	ldr	r3, [r4, #0]
 23fe074:	4620      	mov	r0, r4
 23fe076:	68db      	ldr	r3, [r3, #12]
 23fe078:	9a01      	ldr	r2, [sp, #4]
 23fe07a:	4903      	ldr	r1, [pc, #12]	; (23fe088 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fe07c:	4798      	blx	r3
    state_ = NEXT;
 23fe07e:	2301      	movs	r3, #1
}
 23fe080:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe082:	7123      	strb	r3, [r4, #4]
}
 23fe084:	b002      	add	sp, #8
 23fe086:	bd10      	pop	{r4, pc}
 23fe088:	023febf6 	.word	0x023febf6

023fe08c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fe08c:	b513      	push	{r0, r1, r4, lr}
 23fe08e:	4604      	mov	r4, r0
 23fe090:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe092:	f7ff ffcf 	bl	23fe034 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fe096:	6823      	ldr	r3, [r4, #0]
 23fe098:	4620      	mov	r0, r4
 23fe09a:	68db      	ldr	r3, [r3, #12]
 23fe09c:	9a01      	ldr	r2, [sp, #4]
 23fe09e:	4903      	ldr	r1, [pc, #12]	; (23fe0ac <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fe0a0:	4798      	blx	r3
    state_ = NEXT;
 23fe0a2:	2301      	movs	r3, #1
}
 23fe0a4:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe0a6:	7123      	strb	r3, [r4, #4]
}
 23fe0a8:	b002      	add	sp, #8
 23fe0aa:	bd10      	pop	{r4, pc}
 23fe0ac:	023ffd3c 	.word	0x023ffd3c

023fe0b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe0b4:	460d      	mov	r5, r1
 23fe0b6:	4690      	mov	r8, r2
    write('"');
 23fe0b8:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe0ba:	4604      	mov	r4, r0
 23fe0bc:	462f      	mov	r7, r5
    write('"');
 23fe0be:	f7ff fefe 	bl	23fdebe <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fe0c2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fe168 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fe0c6:	44a8      	add	r8, r5
    while (s != end) {
 23fe0c8:	4547      	cmp	r7, r8
 23fe0ca:	46ba      	mov	sl, r7
 23fe0cc:	d03d      	beq.n	23fe14a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fe0ce:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fe0d2:	2e22      	cmp	r6, #34	; 0x22
 23fe0d4:	d006      	beq.n	23fe0e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe0d6:	2e5c      	cmp	r6, #92	; 0x5c
 23fe0d8:	d004      	beq.n	23fe0e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe0da:	4630      	mov	r0, r6
 23fe0dc:	f000 faf0 	bl	23fe6c0 <isprint>
 23fe0e0:	2800      	cmp	r0, #0
 23fe0e2:	d1f1      	bne.n	23fe0c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fe0e4:	6823      	ldr	r3, [r4, #0]
 23fe0e6:	4629      	mov	r1, r5
 23fe0e8:	4620      	mov	r0, r4
 23fe0ea:	689b      	ldr	r3, [r3, #8]
 23fe0ec:	ebaa 0205 	sub.w	r2, sl, r5
 23fe0f0:	4798      	blx	r3
            write('\\');
 23fe0f2:	215c      	movs	r1, #92	; 0x5c
 23fe0f4:	4620      	mov	r0, r4
 23fe0f6:	f7ff fee2 	bl	23fdebe <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fe0fa:	2e0d      	cmp	r6, #13
 23fe0fc:	d80a      	bhi.n	23fe114 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fe0fe:	2e07      	cmp	r6, #7
 23fe100:	d91c      	bls.n	23fe13c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe102:	f1a6 0308 	sub.w	r3, r6, #8
 23fe106:	2b05      	cmp	r3, #5
 23fe108:	d818      	bhi.n	23fe13c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe10a:	e8df f003 	tbb	[pc, r3]
 23fe10e:	0f0d      	.short	0x0f0d
 23fe110:	15131711 	.word	0x15131711
 23fe114:	2e22      	cmp	r6, #34	; 0x22
 23fe116:	d001      	beq.n	23fe11c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fe118:	2e5c      	cmp	r6, #92	; 0x5c
 23fe11a:	d10f      	bne.n	23fe13c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fe11c:	4631      	mov	r1, r6
                write('b');
 23fe11e:	4620      	mov	r0, r4
 23fe120:	f7ff fecd 	bl	23fdebe <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fe124:	463d      	mov	r5, r7
    while (s != end) {
 23fe126:	e7cf      	b.n	23fe0c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fe128:	2162      	movs	r1, #98	; 0x62
 23fe12a:	e7f8      	b.n	23fe11e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fe12c:	2174      	movs	r1, #116	; 0x74
 23fe12e:	e7f6      	b.n	23fe11e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fe130:	216e      	movs	r1, #110	; 0x6e
 23fe132:	e7f4      	b.n	23fe11e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fe134:	2166      	movs	r1, #102	; 0x66
 23fe136:	e7f2      	b.n	23fe11e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fe138:	2172      	movs	r1, #114	; 0x72
 23fe13a:	e7f0      	b.n	23fe11e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fe13c:	6823      	ldr	r3, [r4, #0]
 23fe13e:	4632      	mov	r2, r6
 23fe140:	4649      	mov	r1, r9
 23fe142:	4620      	mov	r0, r4
 23fe144:	68db      	ldr	r3, [r3, #12]
 23fe146:	4798      	blx	r3
                break;
 23fe148:	e7ec      	b.n	23fe124 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fe14a:	42bd      	cmp	r5, r7
 23fe14c:	d005      	beq.n	23fe15a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fe14e:	6823      	ldr	r3, [r4, #0]
 23fe150:	4629      	mov	r1, r5
 23fe152:	4620      	mov	r0, r4
 23fe154:	689b      	ldr	r3, [r3, #8]
 23fe156:	1b7a      	subs	r2, r7, r5
 23fe158:	4798      	blx	r3
    }
    write('"');
 23fe15a:	2122      	movs	r1, #34	; 0x22
 23fe15c:	4620      	mov	r0, r4
 23fe15e:	f7ff feae 	bl	23fdebe <_ZN5spark10JSONWriter5writeEc>
}
 23fe162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe166:	bf00      	nop
 23fe168:	023ffd3f 	.word	0x023ffd3f

023fe16c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fe16c:	b513      	push	{r0, r1, r4, lr}
 23fe16e:	4604      	mov	r4, r0
 23fe170:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe174:	f7ff ff5e 	bl	23fe034 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fe178:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe17c:	4620      	mov	r0, r4
 23fe17e:	f7ff ff97 	bl	23fe0b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fe182:	2302      	movs	r3, #2
}
 23fe184:	4620      	mov	r0, r4
    state_ = VALUE;
 23fe186:	7123      	strb	r3, [r4, #4]
}
 23fe188:	b002      	add	sp, #8
 23fe18a:	bd10      	pop	{r4, pc}

023fe18c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fe18c:	b513      	push	{r0, r1, r4, lr}
 23fe18e:	4604      	mov	r4, r0
 23fe190:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe194:	f7ff ff4e 	bl	23fe034 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fe198:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe19c:	4620      	mov	r0, r4
 23fe19e:	f7ff ff87 	bl	23fe0b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fe1a2:	2301      	movs	r3, #1
}
 23fe1a4:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe1a6:	7123      	strb	r3, [r4, #4]
}
 23fe1a8:	b002      	add	sp, #8
 23fe1aa:	bd10      	pop	{r4, pc}

023fe1ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe1ac:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe1ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe1b0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe1b2:	d902      	bls.n	23fe1ba <pinAvailable+0xe>
    return false;
 23fe1b4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe1b6:	b003      	add	sp, #12
 23fe1b8:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe1ba:	f1a0 030f 	sub.w	r3, r0, #15
 23fe1be:	2b02      	cmp	r3, #2
 23fe1c0:	d90b      	bls.n	23fe1da <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe1c2:	2801      	cmp	r0, #1
 23fe1c4:	d821      	bhi.n	23fe20a <pinAvailable+0x5e>
 23fe1c6:	f000 f935 	bl	23fe434 <_Z19__fetch_global_Wirev>
 23fe1ca:	2100      	movs	r1, #0
 23fe1cc:	7c00      	ldrb	r0, [r0, #16]
 23fe1ce:	f7fc fef1 	bl	23fafb4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe1d2:	f080 0001 	eor.w	r0, r0, #1
 23fe1d6:	b2c0      	uxtb	r0, r0
 23fe1d8:	e7ed      	b.n	23fe1b6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe1da:	4d11      	ldr	r5, [pc, #68]	; (23fe220 <pinAvailable+0x74>)
 23fe1dc:	e8d5 1f8f 	ldab	r1, [r5]
 23fe1e0:	f011 0101 	ands.w	r1, r1, #1
 23fe1e4:	d10b      	bne.n	23fe1fe <pinAvailable+0x52>
 23fe1e6:	4628      	mov	r0, r5
 23fe1e8:	9101      	str	r1, [sp, #4]
 23fe1ea:	f7fa fc61 	bl	23f8ab0 <__cxa_guard_acquire>
 23fe1ee:	9901      	ldr	r1, [sp, #4]
 23fe1f0:	b128      	cbz	r0, 23fe1fe <pinAvailable+0x52>
 23fe1f2:	480c      	ldr	r0, [pc, #48]	; (23fe224 <pinAvailable+0x78>)
 23fe1f4:	f7fd fab0 	bl	23fb758 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe1f8:	4628      	mov	r0, r5
 23fe1fa:	f7fa fc5e 	bl	23f8aba <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe1fe:	4b09      	ldr	r3, [pc, #36]	; (23fe224 <pinAvailable+0x78>)
 23fe200:	7818      	ldrb	r0, [r3, #0]
 23fe202:	f7fc ff47 	bl	23fb094 <hal_spi_is_enabled>
 23fe206:	2800      	cmp	r0, #0
 23fe208:	d1d4      	bne.n	23fe1b4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe20a:	3c08      	subs	r4, #8
 23fe20c:	2c01      	cmp	r4, #1
 23fe20e:	d805      	bhi.n	23fe21c <pinAvailable+0x70>
 23fe210:	f000 f864 	bl	23fe2dc <_Z22__fetch_global_Serial1v>
 23fe214:	7c00      	ldrb	r0, [r0, #16]
 23fe216:	f7fc fe25 	bl	23fae64 <hal_usart_is_enabled>
 23fe21a:	e7da      	b.n	23fe1d2 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fe21c:	2001      	movs	r0, #1
 23fe21e:	e7ca      	b.n	23fe1b6 <pinAvailable+0xa>
 23fe220:	1007ae40 	.word	0x1007ae40
 23fe224:	1007ae44 	.word	0x1007ae44

023fe228 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe228:	281b      	cmp	r0, #27
{
 23fe22a:	b538      	push	{r3, r4, r5, lr}
 23fe22c:	4604      	mov	r4, r0
 23fe22e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe230:	d80a      	bhi.n	23fe248 <pinMode+0x20>
 23fe232:	29ff      	cmp	r1, #255	; 0xff
 23fe234:	d008      	beq.n	23fe248 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fe236:	f7ff ffb9 	bl	23fe1ac <pinAvailable>
 23fe23a:	b128      	cbz	r0, 23fe248 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fe23c:	4629      	mov	r1, r5
 23fe23e:	4620      	mov	r0, r4
}
 23fe240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fe244:	f7fc bc78 	b.w	23fab38 <hal_gpio_mode>
}
 23fe248:	bd38      	pop	{r3, r4, r5, pc}

023fe24a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fe24a:	b538      	push	{r3, r4, r5, lr}
 23fe24c:	4604      	mov	r4, r0
 23fe24e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fe250:	f7fc fc80 	bl	23fab54 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fe254:	28ff      	cmp	r0, #255	; 0xff
 23fe256:	d010      	beq.n	23fe27a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fe258:	2806      	cmp	r0, #6
 23fe25a:	d804      	bhi.n	23fe266 <digitalWrite+0x1c>
 23fe25c:	234d      	movs	r3, #77	; 0x4d
 23fe25e:	fa23 f000 	lsr.w	r0, r3, r0
 23fe262:	07c3      	lsls	r3, r0, #31
 23fe264:	d409      	bmi.n	23fe27a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fe266:	4620      	mov	r0, r4
 23fe268:	f7ff ffa0 	bl	23fe1ac <pinAvailable>
 23fe26c:	b128      	cbz	r0, 23fe27a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fe26e:	4629      	mov	r1, r5
 23fe270:	4620      	mov	r0, r4
}
 23fe272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fe276:	f7fc bc7b 	b.w	23fab70 <hal_gpio_write>
}
 23fe27a:	bd38      	pop	{r3, r4, r5, pc}

023fe27c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe27c:	4770      	bx	lr
	...

023fe280 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe280:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe282:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe284:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe286:	462a      	mov	r2, r5
 23fe288:	2100      	movs	r1, #0
 23fe28a:	f000 fa48 	bl	23fe71e <memset>
 23fe28e:	8025      	strh	r5, [r4, #0]
 23fe290:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe292:	4907      	ldr	r1, [pc, #28]	; (23fe2b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fe294:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fe296:	8125      	strh	r5, [r4, #8]
 23fe298:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe29a:	f000 f8f1 	bl	23fe480 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe29e:	4904      	ldr	r1, [pc, #16]	; (23fe2b0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe2a0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe2a2:	4628      	mov	r0, r5
 23fe2a4:	f000 f8ec 	bl	23fe480 <_ZnajRKSt9nothrow_t>
    };
 23fe2a8:	60e0      	str	r0, [r4, #12]
}
 23fe2aa:	4620      	mov	r0, r4
 23fe2ac:	bd38      	pop	{r3, r4, r5, pc}
 23fe2ae:	bf00      	nop
 23fe2b0:	023ffd45 	.word	0x023ffd45

023fe2b4 <__tcf_2>:
 23fe2b4:	4770      	bx	lr

023fe2b6 <__tcf_1>:
 23fe2b6:	4770      	bx	lr

023fe2b8 <_Z20acquireSerial1Bufferv>:
{
 23fe2b8:	b510      	push	{r4, lr}
 23fe2ba:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe2bc:	f7ff ffe0 	bl	23fe280 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe2c0:	4620      	mov	r0, r4
 23fe2c2:	bd10      	pop	{r4, pc}

023fe2c4 <_Z20acquireSerial2Bufferv>:
 23fe2c4:	b510      	push	{r4, lr}
 23fe2c6:	4604      	mov	r4, r0
 23fe2c8:	f7ff ffda 	bl	23fe280 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe2cc:	4620      	mov	r0, r4
 23fe2ce:	bd10      	pop	{r4, pc}

023fe2d0 <_Z20acquireSerial3Bufferv>:
 23fe2d0:	b510      	push	{r4, lr}
 23fe2d2:	4604      	mov	r4, r0
 23fe2d4:	f7ff ffd4 	bl	23fe280 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe2d8:	4620      	mov	r0, r4
 23fe2da:	bd10      	pop	{r4, pc}

023fe2dc <_Z22__fetch_global_Serial1v>:
{
 23fe2dc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe2de:	4d0e      	ldr	r5, [pc, #56]	; (23fe318 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe2e0:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe2e2:	e8d5 1f8f 	ldab	r1, [r5]
 23fe2e6:	f011 0401 	ands.w	r4, r1, #1
 23fe2ea:	d111      	bne.n	23fe310 <_Z22__fetch_global_Serial1v+0x34>
 23fe2ec:	4628      	mov	r0, r5
 23fe2ee:	f7fa fbdf 	bl	23f8ab0 <__cxa_guard_acquire>
 23fe2f2:	b168      	cbz	r0, 23fe310 <_Z22__fetch_global_Serial1v+0x34>
 23fe2f4:	a801      	add	r0, sp, #4
 23fe2f6:	f7ff ffdf 	bl	23fe2b8 <_Z20acquireSerial1Bufferv>
 23fe2fa:	4621      	mov	r1, r4
 23fe2fc:	aa01      	add	r2, sp, #4
 23fe2fe:	4807      	ldr	r0, [pc, #28]	; (23fe31c <_Z22__fetch_global_Serial1v+0x40>)
 23fe300:	f7ff fbd2 	bl	23fdaa8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe304:	4628      	mov	r0, r5
 23fe306:	f7fa fbd8 	bl	23f8aba <__cxa_guard_release>
 23fe30a:	4805      	ldr	r0, [pc, #20]	; (23fe320 <_Z22__fetch_global_Serial1v+0x44>)
 23fe30c:	f000 f9d2 	bl	23fe6b4 <atexit>
    return serial1;
}
 23fe310:	4802      	ldr	r0, [pc, #8]	; (23fe31c <_Z22__fetch_global_Serial1v+0x40>)
 23fe312:	b007      	add	sp, #28
 23fe314:	bd30      	pop	{r4, r5, pc}
 23fe316:	bf00      	nop
 23fe318:	1007aeec 	.word	0x1007aeec
 23fe31c:	1007aef8 	.word	0x1007aef8
 23fe320:	023fe27d 	.word	0x023fe27d

023fe324 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe324:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe326:	4c0d      	ldr	r4, [pc, #52]	; (23fe35c <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe328:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe32a:	e8d4 3f8f 	ldab	r3, [r4]
 23fe32e:	07db      	lsls	r3, r3, #31
 23fe330:	d411      	bmi.n	23fe356 <_Z22__fetch_global_Serial2v+0x32>
 23fe332:	4620      	mov	r0, r4
 23fe334:	f7fa fbbc 	bl	23f8ab0 <__cxa_guard_acquire>
 23fe338:	b168      	cbz	r0, 23fe356 <_Z22__fetch_global_Serial2v+0x32>
 23fe33a:	a801      	add	r0, sp, #4
 23fe33c:	f7ff ffc2 	bl	23fe2c4 <_Z20acquireSerial2Bufferv>
 23fe340:	2101      	movs	r1, #1
 23fe342:	aa01      	add	r2, sp, #4
 23fe344:	4806      	ldr	r0, [pc, #24]	; (23fe360 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe346:	f7ff fbaf 	bl	23fdaa8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe34a:	4620      	mov	r0, r4
 23fe34c:	f7fa fbb5 	bl	23f8aba <__cxa_guard_release>
 23fe350:	4804      	ldr	r0, [pc, #16]	; (23fe364 <_Z22__fetch_global_Serial2v+0x40>)
 23fe352:	f000 f9af 	bl	23fe6b4 <atexit>
	return serial2;
}
 23fe356:	4802      	ldr	r0, [pc, #8]	; (23fe360 <_Z22__fetch_global_Serial2v+0x3c>)
 23fe358:	b006      	add	sp, #24
 23fe35a:	bd10      	pop	{r4, pc}
 23fe35c:	1007aef0 	.word	0x1007aef0
 23fe360:	1007af0c 	.word	0x1007af0c
 23fe364:	023fe2b7 	.word	0x023fe2b7

023fe368 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe368:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe36a:	f7ff ffdb 	bl	23fe324 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe36e:	4b07      	ldr	r3, [pc, #28]	; (23fe38c <_Z15serialEventRun2v+0x24>)
 23fe370:	4604      	mov	r4, r0
 23fe372:	b153      	cbz	r3, 23fe38a <_Z15serialEventRun2v+0x22>
 23fe374:	f7ff fbb6 	bl	23fdae4 <_ZN11USARTSerial9isEnabledEv>
 23fe378:	b138      	cbz	r0, 23fe38a <_Z15serialEventRun2v+0x22>
 23fe37a:	6823      	ldr	r3, [r4, #0]
 23fe37c:	4620      	mov	r0, r4
 23fe37e:	691b      	ldr	r3, [r3, #16]
 23fe380:	4798      	blx	r3
 23fe382:	2800      	cmp	r0, #0
 23fe384:	dd01      	ble.n	23fe38a <_Z15serialEventRun2v+0x22>
        handler();
 23fe386:	e000      	b.n	23fe38a <_Z15serialEventRun2v+0x22>
 23fe388:	bf00      	nop
}
 23fe38a:	bd10      	pop	{r4, pc}
 23fe38c:	00000000 	.word	0x00000000

023fe390 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe390:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe392:	4c0d      	ldr	r4, [pc, #52]	; (23fe3c8 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe394:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe396:	e8d4 3f8f 	ldab	r3, [r4]
 23fe39a:	07db      	lsls	r3, r3, #31
 23fe39c:	d411      	bmi.n	23fe3c2 <_Z22__fetch_global_Serial3v+0x32>
 23fe39e:	4620      	mov	r0, r4
 23fe3a0:	f7fa fb86 	bl	23f8ab0 <__cxa_guard_acquire>
 23fe3a4:	b168      	cbz	r0, 23fe3c2 <_Z22__fetch_global_Serial3v+0x32>
 23fe3a6:	a801      	add	r0, sp, #4
 23fe3a8:	f7ff ff92 	bl	23fe2d0 <_Z20acquireSerial3Bufferv>
 23fe3ac:	2102      	movs	r1, #2
 23fe3ae:	aa01      	add	r2, sp, #4
 23fe3b0:	4806      	ldr	r0, [pc, #24]	; (23fe3cc <_Z22__fetch_global_Serial3v+0x3c>)
 23fe3b2:	f7ff fb79 	bl	23fdaa8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe3b6:	4620      	mov	r0, r4
 23fe3b8:	f7fa fb7f 	bl	23f8aba <__cxa_guard_release>
 23fe3bc:	4804      	ldr	r0, [pc, #16]	; (23fe3d0 <_Z22__fetch_global_Serial3v+0x40>)
 23fe3be:	f000 f979 	bl	23fe6b4 <atexit>
	return serial3;
}
 23fe3c2:	4802      	ldr	r0, [pc, #8]	; (23fe3cc <_Z22__fetch_global_Serial3v+0x3c>)
 23fe3c4:	b006      	add	sp, #24
 23fe3c6:	bd10      	pop	{r4, pc}
 23fe3c8:	1007aef4 	.word	0x1007aef4
 23fe3cc:	1007af20 	.word	0x1007af20
 23fe3d0:	023fe2b5 	.word	0x023fe2b5

023fe3d4 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe3d4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe3d6:	f7ff ffdb 	bl	23fe390 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe3da:	4b07      	ldr	r3, [pc, #28]	; (23fe3f8 <_Z15serialEventRun3v+0x24>)
 23fe3dc:	4604      	mov	r4, r0
 23fe3de:	b153      	cbz	r3, 23fe3f6 <_Z15serialEventRun3v+0x22>
 23fe3e0:	f7ff fb80 	bl	23fdae4 <_ZN11USARTSerial9isEnabledEv>
 23fe3e4:	b138      	cbz	r0, 23fe3f6 <_Z15serialEventRun3v+0x22>
 23fe3e6:	6823      	ldr	r3, [r4, #0]
 23fe3e8:	4620      	mov	r0, r4
 23fe3ea:	691b      	ldr	r3, [r3, #16]
 23fe3ec:	4798      	blx	r3
 23fe3ee:	2800      	cmp	r0, #0
 23fe3f0:	dd01      	ble.n	23fe3f6 <_Z15serialEventRun3v+0x22>
        handler();
 23fe3f2:	e000      	b.n	23fe3f6 <_Z15serialEventRun3v+0x22>
 23fe3f4:	bf00      	nop
}
 23fe3f6:	bd10      	pop	{r4, pc}
 23fe3f8:	00000000 	.word	0x00000000

023fe3fc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe3fc:	4770      	bx	lr
	...

023fe400 <_Z17acquireWireBufferv>:
{
 23fe400:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe402:	4b0a      	ldr	r3, [pc, #40]	; (23fe42c <_Z17acquireWireBufferv+0x2c>)
{
 23fe404:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe406:	6003      	str	r3, [r0, #0]
 23fe408:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe40a:	4909      	ldr	r1, [pc, #36]	; (23fe430 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fe40c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe40e:	2020      	movs	r0, #32
 23fe410:	f000 f836 	bl	23fe480 <_ZnajRKSt9nothrow_t>
	};
 23fe414:	2520      	movs	r5, #32
 23fe416:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe418:	4905      	ldr	r1, [pc, #20]	; (23fe430 <_Z17acquireWireBufferv+0x30>)
 23fe41a:	4628      	mov	r0, r5
	};
 23fe41c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe41e:	f000 f82f 	bl	23fe480 <_ZnajRKSt9nothrow_t>
	};
 23fe422:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fe426:	4620      	mov	r0, r4
 23fe428:	bd38      	pop	{r3, r4, r5, pc}
 23fe42a:	bf00      	nop
 23fe42c:	00010018 	.word	0x00010018
 23fe430:	023ffd45 	.word	0x023ffd45

023fe434 <_Z19__fetch_global_Wirev>:
{
 23fe434:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe436:	4d0e      	ldr	r5, [pc, #56]	; (23fe470 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fe438:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe43a:	e8d5 1f8f 	ldab	r1, [r5]
 23fe43e:	f011 0401 	ands.w	r4, r1, #1
 23fe442:	d111      	bne.n	23fe468 <_Z19__fetch_global_Wirev+0x34>
 23fe444:	4628      	mov	r0, r5
 23fe446:	f7fa fb33 	bl	23f8ab0 <__cxa_guard_acquire>
 23fe44a:	b168      	cbz	r0, 23fe468 <_Z19__fetch_global_Wirev+0x34>
 23fe44c:	4668      	mov	r0, sp
 23fe44e:	f7ff ffd7 	bl	23fe400 <_Z17acquireWireBufferv>
 23fe452:	466a      	mov	r2, sp
 23fe454:	4621      	mov	r1, r4
 23fe456:	4807      	ldr	r0, [pc, #28]	; (23fe474 <_Z19__fetch_global_Wirev+0x40>)
 23fe458:	f7ff fb88 	bl	23fdb6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fe45c:	4628      	mov	r0, r5
 23fe45e:	f7fa fb2c 	bl	23f8aba <__cxa_guard_release>
 23fe462:	4805      	ldr	r0, [pc, #20]	; (23fe478 <_Z19__fetch_global_Wirev+0x44>)
 23fe464:	f000 f926 	bl	23fe6b4 <atexit>
	return wire;
}
 23fe468:	4802      	ldr	r0, [pc, #8]	; (23fe474 <_Z19__fetch_global_Wirev+0x40>)
 23fe46a:	b007      	add	sp, #28
 23fe46c:	bd30      	pop	{r4, r5, pc}
 23fe46e:	bf00      	nop
 23fe470:	1007af38 	.word	0x1007af38
 23fe474:	1007af3c 	.word	0x1007af3c
 23fe478:	023fe3fd 	.word	0x023fe3fd

023fe47c <_ZnwjRKSt9nothrow_t>:
 23fe47c:	f7fa bb03 	b.w	23f8a86 <_Znwj>

023fe480 <_ZnajRKSt9nothrow_t>:
 23fe480:	f7fa bb03 	b.w	23f8a8a <_Znaj>

023fe484 <_ZSt20__throw_length_errorPKc>:
 23fe484:	b508      	push	{r3, lr}
 23fe486:	f7fd f8dd 	bl	23fb644 <abort>

023fe48a <_ZSt25__throw_bad_function_callv>:
 23fe48a:	b508      	push	{r3, lr}
 23fe48c:	f7fd f8da 	bl	23fb644 <abort>

023fe490 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fe490:	4901      	ldr	r1, [pc, #4]	; (23fe498 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fe492:	f000 b8f9 	b.w	23fe688 <_ZNKSt9type_infoeqERKS_>
 23fe496:	bf00      	nop
 23fe498:	023ffd60 	.word	0x023ffd60

023fe49c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fe49c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fe49e:	2400      	movs	r4, #0
 23fe4a0:	2310      	movs	r3, #16
 23fe4a2:	4615      	mov	r5, r2
 23fe4a4:	6812      	ldr	r2, [r2, #0]
 23fe4a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fe4aa:	6803      	ldr	r3, [r0, #0]
 23fe4ac:	e9cd 4400 	strd	r4, r4, [sp]
 23fe4b0:	699e      	ldr	r6, [r3, #24]
 23fe4b2:	466b      	mov	r3, sp
 23fe4b4:	47b0      	blx	r6
 23fe4b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fe4ba:	f003 0306 	and.w	r3, r3, #6
 23fe4be:	2b06      	cmp	r3, #6
 23fe4c0:	bf05      	ittet	eq
 23fe4c2:	9b00      	ldreq	r3, [sp, #0]
 23fe4c4:	2001      	moveq	r0, #1
 23fe4c6:	4620      	movne	r0, r4
 23fe4c8:	602b      	streq	r3, [r5, #0]
 23fe4ca:	b004      	add	sp, #16
 23fe4cc:	bd70      	pop	{r4, r5, r6, pc}

023fe4ce <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fe4ce:	9800      	ldr	r0, [sp, #0]
 23fe4d0:	4290      	cmp	r0, r2
 23fe4d2:	bf14      	ite	ne
 23fe4d4:	2001      	movne	r0, #1
 23fe4d6:	2006      	moveq	r0, #6
 23fe4d8:	4770      	bx	lr
	...

023fe4dc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fe4dc:	4b03      	ldr	r3, [pc, #12]	; (23fe4ec <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fe4de:	b510      	push	{r4, lr}
 23fe4e0:	4604      	mov	r4, r0
 23fe4e2:	6003      	str	r3, [r0, #0]
 23fe4e4:	f000 f8cd 	bl	23fe682 <_ZNSt9type_infoD1Ev>
 23fe4e8:	4620      	mov	r0, r4
 23fe4ea:	bd10      	pop	{r4, pc}
 23fe4ec:	023ffda0 	.word	0x023ffda0

023fe4f0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fe4f0:	b510      	push	{r4, lr}
 23fe4f2:	4604      	mov	r4, r0
 23fe4f4:	f7ff fff2 	bl	23fe4dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fe4f8:	2108      	movs	r1, #8
 23fe4fa:	4620      	mov	r0, r4
 23fe4fc:	f7fa fac9 	bl	23f8a92 <_ZdlPvj>
 23fe500:	4620      	mov	r0, r4
 23fe502:	bd10      	pop	{r4, pc}

023fe504 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fe504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe508:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fe50c:	461f      	mov	r7, r3
 23fe50e:	4606      	mov	r6, r0
 23fe510:	4615      	mov	r5, r2
 23fe512:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fe516:	4598      	cmp	r8, r3
 23fe518:	d107      	bne.n	23fe52a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fe51a:	9907      	ldr	r1, [sp, #28]
 23fe51c:	f000 f8b4 	bl	23fe688 <_ZNKSt9type_infoeqERKS_>
 23fe520:	b118      	cbz	r0, 23fe52a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fe522:	7165      	strb	r5, [r4, #5]
 23fe524:	2000      	movs	r0, #0
 23fe526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe52a:	4639      	mov	r1, r7
 23fe52c:	4630      	mov	r0, r6
 23fe52e:	f000 f8ab 	bl	23fe688 <_ZNKSt9type_infoeqERKS_>
 23fe532:	2800      	cmp	r0, #0
 23fe534:	d0f6      	beq.n	23fe524 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fe536:	2301      	movs	r3, #1
 23fe538:	f8c4 8000 	str.w	r8, [r4]
 23fe53c:	7125      	strb	r5, [r4, #4]
 23fe53e:	71a3      	strb	r3, [r4, #6]
 23fe540:	e7f0      	b.n	23fe524 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fe542 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fe542:	b538      	push	{r3, r4, r5, lr}
 23fe544:	4615      	mov	r5, r2
 23fe546:	461c      	mov	r4, r3
 23fe548:	f000 f89e 	bl	23fe688 <_ZNKSt9type_infoeqERKS_>
 23fe54c:	b120      	cbz	r0, 23fe558 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fe54e:	2308      	movs	r3, #8
 23fe550:	6025      	str	r5, [r4, #0]
 23fe552:	60e3      	str	r3, [r4, #12]
 23fe554:	2306      	movs	r3, #6
 23fe556:	7123      	strb	r3, [r4, #4]
 23fe558:	bd38      	pop	{r3, r4, r5, pc}

023fe55a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fe55a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe55c:	4605      	mov	r5, r0
 23fe55e:	460c      	mov	r4, r1
 23fe560:	461e      	mov	r6, r3
 23fe562:	9201      	str	r2, [sp, #4]
 23fe564:	f000 f890 	bl	23fe688 <_ZNKSt9type_infoeqERKS_>
 23fe568:	b950      	cbnz	r0, 23fe580 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fe56a:	2e03      	cmp	r6, #3
 23fe56c:	d808      	bhi.n	23fe580 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fe56e:	6823      	ldr	r3, [r4, #0]
 23fe570:	4629      	mov	r1, r5
 23fe572:	9a01      	ldr	r2, [sp, #4]
 23fe574:	4620      	mov	r0, r4
 23fe576:	695b      	ldr	r3, [r3, #20]
 23fe578:	b002      	add	sp, #8
 23fe57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fe57e:	4718      	bx	r3
 23fe580:	b002      	add	sp, #8
 23fe582:	bd70      	pop	{r4, r5, r6, pc}

023fe584 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fe584:	4b03      	ldr	r3, [pc, #12]	; (23fe594 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fe586:	b510      	push	{r4, lr}
 23fe588:	4604      	mov	r4, r0
 23fe58a:	6003      	str	r3, [r0, #0]
 23fe58c:	f7ff ffa6 	bl	23fe4dc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fe590:	4620      	mov	r0, r4
 23fe592:	bd10      	pop	{r4, pc}
 23fe594:	023ffe00 	.word	0x023ffe00

023fe598 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fe598:	b510      	push	{r4, lr}
 23fe59a:	4604      	mov	r4, r0
 23fe59c:	f7ff fff2 	bl	23fe584 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fe5a0:	210c      	movs	r1, #12
 23fe5a2:	4620      	mov	r0, r4
 23fe5a4:	f7fa fa75 	bl	23f8a92 <_ZdlPvj>
 23fe5a8:	4620      	mov	r0, r4
 23fe5aa:	bd10      	pop	{r4, pc}

023fe5ac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fe5ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fe5ae:	9f08      	ldr	r7, [sp, #32]
 23fe5b0:	4605      	mov	r5, r0
 23fe5b2:	460e      	mov	r6, r1
 23fe5b4:	4614      	mov	r4, r2
 23fe5b6:	4297      	cmp	r7, r2
 23fe5b8:	d00a      	beq.n	23fe5d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fe5ba:	68a8      	ldr	r0, [r5, #8]
 23fe5bc:	4631      	mov	r1, r6
 23fe5be:	6802      	ldr	r2, [r0, #0]
 23fe5c0:	9708      	str	r7, [sp, #32]
 23fe5c2:	6a15      	ldr	r5, [r2, #32]
 23fe5c4:	4622      	mov	r2, r4
 23fe5c6:	46ac      	mov	ip, r5
 23fe5c8:	b003      	add	sp, #12
 23fe5ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fe5ce:	4760      	bx	ip
 23fe5d0:	4619      	mov	r1, r3
 23fe5d2:	9301      	str	r3, [sp, #4]
 23fe5d4:	f000 f858 	bl	23fe688 <_ZNKSt9type_infoeqERKS_>
 23fe5d8:	9b01      	ldr	r3, [sp, #4]
 23fe5da:	2800      	cmp	r0, #0
 23fe5dc:	d0ed      	beq.n	23fe5ba <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fe5de:	2006      	movs	r0, #6
 23fe5e0:	b003      	add	sp, #12
 23fe5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe5e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fe5e4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe5e8:	460d      	mov	r5, r1
 23fe5ea:	4619      	mov	r1, r3
 23fe5ec:	4681      	mov	r9, r0
 23fe5ee:	4617      	mov	r7, r2
 23fe5f0:	4698      	mov	r8, r3
 23fe5f2:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fe5f6:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fe5fa:	f000 f845 	bl	23fe688 <_ZNKSt9type_infoeqERKS_>
 23fe5fe:	b190      	cbz	r0, 23fe626 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fe600:	2d00      	cmp	r5, #0
 23fe602:	6034      	str	r4, [r6, #0]
 23fe604:	7137      	strb	r7, [r6, #4]
 23fe606:	db09      	blt.n	23fe61c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fe608:	1961      	adds	r1, r4, r5
 23fe60a:	458a      	cmp	sl, r1
 23fe60c:	bf0c      	ite	eq
 23fe60e:	2106      	moveq	r1, #6
 23fe610:	2101      	movne	r1, #1
 23fe612:	71b1      	strb	r1, [r6, #6]
 23fe614:	2000      	movs	r0, #0
 23fe616:	b001      	add	sp, #4
 23fe618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe61c:	3502      	adds	r5, #2
 23fe61e:	d1f9      	bne.n	23fe614 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe620:	2301      	movs	r3, #1
 23fe622:	71b3      	strb	r3, [r6, #6]
 23fe624:	e7f6      	b.n	23fe614 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe626:	4554      	cmp	r4, sl
 23fe628:	d106      	bne.n	23fe638 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fe62a:	4659      	mov	r1, fp
 23fe62c:	4648      	mov	r0, r9
 23fe62e:	f000 f82b 	bl	23fe688 <_ZNKSt9type_infoeqERKS_>
 23fe632:	b108      	cbz	r0, 23fe638 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fe634:	7177      	strb	r7, [r6, #5]
 23fe636:	e7ed      	b.n	23fe614 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe638:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fe63c:	463a      	mov	r2, r7
 23fe63e:	4629      	mov	r1, r5
 23fe640:	6803      	ldr	r3, [r0, #0]
 23fe642:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fe646:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fe64a:	69dc      	ldr	r4, [r3, #28]
 23fe64c:	4643      	mov	r3, r8
 23fe64e:	46a4      	mov	ip, r4
 23fe650:	b001      	add	sp, #4
 23fe652:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe656:	4760      	bx	ip

023fe658 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fe658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe65c:	4607      	mov	r7, r0
 23fe65e:	460c      	mov	r4, r1
 23fe660:	4615      	mov	r5, r2
 23fe662:	461e      	mov	r6, r3
 23fe664:	f7ff ff6d 	bl	23fe542 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fe668:	b948      	cbnz	r0, 23fe67e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fe66a:	68b8      	ldr	r0, [r7, #8]
 23fe66c:	462a      	mov	r2, r5
 23fe66e:	4621      	mov	r1, r4
 23fe670:	6803      	ldr	r3, [r0, #0]
 23fe672:	699f      	ldr	r7, [r3, #24]
 23fe674:	4633      	mov	r3, r6
 23fe676:	46bc      	mov	ip, r7
 23fe678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fe67c:	4760      	bx	ip
 23fe67e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe682 <_ZNSt9type_infoD1Ev>:
 23fe682:	4770      	bx	lr

023fe684 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fe684:	2000      	movs	r0, #0
 23fe686:	4770      	bx	lr

023fe688 <_ZNKSt9type_infoeqERKS_>:
 23fe688:	4281      	cmp	r1, r0
 23fe68a:	b508      	push	{r3, lr}
 23fe68c:	d00e      	beq.n	23fe6ac <_ZNKSt9type_infoeqERKS_+0x24>
 23fe68e:	6840      	ldr	r0, [r0, #4]
 23fe690:	7803      	ldrb	r3, [r0, #0]
 23fe692:	2b2a      	cmp	r3, #42	; 0x2a
 23fe694:	d00c      	beq.n	23fe6b0 <_ZNKSt9type_infoeqERKS_+0x28>
 23fe696:	6849      	ldr	r1, [r1, #4]
 23fe698:	780b      	ldrb	r3, [r1, #0]
 23fe69a:	2b2a      	cmp	r3, #42	; 0x2a
 23fe69c:	bf08      	it	eq
 23fe69e:	3101      	addeq	r1, #1
 23fe6a0:	f7fa f9c2 	bl	23f8a28 <strcmp>
 23fe6a4:	fab0 f080 	clz	r0, r0
 23fe6a8:	0940      	lsrs	r0, r0, #5
 23fe6aa:	bd08      	pop	{r3, pc}
 23fe6ac:	2001      	movs	r0, #1
 23fe6ae:	e7fc      	b.n	23fe6aa <_ZNKSt9type_infoeqERKS_+0x22>
 23fe6b0:	2000      	movs	r0, #0
 23fe6b2:	e7fa      	b.n	23fe6aa <_ZNKSt9type_infoeqERKS_+0x22>

023fe6b4 <atexit>:
 23fe6b4:	2300      	movs	r3, #0
 23fe6b6:	4601      	mov	r1, r0
 23fe6b8:	461a      	mov	r2, r3
 23fe6ba:	4618      	mov	r0, r3
 23fe6bc:	f000 b9bc 	b.w	23fea38 <__register_exitproc>

023fe6c0 <isprint>:
 23fe6c0:	4b02      	ldr	r3, [pc, #8]	; (23fe6cc <isprint+0xc>)
 23fe6c2:	4418      	add	r0, r3
 23fe6c4:	7840      	ldrb	r0, [r0, #1]
 23fe6c6:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fe6ca:	4770      	bx	lr
 23fe6cc:	023ffecd 	.word	0x023ffecd

023fe6d0 <memcpy>:
 23fe6d0:	440a      	add	r2, r1
 23fe6d2:	1e43      	subs	r3, r0, #1
 23fe6d4:	4291      	cmp	r1, r2
 23fe6d6:	d100      	bne.n	23fe6da <memcpy+0xa>
 23fe6d8:	4770      	bx	lr
 23fe6da:	b510      	push	{r4, lr}
 23fe6dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe6e0:	4291      	cmp	r1, r2
 23fe6e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fe6e6:	d1f9      	bne.n	23fe6dc <memcpy+0xc>
 23fe6e8:	bd10      	pop	{r4, pc}

023fe6ea <memmove>:
 23fe6ea:	4288      	cmp	r0, r1
 23fe6ec:	b510      	push	{r4, lr}
 23fe6ee:	eb01 0402 	add.w	r4, r1, r2
 23fe6f2:	d902      	bls.n	23fe6fa <memmove+0x10>
 23fe6f4:	4284      	cmp	r4, r0
 23fe6f6:	4623      	mov	r3, r4
 23fe6f8:	d807      	bhi.n	23fe70a <memmove+0x20>
 23fe6fa:	1e43      	subs	r3, r0, #1
 23fe6fc:	42a1      	cmp	r1, r4
 23fe6fe:	d008      	beq.n	23fe712 <memmove+0x28>
 23fe700:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fe704:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fe708:	e7f8      	b.n	23fe6fc <memmove+0x12>
 23fe70a:	4402      	add	r2, r0
 23fe70c:	4601      	mov	r1, r0
 23fe70e:	428a      	cmp	r2, r1
 23fe710:	d100      	bne.n	23fe714 <memmove+0x2a>
 23fe712:	bd10      	pop	{r4, pc}
 23fe714:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fe718:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fe71c:	e7f7      	b.n	23fe70e <memmove+0x24>

023fe71e <memset>:
 23fe71e:	4402      	add	r2, r0
 23fe720:	4603      	mov	r3, r0
 23fe722:	4293      	cmp	r3, r2
 23fe724:	d100      	bne.n	23fe728 <memset+0xa>
 23fe726:	4770      	bx	lr
 23fe728:	f803 1b01 	strb.w	r1, [r3], #1
 23fe72c:	e7f9      	b.n	23fe722 <memset+0x4>
	...

023fe730 <srand>:
 23fe730:	b538      	push	{r3, r4, r5, lr}
 23fe732:	4b10      	ldr	r3, [pc, #64]	; (23fe774 <srand+0x44>)
 23fe734:	4604      	mov	r4, r0
 23fe736:	681d      	ldr	r5, [r3, #0]
 23fe738:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe73a:	b9b3      	cbnz	r3, 23fe76a <srand+0x3a>
 23fe73c:	2018      	movs	r0, #24
 23fe73e:	f7fc ff49 	bl	23fb5d4 <malloc>
 23fe742:	4602      	mov	r2, r0
 23fe744:	63a8      	str	r0, [r5, #56]	; 0x38
 23fe746:	b920      	cbnz	r0, 23fe752 <srand+0x22>
 23fe748:	4b0b      	ldr	r3, [pc, #44]	; (23fe778 <srand+0x48>)
 23fe74a:	2142      	movs	r1, #66	; 0x42
 23fe74c:	480b      	ldr	r0, [pc, #44]	; (23fe77c <srand+0x4c>)
 23fe74e:	f7fc ffa3 	bl	23fb698 <__assert_func>
 23fe752:	490b      	ldr	r1, [pc, #44]	; (23fe780 <srand+0x50>)
 23fe754:	4b0b      	ldr	r3, [pc, #44]	; (23fe784 <srand+0x54>)
 23fe756:	e9c0 1300 	strd	r1, r3, [r0]
 23fe75a:	4b0b      	ldr	r3, [pc, #44]	; (23fe788 <srand+0x58>)
 23fe75c:	2100      	movs	r1, #0
 23fe75e:	6083      	str	r3, [r0, #8]
 23fe760:	230b      	movs	r3, #11
 23fe762:	8183      	strh	r3, [r0, #12]
 23fe764:	2001      	movs	r0, #1
 23fe766:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fe76a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe76c:	2200      	movs	r2, #0
 23fe76e:	611c      	str	r4, [r3, #16]
 23fe770:	615a      	str	r2, [r3, #20]
 23fe772:	bd38      	pop	{r3, r4, r5, pc}
 23fe774:	1007ad48 	.word	0x1007ad48
 23fe778:	023ffe39 	.word	0x023ffe39
 23fe77c:	023ffe50 	.word	0x023ffe50
 23fe780:	abcd330e 	.word	0xabcd330e
 23fe784:	e66d1234 	.word	0xe66d1234
 23fe788:	0005deec 	.word	0x0005deec

023fe78c <strchr>:
 23fe78c:	b2c9      	uxtb	r1, r1
 23fe78e:	4603      	mov	r3, r0
 23fe790:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fe794:	b11a      	cbz	r2, 23fe79e <strchr+0x12>
 23fe796:	428a      	cmp	r2, r1
 23fe798:	d1f9      	bne.n	23fe78e <strchr+0x2>
 23fe79a:	4618      	mov	r0, r3
 23fe79c:	4770      	bx	lr
 23fe79e:	2900      	cmp	r1, #0
 23fe7a0:	bf18      	it	ne
 23fe7a2:	2300      	movne	r3, #0
 23fe7a4:	e7f9      	b.n	23fe79a <strchr+0xe>

023fe7a6 <strchrnul>:
 23fe7a6:	b510      	push	{r4, lr}
 23fe7a8:	4604      	mov	r4, r0
 23fe7aa:	f7ff ffef 	bl	23fe78c <strchr>
 23fe7ae:	b918      	cbnz	r0, 23fe7b8 <strchrnul+0x12>
 23fe7b0:	4620      	mov	r0, r4
 23fe7b2:	f7fa f943 	bl	23f8a3c <strlen>
 23fe7b6:	4420      	add	r0, r4
 23fe7b8:	bd10      	pop	{r4, pc}

023fe7ba <strcpy>:
 23fe7ba:	4603      	mov	r3, r0
 23fe7bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fe7c0:	f803 2b01 	strb.w	r2, [r3], #1
 23fe7c4:	2a00      	cmp	r2, #0
 23fe7c6:	d1f9      	bne.n	23fe7bc <strcpy+0x2>
 23fe7c8:	4770      	bx	lr
	...

023fe7cc <strdup>:
 23fe7cc:	4b02      	ldr	r3, [pc, #8]	; (23fe7d8 <strdup+0xc>)
 23fe7ce:	4601      	mov	r1, r0
 23fe7d0:	6818      	ldr	r0, [r3, #0]
 23fe7d2:	f000 b803 	b.w	23fe7dc <_strdup_r>
 23fe7d6:	bf00      	nop
 23fe7d8:	1007ad48 	.word	0x1007ad48

023fe7dc <_strdup_r>:
 23fe7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe7de:	4604      	mov	r4, r0
 23fe7e0:	4608      	mov	r0, r1
 23fe7e2:	460d      	mov	r5, r1
 23fe7e4:	f7fa f92a 	bl	23f8a3c <strlen>
 23fe7e8:	1c42      	adds	r2, r0, #1
 23fe7ea:	4620      	mov	r0, r4
 23fe7ec:	4611      	mov	r1, r2
 23fe7ee:	9201      	str	r2, [sp, #4]
 23fe7f0:	f7fc ff36 	bl	23fb660 <_malloc_r>
 23fe7f4:	4604      	mov	r4, r0
 23fe7f6:	b118      	cbz	r0, 23fe800 <_strdup_r+0x24>
 23fe7f8:	9a01      	ldr	r2, [sp, #4]
 23fe7fa:	4629      	mov	r1, r5
 23fe7fc:	f7ff ff68 	bl	23fe6d0 <memcpy>
 23fe800:	4620      	mov	r0, r4
 23fe802:	b003      	add	sp, #12
 23fe804:	bd30      	pop	{r4, r5, pc}

023fe806 <strncmp>:
 23fe806:	b510      	push	{r4, lr}
 23fe808:	b17a      	cbz	r2, 23fe82a <strncmp+0x24>
 23fe80a:	4603      	mov	r3, r0
 23fe80c:	3901      	subs	r1, #1
 23fe80e:	1884      	adds	r4, r0, r2
 23fe810:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe814:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fe818:	4290      	cmp	r0, r2
 23fe81a:	d101      	bne.n	23fe820 <strncmp+0x1a>
 23fe81c:	42a3      	cmp	r3, r4
 23fe81e:	d101      	bne.n	23fe824 <strncmp+0x1e>
 23fe820:	1a80      	subs	r0, r0, r2
 23fe822:	bd10      	pop	{r4, pc}
 23fe824:	2800      	cmp	r0, #0
 23fe826:	d1f3      	bne.n	23fe810 <strncmp+0xa>
 23fe828:	e7fa      	b.n	23fe820 <strncmp+0x1a>
 23fe82a:	4610      	mov	r0, r2
 23fe82c:	e7f9      	b.n	23fe822 <strncmp+0x1c>

023fe82e <strrchr>:
 23fe82e:	b538      	push	{r3, r4, r5, lr}
 23fe830:	4603      	mov	r3, r0
 23fe832:	460c      	mov	r4, r1
 23fe834:	b969      	cbnz	r1, 23fe852 <strrchr+0x24>
 23fe836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fe83a:	f7ff bfa7 	b.w	23fe78c <strchr>
 23fe83e:	1c43      	adds	r3, r0, #1
 23fe840:	4605      	mov	r5, r0
 23fe842:	4621      	mov	r1, r4
 23fe844:	4618      	mov	r0, r3
 23fe846:	f7ff ffa1 	bl	23fe78c <strchr>
 23fe84a:	2800      	cmp	r0, #0
 23fe84c:	d1f7      	bne.n	23fe83e <strrchr+0x10>
 23fe84e:	4628      	mov	r0, r5
 23fe850:	bd38      	pop	{r3, r4, r5, pc}
 23fe852:	2500      	movs	r5, #0
 23fe854:	e7f5      	b.n	23fe842 <strrchr+0x14>
	...

023fe858 <_strtol_l.constprop.0>:
 23fe858:	2b01      	cmp	r3, #1
 23fe85a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe85e:	d001      	beq.n	23fe864 <_strtol_l.constprop.0+0xc>
 23fe860:	2b24      	cmp	r3, #36	; 0x24
 23fe862:	d906      	bls.n	23fe872 <_strtol_l.constprop.0+0x1a>
 23fe864:	f7fc ff0a 	bl	23fb67c <__errno>
 23fe868:	2316      	movs	r3, #22
 23fe86a:	6003      	str	r3, [r0, #0]
 23fe86c:	2000      	movs	r0, #0
 23fe86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe872:	460d      	mov	r5, r1
 23fe874:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fe958 <_strtol_l.constprop.0+0x100>
 23fe878:	462e      	mov	r6, r5
 23fe87a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fe87e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fe882:	f017 0708 	ands.w	r7, r7, #8
 23fe886:	d1f7      	bne.n	23fe878 <_strtol_l.constprop.0+0x20>
 23fe888:	2c2d      	cmp	r4, #45	; 0x2d
 23fe88a:	d132      	bne.n	23fe8f2 <_strtol_l.constprop.0+0x9a>
 23fe88c:	782c      	ldrb	r4, [r5, #0]
 23fe88e:	2701      	movs	r7, #1
 23fe890:	1cb5      	adds	r5, r6, #2
 23fe892:	2b00      	cmp	r3, #0
 23fe894:	d05b      	beq.n	23fe94e <_strtol_l.constprop.0+0xf6>
 23fe896:	2b10      	cmp	r3, #16
 23fe898:	d109      	bne.n	23fe8ae <_strtol_l.constprop.0+0x56>
 23fe89a:	2c30      	cmp	r4, #48	; 0x30
 23fe89c:	d107      	bne.n	23fe8ae <_strtol_l.constprop.0+0x56>
 23fe89e:	782c      	ldrb	r4, [r5, #0]
 23fe8a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fe8a4:	2c58      	cmp	r4, #88	; 0x58
 23fe8a6:	d14d      	bne.n	23fe944 <_strtol_l.constprop.0+0xec>
 23fe8a8:	786c      	ldrb	r4, [r5, #1]
 23fe8aa:	2310      	movs	r3, #16
 23fe8ac:	3502      	adds	r5, #2
 23fe8ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fe8b2:	f04f 0c00 	mov.w	ip, #0
 23fe8b6:	f108 38ff 	add.w	r8, r8, #4294967295
 23fe8ba:	4666      	mov	r6, ip
 23fe8bc:	fbb8 f9f3 	udiv	r9, r8, r3
 23fe8c0:	fb03 8a19 	mls	sl, r3, r9, r8
 23fe8c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fe8c8:	f1be 0f09 	cmp.w	lr, #9
 23fe8cc:	d816      	bhi.n	23fe8fc <_strtol_l.constprop.0+0xa4>
 23fe8ce:	4674      	mov	r4, lr
 23fe8d0:	42a3      	cmp	r3, r4
 23fe8d2:	dd24      	ble.n	23fe91e <_strtol_l.constprop.0+0xc6>
 23fe8d4:	f1bc 0f00 	cmp.w	ip, #0
 23fe8d8:	db1e      	blt.n	23fe918 <_strtol_l.constprop.0+0xc0>
 23fe8da:	45b1      	cmp	r9, r6
 23fe8dc:	d31c      	bcc.n	23fe918 <_strtol_l.constprop.0+0xc0>
 23fe8de:	d101      	bne.n	23fe8e4 <_strtol_l.constprop.0+0x8c>
 23fe8e0:	45a2      	cmp	sl, r4
 23fe8e2:	db19      	blt.n	23fe918 <_strtol_l.constprop.0+0xc0>
 23fe8e4:	fb06 4603 	mla	r6, r6, r3, r4
 23fe8e8:	f04f 0c01 	mov.w	ip, #1
 23fe8ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fe8f0:	e7e8      	b.n	23fe8c4 <_strtol_l.constprop.0+0x6c>
 23fe8f2:	2c2b      	cmp	r4, #43	; 0x2b
 23fe8f4:	bf04      	itt	eq
 23fe8f6:	782c      	ldrbeq	r4, [r5, #0]
 23fe8f8:	1cb5      	addeq	r5, r6, #2
 23fe8fa:	e7ca      	b.n	23fe892 <_strtol_l.constprop.0+0x3a>
 23fe8fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fe900:	f1be 0f19 	cmp.w	lr, #25
 23fe904:	d801      	bhi.n	23fe90a <_strtol_l.constprop.0+0xb2>
 23fe906:	3c37      	subs	r4, #55	; 0x37
 23fe908:	e7e2      	b.n	23fe8d0 <_strtol_l.constprop.0+0x78>
 23fe90a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fe90e:	f1be 0f19 	cmp.w	lr, #25
 23fe912:	d804      	bhi.n	23fe91e <_strtol_l.constprop.0+0xc6>
 23fe914:	3c57      	subs	r4, #87	; 0x57
 23fe916:	e7db      	b.n	23fe8d0 <_strtol_l.constprop.0+0x78>
 23fe918:	f04f 3cff 	mov.w	ip, #4294967295
 23fe91c:	e7e6      	b.n	23fe8ec <_strtol_l.constprop.0+0x94>
 23fe91e:	f1bc 0f00 	cmp.w	ip, #0
 23fe922:	da05      	bge.n	23fe930 <_strtol_l.constprop.0+0xd8>
 23fe924:	2322      	movs	r3, #34	; 0x22
 23fe926:	4646      	mov	r6, r8
 23fe928:	6003      	str	r3, [r0, #0]
 23fe92a:	b942      	cbnz	r2, 23fe93e <_strtol_l.constprop.0+0xe6>
 23fe92c:	4630      	mov	r0, r6
 23fe92e:	e79e      	b.n	23fe86e <_strtol_l.constprop.0+0x16>
 23fe930:	b107      	cbz	r7, 23fe934 <_strtol_l.constprop.0+0xdc>
 23fe932:	4276      	negs	r6, r6
 23fe934:	2a00      	cmp	r2, #0
 23fe936:	d0f9      	beq.n	23fe92c <_strtol_l.constprop.0+0xd4>
 23fe938:	f1bc 0f00 	cmp.w	ip, #0
 23fe93c:	d000      	beq.n	23fe940 <_strtol_l.constprop.0+0xe8>
 23fe93e:	1e69      	subs	r1, r5, #1
 23fe940:	6011      	str	r1, [r2, #0]
 23fe942:	e7f3      	b.n	23fe92c <_strtol_l.constprop.0+0xd4>
 23fe944:	2430      	movs	r4, #48	; 0x30
 23fe946:	2b00      	cmp	r3, #0
 23fe948:	d1b1      	bne.n	23fe8ae <_strtol_l.constprop.0+0x56>
 23fe94a:	2308      	movs	r3, #8
 23fe94c:	e7af      	b.n	23fe8ae <_strtol_l.constprop.0+0x56>
 23fe94e:	2c30      	cmp	r4, #48	; 0x30
 23fe950:	d0a5      	beq.n	23fe89e <_strtol_l.constprop.0+0x46>
 23fe952:	230a      	movs	r3, #10
 23fe954:	e7ab      	b.n	23fe8ae <_strtol_l.constprop.0+0x56>
 23fe956:	bf00      	nop
 23fe958:	023ffece 	.word	0x023ffece

023fe95c <strtol>:
 23fe95c:	4613      	mov	r3, r2
 23fe95e:	460a      	mov	r2, r1
 23fe960:	4601      	mov	r1, r0
 23fe962:	4802      	ldr	r0, [pc, #8]	; (23fe96c <strtol+0x10>)
 23fe964:	6800      	ldr	r0, [r0, #0]
 23fe966:	f7ff bf77 	b.w	23fe858 <_strtol_l.constprop.0>
 23fe96a:	bf00      	nop
 23fe96c:	1007ad48 	.word	0x1007ad48

023fe970 <close>:
 23fe970:	4b02      	ldr	r3, [pc, #8]	; (23fe97c <close+0xc>)
 23fe972:	4601      	mov	r1, r0
 23fe974:	6818      	ldr	r0, [r3, #0]
 23fe976:	f000 b8c3 	b.w	23feb00 <_close_r>
 23fe97a:	bf00      	nop
 23fe97c:	1007ad48 	.word	0x1007ad48

023fe980 <lseek>:
 23fe980:	4613      	mov	r3, r2
 23fe982:	460a      	mov	r2, r1
 23fe984:	4601      	mov	r1, r0
 23fe986:	4802      	ldr	r0, [pc, #8]	; (23fe990 <lseek+0x10>)
 23fe988:	6800      	ldr	r0, [r0, #0]
 23fe98a:	f000 b8cd 	b.w	23feb28 <_lseek_r>
 23fe98e:	bf00      	nop
 23fe990:	1007ad48 	.word	0x1007ad48

023fe994 <open>:
 23fe994:	b40e      	push	{r1, r2, r3}
 23fe996:	b503      	push	{r0, r1, lr}
 23fe998:	ab03      	add	r3, sp, #12
 23fe99a:	4601      	mov	r1, r0
 23fe99c:	4806      	ldr	r0, [pc, #24]	; (23fe9b8 <open+0x24>)
 23fe99e:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe9a2:	6800      	ldr	r0, [r0, #0]
 23fe9a4:	9301      	str	r3, [sp, #4]
 23fe9a6:	9b04      	ldr	r3, [sp, #16]
 23fe9a8:	f000 f8d0 	bl	23feb4c <_open_r>
 23fe9ac:	b002      	add	sp, #8
 23fe9ae:	f85d eb04 	ldr.w	lr, [sp], #4
 23fe9b2:	b003      	add	sp, #12
 23fe9b4:	4770      	bx	lr
 23fe9b6:	bf00      	nop
 23fe9b8:	1007ad48 	.word	0x1007ad48

023fe9bc <read>:
 23fe9bc:	4613      	mov	r3, r2
 23fe9be:	460a      	mov	r2, r1
 23fe9c0:	4601      	mov	r1, r0
 23fe9c2:	4802      	ldr	r0, [pc, #8]	; (23fe9cc <read+0x10>)
 23fe9c4:	6800      	ldr	r0, [r0, #0]
 23fe9c6:	f000 b8d3 	b.w	23feb70 <_read_r>
 23fe9ca:	bf00      	nop
 23fe9cc:	1007ad48 	.word	0x1007ad48

023fe9d0 <unlink>:
 23fe9d0:	4b02      	ldr	r3, [pc, #8]	; (23fe9dc <unlink+0xc>)
 23fe9d2:	4601      	mov	r1, r0
 23fe9d4:	6818      	ldr	r0, [r3, #0]
 23fe9d6:	f000 b80d 	b.w	23fe9f4 <_unlink_r>
 23fe9da:	bf00      	nop
 23fe9dc:	1007ad48 	.word	0x1007ad48

023fe9e0 <write>:
 23fe9e0:	4613      	mov	r3, r2
 23fe9e2:	460a      	mov	r2, r1
 23fe9e4:	4601      	mov	r1, r0
 23fe9e6:	4802      	ldr	r0, [pc, #8]	; (23fe9f0 <write+0x10>)
 23fe9e8:	6800      	ldr	r0, [r0, #0]
 23fe9ea:	f000 b813 	b.w	23fea14 <_write_r>
 23fe9ee:	bf00      	nop
 23fe9f0:	1007ad48 	.word	0x1007ad48

023fe9f4 <_unlink_r>:
 23fe9f4:	b538      	push	{r3, r4, r5, lr}
 23fe9f6:	2300      	movs	r3, #0
 23fe9f8:	4d05      	ldr	r5, [pc, #20]	; (23fea10 <_unlink_r+0x1c>)
 23fe9fa:	4604      	mov	r4, r0
 23fe9fc:	4608      	mov	r0, r1
 23fe9fe:	602b      	str	r3, [r5, #0]
 23fea00:	f7fc f95e 	bl	23facc0 <_unlink>
 23fea04:	1c43      	adds	r3, r0, #1
 23fea06:	d102      	bne.n	23fea0e <_unlink_r+0x1a>
 23fea08:	682b      	ldr	r3, [r5, #0]
 23fea0a:	b103      	cbz	r3, 23fea0e <_unlink_r+0x1a>
 23fea0c:	6023      	str	r3, [r4, #0]
 23fea0e:	bd38      	pop	{r3, r4, r5, pc}
 23fea10:	1007afe4 	.word	0x1007afe4

023fea14 <_write_r>:
 23fea14:	b538      	push	{r3, r4, r5, lr}
 23fea16:	4604      	mov	r4, r0
 23fea18:	4d06      	ldr	r5, [pc, #24]	; (23fea34 <_write_r+0x20>)
 23fea1a:	4608      	mov	r0, r1
 23fea1c:	4611      	mov	r1, r2
 23fea1e:	2200      	movs	r2, #0
 23fea20:	602a      	str	r2, [r5, #0]
 23fea22:	461a      	mov	r2, r3
 23fea24:	f7fc f914 	bl	23fac50 <_write>
 23fea28:	1c43      	adds	r3, r0, #1
 23fea2a:	d102      	bne.n	23fea32 <_write_r+0x1e>
 23fea2c:	682b      	ldr	r3, [r5, #0]
 23fea2e:	b103      	cbz	r3, 23fea32 <_write_r+0x1e>
 23fea30:	6023      	str	r3, [r4, #0]
 23fea32:	bd38      	pop	{r3, r4, r5, pc}
 23fea34:	1007afe4 	.word	0x1007afe4

023fea38 <__register_exitproc>:
 23fea38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fea3c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23feafc <__register_exitproc+0xc4>
 23fea40:	4606      	mov	r6, r0
 23fea42:	461f      	mov	r7, r3
 23fea44:	460d      	mov	r5, r1
 23fea46:	f8d8 0000 	ldr.w	r0, [r8]
 23fea4a:	4691      	mov	r9, r2
 23fea4c:	f000 f868 	bl	23feb20 <__retarget_lock_acquire_recursive>
 23fea50:	4b26      	ldr	r3, [pc, #152]	; (23feaec <__register_exitproc+0xb4>)
 23fea52:	681c      	ldr	r4, [r3, #0]
 23fea54:	b934      	cbnz	r4, 23fea64 <__register_exitproc+0x2c>
 23fea56:	4c26      	ldr	r4, [pc, #152]	; (23feaf0 <__register_exitproc+0xb8>)
 23fea58:	601c      	str	r4, [r3, #0]
 23fea5a:	4b26      	ldr	r3, [pc, #152]	; (23feaf4 <__register_exitproc+0xbc>)
 23fea5c:	b113      	cbz	r3, 23fea64 <__register_exitproc+0x2c>
 23fea5e:	681b      	ldr	r3, [r3, #0]
 23fea60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fea64:	6863      	ldr	r3, [r4, #4]
 23fea66:	2b1f      	cmp	r3, #31
 23fea68:	dd07      	ble.n	23fea7a <__register_exitproc+0x42>
 23fea6a:	f8d8 0000 	ldr.w	r0, [r8]
 23fea6e:	f000 f859 	bl	23feb24 <__retarget_lock_release_recursive>
 23fea72:	f04f 30ff 	mov.w	r0, #4294967295
 23fea76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fea7a:	b35e      	cbz	r6, 23fead4 <__register_exitproc+0x9c>
 23fea7c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fea80:	b988      	cbnz	r0, 23feaa6 <__register_exitproc+0x6e>
 23fea82:	4b1d      	ldr	r3, [pc, #116]	; (23feaf8 <__register_exitproc+0xc0>)
 23fea84:	b923      	cbnz	r3, 23fea90 <__register_exitproc+0x58>
 23fea86:	f8d8 0000 	ldr.w	r0, [r8]
 23fea8a:	f000 f84a 	bl	23feb22 <__retarget_lock_release>
 23fea8e:	e7f0      	b.n	23fea72 <__register_exitproc+0x3a>
 23fea90:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fea94:	f7fc fd9e 	bl	23fb5d4 <malloc>
 23fea98:	2800      	cmp	r0, #0
 23fea9a:	d0f4      	beq.n	23fea86 <__register_exitproc+0x4e>
 23fea9c:	2300      	movs	r3, #0
 23fea9e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23feaa2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23feaa6:	6863      	ldr	r3, [r4, #4]
 23feaa8:	2201      	movs	r2, #1
 23feaaa:	2e02      	cmp	r6, #2
 23feaac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23feab0:	fa02 f203 	lsl.w	r2, r2, r3
 23feab4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23feab8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23feabc:	ea43 0302 	orr.w	r3, r3, r2
 23feac0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23feac4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23feac8:	bf02      	ittt	eq
 23feaca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23feace:	4313      	orreq	r3, r2
 23fead0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fead4:	6863      	ldr	r3, [r4, #4]
 23fead6:	f8d8 0000 	ldr.w	r0, [r8]
 23feada:	1c5a      	adds	r2, r3, #1
 23feadc:	3302      	adds	r3, #2
 23feade:	6062      	str	r2, [r4, #4]
 23feae0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23feae4:	f000 f81e 	bl	23feb24 <__retarget_lock_release_recursive>
 23feae8:	2000      	movs	r0, #0
 23feaea:	e7c4      	b.n	23fea76 <__register_exitproc+0x3e>
 23feaec:	1007afdc 	.word	0x1007afdc
 23feaf0:	1007af50 	.word	0x1007af50
 23feaf4:	00000000 	.word	0x00000000
 23feaf8:	023fb5d5 	.word	0x023fb5d5
 23feafc:	1007adac 	.word	0x1007adac

023feb00 <_close_r>:
 23feb00:	b538      	push	{r3, r4, r5, lr}
 23feb02:	2300      	movs	r3, #0
 23feb04:	4d05      	ldr	r5, [pc, #20]	; (23feb1c <_close_r+0x1c>)
 23feb06:	4604      	mov	r4, r0
 23feb08:	4608      	mov	r0, r1
 23feb0a:	602b      	str	r3, [r5, #0]
 23feb0c:	f7fc f8bc 	bl	23fac88 <_close>
 23feb10:	1c43      	adds	r3, r0, #1
 23feb12:	d102      	bne.n	23feb1a <_close_r+0x1a>
 23feb14:	682b      	ldr	r3, [r5, #0]
 23feb16:	b103      	cbz	r3, 23feb1a <_close_r+0x1a>
 23feb18:	6023      	str	r3, [r4, #0]
 23feb1a:	bd38      	pop	{r3, r4, r5, pc}
 23feb1c:	1007afe4 	.word	0x1007afe4

023feb20 <__retarget_lock_acquire_recursive>:
 23feb20:	4770      	bx	lr

023feb22 <__retarget_lock_release>:
 23feb22:	4770      	bx	lr

023feb24 <__retarget_lock_release_recursive>:
 23feb24:	4770      	bx	lr
	...

023feb28 <_lseek_r>:
 23feb28:	b538      	push	{r3, r4, r5, lr}
 23feb2a:	4604      	mov	r4, r0
 23feb2c:	4d06      	ldr	r5, [pc, #24]	; (23feb48 <_lseek_r+0x20>)
 23feb2e:	4608      	mov	r0, r1
 23feb30:	4611      	mov	r1, r2
 23feb32:	2200      	movs	r2, #0
 23feb34:	602a      	str	r2, [r5, #0]
 23feb36:	461a      	mov	r2, r3
 23feb38:	f7fc f8b4 	bl	23faca4 <_lseek>
 23feb3c:	1c43      	adds	r3, r0, #1
 23feb3e:	d102      	bne.n	23feb46 <_lseek_r+0x1e>
 23feb40:	682b      	ldr	r3, [r5, #0]
 23feb42:	b103      	cbz	r3, 23feb46 <_lseek_r+0x1e>
 23feb44:	6023      	str	r3, [r4, #0]
 23feb46:	bd38      	pop	{r3, r4, r5, pc}
 23feb48:	1007afe4 	.word	0x1007afe4

023feb4c <_open_r>:
 23feb4c:	b538      	push	{r3, r4, r5, lr}
 23feb4e:	4604      	mov	r4, r0
 23feb50:	4d06      	ldr	r5, [pc, #24]	; (23feb6c <_open_r+0x20>)
 23feb52:	4608      	mov	r0, r1
 23feb54:	4611      	mov	r1, r2
 23feb56:	2200      	movs	r2, #0
 23feb58:	602a      	str	r2, [r5, #0]
 23feb5a:	461a      	mov	r2, r3
 23feb5c:	f7fc f86a 	bl	23fac34 <_open>
 23feb60:	1c43      	adds	r3, r0, #1
 23feb62:	d102      	bne.n	23feb6a <_open_r+0x1e>
 23feb64:	682b      	ldr	r3, [r5, #0]
 23feb66:	b103      	cbz	r3, 23feb6a <_open_r+0x1e>
 23feb68:	6023      	str	r3, [r4, #0]
 23feb6a:	bd38      	pop	{r3, r4, r5, pc}
 23feb6c:	1007afe4 	.word	0x1007afe4

023feb70 <_read_r>:
 23feb70:	b538      	push	{r3, r4, r5, lr}
 23feb72:	4604      	mov	r4, r0
 23feb74:	4d06      	ldr	r5, [pc, #24]	; (23feb90 <_read_r+0x20>)
 23feb76:	4608      	mov	r0, r1
 23feb78:	4611      	mov	r1, r2
 23feb7a:	2200      	movs	r2, #0
 23feb7c:	602a      	str	r2, [r5, #0]
 23feb7e:	461a      	mov	r2, r3
 23feb80:	f7fc f874 	bl	23fac6c <_read>
 23feb84:	1c43      	adds	r3, r0, #1
 23feb86:	d102      	bne.n	23feb8e <_read_r+0x1e>
 23feb88:	682b      	ldr	r3, [r5, #0]
 23feb8a:	b103      	cbz	r3, 23feb8e <_read_r+0x1e>
 23feb8c:	6023      	str	r3, [r4, #0]
 23feb8e:	bd38      	pop	{r3, r4, r5, pc}
 23feb90:	1007afe4 	.word	0x1007afe4

023feb94 <dynalib_user>:
 23feb94:	023f8a4d 023f8a75 023f8a79 00000000     M.?.u.?.y.?.....
 23feba4:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23febb4:	6c617574 61726400 69622077 70616d74     tual.draw bitmap
 23febc4:	61747320 41007472 55425f44 4e4f5454      start.AD_BUTTON
 23febd4:	4552505f 71005353 646f6372 6d622e65     _PRESS.qrcode.bm
 23febe4:	69440070 6e617473 28206563 20296d6d     p.Distance (mm) 
 23febf4:	6425203d 6e655300 676e6964 20646120     = %d.Sending ad 
 23fec04:	72706d69 69737365 41006e6f 4d495f44     impression.AD_IM
 23fec14:	53455250 4e4f4953 63657600 3a726f74     PRESSION.vector:
 23fec24:	5f4d5f3a 6c616572 5f636f6c 65736e69     :_M_realloc_inse
 23fec34:	2f007472 65704f00 2064656e 3d726964     rt./.Opened dir=
 23fec44:	43006425 65736f6c 69642064 64610072     %d.Closed dir.ad
 23fec54:	6c696620 616e2065 2073656d 676e656c      file names leng
 23fec64:	3d206874 00642520 6e756f46 73612064     th = %d.Found as
 23fec74:	20746573 61007325 6f470064 64662074     set %s.ad.Got fd
 23fec84:	0064253d 736f6c43 66206465 64253d64     =%d.Closed fd=%d
 23fec94:	61745300 6e697472 73612067 73746573     .Starting assets
 23feca4:	61766120 62616c69 253d656c 4c560064      available=%d.VL
 23fecb4:	314c3335 61662058 64656c69 206f7420     53L1X failed to 
 23fecc4:	74696e69 00000000                       init....

023feccc <_ZTVN5spark10LogHandlerE>:
	...
 23fecdc:	023f8a99 023f8ac1                       ..?...?.

023fece4 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fecec:	023f8ad1 023f8b05 023fcde1 023fcf89     ..?...?...?...?.

023fecfc <_ZTV16Adafruit_SSD1351>:
 23fecfc:	0000000c 00000000 00000000 023f9bf1     ..............?.
 23fed0c:	023f9969 023f98c7 023f977b 023f927d     i.?...?.{.?.}.?.
 23fed1c:	023f92b1 00000000 00000000 fffffff4     ..?.............
	...
 23fed34:	fffffff4 fffffff4 00000000 fffffff4     ................
	...
 23fed4c:	fffffff4 fffffff4 00000000 023f9291     ..............?.
 23fed5c:	023f92d1 023f9e63 023fbd81 023f9c93     ..?.c.?...?...?.
 23fed6c:	023f9cb3 023f9957 023f99f9 023f9d71     ..?.W.?...?.q.?.
 23fed7c:	023f9e0f 023f9791 023f9e61 023fa23b     ..?...?.a.?.;.?.

023fed8c <_ZTV12Adafruit_GFX>:
	...
 23fed9c:	023f9e63 023fbd81 023f8a99 023f9cb3     c.?...?...?...?.
 23fedac:	023f9dd9 023f9df5 023f9d71 023f9e0f     ..?...?.q.?...?.
 23fedbc:	023f9e45 023f9e61 023fa23b              E.?.a.?.;.?.

023fedc8 <glcdfontBitmaps>:
 23fedc8:	0000ff00 00000000 f8700000 88d8f8a8     ..........p.....
 23fedd8:	f8700070 d888f8a8 50000070 70f8f8f8     p.p.....p..P...p
 23fede8:	20000020 70f8f870 50700020 20f8a8f8      .. p..p .pP... 
 23fedf8:	70200070 20f8f8f8 00000070 20707020     p. p... p... pp 
 23fee08:	f8f80000 d88888d8 0000f8f8 20505020     ............ PP 
 23fee18:	f8f80000 d8a8a8d8 3800f8f8 a0a06818     ...........8.h..
 23fee28:	88700040 f8207088 48780020 40404078     @.p..p . .xHx@@@
 23fee38:	487800c0 58484878 a82000c0 70d8d870     ..xHxHHX.. .p..p
 23fee48:	c08020a8 c0f0f8f0 18080080 1878f878     . ..........x.x.
 23fee58:	70200008 70a820a8 d8d80020 00d8d8d8     .. p. .p .......
 23fee68:	a87800d8 282868a8 48300028 48102850     ..x..h(((.0HP(.H
 23fee78:	00003048 f8000000 702000f8 70a820a8     H0........ p. .p
 23fee88:	2000f820 2020a870 20000020 70a82020      .. p.   ..   .p
 23fee98:	20000020 2010f810 20000000 2040f840      .. ... ... @.@ 
 23feea8:	80000000 00f88080 50000000 0050f8f8     ...........P..P.
 23feeb8:	20000000 f8f87020 f8000000 202070f8     ...  p.......p  
	...
 23feed0:	20200000 00202020 50500020 00000050     ..     . .PPP...
 23feee0:	50500000 50f850f8 78200050 f02870a0     ..PP.P.PP. x.p(.
 23feef0:	c8c00020 98402010 a0400018 90a840a0      .... @...@..@..
 23fef00:	30300068 00004020 20100000 20404040     h.00 @..... @@@ 
 23fef10:	20400010 20101010 a8200040 a870f870     ..@ ... @. .p.p.
 23fef20:	20000020 2020f820 00000000 30300000      ..  .  ......00
 23fef30:	00004020 0000f800 00000000 30000000      @.............0
 23fef40:	08000030 80402010 88700000 88c8a898     0.... @...p.....
 23fef50:	60200070 20202020 88700070 80807008     p. `    p.p..p..
 23fef60:	08f800f8 88083010 30100070 10f89050     .....0..p..0P...
 23fef70:	80f80010 880808f0 40380070 8888f080     ........p.8@....
 23fef80:	08f80070 40201008 88700080 88887088     p..... @..p..p..
 23fef90:	88700070 10087888 000000e0 00200020     p.p..x...... . .
 23fefa0:	00000000 20200020 10080040 10204020     .... .  @... @ .
 23fefb0:	00000008 00f800f8 20400000 20100810     ..........@ ... 
 23fefc0:	88700040 00203008 88700020 80b0b8a8     @.p..0 . .p.....
 23fefd0:	50200078 88f88888 88f00088 8888f088     x. P............
 23fefe0:	887000f0 88808080 88f00070 88888888     ..p.....p.......
 23feff0:	80f800f0 8080f080 80f800f8 8080f080     ................
 23ff000:	88780080 88988080 88880078 8888f888     ..x.....x.......
 23ff010:	20700088 20202020 10380070 90101010     ..p     p.8.....
 23ff020:	90880060 90a0c0a0 80800088 80808080     `...............
 23ff030:	d88800f8 88a8a8a8 88880088 8898a8c8     ................
 23ff040:	88700088 88888888 88f00070 8080f088     ..p.....p.......
 23ff050:	88700080 90a88888 88f00068 90a0f088     ..p.....h.......
 23ff060:	88700088 88087080 a8f80070 20202020     ..p..p..p...    
 23ff070:	88880020 88888888 88880070 50888888      .......p......P
 23ff080:	88880020 a8a8a888 88880050 88502050      .......P...P P.
 23ff090:	88880088 20202050 08f80020 80407010     ....P    ....p@.
 23ff0a0:	407800f8 40404040 80000078 08102040     ..x@@@@@x...@ ..
 23ff0b0:	08780000 08080808 50200078 00000088     ..x.....x. P....
	...
 23ff0c8:	606000f8 00001020 00000000 90701060     ..`` .......`.p.
 23ff0d8:	80800078 c888c8b0 000000b0 88808870     x...........p...
 23ff0e8:	08080070 98889868 00000068 80f88870     p...h...h...p...
 23ff0f8:	28100070 20207020 00000020 68989870     p..( p   ...p..h
 23ff108:	80807008 8888c8b0 00200088 20202060     .p........ .`   
 23ff118:	00100070 90101010 80800060 a0c0a090     p.......`.......
 23ff128:	20600090 20202020 00000070 a8a8a8d0     ..`     p.......
 23ff138:	000000a8 8888c8b0 00000088 88888870     ............p...
 23ff148:	00000070 b0c8c8b0 00008080 68989868     p...........h..h
 23ff158:	00000808 8080c8b0 00000080 08708078     ............x.p.
 23ff168:	202000f0 282020f8 00000010 98888888     ..  .  (........
 23ff178:	00000068 50888888 00000020 a8a88888     h......P .......
 23ff188:	00000050 50205088 00000088 08788888     P....P P......x.
 23ff198:	00007088 402010f8 201000f8 20204020     .p.... @...  @  
 23ff1a8:	20200010 20200020 20400020 20201020     ..   .   .@  .  
 23ff1b8:	a8400040 00000010 70200000 f88888d8     @.@....... p....
 23ff1c8:	88700000 70888080 88006010 98888800     ..p....p.`......
 23ff1d8:	00180068 80f88870 00f80078 90701060     h...p...x...`.p.
 23ff1e8:	00880078 90701060 00c00078 90701060     x...`.p.x...`.p.
 23ff1f8:	00300078 90701060 78000078 1078c0c0     x.0.`.p.x..x..x.
 23ff208:	00f80030 80f88870 00880078 80f88870     0...p...x...p...
 23ff218:	00c00078 80f88870 00280078 10101030     x...p...x.(.0...
 23ff228:	48300038 10101030 00600038 10101030     8.0H0...8.`.0...
 23ff238:	00500038 f8885020 00208888 f8885020     8.P. P.... . P..
 23ff248:	00308888 80e080f0 000000f0 90781078     ..0.........x.x.
 23ff258:	50380078 9090f890 88700098 88887000     x.8P......p..p..
 23ff268:	88000070 88887000 c0000070 88887000     p....p..p....p..
 23ff278:	88700070 98888800 c0000068 98888800     p.p.....h.......
 23ff288:	00480068 38484848 00887008 88888870     h.H.HHH8.p..p...
 23ff298:	00880070 88888888 20200070 f8a0a0f8     p.......p.  ....
 23ff2a8:	58302020 4840e048 d8d800f8 f820f870       0XH.@H....p. .
 23ff2b8:	90e02020 b890e090 28189090 20207020       .........( p  
 23ff2c8:	0018c0a0 90701060 00180078 10101030     ....`.p.x...0...
 23ff2d8:	18000038 88887000 18000070 98888800     8....p..p.......
 23ff2e8:	78000068 48487000 00f80048 98b8e8c8     h..x.pHHH.......
 23ff2f8:	90700088 f8007890 88700000 f8007088     ..p..x....p..p..
 23ff308:	00200000 88806020 00000070 8080f800     .. . `..p.......
 23ff318:	00000000 0808f800 88800000 9848b890     ..............H.
 23ff328:	88803820 b858a890 20200808 20202000      8....X...  .   
 23ff338:	28000020 2850a050 a0000000 a0502850      ..(P.P(....P(P.
 23ff348:	88200000 88208820 a8508820 a850a850     .. . . . .P.P.P.
 23ff358:	1010a850 10101010 10101010 10f01010     P...............
 23ff368:	10101010 10f010f0 28281010 28e82828     ..........((((.(
 23ff378:	00002828 28f80000 00002828 10f010f0     ((.....(((......
 23ff388:	28281010 28e808e8 28282828 28282828     ..((...(((((((((
 23ff398:	00002828 28e808f8 28282828 00f808e8     ((.....(((((....
 23ff3a8:	28280000 00f82828 10100000 00f010f0     ..((((..........
 23ff3b8:	00000000 10f00000 10101010 00181010     ................
 23ff3c8:	10100000 00f81010 00000000 10f80000     ................
 23ff3d8:	10101010 10181010 00001010 00f80000     ................
 23ff3e8:	10100000 10f81010 10101010 10181018     ................
 23ff3f8:	28281010 28282828 28282828 00382028     ..((((((((((( 8.
 23ff408:	00000000 28282038 28282828 00f800e8     ....8 ((((((....
 23ff418:	00000000 28e800f8 28282828 28282028     .......(((((( ((
 23ff428:	00002828 00f800f8 28280000 28e800e8     ((........((...(
 23ff438:	10102828 00f800f8 28280000 00f82828     ((........((((..
 23ff448:	00000000 10f800f8 00001010 28f80000     ...............(
 23ff458:	28282828 00382828 10100000 00181018     ((((((8.........
 23ff468:	00000000 10181018 00001010 28380000     ..............8(
 23ff478:	28282828 28f82828 10102828 10f810f8     ((((((.(((......
 23ff488:	10101010 00f01010 00000000 10180000     ................
 23ff498:	f8f81010 f8f8f8f8 0000f8f8 f8f80000     ................
 23ff4a8:	e0e0f8f8 e0e0e0e0 1818e0e0 18181818     ................
 23ff4b8:	f8f81818 0000f8f8 00000000 90909068     ............h...
 23ff4c8:	70000068 f098f098 f8000080 80808098     h..p............
 23ff4d8:	f8000080 50505050 88f80050 88402040     ....PPPPP...@ @.
 23ff4e8:	000000f8 90909078 50000060 68505050     ....x...`..PPPPh
 23ff4f8:	f80000c0 202020a0 20f80020 70888870     .....    .. p..p
 23ff508:	5020f820 5088f888 50200020 50508888      . P...P . P..PP
 23ff518:	403000d8 88887030 00000070 a8a87000     ..0@0p..p....p..
 23ff528:	70080070 c8a8a898 80708070 8080f080     p..p....p.p.....
 23ff538:	88700070 88888888 f8000088 f800f800     p.p.............
 23ff548:	20200000 002020f8 204000f8 00402010     ..  .  ...@ . @.
 23ff558:	201000f8 00102040 283800f8 20202020     ... @ ....8(    
 23ff568:	20202020 a0202020 3030e0a0 3000f800            ...00...0
 23ff578:	e8000030 b8e800b8 d8700000 000070d8     0.........p..p..
 23ff588:	00000000 00303000 00000000 00300000     .....00.......0.
 23ff598:	20380000 a0a02020 48702060 00484848     ..8   ..` pHHHH.
 23ff5a8:	18700000 00786030 00000000 78787878     ..p.0`x.....xxxx
	...

023ff5c2 <glcdfontDescriptors>:
 23ff5c2:	00000805 00080805 00100805 00180805     ................
 23ff5d2:	00200805 00280805 00300805 00380805     .. ...(...0...8.
 23ff5e2:	00400805 00480805 00500805 00580805     ..@...H...P...X.
 23ff5f2:	00600805 00680805 00700805 00780805     ..`...h...p...x.
 23ff602:	00800805 00880805 00900805 00980805     ................
 23ff612:	00a00805 00a80805 00b00805 00b80805     ................
 23ff622:	00c00805 00c80805 00d00805 00d80805     ................
 23ff632:	00e00805 00e80805 00f00805 00f80805     ................
 23ff642:	01000805 01080805 01100805 01180805     ................
 23ff652:	01200805 01280805 01300805 01380805     .. ...(...0...8.
 23ff662:	01400805 01480805 01500805 01580805     ..@...H...P...X.
 23ff672:	01600805 01680805 01700805 01780805     ..`...h...p...x.
 23ff682:	01800805 01880805 01900805 01980805     ................
 23ff692:	01a00805 01a80805 01b00805 01b80805     ................
 23ff6a2:	01c00805 01c80805 01d00805 01d80805     ................
 23ff6b2:	01e00805 01e80805 01f00805 01f80805     ................
 23ff6c2:	02000805 02080805 02100805 02180805     ................
 23ff6d2:	02200805 02280805 02300805 02380805     .. ...(...0...8.
 23ff6e2:	02400805 02480805 02500805 02580805     ..@...H...P...X.
 23ff6f2:	02600805 02680805 02700805 02780805     ..`...h...p...x.
 23ff702:	02800805 02880805 02900805 02980805     ................
 23ff712:	02a00805 02a80805 02b00805 02b80805     ................
 23ff722:	02c00805 02c80805 02d00805 02d80805     ................
 23ff732:	02e00805 02e80805 02f00805 02f80805     ................
 23ff742:	03000805 03080805 03100805 03180805     ................
 23ff752:	03200805 03280805 03300805 03380805     .. ...(...0...8.
 23ff762:	03400805 03480805 03500805 03580805     ..@...H...P...X.
 23ff772:	03600805 03680805 03700805 03780805     ..`...h...p...x.
 23ff782:	03800805 03880805 03900805 03980805     ................
 23ff792:	03a00805 03a80805 03b00805 03b80805     ................
 23ff7a2:	03c00805 03c80805 03d00805 03d80805     ................
 23ff7b2:	03e00805 03e80805 03f00805 03f80805     ................
 23ff7c2:	04000805 04080805 04100805 04180805     ................
 23ff7d2:	04200805 04280805 04300805 04380805     .. ...(...0...8.
 23ff7e2:	04400805 04480805 04500805 04580805     ..@...H...P...X.
 23ff7f2:	04600805 04680805 04700805 04780805     ..`...h...p...x.
 23ff802:	04800805 04880805 04900805 04980805     ................
 23ff812:	04a00805 04a80805 04b00805 04b80805     ................
 23ff822:	04c00805 04c80805 04d00805 04d80805     ................
 23ff832:	04e00805 04e80805 04f00805 04f80805     ................
 23ff842:	05000805 05080805 05100805 05180805     ................
 23ff852:	05200805 05280805 05300805 05380805     .. ...(...0...8.
 23ff862:	05400805 05480805 05500805 05580805     ..@...H...P...X.
 23ff872:	05600805 05680805 05700805 05780805     ..`...h...p...x.
 23ff882:	05800805 05880805 05900805 05980805     ................
 23ff892:	05a00805 05a80805 05b00805 05b80805     ................
 23ff8a2:	05c00805 05c80805 05d00805 05d80805     ................
 23ff8b2:	05e00805 05e80805 05f00805 05f80805     ................
 23ff8c2:	06000805 06080805 06100805 06180805     ................
 23ff8d2:	06200805 06280805 06300805 06380805     .. ...(...0...8.
 23ff8e2:	06400805 06480805 06500805 06580805     ..@...H...P...X.
 23ff8f2:	06600805 06680805 06700805 06780805     ..`...h...p...x.
 23ff902:	06800805 06880805 06900805 06980805     ................
 23ff912:	06a00805 06a80805 06b00805 06b80805     ................
 23ff922:	06c00805 06c80805 06d00805 06d80805     ................
 23ff932:	06e00805 06e80805 06f00805 06f80805     ................
 23ff942:	07000805 07080805 07100805 07180805     ................
 23ff952:	07200805 07280805 07300805 07380805     .. ...(...0...8.
 23ff962:	07400805 07480805 07500805 07580805     ..@...H...P...X.
 23ff972:	07600805 07680805 07700805 07780805     ..`...h...p...x.
 23ff982:	07800805 07880805 07900805 07980805     ................
 23ff992:	07a00805 07a80805 07b00805 07b80805     ................
 23ff9a2:	07c00805 07c80805 07d00805 07d80805     ................
 23ff9b2:	07e00805 07e80805 07f00805 07f80805     ................
 23ff9c2:	656c6966 656d616e 25203d20 69660073     filename = %s.fi
 23ff9d2:	6f20656c 206e6570 6e727265 64253d6f     le open errno=%d
 23ff9e2:	52524500                                 .ERROR.

023ff9e9 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
 23ff9e9:	01010100 08020002 01100800 00000001     ................
 23ff9f9:	0f00ff00 00000000 000b2000 210a0200     ......... .....!
 23ffa09:	00050000 c8000000 ff380000 00080001     ..........8.....
 23ffa19:	0fdb0100 010df101 08800068 000000b8     ........h.......
 23ffa29:	00890f00 00000000 0f010000 000e0e0d     ................
 23ffa39:	ffc70200 0000009b                        ...........

023ffa44 <_ZTV7VL53L1X>:
	...
 23ffa4c:	023fa9ff 023fa9df 023fa9c9 023fa985     ..?...?...?...?.
 23ffa5c:	023fa9bb 023fa9a1 023fa987              ..?...?...?.

023ffa68 <_ZTVN5spark13EthernetClassE>:
	...
 23ffa70:	023fb72f 023fb725 023fb71b 023fb711     /.?.%.?...?...?.
 23ffa80:	023fb705 023fb6f9 023fdcd9 023fdce1     ..?...?...?...?.
 23ffa90:	023fb6ed 023fb6e5 023fb6db 023fb6d1     ..?...?...?...?.
 23ffaa0:	023fdd11                                ..?.

023ffaa4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffaa4:	18100800 38302820                       .... (08

023ffaac <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffab4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffabc:	023fbe2d 023fbe51 023fbea3 023fbe5f     -.?.Q.?...?._.?.
 23ffacc:	023fbe31                                1.?.

023ffad0 <_ZTVN8particle16ApplicationAssetE>:
	...
 23ffad8:	023fba15 023fbb11 023fbe29 023fbd81     ..?...?.).?...?.
 23ffae8:	023fc11f 023fbdef 023fbe0b 023fbe27     ..?...?...?.'.?.
 23ffaf8:	023fc159 023fc0b1 023fc0e1 64756162     Y.?...?...?.baud
 23ffb08:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
 23ffb18:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 23ffb28:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 23ffb38:	2c00205d 29280020 2000203a 6f63005b     ] ., .(): . [.co
 23ffb48:	3d206564 69250020 74656400 736c6961     de = .%i.details
 23ffb58:	00203d20 6d000a0d 6c006600 6e66006e      = ....m.f.ln.fn
 23ffb68:	646f6300 65640065 6c696174 00000000     .code.detail....

023ffb78 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffb80:	023fc1d9 023fc1ff 023fc1bd 023fde2b     ..?...?...?.+.?.

023ffb90 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffb98:	023fc68d 023fc6a5 023fcde1 023fcf89     ..?...?...?...?.

023ffba8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffbb0:	023fc6b9 023fc6cd 023fcfc1 023fc1c5     ..?...?...?...?.

023ffbc0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffbc8:	023fc1d7 023fc20d 023fcd45 023fc1c7     ..?...?.E.?...?.

023ffbd8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffbe0:	023fc1d5 023fc21b 023fc5f5 023fc23d     ..?...?...?.=.?.
 23ffbf0:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 23ffc00:	007a2553 74637361 00656d69              S%z.asctime.

023ffc0c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc14:	023fd2ad 023fd2b3 023fd2f1 023fd2c1     ..?...?...?...?.
 23ffc24:	023fd2af                                ..?.

023ffc28 <_ZTV9IPAddress>:
	...
 23ffc30:	023fd7e9 023fd7d9 023fd7db              ..?...?...?.

023ffc3c <_ZTV9USBSerial>:
	...
 23ffc44:	023fd8cf 023fd937 023fd90d 023fbd81     ..?.7.?...?...?.
 23ffc54:	023fd8ff 023fd8d1 023fd8e1 023fd931     ..?...?...?.1.?.
 23ffc64:	023fd8f1 023fd8c9                       ..?...?.

023ffc6c <_ZTV11USARTSerial>:
	...
 23ffc74:	023fda2d 023fda99 023fda71 023fbd81     -.?...?.q.?...?.
 23ffc84:	023fda41 023fda5d 023fda4f 023fda6b     A.?.].?.O.?.k.?.
 23ffc94:	023fda2f 023fda33                       /.?.3.?.

023ffc9c <_ZTV7TwoWire>:
	...
 23ffca4:	023fdb13 023fdb5d 023fdb35 023fdb15     ..?.].?.5.?...?.
 23ffcb4:	023fdb3d 023fdb45 023fdb4d 023fdb55     =.?.E.?.M.?.U.?.

023ffcc4 <_ZTVN5spark9WiFiClassE>:
	...
 23ffccc:	023fdc7b 023fdc71 023fdc67 023fdc1d     {.?.q.?.g.?...?.
 23ffcdc:	023fdc5b 023fdc4f 023fdcd9 023fdce1     [.?.O.?...?...?.
 23ffcec:	023fdc43 023fdc3b 023fdc31 023fdc27     C.?.;.?.1.?.'.?.
 23ffcfc:	023fdd11                                ..?.

023ffd00 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd08:	023fdc99 023fdca3 023fdcad 023fdcb7     ..?...?...?...?.
 23ffd18:	023fdcc1 023fdccd 023fdcd9 023fdce1     ..?...?...?...?.
 23ffd28:	023fdce9 023fdcf5 023fdcfd 023fdd07     ..?...?...?...?.
 23ffd38:	023fdd11 75007525 78343025               ..?.%u.u%04x.

023ffd45 <_ZSt7nothrow>:
	...

023ffd46 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd46:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd56:	5f646572 00676174                        red_tag...

023ffd60 <_ZTISt19_Sp_make_shared_tag>:
 23ffd60:	023ffda0 023ffd46                       ..?.F.?.

023ffd68 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd68:	023ffe00 023ffd74 023ffe24              ..?.t.?.$.?.

023ffd74 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd74:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd84:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd94:	00000045                                E...

023ffd98 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd98:	00000000 023ffd68 023fe4dd 023fe4f1     ....h.?...?...?.
 23ffda8:	023fe685 023fe685 023fe55b 023fe49d     ..?...?.[.?...?.
 23ffdb8:	023fe543 023fe505 023fe4cf              C.?...?...?.

023ffdc4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdc4:	023ffe00 023ffdd0 023ffd68              ..?...?.h.?.

023ffdd0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdd0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffde0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdf0:	456f666e 00000000                       nfoE....

023ffdf8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffdf8:	00000000 023ffdc4 023fe585 023fe599     ......?...?...?.
 23ffe08:	023fe685 023fe685 023fe55b 023fe49d     ..?...?.[.?...?.
 23ffe18:	023fe659 023fe5e5 023fe5ad              Y.?...?...?.

023ffe24 <_ZTISt9type_info>:
 23ffe24:	023ffda0 023ffe2c                       ..?.,.?.

023ffe2c <_ZTSSt9type_info>:
 23ffe2c:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe3c:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe4c:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe5c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe6c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe7c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe8c:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe9c:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffeac:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffebc:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffecd <_ctype_>:
 23ffecd:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffedd:	20202020 20202020 20202020 20202020                     
 23ffeed:	10108820 10101010 10101010 10101010      ...............
 23ffefd:	04040410 04040404 10040404 10101010     ................
 23fff0d:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff1d:	01010101 01010101 01010101 10101010     ................
 23fff2d:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff3d:	02020202 02020202 02020202 10101010     ................
 23fff4d:	00000020 00000000 00000000 00000000      ...............
	...

023fffce <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023f9189 	.word	0x023f9189
 23fffd4:	023fb739 	.word	0x023fb739
 23fffd8:	023fbb25 	.word	0x023fbb25
 23fffdc:	023fbd71 	.word	0x023fbd71
 23fffe0:	023fcdd1 	.word	0x023fcdd1
 23fffe4:	023fd135 	.word	0x023fd135
 23fffe8:	023fd151 	.word	0x023fd151
 23fffec:	023fdc85 	.word	0x023fdc85
 23ffff0:	023fdde9 	.word	0x023fdde9
