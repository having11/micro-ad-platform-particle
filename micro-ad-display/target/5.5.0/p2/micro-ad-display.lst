
c:/Users/gaton/source/repos/micro-ad-platform-particle/micro-ad-display/target/5.5.0/p2/micro-ad-display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f8000  085f8000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f8018  085f8018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f8a88  085f80a8  00008a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00007560  023f8a90  085f80b0  00008a90  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad38  085ff610  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000238  1007adb0  1007adb0  0002adb0  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff688  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 0000092c  085ff68c  085ff68c  0001f68c  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f68c  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001ab347  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001ba6e  00000000  00000000  001cb347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004def1  00000000  00000000  001e6db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000038f8  00000000  00000000  00234ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000d5a8  00000000  00000000  0023859e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00031210  00000000  00000000  00245b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00058b43  00000000  00000000  00276d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e50cb  00000000  00000000  002cf899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000ab94  00000000  00000000  003b4964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f8018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f8018:	4813      	ldr	r0, [pc, #76]	; (85f8068 <module_user_pre_init+0x50>)
 85f801a:	4914      	ldr	r1, [pc, #80]	; (85f806c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f801c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f801e:	4288      	cmp	r0, r1
 85f8020:	d005      	beq.n	85f802e <module_user_pre_init+0x16>
 85f8022:	4a13      	ldr	r2, [pc, #76]	; (85f8070 <module_user_pre_init+0x58>)
 85f8024:	4282      	cmp	r2, r0
 85f8026:	d002      	beq.n	85f802e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f8028:	4b12      	ldr	r3, [pc, #72]	; (85f8074 <module_user_pre_init+0x5c>)
 85f802a:	1a12      	subs	r2, r2, r0
 85f802c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f802e:	4812      	ldr	r0, [pc, #72]	; (85f8078 <module_user_pre_init+0x60>)
 85f8030:	4a12      	ldr	r2, [pc, #72]	; (85f807c <module_user_pre_init+0x64>)
 85f8032:	2100      	movs	r1, #0
 85f8034:	4b12      	ldr	r3, [pc, #72]	; (85f8080 <module_user_pre_init+0x68>)
 85f8036:	1a12      	subs	r2, r2, r0
 85f8038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f803a:	4812      	ldr	r0, [pc, #72]	; (85f8084 <module_user_pre_init+0x6c>)
 85f803c:	4912      	ldr	r1, [pc, #72]	; (85f8088 <module_user_pre_init+0x70>)
 85f803e:	4288      	cmp	r0, r1
 85f8040:	d005      	beq.n	85f804e <module_user_pre_init+0x36>
 85f8042:	4a12      	ldr	r2, [pc, #72]	; (85f808c <module_user_pre_init+0x74>)
 85f8044:	4282      	cmp	r2, r0
 85f8046:	d002      	beq.n	85f804e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f8048:	4b0a      	ldr	r3, [pc, #40]	; (85f8074 <module_user_pre_init+0x5c>)
 85f804a:	1a12      	subs	r2, r2, r0
 85f804c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f804e:	4810      	ldr	r0, [pc, #64]	; (85f8090 <module_user_pre_init+0x78>)
 85f8050:	4910      	ldr	r1, [pc, #64]	; (85f8094 <module_user_pre_init+0x7c>)
 85f8052:	4288      	cmp	r0, r1
 85f8054:	d005      	beq.n	85f8062 <module_user_pre_init+0x4a>
 85f8056:	4a10      	ldr	r2, [pc, #64]	; (85f8098 <module_user_pre_init+0x80>)
 85f8058:	4282      	cmp	r2, r0
 85f805a:	d002      	beq.n	85f8062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f805c:	4b05      	ldr	r3, [pc, #20]	; (85f8074 <module_user_pre_init+0x5c>)
 85f805e:	1a12      	subs	r2, r2, r0
 85f8060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f8062:	4801      	ldr	r0, [pc, #4]	; (85f8068 <module_user_pre_init+0x50>)
 85f8064:	bd08      	pop	{r3, pc}
 85f8066:	bf00      	nop
 85f8068:	1007ad38 	.word	0x1007ad38
 85f806c:	085ff610 	.word	0x085ff610
 85f8070:	1007adb0 	.word	0x1007adb0
 85f8074:	10110d2d 	.word	0x10110d2d
 85f8078:	1007adb0 	.word	0x1007adb0
 85f807c:	1007afe8 	.word	0x1007afe8
 85f8080:	10110ea1 	.word	0x10110ea1
 85f8084:	023f8a88 	.word	0x023f8a88
 85f8088:	085f80a8 	.word	0x085f80a8
 85f808c:	023f8a90 	.word	0x023f8a90
 85f8090:	023f8a90 	.word	0x023f8a90
 85f8094:	085f80b0 	.word	0x085f80b0
 85f8098:	023ffff0 	.word	0x023ffff0

085f809c <dynalib_preinit>:
 85f809c:	085f8019 00000000                       .._.....

Disassembly of section .psram_text:

023f8a90 <strcmp>:
 23f8a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f8a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f8a98:	2a01      	cmp	r2, #1
 23f8a9a:	bf28      	it	cs
 23f8a9c:	429a      	cmpcs	r2, r3
 23f8a9e:	d0f7      	beq.n	23f8a90 <strcmp>
 23f8aa0:	1ad0      	subs	r0, r2, r3
 23f8aa2:	4770      	bx	lr

023f8aa4 <strlen>:
 23f8aa4:	4603      	mov	r3, r0
 23f8aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f8aaa:	2a00      	cmp	r2, #0
 23f8aac:	d1fb      	bne.n	23f8aa6 <strlen+0x2>
 23f8aae:	1a18      	subs	r0, r3, r0
 23f8ab0:	3801      	subs	r0, #1
 23f8ab2:	4770      	bx	lr

023f8ab4 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f8ab4:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f8ab6:	f004 fbdd 	bl	23fd274 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f8aba:	2500      	movs	r5, #0
 23f8abc:	4e05      	ldr	r6, [pc, #20]	; (23f8ad4 <module_user_init+0x20>)
 23f8abe:	4c06      	ldr	r4, [pc, #24]	; (23f8ad8 <module_user_init+0x24>)
 23f8ac0:	1ba4      	subs	r4, r4, r6
 23f8ac2:	08a4      	lsrs	r4, r4, #2
 23f8ac4:	42ac      	cmp	r4, r5
 23f8ac6:	d100      	bne.n	23f8aca <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f8ac8:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f8aca:	f856 3b04 	ldr.w	r3, [r6], #4
 23f8ace:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f8ad0:	3501      	adds	r5, #1
 23f8ad2:	e7f7      	b.n	23f8ac4 <module_user_init+0x10>
 23f8ad4:	023fffcc 	.word	0x023fffcc
 23f8ad8:	023ffff0 	.word	0x023ffff0

023f8adc <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f8adc:	f000 baf2 	b.w	23f90c4 <setup>

023f8ae0 <module_user_loop>:
}

void module_user_loop() {
 23f8ae0:	b508      	push	{r3, lr}
    loop();
 23f8ae2:	f000 f88d 	bl	23f8c00 <loop>
    _post_loop();
}
 23f8ae6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f8aea:	f004 bb7b 	b.w	23fd1e4 <_post_loop>

023f8aee <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f8aee:	f002 bd87 	b.w	23fb600 <malloc>

023f8af2 <_Znaj>:
 23f8af2:	f002 bd85 	b.w	23fb600 <malloc>

023f8af6 <_ZdaPv>:
 23f8af6:	f002 bd91 	b.w	23fb61c <free>

023f8afa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f8afa:	f002 bd8f 	b.w	23fb61c <free>
	...

023f8b00 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f8b00:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f8b02:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f8b04:	4a02      	ldr	r2, [pc, #8]	; (23f8b10 <__cxa_pure_virtual+0x10>)
 23f8b06:	4903      	ldr	r1, [pc, #12]	; (23f8b14 <__cxa_pure_virtual+0x14>)
 23f8b08:	f002 fb90 	bl	23fb22c <panic_>
  while (1);
 23f8b0c:	e7fe      	b.n	23f8b0c <__cxa_pure_virtual+0xc>
 23f8b0e:	bf00      	nop
 23f8b10:	023fac0d 	.word	0x023fac0d
 23f8b14:	023feba0 	.word	0x023feba0

023f8b18 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f8b18:	7800      	ldrb	r0, [r0, #0]
 23f8b1a:	fab0 f080 	clz	r0, r0
 23f8b1e:	0940      	lsrs	r0, r0, #5
 23f8b20:	4770      	bx	lr

023f8b22 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f8b22:	2301      	movs	r3, #1
 23f8b24:	7003      	strb	r3, [r0, #0]
 23f8b26:	4770      	bx	lr

023f8b28 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f8b28:	4770      	bx	lr
	...

023f8b2c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23f8b2c:	b510      	push	{r4, lr}
 23f8b2e:	4604      	mov	r4, r0
 23f8b30:	4b09      	ldr	r3, [pc, #36]	; (23f8b58 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23f8b32:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f8b34:	f003 fce0 	bl	23fc4f8 <_ZN5spark10LogManager8instanceEv>
 23f8b38:	4621      	mov	r1, r4
 23f8b3a:	f003 ff17 	bl	23fc96c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23f8b3e:	f004 ff3d 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23f8b42:	f004 ff2d 	bl	23fd9a0 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23f8b46:	4620      	mov	r0, r4
 23f8b48:	4b04      	ldr	r3, [pc, #16]	; (23f8b5c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23f8b4a:	f840 3b04 	str.w	r3, [r0], #4
 23f8b4e:	f003 fda9 	bl	23fc6a4 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f8b52:	4620      	mov	r0, r4
 23f8b54:	bd10      	pop	{r4, pc}
 23f8b56:	bf00      	nop
 23f8b58:	023fece8 	.word	0x023fece8
 23f8b5c:	023fecd0 	.word	0x023fecd0

023f8b60 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23f8b60:	b510      	push	{r4, lr}
 23f8b62:	4604      	mov	r4, r0
    }
 23f8b64:	f7ff ffe2 	bl	23f8b2c <_ZN5spark16SerialLogHandlerD1Ev>
 23f8b68:	4620      	mov	r0, r4
 23f8b6a:	2124      	movs	r1, #36	; 0x24
 23f8b6c:	f7ff ffc5 	bl	23f8afa <_ZdlPvj>
 23f8b70:	4620      	mov	r0, r4
 23f8b72:	bd10      	pop	{r4, pc}

023f8b74 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23f8b74:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f8b76:	f04f 0c20 	mov.w	ip, #32
 23f8b7a:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23f8b7c:	b500      	push	{lr}
 23f8b7e:	b08c      	sub	sp, #48	; 0x30
 23f8b80:	aa0d      	add	r2, sp, #52	; 0x34
 23f8b82:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f8b86:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8b8a:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f8b8e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8b90:	6801      	ldr	r1, [r0, #0]
 23f8b92:	aa04      	add	r2, sp, #16
 23f8b94:	201e      	movs	r0, #30
 23f8b96:	f002 fb57 	bl	23fb248 <log_message_v>
}
 23f8b9a:	b00c      	add	sp, #48	; 0x30
 23f8b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 23f8ba0:	b003      	add	sp, #12
 23f8ba2:	4770      	bx	lr

023f8ba4 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
 23f8ba4:	b40e      	push	{r1, r2, r3}
    attr.flags = 0;
 23f8ba6:	f04f 0c20 	mov.w	ip, #32
 23f8baa:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23f8bac:	b500      	push	{lr}
 23f8bae:	b08c      	sub	sp, #48	; 0x30
 23f8bb0:	aa0d      	add	r2, sp, #52	; 0x34
 23f8bb2:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f8bb6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8bba:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f8bbe:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f8bc0:	6801      	ldr	r1, [r0, #0]
 23f8bc2:	aa04      	add	r2, sp, #16
 23f8bc4:	2032      	movs	r0, #50	; 0x32
 23f8bc6:	f002 fb3f 	bl	23fb248 <log_message_v>
}
 23f8bca:	b00c      	add	sp, #48	; 0x30
 23f8bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 23f8bd0:	b003      	add	sp, #12
 23f8bd2:	4770      	bx	lr

023f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23f8bd4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23f8bd6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f8bd8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f8bda:	b17c      	cbz	r4, 23f8bfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f8bdc:	6863      	ldr	r3, [r4, #4]
 23f8bde:	3b01      	subs	r3, #1
 23f8be0:	6063      	str	r3, [r4, #4]
 23f8be2:	b95b      	cbnz	r3, 23f8bfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f8be4:	6823      	ldr	r3, [r4, #0]
 23f8be6:	4620      	mov	r0, r4
 23f8be8:	689b      	ldr	r3, [r3, #8]
 23f8bea:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f8bec:	68a3      	ldr	r3, [r4, #8]
 23f8bee:	3b01      	subs	r3, #1
 23f8bf0:	60a3      	str	r3, [r4, #8]
 23f8bf2:	b91b      	cbnz	r3, 23f8bfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f8bf4:	6823      	ldr	r3, [r4, #0]
 23f8bf6:	4620      	mov	r0, r4
 23f8bf8:	68db      	ldr	r3, [r3, #12]
 23f8bfa:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f8bfc:	4628      	mov	r0, r5
 23f8bfe:	bd38      	pop	{r3, r4, r5, pc}

023f8c00 <loop>:
    digitalWrite(ButtonLedPin, HIGH);

    loadAdFilenames();
}

void loop() {
 23f8c00:	b530      	push	{r4, r5, lr}
 23f8c02:	b087      	sub	sp, #28

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f8c04:	f002 f810 	bl	23fac28 <HAL_Timer_Get_Milli_Seconds>
    // If ad is present, display it
    if (millis() - lastAdDisplayMs >= AdSwitchDelayMs) {
 23f8c08:	4d40      	ldr	r5, [pc, #256]	; (23f8d0c <loop+0x10c>)
 23f8c0a:	682b      	ldr	r3, [r5, #0]
 23f8c0c:	1ac0      	subs	r0, r0, r3
 23f8c0e:	f5b0 6f7a 	cmp.w	r0, #4000	; 0xfa0
 23f8c12:	d31c      	bcc.n	23f8c4e <loop+0x4e>

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8c14:	4c3e      	ldr	r4, [pc, #248]	; (23f8d10 <loop+0x110>)
        if (adFileNames.size() > 0) {
 23f8c16:	e9d4 2300 	ldrd	r2, r3, [r4]
 23f8c1a:	429a      	cmp	r2, r3
 23f8c1c:	d014      	beq.n	23f8c48 <loop+0x48>
            Log.info("draw bitmap start");
 23f8c1e:	493d      	ldr	r1, [pc, #244]	; (23f8d14 <loop+0x114>)
 23f8c20:	483d      	ldr	r0, [pc, #244]	; (23f8d18 <loop+0x118>)
 23f8c22:	f7ff ffa7 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
            bitmap.drawBitmap(adFileNames[currentAd++ % adFileNames.size()].c_str());
 23f8c26:	4a3d      	ldr	r2, [pc, #244]	; (23f8d1c <loop+0x11c>)
 23f8c28:	7813      	ldrb	r3, [r2, #0]
 23f8c2a:	1c59      	adds	r1, r3, #1
 23f8c2c:	7011      	strb	r1, [r2, #0]
 23f8c2e:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f8c32:	1a52      	subs	r2, r2, r1
 23f8c34:	1112      	asrs	r2, r2, #4
 23f8c36:	fbb3 f0f2 	udiv	r0, r3, r2
 23f8c3a:	fb02 3310 	mls	r3, r2, r0, r3
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23f8c3e:	011b      	lsls	r3, r3, #4
 23f8c40:	58c9      	ldr	r1, [r1, r3]
 23f8c42:	4837      	ldr	r0, [pc, #220]	; (23f8d20 <loop+0x120>)
 23f8c44:	f001 fb4a 	bl	23fa2dc <_ZN6Bitmap10drawBitmapEPKc>
 23f8c48:	f001 ffee 	bl	23fac28 <HAL_Timer_Get_Milli_Seconds>
        }
        lastAdDisplayMs = millis();
 23f8c4c:	6028      	str	r0, [r5, #0]
    }

    // If the button has been pressed, show the QR code
    if (!digitalRead(ButtonPin)) {
 23f8c4e:	2004      	movs	r0, #4
 23f8c50:	f005 fb00 	bl	23fe254 <digitalRead>
 23f8c54:	b9e8      	cbnz	r0, 23f8c92 <loop+0x92>
        digitalWrite(ButtonLedPin, LOW);
 23f8c56:	4601      	mov	r1, r0
 23f8c58:	9003      	str	r0, [sp, #12]
 23f8c5a:	2005      	movs	r0, #5
 23f8c5c:	f005 fae1 	bl	23fe222 <digitalWrite>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 23f8c60:	4b30      	ldr	r3, [pc, #192]	; (23f8d24 <loop+0x124>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23f8c62:	9a03      	ldr	r2, [sp, #12]
 23f8c64:	781b      	ldrb	r3, [r3, #0]
 23f8c66:	4930      	ldr	r1, [pc, #192]	; (23f8d28 <loop+0x128>)
 23f8c68:	f88d 3000 	strb.w	r3, [sp]
 23f8c6c:	a804      	add	r0, sp, #16
 23f8c6e:	233c      	movs	r3, #60	; 0x3c
 23f8c70:	f004 fc5e 	bl	23fd530 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23f8c74:	a805      	add	r0, sp, #20
 23f8c76:	f7ff ffad 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("AD_BUTTON_PRESS");
        bitmap.drawBitmap("qrcode.bmp");
 23f8c7a:	492c      	ldr	r1, [pc, #176]	; (23f8d2c <loop+0x12c>)
 23f8c7c:	4828      	ldr	r0, [pc, #160]	; (23f8d20 <loop+0x120>)
 23f8c7e:	f001 fb2d 	bl	23fa2dc <_ZN6Bitmap10drawBitmapEPKc>

        delay(10000);
 23f8c82:	f242 7010 	movw	r0, #10000	; 0x2710
 23f8c86:	f004 fa75 	bl	23fd174 <delay>
        digitalWrite(ButtonLedPin, HIGH);
 23f8c8a:	2101      	movs	r1, #1
 23f8c8c:	2005      	movs	r0, #5
 23f8c8e:	f005 fac8 	bl	23fe222 <digitalWrite>
    }

    distanceSensor.startRanging();
 23f8c92:	4827      	ldr	r0, [pc, #156]	; (23f8d30 <loop+0x130>)
 23f8c94:	f001 ff27 	bl	23faae6 <_ZN10SFEVL53L1X12startRangingEv>

    while (!distanceSensor.checkForDataReady()) {
 23f8c98:	4c25      	ldr	r4, [pc, #148]	; (23f8d30 <loop+0x130>)
 23f8c9a:	4620      	mov	r0, r4
 23f8c9c:	f001 ff29 	bl	23faaf2 <_ZN10SFEVL53L1X17checkForDataReadyEv>
 23f8ca0:	b918      	cbnz	r0, 23f8caa <loop+0xaa>
        delay (1);
 23f8ca2:	2001      	movs	r0, #1
 23f8ca4:	f004 fa66 	bl	23fd174 <delay>
    while (!distanceSensor.checkForDataReady()) {
 23f8ca8:	e7f7      	b.n	23f8c9a <loop+0x9a>
    }
    int distance = distanceSensor.getDistance();
 23f8caa:	4821      	ldr	r0, [pc, #132]	; (23f8d30 <loop+0x130>)
 23f8cac:	f001 ff33 	bl	23fab16 <_ZN10SFEVL53L1X11getDistanceEv>
 23f8cb0:	4604      	mov	r4, r0
    distanceSensor.clearInterrupt();
 23f8cb2:	481f      	ldr	r0, [pc, #124]	; (23f8d30 <loop+0x130>)
 23f8cb4:	f001 ff14 	bl	23faae0 <_ZN10SFEVL53L1X14clearInterruptEv>
    distanceSensor.stopRanging();
 23f8cb8:	481d      	ldr	r0, [pc, #116]	; (23f8d30 <loop+0x130>)
 23f8cba:	f001 ff17 	bl	23faaec <_ZN10SFEVL53L1X11stopRangingEv>

    Log.info("Distance (mm) = %d", distance);
 23f8cbe:	4622      	mov	r2, r4
 23f8cc0:	491c      	ldr	r1, [pc, #112]	; (23f8d34 <loop+0x134>)
 23f8cc2:	4815      	ldr	r0, [pc, #84]	; (23f8d18 <loop+0x118>)
 23f8cc4:	f7ff ff56 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>

    // Check lidar for proximity
    if (distance <= ImpressionDistanceThresholdMM &&
 23f8cc8:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 23f8ccc:	dc1c      	bgt.n	23f8d08 <loop+0x108>
 23f8cce:	f001 ffab 	bl	23fac28 <HAL_Timer_Get_Milli_Seconds>
        millis() - lastImpressionMs >= ImpressionDelayMs) {
 23f8cd2:	4c19      	ldr	r4, [pc, #100]	; (23f8d38 <loop+0x138>)
 23f8cd4:	6823      	ldr	r3, [r4, #0]
 23f8cd6:	1ac0      	subs	r0, r0, r3
    if (distance <= ImpressionDistanceThresholdMM &&
 23f8cd8:	f241 736f 	movw	r3, #5999	; 0x176f
 23f8cdc:	4298      	cmp	r0, r3
 23f8cde:	d913      	bls.n	23f8d08 <loop+0x108>
        Log.info("Sending ad impression");
 23f8ce0:	4916      	ldr	r1, [pc, #88]	; (23f8d3c <loop+0x13c>)
 23f8ce2:	480d      	ldr	r0, [pc, #52]	; (23f8d18 <loop+0x118>)
 23f8ce4:	f7ff ff46 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
 23f8ce8:	f001 ff9e 	bl	23fac28 <HAL_Timer_Get_Milli_Seconds>
 23f8cec:	4b0d      	ldr	r3, [pc, #52]	; (23f8d24 <loop+0x124>)
        lastImpressionMs = millis();
 23f8cee:	6020      	str	r0, [r4, #0]
 23f8cf0:	781b      	ldrb	r3, [r3, #0]
 23f8cf2:	a804      	add	r0, sp, #16
 23f8cf4:	f88d 3000 	strb.w	r3, [sp]
 23f8cf8:	2200      	movs	r2, #0
 23f8cfa:	233c      	movs	r3, #60	; 0x3c
 23f8cfc:	4910      	ldr	r1, [pc, #64]	; (23f8d40 <loop+0x140>)
 23f8cfe:	f004 fc17 	bl	23fd530 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23f8d02:	a805      	add	r0, sp, #20
 23f8d04:	f7ff ff66 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("AD_IMPRESSION");
    }
}
 23f8d08:	b007      	add	sp, #28
 23f8d0a:	bd30      	pop	{r4, r5, pc}
 23f8d0c:	1007addc 	.word	0x1007addc
 23f8d10:	1007adb0 	.word	0x1007adb0
 23f8d14:	023febb5 	.word	0x023febb5
 23f8d18:	1007ae7c 	.word	0x1007ae7c
 23f8d1c:	1007adc4 	.word	0x1007adc4
 23f8d20:	1007adc0 	.word	0x1007adc0
 23f8d24:	1007adbc 	.word	0x1007adbc
 23f8d28:	023febc7 	.word	0x023febc7
 23f8d2c:	023febd7 	.word	0x023febd7
 23f8d30:	1007adc8 	.word	0x1007adc8
 23f8d34:	023febe2 	.word	0x023febe2
 23f8d38:	1007ade0 	.word	0x1007ade0
 23f8d3c:	023febf5 	.word	0x023febf5
 23f8d40:	023fec0b 	.word	0x023fec0b

023f8d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8d44:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f8d46:	2614      	movs	r6, #20
 23f8d48:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8d4c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f8d4e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f8d52:	42ae      	cmp	r6, r5
 23f8d54:	d004      	beq.n	23f8d60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23f8d56:	4628      	mov	r0, r5
 23f8d58:	f002 ff0c 	bl	23fbb74 <_ZN6StringD1Ev>
 23f8d5c:	3514      	adds	r5, #20
 23f8d5e:	e7f8      	b.n	23f8d52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f8d60:	6820      	ldr	r0, [r4, #0]
 23f8d62:	f002 fc5b 	bl	23fb61c <free>
    AllocatorT::free(data_);
}
 23f8d66:	4620      	mov	r0, r4
 23f8d68:	bd70      	pop	{r4, r5, r6, pc}

023f8d6a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f8d6a:	b570      	push	{r4, r5, r6, lr}
 23f8d6c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f8d6e:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f8d72:	eb05 1683 	add.w	r6, r5, r3, lsl #6
        for (; p != end; ++p) {
 23f8d76:	42ae      	cmp	r6, r5
 23f8d78:	d005      	beq.n	23f8d86 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev+0x1c>
            p->~T();
 23f8d7a:	682b      	ldr	r3, [r5, #0]
 23f8d7c:	4628      	mov	r0, r5
 23f8d7e:	681b      	ldr	r3, [r3, #0]
 23f8d80:	4798      	blx	r3
        for (; p != end; ++p) {
 23f8d82:	3540      	adds	r5, #64	; 0x40
 23f8d84:	e7f7      	b.n	23f8d76 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f8d86:	6820      	ldr	r0, [r4, #0]
 23f8d88:	f002 fc48 	bl	23fb61c <free>
}
 23f8d8c:	4620      	mov	r0, r4
 23f8d8e:	bd70      	pop	{r4, r5, r6, pc}

023f8d90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f8d90:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f8d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f8d94:	4604      	mov	r4, r0
 23f8d96:	460d      	mov	r5, r1
 23f8d98:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f8d9a:	d916      	bls.n	23f8dca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23f8d9c:	4290      	cmp	r0, r2
 23f8d9e:	d215      	bcs.n	23f8dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23f8da0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f8da4:	1a75      	subs	r5, r6, r1
 23f8da6:	f1a1 0714 	sub.w	r7, r1, #20
 23f8daa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f8dac:	42b7      	cmp	r7, r6
 23f8dae:	d01c      	beq.n	23f8dea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23f8db0:	b12c      	cbz	r4, 23f8dbe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23f8db2:	4631      	mov	r1, r6
 23f8db4:	4620      	mov	r0, r4
 23f8db6:	f002 ff5a 	bl	23fbc6e <_ZN6StringC1EOS_>
 23f8dba:	7c33      	ldrb	r3, [r6, #16]
 23f8dbc:	7423      	strb	r3, [r4, #16]
 23f8dbe:	4630      	mov	r0, r6
 23f8dc0:	f002 fed8 	bl	23fbb74 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f8dc4:	3e14      	subs	r6, #20
 23f8dc6:	3c14      	subs	r4, #20
 23f8dc8:	e7f0      	b.n	23f8dac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f8dca:	d00e      	beq.n	23f8dea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23f8dcc:	42b5      	cmp	r5, r6
 23f8dce:	d00c      	beq.n	23f8dea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23f8dd0:	b12c      	cbz	r4, 23f8dde <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23f8dd2:	4629      	mov	r1, r5
 23f8dd4:	4620      	mov	r0, r4
 23f8dd6:	f002 ff4a 	bl	23fbc6e <_ZN6StringC1EOS_>
 23f8dda:	7c2b      	ldrb	r3, [r5, #16]
 23f8ddc:	7423      	strb	r3, [r4, #16]
 23f8dde:	4628      	mov	r0, r5
 23f8de0:	f002 fec8 	bl	23fbb74 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f8de4:	3514      	adds	r5, #20
 23f8de6:	3414      	adds	r4, #20
 23f8de8:	e7f0      	b.n	23f8dcc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23f8dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f8dec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23f8dec:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f8dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23f8df2:	e9c0 3300 	strd	r3, r3, [r0]
 23f8df6:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f8df8:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f8dfa:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f8dfc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23f8dfe:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23f8e00:	dd24      	ble.n	23f8e4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23f8e02:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23f8e06:	fb08 f007 	mul.w	r0, r8, r7
 23f8e0a:	f002 fbf9 	bl	23fb600 <malloc>
            if (!d) {
 23f8e0e:	4605      	mov	r5, r0
 23f8e10:	b1e0      	cbz	r0, 23f8e4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23f8e12:	e9d4 1200 	ldrd	r1, r2, [r4]
 23f8e16:	fb08 1202 	mla	r2, r8, r2, r1
 23f8e1a:	f7ff ffb9 	bl	23f8d90 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f8e1e:	6820      	ldr	r0, [r4, #0]
 23f8e20:	f002 fbfc 	bl	23fb61c <free>
        data_ = d;
 23f8e24:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23f8e26:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23f8e28:	e9d6 7300 	ldrd	r7, r3, [r6]
 23f8e2c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23f8e30:	45b8      	cmp	r8, r7
 23f8e32:	d009      	beq.n	23f8e48 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23f8e34:	4639      	mov	r1, r7
 23f8e36:	4628      	mov	r0, r5
 23f8e38:	f002 ff33 	bl	23fbca2 <_ZN6StringC1ERKS_>
 23f8e3c:	7c3b      	ldrb	r3, [r7, #16]
 23f8e3e:	3514      	adds	r5, #20
 23f8e40:	f805 3c04 	strb.w	r3, [r5, #-4]
 23f8e44:	3714      	adds	r7, #20
 23f8e46:	e7f3      	b.n	23f8e30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23f8e48:	6873      	ldr	r3, [r6, #4]
 23f8e4a:	6063      	str	r3, [r4, #4]
}
 23f8e4c:	4620      	mov	r0, r4
 23f8e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023f8e54 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 23f8e54:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 23f8e58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8e5c:	468b      	mov	fp, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8e5e:	e9d0 9a00 	ldrd	r9, sl, [r0]
 23f8e62:	4611      	mov	r1, r2
 23f8e64:	ebaa 0209 	sub.w	r2, sl, r9
	if (max_size() - size() < __n)
 23f8e68:	ebb3 1f22 	cmp.w	r3, r2, asr #4
 23f8e6c:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8e6e:	ea4f 1422 	mov.w	r4, r2, asr #4
	if (max_size() - size() < __n)
 23f8e72:	d102      	bne.n	23f8e7a <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 23f8e74:	4826      	ldr	r0, [pc, #152]	; (23f8f10 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xbc>)
 23f8e76:	f005 fb03 	bl	23fe480 <_ZSt20__throw_length_errorPKc>
 23f8e7a:	2c01      	cmp	r4, #1
 23f8e7c:	4622      	mov	r2, r4
 23f8e7e:	bf38      	it	cc
 23f8e80:	2201      	movcc	r2, #1
 23f8e82:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 23f8e84:	ebab 0609 	sub.w	r6, fp, r9

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f8e88:	d21a      	bcs.n	23f8ec0 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f8e8a:	b1dc      	cbz	r4, 23f8ec4 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x70>
 23f8e8c:	429c      	cmp	r4, r3
 23f8e8e:	bf28      	it	cs
 23f8e90:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23f8e92:	0120      	lsls	r0, r4, #4
 23f8e94:	9101      	str	r1, [sp, #4]
 23f8e96:	f7ff fe2a 	bl	23f8aee <_Znwj>
 23f8e9a:	4605      	mov	r5, r0
 23f8e9c:	9901      	ldr	r1, [sp, #4]
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23f8e9e:	19a8      	adds	r0, r5, r6
 23f8ea0:	d001      	beq.n	23f8ea6 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x52>
 23f8ea2:	f002 fee4 	bl	23fbc6e <_ZN6StringC1EOS_>
 23f8ea6:	4628      	mov	r0, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8ea8:	464e      	mov	r6, r9
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
 23f8eaa:	45b3      	cmp	fp, r6
 23f8eac:	f100 0710 	add.w	r7, r0, #16
 23f8eb0:	d00a      	beq.n	23f8ec8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
   */
#if __cplusplus >= 201103L
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 23f8eb2:	b110      	cbz	r0, 23f8eba <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x66>
 23f8eb4:	4631      	mov	r1, r6
 23f8eb6:	f002 fef4 	bl	23fbca2 <_ZN6StringC1ERKS_>
 23f8eba:	4638      	mov	r0, r7
 23f8ebc:	3610      	adds	r6, #16
 23f8ebe:	e7f4      	b.n	23f8eaa <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x56>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23f8ec0:	461c      	mov	r4, r3
 23f8ec2:	e7e6      	b.n	23f8e92 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23f8ec4:	4625      	mov	r5, r4
 23f8ec6:	e7ea      	b.n	23f8e9e <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x4a>
 23f8ec8:	4556      	cmp	r6, sl
 23f8eca:	d006      	beq.n	23f8eda <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x86>
 23f8ecc:	4631      	mov	r1, r6
 23f8ece:	4638      	mov	r0, r7
 23f8ed0:	f002 fee7 	bl	23fbca2 <_ZN6StringC1ERKS_>
 23f8ed4:	3610      	adds	r6, #16
 23f8ed6:	3710      	adds	r7, #16
 23f8ed8:	e7f6      	b.n	23f8ec8 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x74>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8eda:	464e      	mov	r6, r9
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 23f8edc:	4556      	cmp	r6, sl
 23f8ede:	d004      	beq.n	23f8eea <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      __pointer->~_Tp();
 23f8ee0:	4630      	mov	r0, r6
 23f8ee2:	f002 fe47 	bl	23fbb74 <_ZN6StringD1Ev>
	  for (; __first != __last; ++__first)
 23f8ee6:	3610      	adds	r6, #16
 23f8ee8:	e7f8      	b.n	23f8edc <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x88>
	if (__p)
 23f8eea:	f1b9 0f00 	cmp.w	r9, #0
 23f8eee:	d006      	beq.n	23f8efe <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 23f8ef0:	f8d8 1008 	ldr.w	r1, [r8, #8]
	::operator delete(__p
 23f8ef4:	4648      	mov	r0, r9
 23f8ef6:	eba1 0109 	sub.w	r1, r1, r9
 23f8efa:	f7ff fdfe 	bl	23f8afa <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f8efe:	eb05 1404 	add.w	r4, r5, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
 23f8f02:	e9c8 5700 	strd	r5, r7, [r8]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23f8f06:	f8c8 4008 	str.w	r4, [r8, #8]
    }
 23f8f0a:	b003      	add	sp, #12
 23f8f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8f10:	023fec19 	.word	0x023fec19

023f8f14 <_Z15loadAdFilenamesv>:

void loadAdFilenames() {
 23f8f14:	b530      	push	{r4, r5, lr}
    struct stat statbuf;

    DIR* dir = opendir("/");
 23f8f16:	481d      	ldr	r0, [pc, #116]	; (23f8f8c <_Z15loadAdFilenamesv+0x78>)
void loadAdFilenames() {
 23f8f18:	b085      	sub	sp, #20
    DIR* dir = opendir("/");
 23f8f1a:	f001 fef5 	bl	23fad08 <opendir>
 23f8f1e:	4604      	mov	r4, r0
    Log.info("Opened dir=%d", errno);
 23f8f20:	f002 fbc2 	bl	23fb6a8 <__errno>
 23f8f24:	491a      	ldr	r1, [pc, #104]	; (23f8f90 <_Z15loadAdFilenamesv+0x7c>)
 23f8f26:	6802      	ldr	r2, [r0, #0]
 23f8f28:	481a      	ldr	r0, [pc, #104]	; (23f8f94 <_Z15loadAdFilenamesv+0x80>)
 23f8f2a:	f7ff fe23 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
    if (dir != NULL) {
 23f8f2e:	b35c      	cbz	r4, 23f8f88 <_Z15loadAdFilenamesv+0x74>
        dirent *result = readdir(dir);
 23f8f30:	4620      	mov	r0, r4
 23f8f32:	f001 fef7 	bl	23fad24 <readdir>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23f8f36:	4d18      	ldr	r5, [pc, #96]	; (23f8f98 <_Z15loadAdFilenamesv+0x84>)
        while (result) {
 23f8f38:	b1f8      	cbz	r0, 23f8f7a <_Z15loadAdFilenamesv+0x66>
            if (result->d_type == DT_REG) {
 23f8f3a:	7a83      	ldrb	r3, [r0, #10]
 23f8f3c:	2b08      	cmp	r3, #8
 23f8f3e:	d112      	bne.n	23f8f66 <_Z15loadAdFilenamesv+0x52>
                adFileNames.push_back(result->d_name);
 23f8f40:	f100 010b 	add.w	r1, r0, #11
 23f8f44:	4668      	mov	r0, sp
 23f8f46:	f002 fe60 	bl	23fbc0a <_ZN6StringC1EPK19__FlashStringHelper>
 23f8f4a:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 23f8f4e:	4298      	cmp	r0, r3
 23f8f50:	d00d      	beq.n	23f8f6e <_Z15loadAdFilenamesv+0x5a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 23f8f52:	b110      	cbz	r0, 23f8f5a <_Z15loadAdFilenamesv+0x46>
 23f8f54:	4669      	mov	r1, sp
 23f8f56:	f002 fe8a 	bl	23fbc6e <_ZN6StringC1EOS_>
	    ++this->_M_impl._M_finish;
 23f8f5a:	686b      	ldr	r3, [r5, #4]
 23f8f5c:	3310      	adds	r3, #16
 23f8f5e:	606b      	str	r3, [r5, #4]
 23f8f60:	4668      	mov	r0, sp
 23f8f62:	f002 fe07 	bl	23fbb74 <_ZN6StringD1Ev>
            }
            result = readdir(dir);
 23f8f66:	4620      	mov	r0, r4
 23f8f68:	f001 fedc 	bl	23fad24 <readdir>
        while (result) {
 23f8f6c:	e7e4      	b.n	23f8f38 <_Z15loadAdFilenamesv+0x24>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 23f8f6e:	4601      	mov	r1, r0
 23f8f70:	466a      	mov	r2, sp
 23f8f72:	4628      	mov	r0, r5
 23f8f74:	f7ff ff6e 	bl	23f8e54 <_ZNSt6vectorI6StringSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
 23f8f78:	e7f2      	b.n	23f8f60 <_Z15loadAdFilenamesv+0x4c>
        }

        closedir(dir);
 23f8f7a:	4620      	mov	r0, r4
 23f8f7c:	f001 fee0 	bl	23fad40 <closedir>
        Log.info("Closed dir");
 23f8f80:	4906      	ldr	r1, [pc, #24]	; (23f8f9c <_Z15loadAdFilenamesv+0x88>)
 23f8f82:	4804      	ldr	r0, [pc, #16]	; (23f8f94 <_Z15loadAdFilenamesv+0x80>)
 23f8f84:	f7ff fdf6 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
    }
}
 23f8f88:	b005      	add	sp, #20
 23f8f8a:	bd30      	pop	{r4, r5, pc}
 23f8f8c:	023fec33 	.word	0x023fec33
 23f8f90:	023fec35 	.word	0x023fec35
 23f8f94:	1007ae7c 	.word	0x1007ae7c
 23f8f98:	1007adb0 	.word	0x1007adb0
 23f8f9c:	023fec43 	.word	0x023fec43

023f8fa0 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE>:

void handleAssets(spark::Vector<ApplicationAsset> assets) {
 23f8fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23f8fa4:	4c3f      	ldr	r4, [pc, #252]	; (23f90a4 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x104>)
 23f8fa6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 23f8faa:	4605      	mov	r5, r0
    // Delete all previous ad files
    loadAdFilenames();
 23f8fac:	f7ff ffb2 	bl	23f8f14 <_Z15loadAdFilenamesv>
 23f8fb0:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f8fb4:	1ad2      	subs	r2, r2, r3
    Log.info("ad file names length = %d", adFileNames.size());
 23f8fb6:	493c      	ldr	r1, [pc, #240]	; (23f90a8 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x108>)
 23f8fb8:	483c      	ldr	r0, [pc, #240]	; (23f90ac <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x10c>)
 23f8fba:	1112      	asrs	r2, r2, #4
 23f8fbc:	f7ff fdda 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 23f8fc0:	e9d4 4600 	ldrd	r4, r6, [r4]
    for (auto& path : adFileNames) {
 23f8fc4:	42a6      	cmp	r6, r4
 23f8fc6:	d004      	beq.n	23f8fd2 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x32>
        int result = unlink(path.c_str());
 23f8fc8:	f854 0b10 	ldr.w	r0, [r4], #16
 23f8fcc:	f005 fcfe 	bl	23fe9cc <unlink>
	return *this;
 23f8fd0:	e7f8      	b.n	23f8fc4 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x24>
    }

    for (auto& asset : assets) {
        int size = (int)asset.size();
        String name = asset.name();
        Log.info("Found asset %s", name.c_str());
 23f8fd2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 23f90bc <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x11c>
 23f8fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 23f90ac <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x10c>
        if (name.startsWith("ad") || name == "qrcode.bmp") {
 23f8fda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 23f90c0 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x120>
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 23f8fde:	e9d5 4700 	ldrd	r4, r7, [r5]
 23f8fe2:	eb04 1787 	add.w	r7, r4, r7, lsl #6
    for (auto& asset : assets) {
 23f8fe6:	42bc      	cmp	r4, r7
 23f8fe8:	d054      	beq.n	23f9094 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xf4>
        int size = (int)asset.size();
 23f8fea:	4620      	mov	r0, r4
 23f8fec:	f002 ff57 	bl	23fbe9e <_ZNK8particle16ApplicationAsset4sizeEv>
        String name = asset.name();
 23f8ff0:	4621      	mov	r1, r4
        int size = (int)asset.size();
 23f8ff2:	4606      	mov	r6, r0
        String name = asset.name();
 23f8ff4:	4668      	mov	r0, sp
 23f8ff6:	f002 ff4b 	bl	23fbe90 <_ZNK8particle16ApplicationAsset4nameEv>
        Log.info("Found asset %s", name.c_str());
 23f8ffa:	4649      	mov	r1, r9
 23f8ffc:	4640      	mov	r0, r8
 23f8ffe:	9a00      	ldr	r2, [sp, #0]
 23f9000:	f7ff fdb8 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
        if (name.startsWith("ad") || name == "qrcode.bmp") {
 23f9004:	4651      	mov	r1, sl
 23f9006:	a804      	add	r0, sp, #16
 23f9008:	f002 fdff 	bl	23fbc0a <_ZN6StringC1EPK19__FlashStringHelper>
 23f900c:	4668      	mov	r0, sp
 23f900e:	a904      	add	r1, sp, #16
 23f9010:	f002 fe82 	bl	23fbd18 <_ZNK6String10startsWithERKS_>
 23f9014:	bb78      	cbnz	r0, 23f9076 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xd6>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 23f9016:	4668      	mov	r0, sp
 23f9018:	4925      	ldr	r1, [pc, #148]	; (23f90b0 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x110>)
 23f901a:	f002 fe55 	bl	23fbcc8 <_ZNK6String6equalsEPKc>
 23f901e:	1e05      	subs	r5, r0, #0
 23f9020:	bf18      	it	ne
 23f9022:	2501      	movne	r5, #1
 23f9024:	a804      	add	r0, sp, #16
 23f9026:	f002 fda5 	bl	23fbb74 <_ZN6StringD1Ev>
 23f902a:	b375      	cbz	r5, 23f908a <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xea>
            uint8_t buf[BlockSize];
            int32_t bytesRead = 0;
            int fd = open(name, O_WRONLY | O_CREAT | O_TRUNC);
 23f902c:	f240 6101 	movw	r1, #1537	; 0x601
 23f9030:	9800      	ldr	r0, [sp, #0]
 23f9032:	f005 fcad 	bl	23fe990 <open>
 23f9036:	4605      	mov	r5, r0
            Log.info("Got fd=%d", fd);
 23f9038:	4602      	mov	r2, r0
 23f903a:	491e      	ldr	r1, [pc, #120]	; (23f90b4 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x114>)
 23f903c:	4640      	mov	r0, r8
 23f903e:	f7ff fd99 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
            if (fd != -1) {
 23f9042:	1c6b      	adds	r3, r5, #1
 23f9044:	d021      	beq.n	23f908a <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xea>
            int32_t bytesRead = 0;
 23f9046:	f04f 0b00 	mov.w	fp, #0
                while (bytesRead < size) {
 23f904a:	45b3      	cmp	fp, r6
 23f904c:	da15      	bge.n	23f907a <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xda>
                    int toRead = constrain(size - bytesRead, 0, sizeof(buf));
 23f904e:	eba6 020b 	sub.w	r2, r6, fp
                    toRead = asset.read((char*)buf, toRead);
 23f9052:	6823      	ldr	r3, [r4, #0]
 23f9054:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 23f9058:	bfa8      	it	ge
 23f905a:	f44f 7200 	movge.w	r2, #512	; 0x200
 23f905e:	4620      	mov	r0, r4
 23f9060:	6a1b      	ldr	r3, [r3, #32]
 23f9062:	a904      	add	r1, sp, #16
 23f9064:	4798      	blx	r3

                    if (toRead <= 0) break;
 23f9066:	1e02      	subs	r2, r0, #0
 23f9068:	dd07      	ble.n	23f907a <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xda>

                    bytesRead += toRead;

                    write(fd, buf, toRead);
 23f906a:	4628      	mov	r0, r5
 23f906c:	a904      	add	r1, sp, #16
                    bytesRead += toRead;
 23f906e:	4493      	add	fp, r2
                    write(fd, buf, toRead);
 23f9070:	f005 fcb4 	bl	23fe9dc <write>
                while (bytesRead < size) {
 23f9074:	e7e9      	b.n	23f904a <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0xaa>
        if (name.startsWith("ad") || name == "qrcode.bmp") {
 23f9076:	2501      	movs	r5, #1
 23f9078:	e7d4      	b.n	23f9024 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x84>
                }

                close(fd);
 23f907a:	4628      	mov	r0, r5
 23f907c:	f005 fc76 	bl	23fe96c <close>
                Log.info("Closed fd=%d", fd);
 23f9080:	462a      	mov	r2, r5
 23f9082:	4640      	mov	r0, r8
 23f9084:	490c      	ldr	r1, [pc, #48]	; (23f90b8 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x118>)
 23f9086:	f7ff fd75 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
        String name = asset.name();
 23f908a:	4668      	mov	r0, sp
 23f908c:	f002 fd72 	bl	23fbb74 <_ZN6StringD1Ev>
    for (auto& asset : assets) {
 23f9090:	3440      	adds	r4, #64	; 0x40
 23f9092:	e7a8      	b.n	23f8fe6 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE+0x46>
            }
        }
    }

    System.assetsHandled(true);
 23f9094:	2001      	movs	r0, #1
 23f9096:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
 23f909a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    System.assetsHandled(true);
 23f909e:	f002 bc20 	b.w	23fb8e2 <_ZN11SystemClass13assetsHandledEb>
 23f90a2:	bf00      	nop
 23f90a4:	1007adb0 	.word	0x1007adb0
 23f90a8:	023fec4e 	.word	0x023fec4e
 23f90ac:	1007ae7c 	.word	0x1007ae7c
 23f90b0:	023febd7 	.word	0x023febd7
 23f90b4:	023fec7a 	.word	0x023fec7a
 23f90b8:	023fec84 	.word	0x023fec84
 23f90bc:	023fec68 	.word	0x023fec68
 23f90c0:	023fec77 	.word	0x023fec77

023f90c4 <setup>:
void setup() {
 23f90c4:	b530      	push	{r4, r5, lr}
 23f90c6:	b087      	sub	sp, #28
    Serial.begin(115200);
 23f90c8:	f004 fc78 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23f90cc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23f90d0:	f004 fc62 	bl	23fd998 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23f90d4:	2000      	movs	r0, #0
 23f90d6:	f001 fdb5 	bl	23fac44 <hal_timer_millis>
        while (_while() && !_condition()) {
 23f90da:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
 23f90de:	4604      	mov	r4, r0
 23f90e0:	2000      	movs	r0, #0
 23f90e2:	f001 fdaf 	bl	23fac44 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23f90e6:	1b00      	subs	r0, r0, r4
 23f90e8:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23f90ec:	42a8      	cmp	r0, r5
 23f90ee:	f171 0300 	sbcs.w	r3, r1, #0
 23f90f2:	d207      	bcs.n	23f9104 <setup+0x40>
    waitFor(Serial.isConnected, 10000); delay(2000);
 23f90f4:	f004 fc62 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23f90f8:	f004 fc55 	bl	23fd9a6 <_ZN9USBSerial11isConnectedEv>
 23f90fc:	b910      	cbnz	r0, 23f9104 <setup+0x40>
            spark_process();
 23f90fe:	f002 f9c9 	bl	23fb494 <spark_process>
        while (_while() && !_condition()) {
 23f9102:	e7ed      	b.n	23f90e0 <setup+0x1c>
 23f9104:	f004 fc5a 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23f9108:	f004 fc4d 	bl	23fd9a6 <_ZN9USBSerial11isConnectedEv>
 23f910c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23f9110:	f004 f830 	bl	23fd174 <delay>
    Log.info("Starting assets available=%d", System.assetsAvailable().size());
 23f9114:	a803      	add	r0, sp, #12
 23f9116:	f002 fce0 	bl	23fbada <_ZN11SystemClass15assetsAvailableEv>
 23f911a:	9a04      	ldr	r2, [sp, #16]
 23f911c:	4926      	ldr	r1, [pc, #152]	; (23f91b8 <setup+0xf4>)
 23f911e:	4827      	ldr	r0, [pc, #156]	; (23f91bc <setup+0xf8>)
 23f9120:	f7ff fd28 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
 23f9124:	a803      	add	r0, sp, #12
 23f9126:	f7ff fe20 	bl	23f8d6a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>
    handleAssets(System.assetsAvailable());
 23f912a:	a803      	add	r0, sp, #12
 23f912c:	f002 fcd5 	bl	23fbada <_ZN11SystemClass15assetsAvailableEv>
 23f9130:	a803      	add	r0, sp, #12
 23f9132:	f7ff ff35 	bl	23f8fa0 <_Z12handleAssetsN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEEE>
 23f9136:	a803      	add	r0, sp, #12
 23f9138:	f7ff fe17 	bl	23f8d6a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEED1Ev>
    tft.begin();
 23f913c:	4820      	ldr	r0, [pc, #128]	; (23f91c0 <setup+0xfc>)
 23f913e:	f000 fc88 	bl	23f9a52 <_ZN16Adafruit_SSD13515beginEv>
    tft.fillScreen(0);
 23f9142:	2100      	movs	r1, #0
 23f9144:	481e      	ldr	r0, [pc, #120]	; (23f91c0 <setup+0xfc>)
 23f9146:	f000 fb3c 	bl	23f97c2 <_ZN16Adafruit_SSD135110fillScreenEt>
    tft.fillCircle(60, 60, 20, 0x0ff0);
 23f914a:	223c      	movs	r2, #60	; 0x3c
 23f914c:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 23f9150:	4611      	mov	r1, r2
 23f9152:	481c      	ldr	r0, [pc, #112]	; (23f91c4 <setup+0x100>)
 23f9154:	9300      	str	r3, [sp, #0]
 23f9156:	2314      	movs	r3, #20
 23f9158:	f000 ffc7 	bl	23fa0ea <_ZN12Adafruit_GFX10fillCircleEssst>
    delay(1000);
 23f915c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f9160:	f004 f808 	bl	23fd174 <delay>
    tft.fillScreen(0xff00);
 23f9164:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 23f9168:	4815      	ldr	r0, [pc, #84]	; (23f91c0 <setup+0xfc>)
 23f916a:	f000 fb2a 	bl	23f97c2 <_ZN16Adafruit_SSD135110fillScreenEt>
    delay(1000);
 23f916e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23f9172:	f003 ffff 	bl	23fd174 <delay>
    Wire.begin();
 23f9176:	f005 f95b 	bl	23fe430 <_Z19__fetch_global_Wirev>
 23f917a:	f004 fd01 	bl	23fdb80 <_ZN7TwoWire5beginEv>
    if (distanceSensor.begin() != 0) {
 23f917e:	4812      	ldr	r0, [pc, #72]	; (23f91c8 <setup+0x104>)
 23f9180:	f001 fca0 	bl	23faac4 <_ZN10SFEVL53L1X5beginEv>
 23f9184:	b118      	cbz	r0, 23f918e <setup+0xca>
        Log.error("VL53L1X failed to init");
 23f9186:	4911      	ldr	r1, [pc, #68]	; (23f91cc <setup+0x108>)
 23f9188:	480c      	ldr	r0, [pc, #48]	; (23f91bc <setup+0xf8>)
 23f918a:	f7ff fd0b 	bl	23f8ba4 <_ZNK5spark6Logger5errorEPKcz>
    distanceSensor.setDistanceModeLong();
 23f918e:	480e      	ldr	r0, [pc, #56]	; (23f91c8 <setup+0x104>)
 23f9190:	f001 fcbd 	bl	23fab0e <_ZN10SFEVL53L1X19setDistanceModeLongEv>
    pinMode(ButtonPin, INPUT_PULLUP);
 23f9194:	2102      	movs	r1, #2
 23f9196:	2004      	movs	r0, #4
 23f9198:	f005 f832 	bl	23fe200 <pinMode>
    pinMode(ButtonLedPin, OUTPUT);
 23f919c:	2101      	movs	r1, #1
 23f919e:	2005      	movs	r0, #5
 23f91a0:	f005 f82e 	bl	23fe200 <pinMode>
    digitalWrite(ButtonLedPin, HIGH);
 23f91a4:	2101      	movs	r1, #1
 23f91a6:	2005      	movs	r0, #5
 23f91a8:	f005 f83b 	bl	23fe222 <digitalWrite>
}
 23f91ac:	b007      	add	sp, #28
 23f91ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    loadAdFilenames();
 23f91b2:	f7ff beaf 	b.w	23f8f14 <_Z15loadAdFilenamesv>
 23f91b6:	bf00      	nop
 23f91b8:	023fec91 	.word	0x023fec91
 23f91bc:	1007ae7c 	.word	0x1007ae7c
 23f91c0:	1007ae08 	.word	0x1007ae08
 23f91c4:	1007ae14 	.word	0x1007ae14
 23f91c8:	1007adc8 	.word	0x1007adc8
 23f91cc:	023fecae 	.word	0x023fecae

023f91d0 <_GLOBAL__sub_I_currentAd>:
 23f91d0:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
 23f91d2:	2400      	movs	r4, #0
 23f91d4:	4b29      	ldr	r3, [pc, #164]	; (23f927c <_GLOBAL__sub_I_currentAd+0xac>)
Adafruit_SSD1351 tft = Adafruit_SSD1351(CsPin, DcPin, RstPin);
 23f91d6:	4d2a      	ldr	r5, [pc, #168]	; (23f9280 <_GLOBAL__sub_I_currentAd+0xb0>)
 23f91d8:	701c      	strb	r4, [r3, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 23f91da:	4b2a      	ldr	r3, [pc, #168]	; (23f9284 <_GLOBAL__sub_I_currentAd+0xb4>)
 23f91dc:	b08c      	sub	sp, #48	; 0x30
Adafruit_SSD1351 tft = Adafruit_SSD1351(CsPin, DcPin, RstPin);
 23f91de:	2213      	movs	r2, #19
 23f91e0:	2112      	movs	r1, #18
 23f91e2:	e9c3 4400 	strd	r4, r4, [r3]
 23f91e6:	609c      	str	r4, [r3, #8]
 23f91e8:	4628      	mov	r0, r5
 23f91ea:	230e      	movs	r3, #14
 23f91ec:	f000 f8fc 	bl	23f93e8 <_ZN16Adafruit_SSD1351C1Ehhh>
SFEVL53L1X distanceSensor;
 23f91f0:	f005 f91e 	bl	23fe430 <_Z19__fetch_global_Wirev>
 23f91f4:	f04f 33ff 	mov.w	r3, #4294967295
 23f91f8:	4601      	mov	r1, r0
 23f91fa:	461a      	mov	r2, r3
 23f91fc:	4822      	ldr	r0, [pc, #136]	; (23f9288 <_GLOBAL__sub_I_currentAd+0xb8>)
 23f91fe:	f001 fc27 	bl	23faa50 <_ZN10SFEVL53L1XC1ER7TwoWireii>
#include "Adafruit_mfGFX/Adafruit_mfGFX.h"
#include "Adafruit_SSD1351_Photon.h"

class Bitmap {
    public:
        Bitmap(Adafruit_SSD1351 *tft) : _tft(tft) { }
 23f9202:	4b22      	ldr	r3, [pc, #136]	; (23f928c <_GLOBAL__sub_I_currentAd+0xbc>)
        capacity_(0) {
 23f9204:	e9cd 4400 	strd	r4, r4, [sp]
 23f9208:	601d      	str	r5, [r3, #0]
 23f920a:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23f920c:	f004 fbd6 	bl	23fd9bc <_Z16_fetch_usbserialv>
        filter_(level, filters) {
 23f9210:	4c1f      	ldr	r4, [pc, #124]	; (23f9290 <_GLOBAL__sub_I_currentAd+0xc0>)
 23f9212:	4605      	mov	r5, r0
 23f9214:	4626      	mov	r6, r4
 23f9216:	4669      	mov	r1, sp
 23f9218:	a803      	add	r0, sp, #12
 23f921a:	f7ff fde7 	bl	23f8dec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23f921e:	a903      	add	r1, sp, #12
 23f9220:	a806      	add	r0, sp, #24
 23f9222:	f7ff fde3 	bl	23f8dec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f9226:	4b1b      	ldr	r3, [pc, #108]	; (23f9294 <_GLOBAL__sub_I_currentAd+0xc4>)
 23f9228:	a906      	add	r1, sp, #24
 23f922a:	f846 3b04 	str.w	r3, [r6], #4
 23f922e:	a809      	add	r0, sp, #36	; 0x24
 23f9230:	f7ff fddc 	bl	23f8dec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f9234:	aa09      	add	r2, sp, #36	; 0x24
 23f9236:	211e      	movs	r1, #30
 23f9238:	4630      	mov	r0, r6
 23f923a:	f003 fc79 	bl	23fcb30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f923e:	a809      	add	r0, sp, #36	; 0x24
 23f9240:	f7ff fd80 	bl	23f8d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f9244:	a806      	add	r0, sp, #24
 23f9246:	f7ff fd7d 	bl	23f8d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f924a:	4b13      	ldr	r3, [pc, #76]	; (23f9298 <_GLOBAL__sub_I_currentAd+0xc8>)
 23f924c:	6225      	str	r5, [r4, #32]
 23f924e:	6023      	str	r3, [r4, #0]
 23f9250:	a803      	add	r0, sp, #12
 23f9252:	f7ff fd77 	bl	23f8d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f9256:	4b11      	ldr	r3, [pc, #68]	; (23f929c <_GLOBAL__sub_I_currentAd+0xcc>)
 23f9258:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23f925a:	f004 fbaf 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23f925e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f9262:	f004 fb99 	bl	23fd998 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23f9266:	f003 f947 	bl	23fc4f8 <_ZN5spark10LogManager8instanceEv>
 23f926a:	4621      	mov	r1, r4
 23f926c:	f003 fb38 	bl	23fc8e0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23f9270:	4668      	mov	r0, sp
 23f9272:	f7ff fd67 	bl	23f8d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f9276:	b00c      	add	sp, #48	; 0x30
 23f9278:	bd70      	pop	{r4, r5, r6, pc}
 23f927a:	bf00      	nop
 23f927c:	1007adbc 	.word	0x1007adbc
 23f9280:	1007ae08 	.word	0x1007ae08
 23f9284:	1007adb0 	.word	0x1007adb0
 23f9288:	1007adc8 	.word	0x1007adc8
 23f928c:	1007adc0 	.word	0x1007adc0
 23f9290:	1007ade4 	.word	0x1007ade4
 23f9294:	023fecd0 	.word	0x023fecd0
 23f9298:	023ffb94 	.word	0x023ffb94
 23f929c:	023fece8 	.word	0x023fece8

023f92a0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23f92a0:	b513      	push	{r0, r1, r4, lr}
 23f92a2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23f92a4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f92a6:	b159      	cbz	r1, 23f92c0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f92a8:	9101      	str	r1, [sp, #4]
 23f92aa:	f7ff fbfb 	bl	23f8aa4 <strlen>
 23f92ae:	4602      	mov	r2, r0
 23f92b0:	4620      	mov	r0, r4
 23f92b2:	6823      	ldr	r3, [r4, #0]
 23f92b4:	9901      	ldr	r1, [sp, #4]
 23f92b6:	68db      	ldr	r3, [r3, #12]
    }
 23f92b8:	b002      	add	sp, #8
 23f92ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f92be:	4718      	bx	r3
    }
 23f92c0:	b002      	add	sp, #8
 23f92c2:	bd10      	pop	{r4, pc}

023f92c4 <_ZN16Adafruit_SSD1351D1Ev>:
#define SSD1351_CMD_HORIZSCROLL		0x96
#define SSD1351_CMD_STOPSCROLL		0x9E
#define SSD1351_CMD_STARTSCROLL		0x9F


class Adafruit_SSD1351  : public virtual Adafruit_GFX {
 23f92c4:	4a03      	ldr	r2, [pc, #12]	; (23f92d4 <_ZN16Adafruit_SSD1351D1Ev+0x10>)
 23f92c6:	f102 010c 	add.w	r1, r2, #12
 23f92ca:	325c      	adds	r2, #92	; 0x5c
 23f92cc:	6001      	str	r1, [r0, #0]
 23f92ce:	60c2      	str	r2, [r0, #12]
 23f92d0:	4770      	bx	lr
 23f92d2:	bf00      	nop
 23f92d4:	023fecf8 	.word	0x023fecf8

023f92d8 <_ZTv0_n12_N16Adafruit_SSD1351D1Ev>:
 23f92d8:	b510      	push	{r4, lr}
 23f92da:	6803      	ldr	r3, [r0, #0]
 23f92dc:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 23f92e0:	4b04      	ldr	r3, [pc, #16]	; (23f92f4 <_ZTv0_n12_N16Adafruit_SSD1351D1Ev+0x1c>)
 23f92e2:	1842      	adds	r2, r0, r1
 23f92e4:	f103 040c 	add.w	r4, r3, #12
 23f92e8:	335c      	adds	r3, #92	; 0x5c
 23f92ea:	5044      	str	r4, [r0, r1]
 23f92ec:	60d3      	str	r3, [r2, #12]
 23f92ee:	4610      	mov	r0, r2
 23f92f0:	bd10      	pop	{r4, pc}
 23f92f2:	bf00      	nop
 23f92f4:	023fecf8 	.word	0x023fecf8

023f92f8 <_ZN16Adafruit_SSD1351D0Ev>:
 23f92f8:	b510      	push	{r4, lr}
 23f92fa:	4604      	mov	r4, r0
 23f92fc:	4b05      	ldr	r3, [pc, #20]	; (23f9314 <_ZN16Adafruit_SSD1351D0Ev+0x1c>)
 23f92fe:	2138      	movs	r1, #56	; 0x38
 23f9300:	f103 020c 	add.w	r2, r3, #12
 23f9304:	335c      	adds	r3, #92	; 0x5c
 23f9306:	6002      	str	r2, [r0, #0]
 23f9308:	60c3      	str	r3, [r0, #12]
 23f930a:	f7ff fbf6 	bl	23f8afa <_ZdlPvj>
 23f930e:	4620      	mov	r0, r4
 23f9310:	bd10      	pop	{r4, pc}
 23f9312:	bf00      	nop
 23f9314:	023fecf8 	.word	0x023fecf8

023f9318 <_ZTv0_n12_N16Adafruit_SSD1351D0Ev>:
 23f9318:	f8d0 c000 	ldr.w	ip, [r0]
 23f931c:	f1ac 0c0c 	sub.w	ip, ip, #12
 23f9320:	f8dc c000 	ldr.w	ip, [ip]
 23f9324:	4460      	add	r0, ip
 23f9326:	e7e7      	b.n	23f92f8 <_ZN16Adafruit_SSD1351D0Ev>

023f9328 <digitalWriteFast>:
    #define pinResetFast(pin) digitalWrite(pin, LOW)

#endif

inline void digitalWriteFast(hal_pin_t pin, uint8_t value)
{
 23f9328:	b570      	push	{r4, r5, r6, lr}
 23f932a:	4604      	mov	r4, r0
    if (value)
 23f932c:	4d26      	ldr	r5, [pc, #152]	; (23f93c8 <digitalWriteFast+0xa0>)
 23f932e:	4e27      	ldr	r6, [pc, #156]	; (23f93cc <digitalWriteFast+0xa4>)
 23f9330:	b351      	cbz	r1, 23f9388 <digitalWriteFast+0x60>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f9332:	e8d5 3f8f 	ldab	r3, [r5]
 23f9336:	07da      	lsls	r2, r3, #31
 23f9338:	d409      	bmi.n	23f934e <digitalWriteFast+0x26>
 23f933a:	4628      	mov	r0, r5
 23f933c:	f7ff fbec 	bl	23f8b18 <__cxa_guard_acquire>
 23f9340:	b128      	cbz	r0, 23f934e <digitalWriteFast+0x26>
 23f9342:	f001 fc0f 	bl	23fab64 <hal_pin_map>
 23f9346:	6030      	str	r0, [r6, #0]
 23f9348:	4628      	mov	r0, r5
 23f934a:	f7ff fbea 	bl	23f8b22 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f934e:	200c      	movs	r0, #12
 23f9350:	4344      	muls	r4, r0
 23f9352:	6833      	ldr	r3, [r6, #0]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9354:	4a1e      	ldr	r2, [pc, #120]	; (23f93d0 <digitalWriteFast+0xa8>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9356:	1919      	adds	r1, r3, r4
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9358:	5d1c      	ldrb	r4, [r3, r4]
 23f935a:	4b1e      	ldr	r3, [pc, #120]	; (23f93d4 <digitalWriteFast+0xac>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f935c:	7848      	ldrb	r0, [r1, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f935e:	2c00      	cmp	r4, #0
 23f9360:	bf18      	it	ne
 23f9362:	4613      	movne	r3, r2
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9364:	2201      	movs	r2, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9366:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9368:	4082      	lsls	r2, r0
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23f936a:	2905      	cmp	r1, #5
 23f936c:	d001      	beq.n	23f9372 <digitalWriteFast+0x4a>
 23f936e:	2908      	cmp	r1, #8
 23f9370:	d104      	bne.n	23f937c <digitalWriteFast+0x54>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23f9372:	6859      	ldr	r1, [r3, #4]
 23f9374:	ea21 0202 	bic.w	r2, r1, r2
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9378:	605a      	str	r2, [r3, #4]
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
 23f937a:	bd70      	pop	{r4, r5, r6, pc}
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f937c:	6819      	ldr	r1, [r3, #0]
 23f937e:	4311      	orrs	r1, r2
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23f9380:	6019      	str	r1, [r3, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9382:	6859      	ldr	r1, [r3, #4]
 23f9384:	430a      	orrs	r2, r1
 23f9386:	e7f7      	b.n	23f9378 <digitalWriteFast+0x50>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f9388:	e8d5 3f8f 	ldab	r3, [r5]
 23f938c:	07db      	lsls	r3, r3, #31
 23f938e:	d409      	bmi.n	23f93a4 <digitalWriteFast+0x7c>
 23f9390:	4628      	mov	r0, r5
 23f9392:	f7ff fbc1 	bl	23f8b18 <__cxa_guard_acquire>
 23f9396:	b128      	cbz	r0, 23f93a4 <digitalWriteFast+0x7c>
 23f9398:	f001 fbe4 	bl	23fab64 <hal_pin_map>
 23f939c:	6030      	str	r0, [r6, #0]
 23f939e:	4628      	mov	r0, r5
 23f93a0:	f7ff fbbf 	bl	23f8b22 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f93a4:	200c      	movs	r0, #12
 23f93a6:	4344      	muls	r4, r0
 23f93a8:	6833      	ldr	r3, [r6, #0]
 23f93aa:	191a      	adds	r2, r3, r4
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f93ac:	5d19      	ldrb	r1, [r3, r4]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f93ae:	7850      	ldrb	r0, [r2, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f93b0:	4b08      	ldr	r3, [pc, #32]	; (23f93d4 <digitalWriteFast+0xac>)
 23f93b2:	4a07      	ldr	r2, [pc, #28]	; (23f93d0 <digitalWriteFast+0xa8>)
 23f93b4:	2900      	cmp	r1, #0
 23f93b6:	bf18      	it	ne
 23f93b8:	4613      	movne	r3, r2
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23f93ba:	2201      	movs	r2, #1
 23f93bc:	6819      	ldr	r1, [r3, #0]
 23f93be:	4082      	lsls	r2, r0
 23f93c0:	ea21 0102 	bic.w	r1, r1, r2
 23f93c4:	e7dc      	b.n	23f9380 <digitalWriteFast+0x58>
 23f93c6:	bf00      	nop
 23f93c8:	1007ae4c 	.word	0x1007ae4c
 23f93cc:	1007ae50 	.word	0x1007ae50
 23f93d0:	48014400 	.word	0x48014400
 23f93d4:	48014000 	.word	0x48014000

023f93d8 <_ZN16Adafruit_SSD13518Color565Ehhh>:
  writeCommand(SSD1351_CMD_WRITERAM);
}

uint16_t Adafruit_SSD1351::Color565(uint8_t r, uint8_t g, uint8_t b) {
  uint16_t c;
  c = r >> 3;
 23f93d8:	08c9      	lsrs	r1, r1, #3
  c <<= 6;
  c |= g >> 2;
 23f93da:	0892      	lsrs	r2, r2, #2
 23f93dc:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
  c <<= 5;
  c |= b >> 3;
 23f93e0:	08db      	lsrs	r3, r3, #3

  return c;
}
 23f93e2:	ea43 1042 	orr.w	r0, r3, r2, lsl #5
 23f93e6:	4770      	bx	lr

023f93e8 <_ZN16Adafruit_SSD1351C1Ehhh>:
    _sclk = sclk;
    _rst = rst;
}

// Hardware SPI
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23f93e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f93ea:	4616      	mov	r6, r2
 23f93ec:	2280      	movs	r2, #128	; 0x80
 23f93ee:	4604      	mov	r4, r0
 23f93f0:	460f      	mov	r7, r1
 23f93f2:	300c      	adds	r0, #12
 23f93f4:	4611      	mov	r1, r2
 23f93f6:	461d      	mov	r5, r3
 23f93f8:	f000 fdc6 	bl	23f9f88 <_ZN12Adafruit_GFXC1Ess>
 23f93fc:	4806      	ldr	r0, [pc, #24]	; (23f9418 <_ZN16Adafruit_SSD1351C1Ehhh+0x30>)
    _cs = cs;
 23f93fe:	7127      	strb	r7, [r4, #4]
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23f9400:	f100 030c 	add.w	r3, r0, #12
 23f9404:	6023      	str	r3, [r4, #0]
    _rs = rs;
    _sid = 0;
 23f9406:	2300      	movs	r3, #0
Adafruit_SSD1351::Adafruit_SSD1351(uint8_t cs, uint8_t rs,  uint8_t rst) : Adafruit_GFX(SSD1351WIDTH, SSD1351HEIGHT) {
 23f9408:	305c      	adds	r0, #92	; 0x5c
 23f940a:	60e0      	str	r0, [r4, #12]
    _rs = rs;
 23f940c:	7166      	strb	r6, [r4, #5]
    _sclk = 0;
    _rst = rst;
}
 23f940e:	4620      	mov	r0, r4
    _sid = 0;
 23f9410:	71e3      	strb	r3, [r4, #7]
    _sclk = 0;
 23f9412:	7223      	strb	r3, [r4, #8]
    _rst = rst;
 23f9414:	71a5      	strb	r5, [r4, #6]
}
 23f9416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f9418:	023fecf8 	.word	0x023fecf8

023f941c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23f941c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23f941e:	4c0a      	ldr	r4, [pc, #40]	; (23f9448 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23f9420:	e8d4 1f8f 	ldab	r1, [r4]
 23f9424:	f011 0101 	ands.w	r1, r1, #1
 23f9428:	d10b      	bne.n	23f9442 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23f942a:	4620      	mov	r0, r4
 23f942c:	9101      	str	r1, [sp, #4]
 23f942e:	f7ff fb73 	bl	23f8b18 <__cxa_guard_acquire>
 23f9432:	9901      	ldr	r1, [sp, #4]
 23f9434:	b128      	cbz	r0, 23f9442 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23f9436:	4805      	ldr	r0, [pc, #20]	; (23f944c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23f9438:	f002 f9a4 	bl	23fb784 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f943c:	4620      	mov	r0, r4
 23f943e:	f7ff fb70 	bl	23f8b22 <__cxa_guard_release>
        return instance;
    }
 23f9442:	4802      	ldr	r0, [pc, #8]	; (23f944c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23f9444:	b002      	add	sp, #8
 23f9446:	bd10      	pop	{r4, pc}
 23f9448:	1007ae40 	.word	0x1007ae40
 23f944c:	1007ae44 	.word	0x1007ae44

023f9450 <_ZN16Adafruit_SSD13518spiwriteEh>:
inline void Adafruit_SSD1351::spiwrite(uint8_t c) {
 23f9450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!_sid) {
 23f9454:	79c3      	ldrb	r3, [r0, #7]
inline void Adafruit_SSD1351::spiwrite(uint8_t c) {
 23f9456:	4607      	mov	r7, r0
 23f9458:	4689      	mov	r9, r1
    if (!_sid) {
 23f945a:	b933      	cbnz	r3, 23f946a <_ZN16Adafruit_SSD13518spiwriteEh+0x1a>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23f945c:	f7ff ffde 	bl	23f941c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9460:	4649      	mov	r1, r9
}
 23f9462:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9466:	f002 ba2d 	b.w	23fb8c4 <_ZN8SPIClass8transferEh>
 23f946a:	f04f 0807 	mov.w	r8, #7
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f946e:	4c58      	ldr	r4, [pc, #352]	; (23f95d0 <_ZN16Adafruit_SSD13518spiwriteEh+0x180>)
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9470:	f8df a164 	ldr.w	sl, [pc, #356]	; 23f95d8 <_ZN16Adafruit_SSD13518spiwriteEh+0x188>
 23f9474:	f8df b164 	ldr.w	fp, [pc, #356]	; 23f95dc <_ZN16Adafruit_SSD13518spiwriteEh+0x18c>
		pinResetFast(_sclk);
 23f9478:	7a3d      	ldrb	r5, [r7, #8]
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f947a:	e8d4 3f8f 	ldab	r3, [r4]
 23f947e:	f013 0f01 	tst.w	r3, #1
 23f9482:	4e54      	ldr	r6, [pc, #336]	; (23f95d4 <_ZN16Adafruit_SSD13518spiwriteEh+0x184>)
 23f9484:	d109      	bne.n	23f949a <_ZN16Adafruit_SSD13518spiwriteEh+0x4a>
 23f9486:	4620      	mov	r0, r4
 23f9488:	f7ff fb46 	bl	23f8b18 <__cxa_guard_acquire>
 23f948c:	b128      	cbz	r0, 23f949a <_ZN16Adafruit_SSD13518spiwriteEh+0x4a>
 23f948e:	f001 fb69 	bl	23fab64 <hal_pin_map>
 23f9492:	6030      	str	r0, [r6, #0]
 23f9494:	4620      	mov	r0, r4
 23f9496:	f7ff fb44 	bl	23f8b22 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f949a:	6832      	ldr	r2, [r6, #0]
 23f949c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 23f94a0:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 23f94a4:	7858      	ldrb	r0, [r3, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f94a6:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
 23f94aa:	2b00      	cmp	r3, #0
 23f94ac:	bf0c      	ite	eq
 23f94ae:	4652      	moveq	r2, sl
 23f94b0:	465a      	movne	r2, fp
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23f94b2:	2301      	movs	r3, #1
 23f94b4:	6811      	ldr	r1, [r2, #0]
 23f94b6:	4083      	lsls	r3, r0
 23f94b8:	ea21 0103 	bic.w	r1, r1, r3
 23f94bc:	6011      	str	r1, [r2, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f94be:	6851      	ldr	r1, [r2, #4]
 23f94c0:	430b      	orrs	r3, r1
 23f94c2:	6053      	str	r3, [r2, #4]
		if (c & (1 << (7-bit)))		// walk down mask from bit 7 to bit 0
 23f94c4:	fa49 f308 	asr.w	r3, r9, r8
 23f94c8:	f013 0f01 	tst.w	r3, #1
 23f94cc:	79fd      	ldrb	r5, [r7, #7]
 23f94ce:	d055      	beq.n	23f957c <_ZN16Adafruit_SSD13518spiwriteEh+0x12c>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f94d0:	e8d4 3f8f 	ldab	r3, [r4]
 23f94d4:	07d9      	lsls	r1, r3, #31
 23f94d6:	d409      	bmi.n	23f94ec <_ZN16Adafruit_SSD13518spiwriteEh+0x9c>
 23f94d8:	4620      	mov	r0, r4
 23f94da:	f7ff fb1d 	bl	23f8b18 <__cxa_guard_acquire>
 23f94de:	b128      	cbz	r0, 23f94ec <_ZN16Adafruit_SSD13518spiwriteEh+0x9c>
 23f94e0:	f001 fb40 	bl	23fab64 <hal_pin_map>
 23f94e4:	6030      	str	r0, [r6, #0]
 23f94e6:	4620      	mov	r0, r4
 23f94e8:	f7ff fb1b 	bl	23f8b22 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f94ec:	6832      	ldr	r2, [r6, #0]
 23f94ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f94f2:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f94f6:	eb02 0185 	add.w	r1, r2, r5, lsl #2
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f94fa:	2b00      	cmp	r3, #0
 23f94fc:	bf0c      	ite	eq
 23f94fe:	4652      	moveq	r2, sl
 23f9500:	465a      	movne	r2, fp
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9502:	2301      	movs	r3, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9504:	7848      	ldrb	r0, [r1, #1]
 23f9506:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9508:	4083      	lsls	r3, r0
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23f950a:	2905      	cmp	r1, #5
 23f950c:	d001      	beq.n	23f9512 <_ZN16Adafruit_SSD13518spiwriteEh+0xc2>
 23f950e:	2908      	cmp	r1, #8
 23f9510:	d12e      	bne.n	23f9570 <_ZN16Adafruit_SSD13518spiwriteEh+0x120>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23f9512:	6851      	ldr	r1, [r2, #4]
 23f9514:	ea21 0303 	bic.w	r3, r1, r3
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9518:	6053      	str	r3, [r2, #4]
		pinSetFast(_sclk);
 23f951a:	7a3d      	ldrb	r5, [r7, #8]
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f951c:	e8d4 3f8f 	ldab	r3, [r4]
 23f9520:	07db      	lsls	r3, r3, #31
 23f9522:	d409      	bmi.n	23f9538 <_ZN16Adafruit_SSD13518spiwriteEh+0xe8>
 23f9524:	4620      	mov	r0, r4
 23f9526:	f7ff faf7 	bl	23f8b18 <__cxa_guard_acquire>
 23f952a:	b128      	cbz	r0, 23f9538 <_ZN16Adafruit_SSD13518spiwriteEh+0xe8>
 23f952c:	f001 fb1a 	bl	23fab64 <hal_pin_map>
 23f9530:	6030      	str	r0, [r6, #0]
 23f9532:	4620      	mov	r0, r4
 23f9534:	f7ff faf5 	bl	23f8b22 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9538:	6830      	ldr	r0, [r6, #0]
 23f953a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f953e:	f810 3022 	ldrb.w	r3, [r0, r2, lsl #2]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9542:	eb00 0182 	add.w	r1, r0, r2, lsl #2
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f9546:	2b00      	cmp	r3, #0
 23f9548:	bf0c      	ite	eq
 23f954a:	4652      	moveq	r2, sl
 23f954c:	465a      	movne	r2, fp
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f954e:	2301      	movs	r3, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9550:	784d      	ldrb	r5, [r1, #1]
 23f9552:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9554:	40ab      	lsls	r3, r5
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23f9556:	2905      	cmp	r1, #5
 23f9558:	d001      	beq.n	23f955e <_ZN16Adafruit_SSD13518spiwriteEh+0x10e>
 23f955a:	2908      	cmp	r1, #8
 23f955c:	d132      	bne.n	23f95c4 <_ZN16Adafruit_SSD13518spiwriteEh+0x174>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23f955e:	6851      	ldr	r1, [r2, #4]
 23f9560:	ea21 0303 	bic.w	r3, r1, r3
	for (uint8_t bit = 0; bit < 8; bit++)  {
 23f9564:	f1b8 0801 	subs.w	r8, r8, #1
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9568:	6053      	str	r3, [r2, #4]
 23f956a:	d285      	bcs.n	23f9478 <_ZN16Adafruit_SSD13518spiwriteEh+0x28>
}
 23f956c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f9570:	6811      	ldr	r1, [r2, #0]
 23f9572:	4319      	orrs	r1, r3
 23f9574:	6011      	str	r1, [r2, #0]
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f9576:	6851      	ldr	r1, [r2, #4]
 23f9578:	430b      	orrs	r3, r1
 23f957a:	e7cd      	b.n	23f9518 <_ZN16Adafruit_SSD13518spiwriteEh+0xc8>
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23f957c:	e8d4 3f8f 	ldab	r3, [r4]
 23f9580:	07da      	lsls	r2, r3, #31
 23f9582:	d409      	bmi.n	23f9598 <_ZN16Adafruit_SSD13518spiwriteEh+0x148>
 23f9584:	4620      	mov	r0, r4
 23f9586:	f7ff fac7 	bl	23f8b18 <__cxa_guard_acquire>
 23f958a:	b128      	cbz	r0, 23f9598 <_ZN16Adafruit_SSD13518spiwriteEh+0x148>
 23f958c:	f001 faea 	bl	23fab64 <hal_pin_map>
 23f9590:	6030      	str	r0, [r6, #0]
 23f9592:	4620      	mov	r0, r4
 23f9594:	f7ff fac5 	bl	23f8b22 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23f9598:	6832      	ldr	r2, [r6, #0]
 23f959a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 23f959e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 23f95a2:	7858      	ldrb	r0, [r3, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23f95a4:	f812 3025 	ldrb.w	r3, [r2, r5, lsl #2]
 23f95a8:	2b00      	cmp	r3, #0
 23f95aa:	bf0c      	ite	eq
 23f95ac:	4651      	moveq	r1, sl
 23f95ae:	4659      	movne	r1, fp
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23f95b0:	2301      	movs	r3, #1
 23f95b2:	680a      	ldr	r2, [r1, #0]
 23f95b4:	4083      	lsls	r3, r0
 23f95b6:	ea22 0203 	bic.w	r2, r2, r3
 23f95ba:	600a      	str	r2, [r1, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f95bc:	684a      	ldr	r2, [r1, #4]
 23f95be:	4313      	orrs	r3, r2
 23f95c0:	604b      	str	r3, [r1, #4]
}
 23f95c2:	e7aa      	b.n	23f951a <_ZN16Adafruit_SSD13518spiwriteEh+0xca>
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23f95c4:	6811      	ldr	r1, [r2, #0]
 23f95c6:	4319      	orrs	r1, r3
 23f95c8:	6011      	str	r1, [r2, #0]
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23f95ca:	6851      	ldr	r1, [r2, #4]
 23f95cc:	430b      	orrs	r3, r1
 23f95ce:	e7c9      	b.n	23f9564 <_ZN16Adafruit_SSD13518spiwriteEh+0x114>
 23f95d0:	1007ae4c 	.word	0x1007ae4c
 23f95d4:	1007ae50 	.word	0x1007ae50
 23f95d8:	48014000 	.word	0x48014000
 23f95dc:	48014400 	.word	0x48014400

023f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>:
void Adafruit_SSD1351::writeCommand(uint8_t c) {
 23f95e0:	b538      	push	{r3, r4, r5, lr}
 23f95e2:	4604      	mov	r4, r0
 23f95e4:	460d      	mov	r5, r1
    digitalWriteFast(_rs, LOW);
 23f95e6:	7940      	ldrb	r0, [r0, #5]
 23f95e8:	2100      	movs	r1, #0
 23f95ea:	f7ff fe9d 	bl	23f9328 <digitalWriteFast>
    digitalWriteFast(_cs, LOW);
 23f95ee:	7920      	ldrb	r0, [r4, #4]
 23f95f0:	2100      	movs	r1, #0
 23f95f2:	f7ff fe99 	bl	23f9328 <digitalWriteFast>
    spiwrite(c);
 23f95f6:	4629      	mov	r1, r5
 23f95f8:	4620      	mov	r0, r4
 23f95fa:	f7ff ff29 	bl	23f9450 <_ZN16Adafruit_SSD13518spiwriteEh>
    digitalWriteFast(_cs, HIGH);
 23f95fe:	2101      	movs	r1, #1
 23f9600:	7920      	ldrb	r0, [r4, #4]
 23f9602:	f7ff fe91 	bl	23f9328 <digitalWriteFast>
}
 23f9606:	bd38      	pop	{r3, r4, r5, pc}

023f9608 <_ZN16Adafruit_SSD13519writeDataEh>:
void Adafruit_SSD1351::writeData(uint8_t c) {
 23f9608:	b538      	push	{r3, r4, r5, lr}
 23f960a:	4604      	mov	r4, r0
 23f960c:	460d      	mov	r5, r1
    digitalWriteFast(_rs, HIGH);
 23f960e:	7940      	ldrb	r0, [r0, #5]
 23f9610:	2101      	movs	r1, #1
 23f9612:	f7ff fe89 	bl	23f9328 <digitalWriteFast>
    digitalWriteFast(_cs, LOW);
 23f9616:	7920      	ldrb	r0, [r4, #4]
 23f9618:	2100      	movs	r1, #0
 23f961a:	f7ff fe85 	bl	23f9328 <digitalWriteFast>
    spiwrite(c);
 23f961e:	4629      	mov	r1, r5
 23f9620:	4620      	mov	r0, r4
 23f9622:	f7ff ff15 	bl	23f9450 <_ZN16Adafruit_SSD13518spiwriteEh>
    digitalWriteFast(_cs, HIGH);
 23f9626:	2101      	movs	r1, #1
 23f9628:	7920      	ldrb	r0, [r4, #4]
 23f962a:	f7ff fe7d 	bl	23f9328 <digitalWriteFast>
}
 23f962e:	bd38      	pop	{r3, r4, r5, pc}

023f9630 <_ZN16Adafruit_SSD13514goToEii>:
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23f9630:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::goTo(int x, int y) {
 23f9632:	b570      	push	{r4, r5, r6, lr}
 23f9634:	4604      	mov	r4, r0
 23f9636:	460e      	mov	r6, r1
 23f9638:	4615      	mov	r5, r2
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23f963a:	dc1e      	bgt.n	23f967a <_ZN16Adafruit_SSD13514goToEii+0x4a>
 23f963c:	2a7f      	cmp	r2, #127	; 0x7f
 23f963e:	dc1c      	bgt.n	23f967a <_ZN16Adafruit_SSD13514goToEii+0x4a>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f9640:	2115      	movs	r1, #21
 23f9642:	f7ff ffcd 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23f9646:	4620      	mov	r0, r4
 23f9648:	b2f1      	uxtb	r1, r6
 23f964a:	f7ff ffdd 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(SSD1351WIDTH-1);
 23f964e:	4620      	mov	r0, r4
 23f9650:	217f      	movs	r1, #127	; 0x7f
 23f9652:	f7ff ffd9 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_SETROW);
 23f9656:	4620      	mov	r0, r4
 23f9658:	2175      	movs	r1, #117	; 0x75
 23f965a:	f7ff ffc1 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23f965e:	4620      	mov	r0, r4
 23f9660:	b2e9      	uxtb	r1, r5
 23f9662:	f7ff ffd1 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(SSD1351HEIGHT-1);
 23f9666:	4620      	mov	r0, r4
 23f9668:	217f      	movs	r1, #127	; 0x7f
 23f966a:	f7ff ffcd 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23f966e:	4620      	mov	r0, r4
}
 23f9670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  writeCommand(SSD1351_CMD_WRITERAM);
 23f9674:	215c      	movs	r1, #92	; 0x5c
 23f9676:	f7ff bfb3 	b.w	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
}
 23f967a:	bd70      	pop	{r4, r5, r6, pc}

023f967c <_ZN16Adafruit_SSD135111rawFillRectEttttt>:
void Adafruit_SSD1351::rawFillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f967c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f9680:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f9682:	4606      	mov	r6, r0
 23f9684:	460d      	mov	r5, r1
 23f9686:	4614      	mov	r4, r2
 23f9688:	461f      	mov	r7, r3
 23f968a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 23f968e:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f9692:	d849      	bhi.n	23f9728 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
 23f9694:	2a7f      	cmp	r2, #127	; 0x7f
 23f9696:	d847      	bhi.n	23f9728 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
  if (y+h > SSD1351HEIGHT)
 23f9698:	eb02 0308 	add.w	r3, r2, r8
 23f969c:	2b80      	cmp	r3, #128	; 0x80
    h = SSD1351HEIGHT - y - 1;
 23f969e:	bfc8      	it	gt
 23f96a0:	f1c2 087f 	rsbgt	r8, r2, #127	; 0x7f
  if (x+w > SSD1351WIDTH)
 23f96a4:	eb01 0307 	add.w	r3, r1, r7
    h = SSD1351HEIGHT - y - 1;
 23f96a8:	bfc8      	it	gt
 23f96aa:	fa1f f888 	uxthgt.w	r8, r8
  if (x+w > SSD1351WIDTH)
 23f96ae:	2b80      	cmp	r3, #128	; 0x80
    w = SSD1351WIDTH - x - 1;
 23f96b0:	bfc8      	it	gt
 23f96b2:	f1c1 077f 	rsbgt	r7, r1, #127	; 0x7f
  writeData(x);
 23f96b6:	b2ed      	uxtb	r5, r5
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f96b8:	f04f 0115 	mov.w	r1, #21
    w = SSD1351WIDTH - x - 1;
 23f96bc:	bfc8      	it	gt
 23f96be:	b2bf      	uxthgt	r7, r7
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f96c0:	f7ff ff8e 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23f96c4:	4629      	mov	r1, r5
 23f96c6:	4630      	mov	r0, r6
  writeData(x+w-1);
 23f96c8:	3d01      	subs	r5, #1
  writeData(x);
 23f96ca:	f7ff ff9d 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x+w-1);
 23f96ce:	19e9      	adds	r1, r5, r7
 23f96d0:	4630      	mov	r0, r6
 23f96d2:	b2c9      	uxtb	r1, r1
 23f96d4:	f7ff ff98 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23f96d8:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETROW);
 23f96da:	2175      	movs	r1, #117	; 0x75
 23f96dc:	4630      	mov	r0, r6
 23f96de:	f7ff ff7f 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23f96e2:	4621      	mov	r1, r4
  writeData(y+h-1);
 23f96e4:	3c01      	subs	r4, #1
  writeData(y);
 23f96e6:	4630      	mov	r0, r6
  writeData(y+h-1);
 23f96e8:	4444      	add	r4, r8
  writeData(y);
 23f96ea:	f7ff ff8d 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y+h-1);
 23f96ee:	b2e1      	uxtb	r1, r4
 23f96f0:	4630      	mov	r0, r6
 23f96f2:	f7ff ff89 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23f96f6:	215c      	movs	r1, #92	; 0x5c
 23f96f8:	4630      	mov	r0, r6
 23f96fa:	f7ff ff71 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(fillcolor >> 8);
 23f96fe:	2400      	movs	r4, #0
  for (uint16_t i=0; i < w*h; i++) {
 23f9700:	fb08 f707 	mul.w	r7, r8, r7
    writeData(fillcolor >> 8);
 23f9704:	ea4f 2519 	mov.w	r5, r9, lsr #8
    writeData(fillcolor);
 23f9708:	fa5f f989 	uxtb.w	r9, r9
  for (uint16_t i=0; i < w*h; i++) {
 23f970c:	b2a3      	uxth	r3, r4
 23f970e:	42bb      	cmp	r3, r7
 23f9710:	f104 0401 	add.w	r4, r4, #1
 23f9714:	da08      	bge.n	23f9728 <_ZN16Adafruit_SSD135111rawFillRectEttttt+0xac>
    writeData(fillcolor >> 8);
 23f9716:	4629      	mov	r1, r5
 23f9718:	4630      	mov	r0, r6
 23f971a:	f7ff ff75 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(fillcolor);
 23f971e:	4649      	mov	r1, r9
 23f9720:	4630      	mov	r0, r6
 23f9722:	f7ff ff71 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < w*h; i++) {
 23f9726:	e7f1      	b.n	23f970c <_ZN16Adafruit_SSD135111rawFillRectEttttt+0x90>
}
 23f9728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023f972c <_ZN16Adafruit_SSD13518fillRectEttttt>:
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f972c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f9730:	4604      	mov	r4, r0
 23f9732:	461f      	mov	r7, r3
  switch (getRotation()) {
 23f9734:	6803      	ldr	r3, [r0, #0]
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f9736:	460e      	mov	r6, r1
  switch (getRotation()) {
 23f9738:	f853 0c0c 	ldr.w	r0, [r3, #-12]
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f973c:	4615      	mov	r5, r2
  switch (getRotation()) {
 23f973e:	4420      	add	r0, r4
void Adafruit_SSD1351::fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor) {
 23f9740:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 23f9744:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  switch (getRotation()) {
 23f9748:	f000 fda8 	bl	23fa29c <_ZN12Adafruit_GFX11getRotationEv>
 23f974c:	2803      	cmp	r0, #3
 23f974e:	d836      	bhi.n	23f97be <_ZN16Adafruit_SSD13518fillRectEttttt+0x92>
 23f9750:	e8df f000 	tbb	[pc, r0]
 23f9754:	28190c02 	.word	0x28190c02
    rawFillRect(x, y, w, h, fillcolor);
 23f9758:	463b      	mov	r3, r7
 23f975a:	462a      	mov	r2, r5
 23f975c:	4631      	mov	r1, r6
 23f975e:	e9cd 8908 	strd	r8, r9, [sp, #32]
    rawFillRect(x, y, h, w, fillcolor);
 23f9762:	4620      	mov	r0, r4
}
 23f9764:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rawFillRect(x, y, h, w, fillcolor);
 23f9768:	f7ff bf88 	b.w	23f967c <_ZN16Adafruit_SSD135111rawFillRectEttttt>
    x = WIDTH - x - h;
 23f976c:	6823      	ldr	r3, [r4, #0]
    rawFillRect(x, y, h, w, fillcolor);
 23f976e:	4632      	mov	r2, r6
    x = WIDTH - x - h;
 23f9770:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f9774:	4445      	add	r5, r8
 23f9776:	4423      	add	r3, r4
 23f9778:	8919      	ldrh	r1, [r3, #8]
    rawFillRect(x, y, h, w, fillcolor);
 23f977a:	4643      	mov	r3, r8
 23f977c:	e9cd 7908 	strd	r7, r9, [sp, #32]
    x = WIDTH - x - h;
 23f9780:	1b49      	subs	r1, r1, r5
    rawFillRect(x, y, w, h, fillcolor);
 23f9782:	b289      	uxth	r1, r1
 23f9784:	e7ed      	b.n	23f9762 <_ZN16Adafruit_SSD13518fillRectEttttt+0x36>
    x = WIDTH - x - w;
 23f9786:	6823      	ldr	r3, [r4, #0]
    y = HEIGHT - y - h;
 23f9788:	4445      	add	r5, r8
    x = WIDTH - x - w;
 23f978a:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f978e:	443e      	add	r6, r7
 23f9790:	4423      	add	r3, r4
    y = HEIGHT - y - h;
 23f9792:	895a      	ldrh	r2, [r3, #10]
    x = WIDTH - x - w;
 23f9794:	8919      	ldrh	r1, [r3, #8]
    y = HEIGHT - y - h;
 23f9796:	1b52      	subs	r2, r2, r5
    rawFillRect(x, y, w, h, fillcolor);
 23f9798:	463b      	mov	r3, r7
 23f979a:	e9cd 8908 	strd	r8, r9, [sp, #32]
    x = WIDTH - x - w;
 23f979e:	1b89      	subs	r1, r1, r6
    rawFillRect(x, y, w, h, fillcolor);
 23f97a0:	b292      	uxth	r2, r2
 23f97a2:	e7ee      	b.n	23f9782 <_ZN16Adafruit_SSD13518fillRectEttttt+0x56>
    y = HEIGHT - y - w;
 23f97a4:	6823      	ldr	r3, [r4, #0]
 23f97a6:	443e      	add	r6, r7
 23f97a8:	f853 3c0c 	ldr.w	r3, [r3, #-12]
    rawFillRect(x, y, h, w, fillcolor);
 23f97ac:	4629      	mov	r1, r5
    y = HEIGHT - y - w;
 23f97ae:	4423      	add	r3, r4
 23f97b0:	895a      	ldrh	r2, [r3, #10]
    rawFillRect(x, y, h, w, fillcolor);
 23f97b2:	4643      	mov	r3, r8
    y = HEIGHT - y - w;
 23f97b4:	1b92      	subs	r2, r2, r6
    rawFillRect(x, y, h, w, fillcolor);
 23f97b6:	e9cd 7908 	strd	r7, r9, [sp, #32]
 23f97ba:	b292      	uxth	r2, r2
 23f97bc:	e7d1      	b.n	23f9762 <_ZN16Adafruit_SSD13518fillRectEttttt+0x36>
}
 23f97be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f97c2 <_ZN16Adafruit_SSD135110fillScreenEt>:
void Adafruit_SSD1351::fillScreen(uint16_t fillcolor) {
 23f97c2:	b507      	push	{r0, r1, r2, lr}
  fillRect(0, 0, SSD1351WIDTH, SSD1351HEIGHT, fillcolor);
 23f97c4:	2380      	movs	r3, #128	; 0x80
 23f97c6:	2200      	movs	r2, #0
 23f97c8:	9101      	str	r1, [sp, #4]
 23f97ca:	9300      	str	r3, [sp, #0]
 23f97cc:	4611      	mov	r1, r2
 23f97ce:	f7ff ffad 	bl	23f972c <_ZN16Adafruit_SSD13518fillRectEttttt>
}
 23f97d2:	b003      	add	sp, #12
 23f97d4:	f85d fb04 	ldr.w	pc, [sp], #4

023f97d8 <_ZTv0_n48_N16Adafruit_SSD135110fillScreenEt>:
  // drawing primitives!
  void drawPixel(int16_t x, int16_t y, uint16_t color);
  void fillRect(uint16_t x0, uint16_t y0, uint16_t w, uint16_t h, uint16_t color);
  void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
  void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  void fillScreen(uint16_t fillcolor);
 23f97d8:	f8d0 c000 	ldr.w	ip, [r0]
 23f97dc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 23f97e0:	f8dc c000 	ldr.w	ip, [ip]
 23f97e4:	4460      	add	r0, ip
 23f97e6:	f7ff bfec 	b.w	23f97c2 <_ZN16Adafruit_SSD135110fillScreenEt>

023f97ea <_ZN16Adafruit_SSD135112rawFastHLineEssst>:
void Adafruit_SSD1351::rawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f97ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f97ee:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f97f0:	4605      	mov	r5, r0
 23f97f2:	460c      	mov	r4, r1
 23f97f4:	4617      	mov	r7, r2
 23f97f6:	461e      	mov	r6, r3
 23f97f8:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f97fc:	dc3b      	bgt.n	23f9876 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
 23f97fe:	2a7f      	cmp	r2, #127	; 0x7f
 23f9800:	dc39      	bgt.n	23f9876 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
  if (x+w > SSD1351WIDTH)
 23f9802:	18cb      	adds	r3, r1, r3
 23f9804:	2b80      	cmp	r3, #128	; 0x80
    w = SSD1351WIDTH - x - 1;
 23f9806:	bfc4      	itt	gt
 23f9808:	f1c1 067f 	rsbgt	r6, r1, #127	; 0x7f
 23f980c:	b236      	sxthgt	r6, r6
  if (w < 0) return;
 23f980e:	2e00      	cmp	r6, #0
 23f9810:	db31      	blt.n	23f9876 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f9812:	2115      	movs	r1, #21
  writeData(x);
 23f9814:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f9816:	f7ff fee3 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23f981a:	4621      	mov	r1, r4
  writeData(x+w-1);
 23f981c:	3c01      	subs	r4, #1
  writeData(x);
 23f981e:	4628      	mov	r0, r5
  writeData(x+w-1);
 23f9820:	4434      	add	r4, r6
  writeData(x);
 23f9822:	f7ff fef1 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x+w-1);
 23f9826:	b2e1      	uxtb	r1, r4
 23f9828:	4628      	mov	r0, r5
 23f982a:	f7ff feed 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_SETROW);
 23f982e:	2175      	movs	r1, #117	; 0x75
 23f9830:	4628      	mov	r0, r5
 23f9832:	f7ff fed5 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23f9836:	b2f9      	uxtb	r1, r7
 23f9838:	4628      	mov	r0, r5
 23f983a:	9101      	str	r1, [sp, #4]
 23f983c:	f7ff fee4 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23f9840:	4628      	mov	r0, r5
 23f9842:	9901      	ldr	r1, [sp, #4]
 23f9844:	f7ff fee0 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23f9848:	215c      	movs	r1, #92	; 0x5c
 23f984a:	4628      	mov	r0, r5
 23f984c:	f7ff fec8 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(color >> 8);
 23f9850:	2400      	movs	r4, #0
 23f9852:	ea4f 2718 	mov.w	r7, r8, lsr #8
    writeData(color);
 23f9856:	fa5f f888 	uxtb.w	r8, r8
  for (uint16_t i=0; i < w; i++) {
 23f985a:	b2a3      	uxth	r3, r4
 23f985c:	42b3      	cmp	r3, r6
 23f985e:	f104 0401 	add.w	r4, r4, #1
 23f9862:	da08      	bge.n	23f9876 <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x8c>
    writeData(color >> 8);
 23f9864:	4639      	mov	r1, r7
 23f9866:	4628      	mov	r0, r5
 23f9868:	f7ff fece 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(color);
 23f986c:	4641      	mov	r1, r8
 23f986e:	4628      	mov	r0, r5
 23f9870:	f7ff feca 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < w; i++) {
 23f9874:	e7f1      	b.n	23f985a <_ZN16Adafruit_SSD135112rawFastHLineEssst+0x70>
}
 23f9876:	b002      	add	sp, #8
 23f9878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f987c <_ZN16Adafruit_SSD135112rawFastVLineEssst>:
void Adafruit_SSD1351::rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f987c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f9880:	297f      	cmp	r1, #127	; 0x7f
void Adafruit_SSD1351::rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f9882:	4605      	mov	r5, r0
 23f9884:	460f      	mov	r7, r1
 23f9886:	4614      	mov	r4, r2
 23f9888:	461e      	mov	r6, r3
 23f988a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT))
 23f988e:	dc3b      	bgt.n	23f9908 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
 23f9890:	2a7f      	cmp	r2, #127	; 0x7f
 23f9892:	dc39      	bgt.n	23f9908 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
  if (y+h > SSD1351HEIGHT)
 23f9894:	18d3      	adds	r3, r2, r3
 23f9896:	2b80      	cmp	r3, #128	; 0x80
    h = SSD1351HEIGHT - y - 1;
 23f9898:	bfc4      	itt	gt
 23f989a:	f1c2 067f 	rsbgt	r6, r2, #127	; 0x7f
 23f989e:	b236      	sxthgt	r6, r6
  if (h < 0) return;
 23f98a0:	2e00      	cmp	r6, #0
 23f98a2:	db31      	blt.n	23f9908 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
  writeCommand(SSD1351_CMD_SETCOLUMN);
 23f98a4:	2115      	movs	r1, #21
 23f98a6:	f7ff fe9b 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(x);
 23f98aa:	b2f9      	uxtb	r1, r7
 23f98ac:	4628      	mov	r0, r5
 23f98ae:	9101      	str	r1, [sp, #4]
 23f98b0:	f7ff feaa 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(x);
 23f98b4:	4628      	mov	r0, r5
 23f98b6:	9901      	ldr	r1, [sp, #4]
 23f98b8:	f7ff fea6 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y);
 23f98bc:	b2e4      	uxtb	r4, r4
  writeCommand(SSD1351_CMD_SETROW);
 23f98be:	2175      	movs	r1, #117	; 0x75
 23f98c0:	4628      	mov	r0, r5
 23f98c2:	f7ff fe8d 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
  writeData(y);
 23f98c6:	4621      	mov	r1, r4
  writeData(y+h-1);
 23f98c8:	3c01      	subs	r4, #1
  writeData(y);
 23f98ca:	4628      	mov	r0, r5
  writeData(y+h-1);
 23f98cc:	4434      	add	r4, r6
  writeData(y);
 23f98ce:	f7ff fe9b 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeData(y+h-1);
 23f98d2:	b2e1      	uxtb	r1, r4
 23f98d4:	4628      	mov	r0, r5
 23f98d6:	f7ff fe97 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  writeCommand(SSD1351_CMD_WRITERAM);
 23f98da:	215c      	movs	r1, #92	; 0x5c
 23f98dc:	4628      	mov	r0, r5
 23f98de:	f7ff fe7f 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(color >> 8);
 23f98e2:	2400      	movs	r4, #0
 23f98e4:	ea4f 2718 	mov.w	r7, r8, lsr #8
    writeData(color);
 23f98e8:	fa5f f888 	uxtb.w	r8, r8
  for (uint16_t i=0; i < h; i++) {
 23f98ec:	b2a3      	uxth	r3, r4
 23f98ee:	42b3      	cmp	r3, r6
 23f98f0:	f104 0401 	add.w	r4, r4, #1
 23f98f4:	da08      	bge.n	23f9908 <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x8c>
    writeData(color >> 8);
 23f98f6:	4639      	mov	r1, r7
 23f98f8:	4628      	mov	r0, r5
 23f98fa:	f7ff fe85 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(color);
 23f98fe:	4641      	mov	r1, r8
 23f9900:	4628      	mov	r0, r5
 23f9902:	f7ff fe81 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
  for (uint16_t i=0; i < h; i++) {
 23f9906:	e7f1      	b.n	23f98ec <_ZN16Adafruit_SSD135112rawFastVLineEssst+0x70>
}
 23f9908:	b002      	add	sp, #8
 23f990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023f990e <_ZN16Adafruit_SSD135113drawFastVLineEssst>:
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f990e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f9910:	4604      	mov	r4, r0
 23f9912:	4616      	mov	r6, r2
  switch (getRotation()) {
 23f9914:	6802      	ldr	r2, [r0, #0]
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f9916:	9301      	str	r3, [sp, #4]
  switch (getRotation()) {
 23f9918:	f852 0c0c 	ldr.w	r0, [r2, #-12]
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f991c:	460d      	mov	r5, r1
  switch (getRotation()) {
 23f991e:	4420      	add	r0, r4
void Adafruit_SSD1351::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 23f9920:	f8bd 7020 	ldrh.w	r7, [sp, #32]
  switch (getRotation()) {
 23f9924:	f000 fcba 	bl	23fa29c <_ZN12Adafruit_GFX11getRotationEv>
 23f9928:	9b01      	ldr	r3, [sp, #4]
 23f992a:	2803      	cmp	r0, #3
 23f992c:	d835      	bhi.n	23f999a <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x8c>
 23f992e:	e8df f000 	tbb	[pc, r0]
 23f9932:	0b02      	.short	0x0b02
 23f9934:	291b      	.short	0x291b
    rawFastVLine(x, y, h, color);
 23f9936:	4632      	mov	r2, r6
 23f9938:	4629      	mov	r1, r5
 23f993a:	9708      	str	r7, [sp, #32]
    rawFastVLine(x, y, h, color);
 23f993c:	4620      	mov	r0, r4
}
 23f993e:	b003      	add	sp, #12
 23f9940:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastVLine(x, y, h, color);
 23f9944:	f7ff bf9a 	b.w	23f987c <_ZN16Adafruit_SSD135112rawFastVLineEssst>
    x = WIDTH - x - h;
 23f9948:	6822      	ldr	r2, [r4, #0]
 23f994a:	441e      	add	r6, r3
 23f994c:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    rawFastHLine(x, y, h, color);
 23f9950:	462a      	mov	r2, r5
    x = WIDTH - x - h;
 23f9952:	4420      	add	r0, r4
 23f9954:	8901      	ldrh	r1, [r0, #8]
    rawFastHLine(x, y, h, color);
 23f9956:	9708      	str	r7, [sp, #32]
    x = WIDTH - x - h;
 23f9958:	1b89      	subs	r1, r1, r6
    rawFastHLine(x, y, h, color);
 23f995a:	b209      	sxth	r1, r1
    rawFastHLine(x, y, h, color);
 23f995c:	4620      	mov	r0, r4
}
 23f995e:	b003      	add	sp, #12
 23f9960:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastHLine(x, y, h, color);
 23f9964:	f7ff bf41 	b.w	23f97ea <_ZN16Adafruit_SSD135112rawFastHLineEssst>
    x = WIDTH - x - 1;
 23f9968:	43e9      	mvns	r1, r5
 23f996a:	6822      	ldr	r2, [r4, #0]
    y = HEIGHT - y - h;
 23f996c:	441e      	add	r6, r3
    x = WIDTH - x - 1;
 23f996e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23f9972:	4420      	add	r0, r4
    y = HEIGHT - y - h;
 23f9974:	8942      	ldrh	r2, [r0, #10]
    x = WIDTH - x - 1;
 23f9976:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - h;
 23f9978:	1b92      	subs	r2, r2, r6
    x = WIDTH - x - 1;
 23f997a:	4429      	add	r1, r5
    rawFastVLine(x, y, h, color);
 23f997c:	9708      	str	r7, [sp, #32]
 23f997e:	b212      	sxth	r2, r2
 23f9980:	b209      	sxth	r1, r1
 23f9982:	e7db      	b.n	23f993c <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x2e>
    y = HEIGHT - y - 1;
 23f9984:	43ed      	mvns	r5, r5
 23f9986:	6822      	ldr	r2, [r4, #0]
    rawFastHLine(x, y, h, color);
 23f9988:	4631      	mov	r1, r6
    y = HEIGHT - y - 1;
 23f998a:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23f998e:	4422      	add	r2, r4
 23f9990:	8952      	ldrh	r2, [r2, #10]
    rawFastHLine(x, y, h, color);
 23f9992:	9708      	str	r7, [sp, #32]
    y = HEIGHT - y - 1;
 23f9994:	442a      	add	r2, r5
    rawFastHLine(x, y, h, color);
 23f9996:	b212      	sxth	r2, r2
 23f9998:	e7e0      	b.n	23f995c <_ZN16Adafruit_SSD135113drawFastVLineEssst+0x4e>
}
 23f999a:	b003      	add	sp, #12
 23f999c:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f999e <_ZTv0_n32_N16Adafruit_SSD135113drawFastVLineEssst>:
  void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
 23f999e:	f8d0 c000 	ldr.w	ip, [r0]
 23f99a2:	f1ac 0c20 	sub.w	ip, ip, #32
 23f99a6:	f8dc c000 	ldr.w	ip, [ip]
 23f99aa:	4460      	add	r0, ip
 23f99ac:	f7ff bfaf 	b.w	23f990e <_ZN16Adafruit_SSD135113drawFastVLineEssst>

023f99b0 <_ZN16Adafruit_SSD135113drawFastHLineEssst>:
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f99b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f99b2:	4604      	mov	r4, r0
 23f99b4:	4615      	mov	r5, r2
  switch (getRotation()) {
 23f99b6:	6802      	ldr	r2, [r0, #0]
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f99b8:	9301      	str	r3, [sp, #4]
  switch (getRotation()) {
 23f99ba:	f852 0c0c 	ldr.w	r0, [r2, #-12]
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f99be:	460e      	mov	r6, r1
  switch (getRotation()) {
 23f99c0:	4420      	add	r0, r4
void Adafruit_SSD1351::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 23f99c2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
  switch (getRotation()) {
 23f99c6:	f000 fc69 	bl	23fa29c <_ZN12Adafruit_GFX11getRotationEv>
 23f99ca:	9b01      	ldr	r3, [sp, #4]
 23f99cc:	2803      	cmp	r0, #3
 23f99ce:	d835      	bhi.n	23f9a3c <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x8c>
 23f99d0:	e8df f000 	tbb	[pc, r0]
 23f99d4:	291b0b02 	.word	0x291b0b02
    rawFastHLine(x, y, w, color);
 23f99d8:	462a      	mov	r2, r5
 23f99da:	4631      	mov	r1, r6
 23f99dc:	9708      	str	r7, [sp, #32]
    rawFastHLine(x, y, w, color);
 23f99de:	4620      	mov	r0, r4
}
 23f99e0:	b003      	add	sp, #12
 23f99e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastHLine(x, y, w, color);
 23f99e6:	f7ff bf00 	b.w	23f97ea <_ZN16Adafruit_SSD135112rawFastHLineEssst>
    x = WIDTH - x - 1;
 23f99ea:	6822      	ldr	r2, [r4, #0]
 23f99ec:	43e9      	mvns	r1, r5
 23f99ee:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23f99f2:	4422      	add	r2, r4
 23f99f4:	8915      	ldrh	r5, [r2, #8]
    rawFastVLine(x, y, w, color);
 23f99f6:	4632      	mov	r2, r6
    x = WIDTH - x - 1;
 23f99f8:	4429      	add	r1, r5
    rawFastVLine(x, y, w, color);
 23f99fa:	9708      	str	r7, [sp, #32]
 23f99fc:	b209      	sxth	r1, r1
    rawFastVLine(x, y, w, color);
 23f99fe:	4620      	mov	r0, r4
}
 23f9a00:	b003      	add	sp, #12
 23f9a02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rawFastVLine(x, y, w, color);
 23f9a06:	f7ff bf39 	b.w	23f987c <_ZN16Adafruit_SSD135112rawFastVLineEssst>
    x = WIDTH - x - w;
 23f9a0a:	6822      	ldr	r2, [r4, #0]
 23f9a0c:	441e      	add	r6, r3
 23f9a0e:	f852 0c0c 	ldr.w	r0, [r2, #-12]
    y = HEIGHT - y - 1;
 23f9a12:	43ea      	mvns	r2, r5
    x = WIDTH - x - w;
 23f9a14:	4420      	add	r0, r4
    y = HEIGHT - y - 1;
 23f9a16:	8945      	ldrh	r5, [r0, #10]
    x = WIDTH - x - w;
 23f9a18:	8901      	ldrh	r1, [r0, #8]
    y = HEIGHT - y - 1;
 23f9a1a:	442a      	add	r2, r5
    x = WIDTH - x - w;
 23f9a1c:	1b89      	subs	r1, r1, r6
    rawFastHLine(x, y, w, color);
 23f9a1e:	9708      	str	r7, [sp, #32]
 23f9a20:	b212      	sxth	r2, r2
 23f9a22:	b209      	sxth	r1, r1
 23f9a24:	e7db      	b.n	23f99de <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x2e>
    y = HEIGHT - y - w;
 23f9a26:	6822      	ldr	r2, [r4, #0]
 23f9a28:	441e      	add	r6, r3
 23f9a2a:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    rawFastVLine(x, y, w, color);
 23f9a2e:	4629      	mov	r1, r5
    y = HEIGHT - y - w;
 23f9a30:	4422      	add	r2, r4
 23f9a32:	8952      	ldrh	r2, [r2, #10]
    rawFastVLine(x, y, w, color);
 23f9a34:	9708      	str	r7, [sp, #32]
    y = HEIGHT - y - w;
 23f9a36:	1b92      	subs	r2, r2, r6
    rawFastVLine(x, y, w, color);
 23f9a38:	b212      	sxth	r2, r2
 23f9a3a:	e7e0      	b.n	23f99fe <_ZN16Adafruit_SSD135113drawFastHLineEssst+0x4e>
}
 23f9a3c:	b003      	add	sp, #12
 23f9a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f9a40 <_ZTv0_n36_N16Adafruit_SSD135113drawFastHLineEssst>:
  void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
 23f9a40:	f8d0 c000 	ldr.w	ip, [r0]
 23f9a44:	f1ac 0c24 	sub.w	ip, ip, #36	; 0x24
 23f9a48:	f8dc c000 	ldr.w	ip, [ip]
 23f9a4c:	4460      	add	r0, ip
 23f9a4e:	f7ff bfaf 	b.w	23f99b0 <_ZN16Adafruit_SSD135113drawFastHLineEssst>

023f9a52 <_ZN16Adafruit_SSD13515beginEv>:
void Adafruit_SSD1351::begin(void) {
 23f9a52:	b510      	push	{r4, lr}
 23f9a54:	4604      	mov	r4, r0
    pinMode(_rs, OUTPUT);
 23f9a56:	2101      	movs	r1, #1
 23f9a58:	7940      	ldrb	r0, [r0, #5]
 23f9a5a:	f004 fbd1 	bl	23fe200 <pinMode>
    if (_sclk) {
 23f9a5e:	7a20      	ldrb	r0, [r4, #8]
 23f9a60:	2800      	cmp	r0, #0
 23f9a62:	f000 80da 	beq.w	23f9c1a <_ZN16Adafruit_SSD13515beginEv+0x1c8>
        pinMode(_sclk, OUTPUT);
 23f9a66:	2101      	movs	r1, #1
 23f9a68:	f004 fbca 	bl	23fe200 <pinMode>
        pinMode(_sid, OUTPUT);
 23f9a6c:	2101      	movs	r1, #1
 23f9a6e:	79e0      	ldrb	r0, [r4, #7]
 23f9a70:	f004 fbc6 	bl	23fe200 <pinMode>
    pinMode(_cs, OUTPUT);
 23f9a74:	2101      	movs	r1, #1
 23f9a76:	7920      	ldrb	r0, [r4, #4]
 23f9a78:	f004 fbc2 	bl	23fe200 <pinMode>
    digitalWrite(_cs, LOW);
 23f9a7c:	7920      	ldrb	r0, [r4, #4]
 23f9a7e:	2100      	movs	r1, #0
 23f9a80:	f004 fbcf 	bl	23fe222 <digitalWrite>
    if (_rst) {
 23f9a84:	79a0      	ldrb	r0, [r4, #6]
 23f9a86:	b1d0      	cbz	r0, 23f9abe <_ZN16Adafruit_SSD13515beginEv+0x6c>
        pinMode(_rst, OUTPUT);
 23f9a88:	2101      	movs	r1, #1
 23f9a8a:	f004 fbb9 	bl	23fe200 <pinMode>
        digitalWrite(_rst, HIGH);
 23f9a8e:	2101      	movs	r1, #1
 23f9a90:	79a0      	ldrb	r0, [r4, #6]
 23f9a92:	f004 fbc6 	bl	23fe222 <digitalWrite>
        delay(500);
 23f9a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f9a9a:	f003 fb6b 	bl	23fd174 <delay>
        digitalWrite(_rst, LOW);
 23f9a9e:	2100      	movs	r1, #0
 23f9aa0:	79a0      	ldrb	r0, [r4, #6]
 23f9aa2:	f004 fbbe 	bl	23fe222 <digitalWrite>
        delay(500);
 23f9aa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f9aaa:	f003 fb63 	bl	23fd174 <delay>
        digitalWrite(_rst, HIGH);
 23f9aae:	79a0      	ldrb	r0, [r4, #6]
 23f9ab0:	2101      	movs	r1, #1
 23f9ab2:	f004 fbb6 	bl	23fe222 <digitalWrite>
        delay(500);
 23f9ab6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23f9aba:	f003 fb5b 	bl	23fd174 <delay>
    writeCommand(SSD1351_CMD_COMMANDLOCK);  // set command lock
 23f9abe:	4620      	mov	r0, r4
 23f9ac0:	21fd      	movs	r1, #253	; 0xfd
 23f9ac2:	f7ff fd8d 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x12);
 23f9ac6:	4620      	mov	r0, r4
 23f9ac8:	2112      	movs	r1, #18
 23f9aca:	f7ff fd9d 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_COMMANDLOCK);  // set command lock
 23f9ace:	4620      	mov	r0, r4
 23f9ad0:	21fd      	movs	r1, #253	; 0xfd
 23f9ad2:	f7ff fd85 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xB1);
 23f9ad6:	4620      	mov	r0, r4
 23f9ad8:	21b1      	movs	r1, #177	; 0xb1
 23f9ada:	f7ff fd95 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYOFF);  		// 0xAE
 23f9ade:	4620      	mov	r0, r4
 23f9ae0:	21ae      	movs	r1, #174	; 0xae
 23f9ae2:	f7ff fd7d 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_CLOCKDIV);  		// 0xB3
 23f9ae6:	4620      	mov	r0, r4
 23f9ae8:	21b3      	movs	r1, #179	; 0xb3
 23f9aea:	f7ff fd79 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0xF1);  						// 7:4 = Oscillator Frequency, 3:0 = CLK Div Ratio (A[3:0]+1 = 1..16)
 23f9aee:	4620      	mov	r0, r4
 23f9af0:	21f1      	movs	r1, #241	; 0xf1
 23f9af2:	f7ff fd75 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_MUXRATIO);
 23f9af6:	4620      	mov	r0, r4
 23f9af8:	21ca      	movs	r1, #202	; 0xca
 23f9afa:	f7ff fd71 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(127);
 23f9afe:	4620      	mov	r0, r4
 23f9b00:	217f      	movs	r1, #127	; 0x7f
 23f9b02:	f7ff fd81 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETREMAP);
 23f9b06:	4620      	mov	r0, r4
 23f9b08:	21a0      	movs	r1, #160	; 0xa0
 23f9b0a:	f7ff fd69 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x74);
 23f9b0e:	4620      	mov	r0, r4
 23f9b10:	2174      	movs	r1, #116	; 0x74
 23f9b12:	f7ff fd79 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETCOLUMN);
 23f9b16:	4620      	mov	r0, r4
 23f9b18:	2115      	movs	r1, #21
 23f9b1a:	f7ff fd61 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23f9b1e:	4620      	mov	r0, r4
 23f9b20:	2100      	movs	r1, #0
 23f9b22:	f7ff fd71 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x7F);
 23f9b26:	4620      	mov	r0, r4
 23f9b28:	217f      	movs	r1, #127	; 0x7f
 23f9b2a:	f7ff fd6d 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETROW);
 23f9b2e:	4620      	mov	r0, r4
 23f9b30:	2175      	movs	r1, #117	; 0x75
 23f9b32:	f7ff fd55 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23f9b36:	4620      	mov	r0, r4
 23f9b38:	2100      	movs	r1, #0
 23f9b3a:	f7ff fd65 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x7F);
 23f9b3e:	4620      	mov	r0, r4
 23f9b40:	217f      	movs	r1, #127	; 0x7f
 23f9b42:	f7ff fd61 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_STARTLINE); 		// 0xA1
 23f9b46:	4620      	mov	r0, r4
 23f9b48:	21a1      	movs	r1, #161	; 0xa1
 23f9b4a:	f7ff fd49 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
      writeData(0);
 23f9b4e:	4620      	mov	r0, r4
 23f9b50:	2100      	movs	r1, #0
 23f9b52:	f7ff fd59 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYOFFSET); 	// 0xA2
 23f9b56:	4620      	mov	r0, r4
 23f9b58:	21a2      	movs	r1, #162	; 0xa2
 23f9b5a:	f7ff fd41 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x0);
 23f9b5e:	4620      	mov	r0, r4
 23f9b60:	2100      	movs	r1, #0
 23f9b62:	f7ff fd51 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETGPIO);
 23f9b66:	4620      	mov	r0, r4
 23f9b68:	21b5      	movs	r1, #181	; 0xb5
 23f9b6a:	f7ff fd39 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x00);
 23f9b6e:	4620      	mov	r0, r4
 23f9b70:	2100      	movs	r1, #0
 23f9b72:	f7ff fd49 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_FUNCTIONSELECT);
 23f9b76:	4620      	mov	r0, r4
 23f9b78:	21ab      	movs	r1, #171	; 0xab
 23f9b7a:	f7ff fd31 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x01); // internal (diode drop)
 23f9b7e:	4620      	mov	r0, r4
 23f9b80:	2101      	movs	r1, #1
 23f9b82:	f7ff fd41 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_PRECHARGE);  		// 0xB1
 23f9b86:	4620      	mov	r0, r4
 23f9b88:	21b1      	movs	r1, #177	; 0xb1
 23f9b8a:	f7ff fd29 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0x32);
 23f9b8e:	4620      	mov	r0, r4
 23f9b90:	2132      	movs	r1, #50	; 0x32
 23f9b92:	f7ff fd25 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_VCOMH);  			// 0xBE
 23f9b96:	4620      	mov	r0, r4
 23f9b98:	21be      	movs	r1, #190	; 0xbe
 23f9b9a:	f7ff fd21 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(0x05);
 23f9b9e:	4620      	mov	r0, r4
 23f9ba0:	2105      	movs	r1, #5
 23f9ba2:	f7ff fd1d 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_NORMALDISPLAY);  	// 0xA6
 23f9ba6:	4620      	mov	r0, r4
 23f9ba8:	21a6      	movs	r1, #166	; 0xa6
 23f9baa:	f7ff fd19 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeCommand(SSD1351_CMD_CONTRASTABC);
 23f9bae:	4620      	mov	r0, r4
 23f9bb0:	21c1      	movs	r1, #193	; 0xc1
 23f9bb2:	f7ff fd15 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xC8);
 23f9bb6:	4620      	mov	r0, r4
 23f9bb8:	21c8      	movs	r1, #200	; 0xc8
 23f9bba:	f7ff fd25 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x80);
 23f9bbe:	4620      	mov	r0, r4
 23f9bc0:	2180      	movs	r1, #128	; 0x80
 23f9bc2:	f7ff fd21 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0xC8);
 23f9bc6:	4620      	mov	r0, r4
 23f9bc8:	21c8      	movs	r1, #200	; 0xc8
 23f9bca:	f7ff fd1d 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_CONTRASTMASTER);
 23f9bce:	4620      	mov	r0, r4
 23f9bd0:	21c7      	movs	r1, #199	; 0xc7
 23f9bd2:	f7ff fd05 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x0F);
 23f9bd6:	4620      	mov	r0, r4
 23f9bd8:	210f      	movs	r1, #15
 23f9bda:	f7ff fd15 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_SETVSL );
 23f9bde:	4620      	mov	r0, r4
 23f9be0:	21b4      	movs	r1, #180	; 0xb4
 23f9be2:	f7ff fcfd 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0xA0);
 23f9be6:	4620      	mov	r0, r4
 23f9be8:	21a0      	movs	r1, #160	; 0xa0
 23f9bea:	f7ff fd0d 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0xB5);
 23f9bee:	4620      	mov	r0, r4
 23f9bf0:	21b5      	movs	r1, #181	; 0xb5
 23f9bf2:	f7ff fd09 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeData(0x55);
 23f9bf6:	4620      	mov	r0, r4
 23f9bf8:	2155      	movs	r1, #85	; 0x55
 23f9bfa:	f7ff fd05 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_PRECHARGE2);
 23f9bfe:	4620      	mov	r0, r4
 23f9c00:	21b6      	movs	r1, #182	; 0xb6
 23f9c02:	f7ff fced 	bl	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
    writeData(0x01);
 23f9c06:	4620      	mov	r0, r4
 23f9c08:	2101      	movs	r1, #1
 23f9c0a:	f7ff fcfd 	bl	23f9608 <_ZN16Adafruit_SSD13519writeDataEh>
    writeCommand(SSD1351_CMD_DISPLAYON);		//--turn on oled panel
 23f9c0e:	4620      	mov	r0, r4
}
 23f9c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    writeCommand(SSD1351_CMD_DISPLAYON);		//--turn on oled panel
 23f9c14:	21af      	movs	r1, #175	; 0xaf
 23f9c16:	f7ff bce3 	b.w	23f95e0 <_ZN16Adafruit_SSD135112writeCommandEh>
        instance().begin();
 23f9c1a:	f7ff fbff 	bl	23f941c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9c1e:	f001 fdbb 	bl	23fb798 <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
 23f9c22:	f7ff fbfb 	bl	23f941c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9c26:	2110      	movs	r1, #16
 23f9c28:	f001 fe26 	bl	23fb878 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
 23f9c2c:	f7ff fbf6 	bl	23f941c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23f9c30:	2103      	movs	r1, #3
 23f9c32:	f001 fdc5 	bl	23fb7c0 <_ZN8SPIClass11setDataModeEh>
    }
 23f9c36:	e71d      	b.n	23f9a74 <_ZN16Adafruit_SSD13515beginEv+0x22>

023f9c38 <_ZN16Adafruit_SSD13519drawPixelEsst>:
{
 23f9c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f9c3a:	4604      	mov	r4, r0
 23f9c3c:	461f      	mov	r7, r3
  switch (getRotation()) {
 23f9c3e:	6803      	ldr	r3, [r0, #0]
{
 23f9c40:	460d      	mov	r5, r1
  switch (getRotation()) {
 23f9c42:	f853 0c0c 	ldr.w	r0, [r3, #-12]
{
 23f9c46:	4616      	mov	r6, r2
  switch (getRotation()) {
 23f9c48:	4420      	add	r0, r4
 23f9c4a:	f000 fb27 	bl	23fa29c <_ZN12Adafruit_GFX11getRotationEv>
 23f9c4e:	2802      	cmp	r0, #2
 23f9c50:	d02c      	beq.n	23f9cac <_ZN16Adafruit_SSD13519drawPixelEsst+0x74>
 23f9c52:	2803      	cmp	r0, #3
 23f9c54:	d037      	beq.n	23f9cc6 <_ZN16Adafruit_SSD13519drawPixelEsst+0x8e>
 23f9c56:	2801      	cmp	r0, #1
 23f9c58:	d108      	bne.n	23f9c6c <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>
    x = WIDTH - x - 1;
 23f9c5a:	43f2      	mvns	r2, r6
 23f9c5c:	6823      	ldr	r3, [r4, #0]
  void rawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
  template<typename T>
  void swap(T &x, T &y) {
    T tmp = x;
    x = y;
    y = tmp;
 23f9c5e:	462e      	mov	r6, r5
 23f9c60:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f9c64:	4423      	add	r3, r4
 23f9c66:	891b      	ldrh	r3, [r3, #8]
 23f9c68:	441a      	add	r2, r3
 23f9c6a:	b215      	sxth	r5, r2
  if ((x >= SSD1351WIDTH) || (y >= SSD1351HEIGHT)) return;
 23f9c6c:	b2ab      	uxth	r3, r5
 23f9c6e:	2b7f      	cmp	r3, #127	; 0x7f
 23f9c70:	d81b      	bhi.n	23f9caa <_ZN16Adafruit_SSD13519drawPixelEsst+0x72>
 23f9c72:	b2b3      	uxth	r3, r6
 23f9c74:	2b7f      	cmp	r3, #127	; 0x7f
 23f9c76:	d818      	bhi.n	23f9caa <_ZN16Adafruit_SSD13519drawPixelEsst+0x72>
  goTo(x, y);
 23f9c78:	4632      	mov	r2, r6
 23f9c7a:	4629      	mov	r1, r5
 23f9c7c:	4620      	mov	r0, r4
 23f9c7e:	f7ff fcd7 	bl	23f9630 <_ZN16Adafruit_SSD13514goToEii>
  digitalWriteFast(_rs, HIGH);
 23f9c82:	2101      	movs	r1, #1
 23f9c84:	7960      	ldrb	r0, [r4, #5]
 23f9c86:	f7ff fb4f 	bl	23f9328 <digitalWriteFast>
  digitalWriteFast(_cs, LOW);
 23f9c8a:	2100      	movs	r1, #0
 23f9c8c:	7920      	ldrb	r0, [r4, #4]
 23f9c8e:	f7ff fb4b 	bl	23f9328 <digitalWriteFast>
  spiwrite(color >> 8);
 23f9c92:	4620      	mov	r0, r4
 23f9c94:	0a39      	lsrs	r1, r7, #8
 23f9c96:	f7ff fbdb 	bl	23f9450 <_ZN16Adafruit_SSD13518spiwriteEh>
  spiwrite(color);
 23f9c9a:	4620      	mov	r0, r4
 23f9c9c:	b2f9      	uxtb	r1, r7
 23f9c9e:	f7ff fbd7 	bl	23f9450 <_ZN16Adafruit_SSD13518spiwriteEh>
  digitalWriteFast(_cs, HIGH);
 23f9ca2:	2101      	movs	r1, #1
 23f9ca4:	7920      	ldrb	r0, [r4, #4]
 23f9ca6:	f7ff fb3f 	bl	23f9328 <digitalWriteFast>
}
 23f9caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
 23f9cac:	43ed      	mvns	r5, r5
    y = HEIGHT - y - 1;
 23f9cae:	43f6      	mvns	r6, r6
    x = WIDTH - x - 1;
 23f9cb0:	6823      	ldr	r3, [r4, #0]
 23f9cb2:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f9cb6:	4423      	add	r3, r4
 23f9cb8:	8919      	ldrh	r1, [r3, #8]
    y = HEIGHT - y - 1;
 23f9cba:	895a      	ldrh	r2, [r3, #10]
    x = WIDTH - x - 1;
 23f9cbc:	440d      	add	r5, r1
    y = HEIGHT - y - 1;
 23f9cbe:	4416      	add	r6, r2
    x = WIDTH - x - 1;
 23f9cc0:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
 23f9cc2:	b236      	sxth	r6, r6
    break;
 23f9cc4:	e7d2      	b.n	23f9c6c <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>
    y = HEIGHT - y - 1;
 23f9cc6:	43e9      	mvns	r1, r5
 23f9cc8:	6823      	ldr	r3, [r4, #0]
    x = y;
 23f9cca:	4635      	mov	r5, r6
 23f9ccc:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 23f9cd0:	4423      	add	r3, r4
 23f9cd2:	895b      	ldrh	r3, [r3, #10]
 23f9cd4:	4419      	add	r1, r3
 23f9cd6:	b20e      	sxth	r6, r1
    break;
 23f9cd8:	e7c8      	b.n	23f9c6c <_ZN16Adafruit_SSD13519drawPixelEsst+0x34>

023f9cda <_ZTv0_n24_N16Adafruit_SSD13519drawPixelEsst>:
  void drawPixel(int16_t x, int16_t y, uint16_t color);
 23f9cda:	f8d0 c000 	ldr.w	ip, [r0]
 23f9cde:	f1ac 0c18 	sub.w	ip, ip, #24
 23f9ce2:	f8dc c000 	ldr.w	ip, [ip]
 23f9ce6:	4460      	add	r0, ip
 23f9ce8:	f7ff bfa6 	b.w	23f9c38 <_ZN16Adafruit_SSD13519drawPixelEsst>

023f9cec <_ZN16Adafruit_SSD1351D2Ev>:
class Adafruit_SSD1351  : public virtual Adafruit_GFX {
 23f9cec:	680a      	ldr	r2, [r1, #0]
 23f9cee:	6002      	str	r2, [r0, #0]
 23f9cf0:	6849      	ldr	r1, [r1, #4]
 23f9cf2:	f852 2c0c 	ldr.w	r2, [r2, #-12]
 23f9cf6:	5081      	str	r1, [r0, r2]
 23f9cf8:	4770      	bx	lr

023f9cfa <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 23f9cfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9cfe:	461f      	mov	r7, r3
 23f9d00:	b085      	sub	sp, #20
 23f9d02:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23f9d06:	eba7 0a01 	sub.w	sl, r7, r1
 23f9d0a:	eba8 0902 	sub.w	r9, r8, r2
 23f9d0e:	f1b9 0f00 	cmp.w	r9, #0
 23f9d12:	bfb8      	it	lt
 23f9d14:	f1c9 0900 	rsblt	r9, r9, #0
 23f9d18:	f1ba 0f00 	cmp.w	sl, #0
 23f9d1c:	bfb8      	it	lt
 23f9d1e:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
 23f9d22:	45d1      	cmp	r9, sl
			    uint16_t color) {
 23f9d24:	4683      	mov	fp, r0
 23f9d26:	460c      	mov	r4, r1
 23f9d28:	4615      	mov	r5, r2
 23f9d2a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  if (steep) {
 23f9d2e:	dd04      	ble.n	23f9d3a <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
 23f9d30:	463a      	mov	r2, r7
    swap(x0, y0);
 23f9d32:	462c      	mov	r4, r5
    swap(x1, y1);
 23f9d34:	4647      	mov	r7, r8
    swap(x0, y0);
 23f9d36:	460d      	mov	r5, r1
    swap(x1, y1);
 23f9d38:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
 23f9d3a:	42bc      	cmp	r4, r7
 23f9d3c:	dd05      	ble.n	23f9d4a <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
 23f9d3e:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 23f9d40:	4645      	mov	r5, r8
 23f9d42:	4690      	mov	r8, r2
  if (x0 > x1) {
 23f9d44:	4622      	mov	r2, r4
 23f9d46:	463c      	mov	r4, r7
 23f9d48:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 23f9d4a:	1b3e      	subs	r6, r7, r4
 23f9d4c:	b2b2      	uxth	r2, r6
 23f9d4e:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
 23f9d50:	eba8 0205 	sub.w	r2, r8, r5
 23f9d54:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23f9d58:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
 23f9d5c:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23f9d60:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 23f9d64:	4545      	cmp	r5, r8
 23f9d66:	bfb4      	ite	lt
 23f9d68:	2201      	movlt	r2, #1
 23f9d6a:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
 23f9d6e:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
 23f9d70:	1076      	asrs	r6, r6, #1
    ystep = -1;
 23f9d72:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 23f9d74:	42bc      	cmp	r4, r7
 23f9d76:	dc1c      	bgt.n	23f9db2 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
 23f9d78:	f8db 2000 	ldr.w	r2, [fp]
    if (steep) {
 23f9d7c:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
 23f9d7e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 23f9d82:	bfc7      	ittee	gt
 23f9d84:	4629      	movgt	r1, r5
 23f9d86:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
 23f9d88:	462a      	movle	r2, r5
 23f9d8a:	4621      	movle	r1, r4
      drawPixel(y0, x0, color);
 23f9d8c:	9303      	str	r3, [sp, #12]
      drawPixel(x0, y0, color);
 23f9d8e:	4658      	mov	r0, fp
 23f9d90:	47c0      	blx	r8
    }
    err -= dy;
 23f9d92:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
 23f9d94:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
 23f9d96:	1ab6      	subs	r6, r6, r2
 23f9d98:	b2b1      	uxth	r1, r6
 23f9d9a:	b236      	sxth	r6, r6
    if (err < 0) {
 23f9d9c:	2e00      	cmp	r6, #0
 23f9d9e:	da05      	bge.n	23f9dac <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
 23f9da0:	9a02      	ldr	r2, [sp, #8]
 23f9da2:	4415      	add	r5, r2
      err += dx;
 23f9da4:	9a00      	ldr	r2, [sp, #0]
      y0 += ystep;
 23f9da6:	b22d      	sxth	r5, r5
      err += dx;
 23f9da8:	1856      	adds	r6, r2, r1
 23f9daa:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
 23f9dac:	3401      	adds	r4, #1
 23f9dae:	b224      	sxth	r4, r4
 23f9db0:	e7e0      	b.n	23f9d74 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
 23f9db2:	b005      	add	sp, #20
 23f9db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f9db8 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 23f9db8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f9dbc:	4604      	mov	r4, r0
 23f9dbe:	4616      	mov	r6, r2
 23f9dc0:	468a      	mov	sl, r1
 23f9dc2:	461d      	mov	r5, r3
 23f9dc4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 23f9dc8:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
 23f9dca:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 23f9dce:	f8cd 8000 	str.w	r8, [sp]
 23f9dd2:	69ff      	ldr	r7, [r7, #28]
 23f9dd4:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 23f9dd6:	6823      	ldr	r3, [r4, #0]
 23f9dd8:	f109 32ff 	add.w	r2, r9, #4294967295
 23f9ddc:	f8cd 8000 	str.w	r8, [sp]
 23f9de0:	4432      	add	r2, r6
 23f9de2:	4651      	mov	r1, sl
 23f9de4:	4620      	mov	r0, r4
 23f9de6:	69df      	ldr	r7, [r3, #28]
 23f9de8:	b212      	sxth	r2, r2
 23f9dea:	462b      	mov	r3, r5
 23f9dec:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 23f9dee:	6823      	ldr	r3, [r4, #0]
 23f9df0:	f8cd 8000 	str.w	r8, [sp]
 23f9df4:	4632      	mov	r2, r6
 23f9df6:	4651      	mov	r1, sl
 23f9df8:	4620      	mov	r0, r4
 23f9dfa:	699f      	ldr	r7, [r3, #24]
 23f9dfc:	464b      	mov	r3, r9
 23f9dfe:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 23f9e00:	1e6b      	subs	r3, r5, #1
 23f9e02:	eb03 010a 	add.w	r1, r3, sl
 23f9e06:	6823      	ldr	r3, [r4, #0]
 23f9e08:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 23f9e0c:	699d      	ldr	r5, [r3, #24]
 23f9e0e:	4632      	mov	r2, r6
 23f9e10:	464b      	mov	r3, r9
 23f9e12:	4620      	mov	r0, r4
 23f9e14:	46ac      	mov	ip, r5
 23f9e16:	b209      	sxth	r1, r1
}
 23f9e18:	b002      	add	sp, #8
 23f9e1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
 23f9e1e:	4760      	bx	ip

023f9e20 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 23f9e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 23f9e22:	3b01      	subs	r3, #1
 23f9e24:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23f9e28:	4413      	add	r3, r2
 23f9e2a:	6804      	ldr	r4, [r0, #0]
 23f9e2c:	b21b      	sxth	r3, r3
 23f9e2e:	9300      	str	r3, [sp, #0]
 23f9e30:	9501      	str	r5, [sp, #4]
 23f9e32:	460b      	mov	r3, r1
 23f9e34:	6964      	ldr	r4, [r4, #20]
 23f9e36:	47a0      	blx	r4
}
 23f9e38:	b003      	add	sp, #12
 23f9e3a:	bd30      	pop	{r4, r5, pc}

023f9e3c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 23f9e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 23f9e3e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 23f9e42:	6804      	ldr	r4, [r0, #0]
 23f9e44:	e9cd 2500 	strd	r2, r5, [sp]
 23f9e48:	3b01      	subs	r3, #1
 23f9e4a:	440b      	add	r3, r1
 23f9e4c:	6964      	ldr	r4, [r4, #20]
 23f9e4e:	b21b      	sxth	r3, r3
 23f9e50:	47a0      	blx	r4
}
 23f9e52:	b003      	add	sp, #12
 23f9e54:	bd30      	pop	{r4, r5, pc}

023f9e56 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 23f9e56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f9e5a:	4605      	mov	r5, r0
 23f9e5c:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 23f9e5e:	460c      	mov	r4, r1
			    uint16_t color) {
 23f9e60:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23f9e64:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  for (int16_t i=x; i<x+w; i++) {
 23f9e68:	18ce      	adds	r6, r1, r3
 23f9e6a:	42b4      	cmp	r4, r6
 23f9e6c:	da0b      	bge.n	23f9e86 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
 23f9e6e:	682b      	ldr	r3, [r5, #0]
 23f9e70:	f8cd 8000 	str.w	r8, [sp]
 23f9e74:	4621      	mov	r1, r4
 23f9e76:	699f      	ldr	r7, [r3, #24]
 23f9e78:	4652      	mov	r2, sl
 23f9e7a:	464b      	mov	r3, r9
 23f9e7c:	4628      	mov	r0, r5
 23f9e7e:	3401      	adds	r4, #1
 23f9e80:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
 23f9e82:	b224      	sxth	r4, r4
 23f9e84:	e7f1      	b.n	23f9e6a <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
 23f9e86:	b002      	add	sp, #8
 23f9e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f9e8c <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 23f9e8c:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 23f9e8e:	9101      	str	r1, [sp, #4]
 23f9e90:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23f9e94:	6802      	ldr	r2, [r0, #0]
 23f9e96:	9100      	str	r1, [sp, #0]
 23f9e98:	6a54      	ldr	r4, [r2, #36]	; 0x24
 23f9e9a:	2200      	movs	r2, #0
 23f9e9c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23f9ea0:	4611      	mov	r1, r2
 23f9ea2:	47a0      	blx	r4
}
 23f9ea4:	b002      	add	sp, #8
 23f9ea6:	bd10      	pop	{r4, pc}

023f9ea8 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
 23f9ea8:	4770      	bx	lr

023f9eaa <_ZN12Adafruit_GFX5writeEh>:
  if (c == '\n') {
 23f9eaa:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
 23f9eac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 23f9eb0:	4604      	mov	r4, r0
 23f9eb2:	460d      	mov	r5, r1
  if (c == '\n') {
 23f9eb4:	d10c      	bne.n	23f9ed0 <_ZN12Adafruit_GFX5writeEh+0x26>
    cursor_y += textsize*fontDesc[0].height;	//all chars are same height so use height of space char
 23f9eb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 23f9eb8:	7e02      	ldrb	r2, [r0, #24]
 23f9eba:	7859      	ldrb	r1, [r3, #1]
 23f9ebc:	8a43      	ldrh	r3, [r0, #18]
 23f9ebe:	fb01 3302 	mla	r3, r1, r2, r3
      cursor_y += textsize*h;
 23f9ec2:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 23f9ec4:	2300      	movs	r3, #0
 23f9ec6:	8223      	strh	r3, [r4, #16]
}
 23f9ec8:	2001      	movs	r0, #1
 23f9eca:	b004      	add	sp, #16
 23f9ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (c == '\r') {
 23f9ed0:	290d      	cmp	r1, #13
 23f9ed2:	d0f9      	beq.n	23f9ec8 <_ZN12Adafruit_GFX5writeEh+0x1e>
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 23f9ed4:	7e02      	ldrb	r2, [r0, #24]
 23f9ed6:	6803      	ldr	r3, [r0, #0]
 23f9ed8:	9202      	str	r2, [sp, #8]
 23f9eda:	8ac2      	ldrh	r2, [r0, #22]
 23f9edc:	9201      	str	r2, [sp, #4]
 23f9ede:	8a82      	ldrh	r2, [r0, #20]
 23f9ee0:	9200      	str	r2, [sp, #0]
 23f9ee2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 23f9ee4:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 23f9ee8:	460b      	mov	r3, r1
 23f9eea:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 23f9eee:	47b0      	blx	r6
	uint16_t w = fontDesc[c-fontStart].width;
 23f9ef0:	7ee3      	ldrb	r3, [r4, #27]
    if (fontKern > 0 && textcolor != textbgcolor) {
 23f9ef2:	f994 701d 	ldrsb.w	r7, [r4, #29]
	uint16_t w = fontDesc[c-fontStart].width;
 23f9ef6:	1aed      	subs	r5, r5, r3
 23f9ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (fontKern > 0 && textcolor != textbgcolor) {
 23f9efa:	2f00      	cmp	r7, #0
	uint16_t w = fontDesc[c-fontStart].width;
 23f9efc:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 23f9f00:	f813 6025 	ldrb.w	r6, [r3, r5, lsl #2]
	uint16_t h = fontDesc[c-fontStart].height;
 23f9f04:	7855      	ldrb	r5, [r2, #1]
    if (fontKern > 0 && textcolor != textbgcolor) {
 23f9f06:	dd15      	ble.n	23f9f34 <_ZN12Adafruit_GFX5writeEh+0x8a>
 23f9f08:	8ae2      	ldrh	r2, [r4, #22]
 23f9f0a:	8aa3      	ldrh	r3, [r4, #20]
 23f9f0c:	4293      	cmp	r3, r2
 23f9f0e:	d011      	beq.n	23f9f34 <_ZN12Adafruit_GFX5writeEh+0x8a>
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
 23f9f10:	7e23      	ldrb	r3, [r4, #24]
 23f9f12:	9201      	str	r2, [sp, #4]
 23f9f14:	8a21      	ldrh	r1, [r4, #16]
 23f9f16:	fb15 f203 	smulbb	r2, r5, r3
 23f9f1a:	fb06 1103 	mla	r1, r6, r3, r1
 23f9f1e:	6820      	ldr	r0, [r4, #0]
 23f9f20:	b212      	sxth	r2, r2
 23f9f22:	9200      	str	r2, [sp, #0]
 23f9f24:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 23f9f28:	437b      	muls	r3, r7
 23f9f2a:	4620      	mov	r0, r4
 23f9f2c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23f9f30:	b209      	sxth	r1, r1
 23f9f32:	47c0      	blx	r8
    cursor_x += textsize*(w+fontKern);
 23f9f34:	f994 301d 	ldrsb.w	r3, [r4, #29]
 23f9f38:	7e27      	ldrb	r7, [r4, #24]
 23f9f3a:	1999      	adds	r1, r3, r6
 23f9f3c:	8a23      	ldrh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 23f9f3e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    cursor_x += textsize*(w+fontKern);
 23f9f42:	fb01 3307 	mla	r3, r1, r7, r3
 23f9f46:	b21b      	sxth	r3, r3
 23f9f48:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 23f9f4a:	2a00      	cmp	r2, #0
 23f9f4c:	d0bc      	beq.n	23f9ec8 <_ZN12Adafruit_GFX5writeEh+0x1e>
 23f9f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 23f9f52:	fb06 2217 	mls	r2, r6, r7, r2
 23f9f56:	4293      	cmp	r3, r2
 23f9f58:	ddb6      	ble.n	23f9ec8 <_ZN12Adafruit_GFX5writeEh+0x1e>
      cursor_y += textsize*h;
 23f9f5a:	8a63      	ldrh	r3, [r4, #18]
 23f9f5c:	fb05 3307 	mla	r3, r5, r7, r3
 23f9f60:	e7af      	b.n	23f9ec2 <_ZN12Adafruit_GFX5writeEh+0x18>
	...

023f9f64 <_ZN12Adafruit_GFX7setFontEh>:
      font = GLCDFONT;
 23f9f64:	2304      	movs	r3, #4
	  fontDesc = glcdfontDescriptors;
 23f9f66:	4a06      	ldr	r2, [pc, #24]	; (23f9f80 <_ZN12Adafruit_GFX7setFontEh+0x1c>)
      font = GLCDFONT;
 23f9f68:	7683      	strb	r3, [r0, #26]
	  fontDesc = glcdfontDescriptors;
 23f9f6a:	6242      	str	r2, [r0, #36]	; 0x24
      fontKern = 1;
 23f9f6c:	2201      	movs	r2, #1
      fontData = glcdfontBitmaps;
 23f9f6e:	4b05      	ldr	r3, [pc, #20]	; (23f9f84 <_ZN12Adafruit_GFX7setFontEh+0x20>)
      fontKern = 1;
 23f9f70:	7742      	strb	r2, [r0, #29]
      fontData = glcdfontBitmaps;
 23f9f72:	6203      	str	r3, [r0, #32]
  fontStart = pgm_read_byte(fontData+FONT_START);
 23f9f74:	781a      	ldrb	r2, [r3, #0]
 23f9f76:	76c2      	strb	r2, [r0, #27]
  fontEnd = pgm_read_byte(fontData+FONT_END);
 23f9f78:	785b      	ldrb	r3, [r3, #1]
 23f9f7a:	7703      	strb	r3, [r0, #28]
}
 23f9f7c:	4770      	bx	lr
 23f9f7e:	bf00      	nop
 23f9f80:	023ff5be 	.word	0x023ff5be
 23f9f84:	023fedc4 	.word	0x023fedc4

023f9f88 <_ZN12Adafruit_GFXC1Ess>:
  WIDTH(w), HEIGHT(h)
 23f9f88:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
 23f9f8a:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
 23f9f8c:	f04f 32ff 	mov.w	r2, #4294967295
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23f9f90:	b538      	push	{r3, r4, r5, lr}
  textcolor = textbgcolor = 0xFFFF;
 23f9f92:	6142      	str	r2, [r0, #20]
    Print() : write_error(0) {}
 23f9f94:	2400      	movs	r4, #0
  textsize  = 1;
 23f9f96:	2201      	movs	r2, #1
  WIDTH(w), HEIGHT(h)
 23f9f98:	4d06      	ldr	r5, [pc, #24]	; (23f9fb4 <_ZN12Adafruit_GFXC1Ess+0x2c>)
 23f9f9a:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
 23f9f9c:	8181      	strh	r1, [r0, #12]
 23f9f9e:	6044      	str	r4, [r0, #4]
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 23f9fa0:	2104      	movs	r1, #4
  WIDTH(w), HEIGHT(h)
 23f9fa2:	6005      	str	r5, [r0, #0]
  cursor_y  = cursor_x    = 0;
 23f9fa4:	6104      	str	r4, [r0, #16]
  textsize  = 1;
 23f9fa6:	8302      	strh	r2, [r0, #24]
  wrap      = true;
 23f9fa8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 23f9fac:	f7ff ffda 	bl	23f9f64 <_ZN12Adafruit_GFX7setFontEh>
 }
 23f9fb0:	bd38      	pop	{r3, r4, r5, pc}
 23f9fb2:	bf00      	nop
 23f9fb4:	023fed90 	.word	0x023fed90

023f9fb8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    uint8_t cornername, int16_t delta, uint16_t color) {
 23f9fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9fbc:	461c      	mov	r4, r3
 23f9fbe:	b08d      	sub	sp, #52	; 0x34
 23f9fc0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23f9fc4:	4683      	mov	fp, r0
 23f9fc6:	9309      	str	r3, [sp, #36]	; 0x24
 23f9fc8:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
  int16_t ddF_y = -2 * r;
 23f9fcc:	2703      	movs	r7, #3
    uint8_t cornername, int16_t delta, uint16_t color) {
 23f9fce:	930a      	str	r3, [sp, #40]	; 0x28
 23f9fd0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 23f9fd4:	9208      	str	r2, [sp, #32]
 23f9fd6:	9304      	str	r3, [sp, #16]
  int16_t f     = 1 - r;
 23f9fd8:	b2a3      	uxth	r3, r4
 23f9fda:	f1c3 0501 	rsb	r5, r3, #1
  int16_t ddF_y = -2 * r;
 23f9fde:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 23f9fe2:	005b      	lsls	r3, r3, #1
 23f9fe4:	b21b      	sxth	r3, r3
 23f9fe6:	9307      	str	r3, [sp, #28]
  int16_t x     = 0;
 23f9fe8:	2300      	movs	r3, #0
 23f9fea:	9306      	str	r3, [sp, #24]
    if (cornername & 0x1) {
 23f9fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
  int16_t f     = 1 - r;
 23f9fee:	b22a      	sxth	r2, r5
    if (cornername & 0x1) {
 23f9ff0:	f003 0301 	and.w	r3, r3, #1
 23f9ff4:	930b      	str	r3, [sp, #44]	; 0x2c
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 23f9ff6:	b28b      	uxth	r3, r1
  int16_t f     = 1 - r;
 23f9ff8:	9203      	str	r2, [sp, #12]
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 23f9ffa:	9305      	str	r3, [sp, #20]
  while (x<y) {
 23f9ffc:	9b06      	ldr	r3, [sp, #24]
 23f9ffe:	42a3      	cmp	r3, r4
 23fa000:	da70      	bge.n	23fa0e4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x12c>
    if (f >= 0) {
 23fa002:	9b03      	ldr	r3, [sp, #12]
 23fa004:	2b00      	cmp	r3, #0
 23fa006:	db0a      	blt.n	23fa01e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x66>
      ddF_y += 2;
 23fa008:	9b07      	ldr	r3, [sp, #28]
      y--;
 23fa00a:	3c01      	subs	r4, #1
      ddF_y += 2;
 23fa00c:	3302      	adds	r3, #2
 23fa00e:	b21a      	sxth	r2, r3
 23fa010:	9207      	str	r2, [sp, #28]
      f     += ddF_y;
 23fa012:	9a03      	ldr	r2, [sp, #12]
      y--;
 23fa014:	b224      	sxth	r4, r4
      f     += ddF_y;
 23fa016:	fa12 f583 	uxtah	r5, r2, r3
 23fa01a:	b22b      	sxth	r3, r5
 23fa01c:	9303      	str	r3, [sp, #12]
    x++;
 23fa01e:	9b06      	ldr	r3, [sp, #24]
 23fa020:	3301      	adds	r3, #1
 23fa022:	fa1f fa83 	uxth.w	sl, r3
 23fa026:	b21b      	sxth	r3, r3
 23fa028:	9306      	str	r3, [sp, #24]
    f     += ddF_x;
 23fa02a:	9b03      	ldr	r3, [sp, #12]
 23fa02c:	443b      	add	r3, r7
 23fa02e:	b21b      	sxth	r3, r3
 23fa030:	9303      	str	r3, [sp, #12]
    if (cornername & 0x1) {
 23fa032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23fa034:	b33b      	cbz	r3, 23fa086 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xce>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 23fa036:	9804      	ldr	r0, [sp, #16]
 23fa038:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 23fa03c:	9000      	str	r0, [sp, #0]
 23fa03e:	f8db 0000 	ldr.w	r0, [fp]
 23fa042:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 23fa046:	9905      	ldr	r1, [sp, #20]
 23fa048:	b2a6      	uxth	r6, r4
 23fa04a:	6980      	ldr	r0, [r0, #24]
 23fa04c:	f108 0301 	add.w	r3, r8, #1
 23fa050:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 23fa054:	eba9 0206 	sub.w	r2, r9, r6
 23fa058:	4451      	add	r1, sl
 23fa05a:	4605      	mov	r5, r0
 23fa05c:	b21b      	sxth	r3, r3
 23fa05e:	4658      	mov	r0, fp
 23fa060:	b212      	sxth	r2, r2
 23fa062:	b209      	sxth	r1, r1
 23fa064:	47a8      	blx	r5
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 23fa066:	9905      	ldr	r1, [sp, #20]
 23fa068:	9804      	ldr	r0, [sp, #16]
 23fa06a:	4431      	add	r1, r6
 23fa06c:	f8db 6000 	ldr.w	r6, [fp]
 23fa070:	9000      	str	r0, [sp, #0]
 23fa072:	eb08 0307 	add.w	r3, r8, r7
 23fa076:	eba9 020a 	sub.w	r2, r9, sl
 23fa07a:	4658      	mov	r0, fp
 23fa07c:	69b6      	ldr	r6, [r6, #24]
 23fa07e:	b21b      	sxth	r3, r3
 23fa080:	b212      	sxth	r2, r2
 23fa082:	b209      	sxth	r1, r1
 23fa084:	47b0      	blx	r6
    if (cornername & 0x2) {
 23fa086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fa088:	079b      	lsls	r3, r3, #30
 23fa08a:	d528      	bpl.n	23fa0de <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x126>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 23fa08c:	9804      	ldr	r0, [sp, #16]
 23fa08e:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 23fa092:	9000      	str	r0, [sp, #0]
 23fa094:	f8db 0000 	ldr.w	r0, [fp]
 23fa098:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 23fa09c:	9905      	ldr	r1, [sp, #20]
 23fa09e:	b2a6      	uxth	r6, r4
 23fa0a0:	6980      	ldr	r0, [r0, #24]
 23fa0a2:	f109 0301 	add.w	r3, r9, #1
 23fa0a6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 23fa0aa:	eba8 0206 	sub.w	r2, r8, r6
 23fa0ae:	eba1 010a 	sub.w	r1, r1, sl
 23fa0b2:	4605      	mov	r5, r0
 23fa0b4:	b21b      	sxth	r3, r3
 23fa0b6:	4658      	mov	r0, fp
 23fa0b8:	b212      	sxth	r2, r2
 23fa0ba:	b209      	sxth	r1, r1
 23fa0bc:	47a8      	blx	r5
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 23fa0be:	9905      	ldr	r1, [sp, #20]
 23fa0c0:	9804      	ldr	r0, [sp, #16]
 23fa0c2:	1b89      	subs	r1, r1, r6
 23fa0c4:	f8db 6000 	ldr.w	r6, [fp]
 23fa0c8:	9000      	str	r0, [sp, #0]
 23fa0ca:	eb09 0307 	add.w	r3, r9, r7
 23fa0ce:	eba8 020a 	sub.w	r2, r8, sl
 23fa0d2:	4658      	mov	r0, fp
 23fa0d4:	69b6      	ldr	r6, [r6, #24]
 23fa0d6:	b21b      	sxth	r3, r3
 23fa0d8:	b212      	sxth	r2, r2
 23fa0da:	b209      	sxth	r1, r1
 23fa0dc:	47b0      	blx	r6
 23fa0de:	3702      	adds	r7, #2
 23fa0e0:	b2bf      	uxth	r7, r7
 23fa0e2:	e78b      	b.n	23f9ffc <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x44>
}
 23fa0e4:	b00d      	add	sp, #52	; 0x34
 23fa0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fa0ea <_ZN12Adafruit_GFX10fillCircleEssst>:
			      uint16_t color) {
 23fa0ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fa0ee:	4615      	mov	r5, r2
 23fa0f0:	b085      	sub	sp, #20
 23fa0f2:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
  drawFastVLine(x0, y0-r, 2*r+1, color);
 23fa0f6:	b29a      	uxth	r2, r3
 23fa0f8:	f8cd 8000 	str.w	r8, [sp]
			      uint16_t color) {
 23fa0fc:	461e      	mov	r6, r3
  drawFastVLine(x0, y0-r, 2*r+1, color);
 23fa0fe:	0053      	lsls	r3, r2, #1
 23fa100:	f103 0c01 	add.w	ip, r3, #1
 23fa104:	6803      	ldr	r3, [r0, #0]
 23fa106:	1aaa      	subs	r2, r5, r2
 23fa108:	f8d3 9018 	ldr.w	r9, [r3, #24]
 23fa10c:	b212      	sxth	r2, r2
 23fa10e:	fa0f f38c 	sxth.w	r3, ip
			      uint16_t color) {
 23fa112:	4604      	mov	r4, r0
 23fa114:	460f      	mov	r7, r1
  drawFastVLine(x0, y0-r, 2*r+1, color);
 23fa116:	47c8      	blx	r9
  fillCircleHelper(x0, y0, r, 3, 0, color);
 23fa118:	2303      	movs	r3, #3
 23fa11a:	2200      	movs	r2, #0
 23fa11c:	4639      	mov	r1, r7
 23fa11e:	e9cd 3200 	strd	r3, r2, [sp]
 23fa122:	4620      	mov	r0, r4
 23fa124:	4633      	mov	r3, r6
 23fa126:	462a      	mov	r2, r5
 23fa128:	f8cd 8008 	str.w	r8, [sp, #8]
 23fa12c:	f7ff ff44 	bl	23f9fb8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
}
 23fa130:	b005      	add	sp, #20
 23fa132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fa136 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fa136:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa13a:	ed2d 8b02 	vpush	{d8}
 23fa13e:	b089      	sub	sp, #36	; 0x24
 23fa140:	4690      	mov	r8, r2
 23fa142:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 23fa146:	4682      	mov	sl, r0
 23fa148:	9204      	str	r2, [sp, #16]
 23fa14a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 23fa14e:	2500      	movs	r5, #0
 23fa150:	9205      	str	r2, [sp, #20]
  if (c < fontStart || c > fontEnd) {
 23fa152:	7ec2      	ldrb	r2, [r0, #27]
			    uint16_t color, uint16_t bg, uint8_t size) {
 23fa154:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
  if (c < fontStart || c > fontEnd) {
 23fa158:	429a      	cmp	r2, r3
 23fa15a:	d863      	bhi.n	23fa224 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
 23fa15c:	7f04      	ldrb	r4, [r0, #28]
 23fa15e:	429c      	cmp	r4, r3
 23fa160:	d360      	bcc.n	23fa224 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
    c -= fontStart;
 23fa162:	1a9b      	subs	r3, r3, r2
 23fa164:	b2db      	uxtb	r3, r3
  if((x >= _width)            || // Clip right
 23fa166:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 23fa16a:	428a      	cmp	r2, r1
 23fa16c:	f340 8084 	ble.w	23fa278 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
 23fa170:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 23fa174:	4542      	cmp	r2, r8
 23fa176:	dd7f      	ble.n	23fa278 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 23fa178:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 23fa17c:	009a      	lsls	r2, r3, #2
 23fa17e:	9207      	str	r2, [sp, #28]
 23fa180:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 23fa184:	f814 3023 	ldrb.w	r3, [r4, r3, lsl #2]
 23fa188:	fb03 1307 	mla	r3, r3, r7, r1
     (y >= _height)           || // Clip bottom
 23fa18c:	2b00      	cmp	r3, #0
 23fa18e:	dd73      	ble.n	23fa278 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
 23fa190:	7853      	ldrb	r3, [r2, #1]
 23fa192:	fb03 8307 	mla	r3, r3, r7, r8
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 23fa196:	2b00      	cmp	r3, #0
 23fa198:	dd6e      	ble.n	23fa278 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 23fa19a:	8853      	ldrh	r3, [r2, #2]
          drawPixel(x+j, y+i, color);
 23fa19c:	b28c      	uxth	r4, r1
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 23fa19e:	3302      	adds	r3, #2
 23fa1a0:	b29b      	uxth	r3, r3
 23fa1a2:	9302      	str	r3, [sp, #8]
 23fa1a4:	2300      	movs	r3, #0
 23fa1a6:	9303      	str	r3, [sp, #12]
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fa1a8:	b2bb      	uxth	r3, r7
 23fa1aa:	9306      	str	r3, [sp, #24]
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 23fa1ac:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 23fa1b0:	9a07      	ldr	r2, [sp, #28]
 23fa1b2:	f99d 600c 	ldrsb.w	r6, [sp, #12]
 23fa1b6:	4413      	add	r3, r2
 23fa1b8:	785b      	ldrb	r3, [r3, #1]
 23fa1ba:	429e      	cmp	r6, r3
 23fa1bc:	da5c      	bge.n	23fa278 <_ZN12Adafruit_GFX8drawCharEsshtth+0x142>
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fa1be:	9b06      	ldr	r3, [sp, #24]
 23fa1c0:	f04f 0900 	mov.w	r9, #0
 23fa1c4:	4373      	muls	r3, r6
 23fa1c6:	fa13 f388 	uxtah	r3, r3, r8
 23fa1ca:	b21b      	sxth	r3, r3
 23fa1cc:	ee08 3a10 	vmov	s16, r3
          drawPixel(x+j, y+i, bg);
 23fa1d0:	4446      	add	r6, r8
 23fa1d2:	b236      	sxth	r6, r6
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 23fa1d4:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 23fa1d8:	9807      	ldr	r0, [sp, #28]
 23fa1da:	fa4f f189 	sxtb.w	r1, r9
 23fa1de:	5c12      	ldrb	r2, [r2, r0]
 23fa1e0:	fa5f f389 	uxtb.w	r3, r9
 23fa1e4:	4291      	cmp	r1, r2
 23fa1e6:	da43      	bge.n	23fa270 <_ZN12Adafruit_GFX8drawCharEsshtth+0x13a>
      if (bitCount++%8 == 0) {
 23fa1e8:	075a      	lsls	r2, r3, #29
 23fa1ea:	d107      	bne.n	23fa1fc <_ZN12Adafruit_GFX8drawCharEsshtth+0xc6>
        line = pgm_read_byte(fontData+fontIndex++);
 23fa1ec:	9b02      	ldr	r3, [sp, #8]
 23fa1ee:	9802      	ldr	r0, [sp, #8]
 23fa1f0:	f8da 2020 	ldr.w	r2, [sl, #32]
 23fa1f4:	3301      	adds	r3, #1
 23fa1f6:	b29b      	uxth	r3, r3
 23fa1f8:	5c15      	ldrb	r5, [r2, r0]
 23fa1fa:	9302      	str	r3, [sp, #8]
      if (line & 0x80) {
 23fa1fc:	062b      	lsls	r3, r5, #24
 23fa1fe:	d523      	bpl.n	23fa248 <_ZN12Adafruit_GFX8drawCharEsshtth+0x112>
        if (size == 1) {// default sizeFast
 23fa200:	2f01      	cmp	r7, #1
          drawPixel(x+j, y+i, color);
 23fa202:	f8da 2000 	ldr.w	r2, [sl]
 23fa206:	b289      	uxth	r1, r1
        if (size == 1) {// default sizeFast
 23fa208:	d10e      	bne.n	23fa228 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
          drawPixel(x+j, y+i, color);
 23fa20a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 23fa20e:	9b04      	ldr	r3, [sp, #16]
 23fa210:	4421      	add	r1, r4
          drawPixel(x+j, y+i, bg);
 23fa212:	4632      	mov	r2, r6
 23fa214:	4650      	mov	r0, sl
 23fa216:	b209      	sxth	r1, r1
 23fa218:	47d8      	blx	fp
      line <<= 1;
 23fa21a:	006d      	lsls	r5, r5, #1
 23fa21c:	b2ed      	uxtb	r5, r5
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 23fa21e:	f109 0901 	add.w	r9, r9, #1
 23fa222:	e7d7      	b.n	23fa1d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
    c = 0;
 23fa224:	462b      	mov	r3, r5
 23fa226:	e79e      	b.n	23fa166 <_ZN12Adafruit_GFX8drawCharEsshtth+0x30>
          fillRect(x+(j*size), y+(i*size), size, size, color);
 23fa228:	9806      	ldr	r0, [sp, #24]
 23fa22a:	b23b      	sxth	r3, r7
 23fa22c:	fb10 f101 	smulbb	r1, r0, r1
 23fa230:	9804      	ldr	r0, [sp, #16]
 23fa232:	4421      	add	r1, r4
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fa234:	e9cd 3000 	strd	r3, r0, [sp]
 23fa238:	b209      	sxth	r1, r1
 23fa23a:	f8d2 b024 	ldr.w	fp, [r2, #36]	; 0x24
 23fa23e:	4650      	mov	r0, sl
 23fa240:	ee18 2a10 	vmov	r2, s16
 23fa244:	47d8      	blx	fp
 23fa246:	e7e8      	b.n	23fa21a <_ZN12Adafruit_GFX8drawCharEsshtth+0xe4>
      } else if (bg != color) {
 23fa248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23fa24c:	4293      	cmp	r3, r2
 23fa24e:	d0e4      	beq.n	23fa21a <_ZN12Adafruit_GFX8drawCharEsshtth+0xe4>
        if (size == 1) // default size
 23fa250:	2f01      	cmp	r7, #1
          drawPixel(x+j, y+i, color);
 23fa252:	f8da 2000 	ldr.w	r2, [sl]
 23fa256:	b289      	uxth	r1, r1
        if (size == 1) // default size
 23fa258:	d103      	bne.n	23fa262 <_ZN12Adafruit_GFX8drawCharEsshtth+0x12c>
          drawPixel(x+j, y+i, bg);
 23fa25a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 23fa25e:	4421      	add	r1, r4
 23fa260:	e7d7      	b.n	23fa212 <_ZN12Adafruit_GFX8drawCharEsshtth+0xdc>
          fillRect(x+j*size, y+i*size, size, size, bg);
 23fa262:	9806      	ldr	r0, [sp, #24]
 23fa264:	b23b      	sxth	r3, r7
 23fa266:	fb10 f101 	smulbb	r1, r0, r1
 23fa26a:	9805      	ldr	r0, [sp, #20]
 23fa26c:	4421      	add	r1, r4
 23fa26e:	e7e1      	b.n	23fa234 <_ZN12Adafruit_GFX8drawCharEsshtth+0xfe>
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 23fa270:	9b03      	ldr	r3, [sp, #12]
 23fa272:	3301      	adds	r3, #1
 23fa274:	9303      	str	r3, [sp, #12]
 23fa276:	e799      	b.n	23fa1ac <_ZN12Adafruit_GFX8drawCharEsshtth+0x76>
}
 23fa278:	b009      	add	sp, #36	; 0x24
 23fa27a:	ecbd 8b02 	vpop	{d8}
 23fa27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fa282 <_ZN12Adafruit_GFX12drawFastCharEsshtth>:
                                    uint16_t color, uint16_t bg, uint8_t size) {
 23fa282:	b470      	push	{r4, r5, r6}
 23fa284:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 23fa288:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 23fa28c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  drawChar(x,y,c,color,bg,size);
 23fa290:	9403      	str	r4, [sp, #12]
 23fa292:	e9cd 5604 	strd	r5, r6, [sp, #16]
}
 23fa296:	bc70      	pop	{r4, r5, r6}
  drawChar(x,y,c,color,bg,size);
 23fa298:	f7ff bf4d 	b.w	23fa136 <_ZN12Adafruit_GFX8drawCharEsshtth>

023fa29c <_ZN12Adafruit_GFX11getRotationEv>:
}
 23fa29c:	7e40      	ldrb	r0, [r0, #25]
 23fa29e:	4770      	bx	lr

023fa2a0 <_ZN12Adafruit_GFX5widthEv>:
}
 23fa2a0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 23fa2a4:	4770      	bx	lr

023fa2a6 <_ZN12Adafruit_GFX6heightEv>:
}
 23fa2a6:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 23fa2aa:	4770      	bx	lr

023fa2ac <_ZN6Bitmap6read16Ei>:
    }

    close(fd);
}

uint16_t Bitmap::read16(int fd) {
 23fa2ac:	b507      	push	{r0, r1, r2, lr}
 23fa2ae:	4608      	mov	r0, r1
  uint16_t result;
  int count = read(fd, &result, sizeof(result));
 23fa2b0:	2202      	movs	r2, #2
 23fa2b2:	f10d 0106 	add.w	r1, sp, #6
 23fa2b6:	f004 fb7f 	bl	23fe9b8 <read>
  return result;
}
 23fa2ba:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 23fa2be:	b003      	add	sp, #12
 23fa2c0:	f85d fb04 	ldr.w	pc, [sp], #4

023fa2c4 <_ZN6Bitmap6read32Ei>:

uint32_t Bitmap::read32(int fd) {
 23fa2c4:	b507      	push	{r0, r1, r2, lr}
  uint32_t result;
  int count = read(fd, &result, sizeof(result));
 23fa2c6:	2204      	movs	r2, #4
uint32_t Bitmap::read32(int fd) {
 23fa2c8:	4608      	mov	r0, r1
  int count = read(fd, &result, sizeof(result));
 23fa2ca:	eb0d 0102 	add.w	r1, sp, r2
 23fa2ce:	f004 fb73 	bl	23fe9b8 <read>
  return result;
 23fa2d2:	9801      	ldr	r0, [sp, #4]
 23fa2d4:	b003      	add	sp, #12
 23fa2d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fa2dc <_ZN6Bitmap10drawBitmapEPKc>:
void Bitmap::drawBitmap(const char* filename) {
 23fa2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa2e0:	460d      	mov	r5, r1
    Log.info("filename = %s", filename);
 23fa2e2:	460a      	mov	r2, r1
void Bitmap::drawBitmap(const char* filename) {
 23fa2e4:	b09f      	sub	sp, #124	; 0x7c
    Log.info("filename = %s", filename);
 23fa2e6:	4974      	ldr	r1, [pc, #464]	; (23fa4b8 <_ZN6Bitmap10drawBitmapEPKc+0x1dc>)
void Bitmap::drawBitmap(const char* filename) {
 23fa2e8:	4604      	mov	r4, r0
    Log.info("filename = %s", filename);
 23fa2ea:	4874      	ldr	r0, [pc, #464]	; (23fa4bc <_ZN6Bitmap10drawBitmapEPKc+0x1e0>)
 23fa2ec:	f7fe fc42 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
    int fd = open(filename, O_RDONLY);
 23fa2f0:	2100      	movs	r1, #0
 23fa2f2:	4628      	mov	r0, r5
 23fa2f4:	f004 fb4c 	bl	23fe990 <open>
 23fa2f8:	4605      	mov	r5, r0
    Log.info("file open errno=%d", errno);
 23fa2fa:	f001 f9d5 	bl	23fb6a8 <__errno>
 23fa2fe:	4970      	ldr	r1, [pc, #448]	; (23fa4c0 <_ZN6Bitmap10drawBitmapEPKc+0x1e4>)
 23fa300:	6802      	ldr	r2, [r0, #0]
 23fa302:	486e      	ldr	r0, [pc, #440]	; (23fa4bc <_ZN6Bitmap10drawBitmapEPKc+0x1e0>)
 23fa304:	f7fe fc36 	bl	23f8b74 <_ZNK5spark6Logger4infoEPKcz>
    if (fd == -1) {
 23fa308:	1c6b      	adds	r3, r5, #1
 23fa30a:	d106      	bne.n	23fa31a <_ZN6Bitmap10drawBitmapEPKc+0x3e>
        Log.error("ERROR");
 23fa30c:	496d      	ldr	r1, [pc, #436]	; (23fa4c4 <_ZN6Bitmap10drawBitmapEPKc+0x1e8>)
 23fa30e:	486b      	ldr	r0, [pc, #428]	; (23fa4bc <_ZN6Bitmap10drawBitmapEPKc+0x1e0>)
 23fa310:	f7fe fc48 	bl	23f8ba4 <_ZNK5spark6Logger5errorEPKcz>
}
 23fa314:	b01f      	add	sp, #124	; 0x7c
 23fa316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    delay(4000);
 23fa31a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 23fa31e:	f002 ff29 	bl	23fd174 <delay>
    if (read16(fd) == 0x4D42) { // BMP signature
 23fa322:	4629      	mov	r1, r5
 23fa324:	4620      	mov	r0, r4
 23fa326:	f7ff ffc1 	bl	23fa2ac <_ZN6Bitmap6read16Ei>
 23fa32a:	f644 5342 	movw	r3, #19778	; 0x4d42
 23fa32e:	4298      	cmp	r0, r3
 23fa330:	f040 80bd 	bne.w	23fa4ae <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
        uint32_t fileSize = read32(fd);
 23fa334:	4629      	mov	r1, r5
 23fa336:	4620      	mov	r0, r4
 23fa338:	f7ff ffc4 	bl	23fa2c4 <_ZN6Bitmap6read32Ei>
        lseek(fd, 4, SEEK_CUR); // ignore creator bytes
 23fa33c:	2201      	movs	r2, #1
 23fa33e:	2104      	movs	r1, #4
 23fa340:	4628      	mov	r0, r5
 23fa342:	f004 fb1b 	bl	23fe97c <lseek>
        uint32_t bmpImageoffset = read32(fd); // Start of image data
 23fa346:	4629      	mov	r1, r5
 23fa348:	4620      	mov	r0, r4
 23fa34a:	f7ff ffbb 	bl	23fa2c4 <_ZN6Bitmap6read32Ei>
        uint32_t headerSize = read32(fd);
 23fa34e:	4629      	mov	r1, r5
        uint32_t bmpImageoffset = read32(fd); // Start of image data
 23fa350:	4680      	mov	r8, r0
        uint32_t headerSize = read32(fd);
 23fa352:	4620      	mov	r0, r4
 23fa354:	f7ff ffb6 	bl	23fa2c4 <_ZN6Bitmap6read32Ei>
        int bmpWidth  = read32(fd);
 23fa358:	4629      	mov	r1, r5
 23fa35a:	4620      	mov	r0, r4
 23fa35c:	f7ff ffb2 	bl	23fa2c4 <_ZN6Bitmap6read32Ei>
        int bmpHeight = read32(fd);
 23fa360:	4629      	mov	r1, r5
        int bmpWidth  = read32(fd);
 23fa362:	4607      	mov	r7, r0
        int bmpHeight = read32(fd);
 23fa364:	4620      	mov	r0, r4
 23fa366:	f7ff ffad 	bl	23fa2c4 <_ZN6Bitmap6read32Ei>
        uint16_t planeCount = read16(fd);
 23fa36a:	4629      	mov	r1, r5
        int bmpHeight = read32(fd);
 23fa36c:	4606      	mov	r6, r0
        uint16_t planeCount = read16(fd);
 23fa36e:	4620      	mov	r0, r4
 23fa370:	f7ff ff9c 	bl	23fa2ac <_ZN6Bitmap6read16Ei>
        if (planeCount == 1) { // # planes -- must be '1'
 23fa374:	2801      	cmp	r0, #1
        uint16_t planeCount = read16(fd);
 23fa376:	4682      	mov	sl, r0
        if (planeCount == 1) { // # planes -- must be '1'
 23fa378:	f040 8099 	bne.w	23fa4ae <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
            uint8_t bmpDepth = read16(fd); // bits per pixel
 23fa37c:	4629      	mov	r1, r5
 23fa37e:	4620      	mov	r0, r4
 23fa380:	f7ff ff94 	bl	23fa2ac <_ZN6Bitmap6read16Ei>
 23fa384:	4681      	mov	r9, r0
            uint32_t compression = read32(fd);
 23fa386:	4629      	mov	r1, r5
 23fa388:	4620      	mov	r0, r4
            if ((bmpDepth == 24) && (compression == 0)) { // 0 = uncompressed
 23fa38a:	fa5f f989 	uxtb.w	r9, r9
            uint32_t compression = read32(fd);
 23fa38e:	f7ff ff99 	bl	23fa2c4 <_ZN6Bitmap6read32Ei>
            if ((bmpDepth == 24) && (compression == 0)) { // 0 = uncompressed
 23fa392:	f1b9 0f18 	cmp.w	r9, #24
 23fa396:	f040 808a 	bne.w	23fa4ae <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
 23fa39a:	2800      	cmp	r0, #0
 23fa39c:	f040 8087 	bne.w	23fa4ae <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
                uint32_t rowSize = (bmpWidth * 3 + 3) & ~3;
 23fa3a0:	1c7b      	adds	r3, r7, #1
 23fa3a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fa3a6:	f023 0303 	bic.w	r3, r3, #3
 23fa3aa:	9301      	str	r3, [sp, #4]
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa3ac:	6823      	ldr	r3, [r4, #0]
                if(bmpHeight < 0) {
 23fa3ae:	2e00      	cmp	r6, #0
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa3b0:	681a      	ldr	r2, [r3, #0]
                    flip = false;
 23fa3b2:	bfb8      	it	lt
 23fa3b4:	9003      	strlt	r0, [sp, #12]
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa3b6:	f852 0c0c 	ldr.w	r0, [r2, #-12]
                    bmpHeight = -bmpHeight;
 23fa3ba:	bfb8      	it	lt
 23fa3bc:	4276      	neglt	r6, r6
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa3be:	4418      	add	r0, r3
                bool flip = true;
 23fa3c0:	bfa8      	it	ge
 23fa3c2:	f8cd a00c 	strge.w	sl, [sp, #12]
        int bmpWidth  = read32(fd);
 23fa3c6:	9704      	str	r7, [sp, #16]
                if ((w - 1) >= _tft->width())  w = _tft->width();
 23fa3c8:	f7ff ff6a 	bl	23fa2a0 <_ZN12Adafruit_GFX5widthEv>
 23fa3cc:	42b8      	cmp	r0, r7
 23fa3ce:	da07      	bge.n	23fa3e0 <_ZN6Bitmap10drawBitmapEPKc+0x104>
 23fa3d0:	6823      	ldr	r3, [r4, #0]
 23fa3d2:	681a      	ldr	r2, [r3, #0]
 23fa3d4:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23fa3d8:	4418      	add	r0, r3
 23fa3da:	f7ff ff61 	bl	23fa2a0 <_ZN12Adafruit_GFX5widthEv>
 23fa3de:	9004      	str	r0, [sp, #16]
                if ((h - 1) >= _tft->height()) h = _tft->height();
 23fa3e0:	6823      	ldr	r3, [r4, #0]
 23fa3e2:	681a      	ldr	r2, [r3, #0]
 23fa3e4:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23fa3e8:	4418      	add	r0, r3
 23fa3ea:	f7ff ff5c 	bl	23fa2a6 <_ZN12Adafruit_GFX6heightEv>
 23fa3ee:	42b0      	cmp	r0, r6
 23fa3f0:	da52      	bge.n	23fa498 <_ZN6Bitmap10drawBitmapEPKc+0x1bc>
 23fa3f2:	6823      	ldr	r3, [r4, #0]
 23fa3f4:	681a      	ldr	r2, [r3, #0]
 23fa3f6:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 23fa3fa:	4418      	add	r0, r3
 23fa3fc:	f7ff ff53 	bl	23fa2a6 <_ZN12Adafruit_GFX6heightEv>
 23fa400:	9005      	str	r0, [sp, #20]
                for (int row = 0; row < h; row++) { // For each scanline...
 23fa402:	f04f 0900 	mov.w	r9, #0
 23fa406:	9b01      	ldr	r3, [sp, #4]
 23fa408:	3e01      	subs	r6, #1
 23fa40a:	fb03 8306 	mla	r3, r3, r6, r8
 23fa40e:	9302      	str	r3, [sp, #8]
 23fa410:	9b05      	ldr	r3, [sp, #20]
 23fa412:	454b      	cmp	r3, r9
 23fa414:	dd4b      	ble.n	23fa4ae <_ZN6Bitmap10drawBitmapEPKc+0x1d2>
                    _tft->goTo(0, row);
 23fa416:	464a      	mov	r2, r9
 23fa418:	2100      	movs	r1, #0
 23fa41a:	6820      	ldr	r0, [r4, #0]
 23fa41c:	f7ff f908 	bl	23f9630 <_ZN16Adafruit_SSD13514goToEii>
                    lseek(fd, pos, SEEK_SET);
 23fa420:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 23fa424:	2200      	movs	r2, #0
 23fa426:	4628      	mov	r0, r5
 23fa428:	4293      	cmp	r3, r2
 23fa42a:	bf08      	it	eq
 23fa42c:	4641      	moveq	r1, r8
 23fa42e:	f004 faa5 	bl	23fe97c <lseek>
                    for (int col = 0; col < w; col++) { // For each pixel...
 23fa432:	f04f 0a00 	mov.w	sl, #0
                    buffidx = sizeof(sdbuffer); // Force buffer reload
 23fa436:	2760      	movs	r7, #96	; 0x60
                    for (int col = 0; col < w; col++) { // For each pixel...
 23fa438:	9b04      	ldr	r3, [sp, #16]
 23fa43a:	4553      	cmp	r3, sl
 23fa43c:	dd2e      	ble.n	23fa49c <_ZN6Bitmap10drawBitmapEPKc+0x1c0>
                        if (buffidx >= sizeof(sdbuffer)) {
 23fa43e:	2f5f      	cmp	r7, #95	; 0x5f
 23fa440:	d905      	bls.n	23fa44e <_ZN6Bitmap10drawBitmapEPKc+0x172>
                            read(fd, sdbuffer, sizeof(sdbuffer));
 23fa442:	2260      	movs	r2, #96	; 0x60
 23fa444:	4628      	mov	r0, r5
 23fa446:	a906      	add	r1, sp, #24
 23fa448:	f004 fab6 	bl	23fe9b8 <read>
                            buffidx = 0; // Set index to beginning
 23fa44c:	2700      	movs	r7, #0
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa44e:	f8d4 b000 	ldr.w	fp, [r4]
                        uint8_t b = sdbuffer[buffidx++];
 23fa452:	1c7a      	adds	r2, r7, #1
                        uint8_t g = sdbuffer[buffidx++];
 23fa454:	a81e      	add	r0, sp, #120	; 0x78
 23fa456:	fa50 f282 	uxtab	r2, r0, r2
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa45a:	f8db 0000 	ldr.w	r0, [fp]
                        uint8_t g = sdbuffer[buffidx++];
 23fa45e:	1cb9      	adds	r1, r7, #2
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa460:	6800      	ldr	r0, [r0, #0]
                        uint8_t b = sdbuffer[buffidx++];
 23fa462:	ab1e      	add	r3, sp, #120	; 0x78
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa464:	4606      	mov	r6, r0
                        uint8_t r = sdbuffer[buffidx++];
 23fa466:	a81e      	add	r0, sp, #120	; 0x78
                        uint8_t b = sdbuffer[buffidx++];
 23fa468:	443b      	add	r3, r7
                        uint8_t r = sdbuffer[buffidx++];
 23fa46a:	fa50 f181 	uxtab	r1, r0, r1
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa46e:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 23fa472:	f812 2c60 	ldrb.w	r2, [r2, #-96]
 23fa476:	f811 1c60 	ldrb.w	r1, [r1, #-96]
 23fa47a:	4658      	mov	r0, fp
 23fa47c:	f7fe ffac 	bl	23f93d8 <_ZN16Adafruit_SSD13518Color565Ehhh>
                        uint8_t r = sdbuffer[buffidx++];
 23fa480:	3703      	adds	r7, #3
                        _tft->drawPixel(col, row, _tft->Color565(r, g, b));
 23fa482:	4603      	mov	r3, r0
 23fa484:	fa0f f18a 	sxth.w	r1, sl
 23fa488:	4658      	mov	r0, fp
 23fa48a:	fa0f f289 	sxth.w	r2, r9
 23fa48e:	47b0      	blx	r6
                        uint8_t r = sdbuffer[buffidx++];
 23fa490:	b2ff      	uxtb	r7, r7
                    for (int col = 0; col < w; col++) { // For each pixel...
 23fa492:	f10a 0a01 	add.w	sl, sl, #1
 23fa496:	e7cf      	b.n	23fa438 <_ZN6Bitmap10drawBitmapEPKc+0x15c>
 23fa498:	9605      	str	r6, [sp, #20]
 23fa49a:	e7b2      	b.n	23fa402 <_ZN6Bitmap10drawBitmapEPKc+0x126>
                for (int row = 0; row < h; row++) { // For each scanline...
 23fa49c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 23fa4a0:	1ad3      	subs	r3, r2, r3
 23fa4a2:	9302      	str	r3, [sp, #8]
 23fa4a4:	9b01      	ldr	r3, [sp, #4]
 23fa4a6:	f109 0901 	add.w	r9, r9, #1
 23fa4aa:	4498      	add	r8, r3
 23fa4ac:	e7b0      	b.n	23fa410 <_ZN6Bitmap10drawBitmapEPKc+0x134>
    close(fd);
 23fa4ae:	4628      	mov	r0, r5
 23fa4b0:	f004 fa5c 	bl	23fe96c <close>
 23fa4b4:	e72e      	b.n	23fa314 <_ZN6Bitmap10drawBitmapEPKc+0x38>
 23fa4b6:	bf00      	nop
 23fa4b8:	023ff9be 	.word	0x023ff9be
 23fa4bc:	1007ae7c 	.word	0x1007ae7c
 23fa4c0:	023ff9cc 	.word	0x023ff9cc
 23fa4c4:	023ff9df 	.word	0x023ff9df

023fa4c8 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
 23fa4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fa4ca:	4615      	mov	r5, r2
 23fa4cc:	4604      	mov	r4, r0
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fa4ce:	0849      	lsrs	r1, r1, #1
 23fa4d0:	6840      	ldr	r0, [r0, #4]
{
 23fa4d2:	461e      	mov	r6, r3
 23fa4d4:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fa4d8:	f003 fb84 	bl	23fdbe4 <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
 23fa4dc:	0a2b      	lsrs	r3, r5, #8
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
 23fa4de:	6860      	ldr	r0, [r4, #4]
	buffer[1] = RegisterAddr & 0xFF;
 23fa4e0:	f88d 5005 	strb.w	r5, [sp, #5]
	buffer[0] = RegisterAddr >> 8;
 23fa4e4:	f88d 3004 	strb.w	r3, [sp, #4]
	dev_i2c->write(buffer, 2);
 23fa4e8:	6803      	ldr	r3, [r0, #0]
 23fa4ea:	2202      	movs	r2, #2
 23fa4ec:	68db      	ldr	r3, [r3, #12]
 23fa4ee:	a901      	add	r1, sp, #4
 23fa4f0:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
 23fa4f2:	2500      	movs	r5, #0
 23fa4f4:	42af      	cmp	r7, r5
		dev_i2c->write(pBuffer[i]);
 23fa4f6:	6860      	ldr	r0, [r4, #4]
	for (int i = 0; i < NumByteToWrite; i++)
 23fa4f8:	dd05      	ble.n	23fa506 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3e>
		dev_i2c->write(pBuffer[i]);
 23fa4fa:	6803      	ldr	r3, [r0, #0]
 23fa4fc:	5d71      	ldrb	r1, [r6, r5]
 23fa4fe:	689b      	ldr	r3, [r3, #8]
 23fa500:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
 23fa502:	3501      	adds	r5, #1
 23fa504:	e7f6      	b.n	23fa4f4 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x2c>

	dev_i2c->endTransmission(true);
 23fa506:	2101      	movs	r1, #1
 23fa508:	f003 fb70 	bl	23fdbec <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
 23fa50c:	2000      	movs	r0, #0
 23fa50e:	b003      	add	sp, #12
 23fa510:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
 23fa512:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fa514:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
 23fa518:	2301      	movs	r3, #1
 23fa51a:	7809      	ldrb	r1, [r1, #0]
 23fa51c:	9300      	str	r3, [sp, #0]
 23fa51e:	f10d 030f 	add.w	r3, sp, #15
 23fa522:	f7ff ffd1 	bl	23fa4c8 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
 23fa526:	b005      	add	sp, #20
 23fa528:	f85d fb04 	ldr.w	pc, [sp], #4

023fa52c <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
 23fa52c:	2301      	movs	r3, #1
 23fa52e:	2286      	movs	r2, #134	; 0x86
 23fa530:	6981      	ldr	r1, [r0, #24]
 23fa532:	f7ff bfee 	b.w	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fa536 <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
 23fa536:	2340      	movs	r3, #64	; 0x40
 23fa538:	2287      	movs	r2, #135	; 0x87
 23fa53a:	6981      	ldr	r1, [r0, #24]
 23fa53c:	f7ff bfe9 	b.w	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fa540 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
 23fa540:	2300      	movs	r3, #0
 23fa542:	2287      	movs	r2, #135	; 0x87
 23fa544:	6981      	ldr	r1, [r0, #24]
 23fa546:	f7ff bfe4 	b.w	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

023fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>:
{
 23fa54a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buffer[0] = data >> 8;
 23fa54c:	0a1c      	lsrs	r4, r3, #8
	buffer[1] = data & 0x00FF;
 23fa54e:	f88d 300d 	strb.w	r3, [sp, #13]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
 23fa552:	2302      	movs	r3, #2
 23fa554:	7809      	ldrb	r1, [r1, #0]
 23fa556:	9300      	str	r3, [sp, #0]
 23fa558:	ab03      	add	r3, sp, #12
	buffer[0] = data >> 8;
 23fa55a:	f88d 400c 	strb.w	r4, [sp, #12]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, (uint8_t *)buffer, 2);
 23fa55e:	f7ff ffb3 	bl	23fa4c8 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
 23fa562:	b004      	add	sp, #16
 23fa564:	bd10      	pop	{r4, pc}

023fa566 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
 23fa566:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fa56a:	4604      	mov	r4, r0
 23fa56c:	4690      	mov	r8, r2
 23fa56e:	461d      	mov	r5, r3
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
 23fa570:	2605      	movs	r6, #5
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fa572:	084f      	lsrs	r7, r1, #1
		buffer[0] = RegisterAddr >> 8;
 23fa574:	ea4f 2912 	mov.w	r9, r2, lsr #8
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
 23fa578:	4639      	mov	r1, r7
 23fa57a:	6860      	ldr	r0, [r4, #4]
 23fa57c:	f003 fb32 	bl	23fdbe4 <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
 23fa580:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
 23fa582:	f88d 9004 	strb.w	r9, [sp, #4]
		buffer[1] = RegisterAddr & 0xFF;
 23fa586:	f88d 8005 	strb.w	r8, [sp, #5]
		dev_i2c->write(buffer, 2);
 23fa58a:	6803      	ldr	r3, [r0, #0]
 23fa58c:	a901      	add	r1, sp, #4
 23fa58e:	2202      	movs	r2, #2
 23fa590:	68db      	ldr	r3, [r3, #12]
 23fa592:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
 23fa594:	2100      	movs	r1, #0
 23fa596:	6860      	ldr	r0, [r4, #4]
 23fa598:	f003 fb28 	bl	23fdbec <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
 23fa59c:	b118      	cbz	r0, 23fa5a6 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x40>
	for (uint8_t x = 0; x < maxAttempts; x++)
 23fa59e:	3e01      	subs	r6, #1
 23fa5a0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 23fa5a4:	d1e8      	bne.n	23fa578 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x12>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
 23fa5a6:	4639      	mov	r1, r7
 23fa5a8:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 23fa5ac:	6860      	ldr	r0, [r4, #4]
 23fa5ae:	f003 fb16 	bl	23fdbde <_ZN7TwoWire11requestFromEhj>

	int i = 0;
 23fa5b2:	3d01      	subs	r5, #1
	while (dev_i2c->available())
 23fa5b4:	6860      	ldr	r0, [r4, #4]
 23fa5b6:	6803      	ldr	r3, [r0, #0]
 23fa5b8:	691b      	ldr	r3, [r3, #16]
 23fa5ba:	4798      	blx	r3
 23fa5bc:	b130      	cbz	r0, 23fa5cc <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x66>
	{
		pBuffer[i] = dev_i2c->read();
 23fa5be:	6860      	ldr	r0, [r4, #4]
 23fa5c0:	6803      	ldr	r3, [r0, #0]
 23fa5c2:	695b      	ldr	r3, [r3, #20]
 23fa5c4:	4798      	blx	r3
 23fa5c6:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
 23fa5ca:	e7f3      	b.n	23fa5b4 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x4e>
		i++;
	}

	return 0;
}
 23fa5cc:	b003      	add	sp, #12
 23fa5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fa5d2 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
 23fa5d2:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
 23fa5d4:	2401      	movs	r4, #1
 23fa5d6:	7809      	ldrb	r1, [r1, #0]
 23fa5d8:	9400      	str	r4, [sp, #0]
 23fa5da:	f7ff ffc4 	bl	23fa566 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
 23fa5de:	3800      	subs	r0, #0
 23fa5e0:	bf18      	it	ne
 23fa5e2:	2001      	movne	r0, #1
}
 23fa5e4:	4240      	negs	r0, r0
 23fa5e6:	b002      	add	sp, #8
 23fa5e8:	bd10      	pop	{r4, pc}

023fa5ea <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
 23fa5ea:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
 23fa5ec:	2230      	movs	r2, #48	; 0x30
{
 23fa5ee:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
 23fa5f0:	f10d 0307 	add.w	r3, sp, #7
 23fa5f4:	6981      	ldr	r1, [r0, #24]
 23fa5f6:	f7ff ffec 	bl	23fa5d2 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	*pInterruptPolarity = !(Temp >> 4);
 23fa5fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fa5fe:	ea6f 1313 	mvn.w	r3, r3, lsr #4
 23fa602:	f003 0301 	and.w	r3, r3, #1
 23fa606:	7023      	strb	r3, [r4, #0]
}
 23fa608:	b002      	add	sp, #8
 23fa60a:	bd10      	pop	{r4, pc}

023fa60c <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
 23fa60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa60e:	4605      	mov	r5, r0
 23fa610:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
 23fa612:	f10d 0107 	add.w	r1, sp, #7
 23fa616:	f7ff ffe8 	bl	23fa5ea <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
 23fa61a:	2231      	movs	r2, #49	; 0x31
 23fa61c:	4628      	mov	r0, r5
 23fa61e:	69a9      	ldr	r1, [r5, #24]
 23fa620:	f10d 0306 	add.w	r3, sp, #6
 23fa624:	f7ff ffd5 	bl	23fa5d2 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
 23fa628:	b950      	cbnz	r0, 23fa640 <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
 23fa62a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23fa62e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 23fa632:	f003 0301 	and.w	r3, r3, #1
 23fa636:	429a      	cmp	r2, r3
			*isDataReady = 1;
 23fa638:	bf0a      	itet	eq
 23fa63a:	2301      	moveq	r3, #1
			*isDataReady = 0;
 23fa63c:	7020      	strbne	r0, [r4, #0]
			*isDataReady = 1;
 23fa63e:	7023      	strbeq	r3, [r4, #0]
}
 23fa640:	b003      	add	sp, #12
 23fa642:	bd30      	pop	{r4, r5, pc}

023fa644 <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
 23fa644:	2300      	movs	r3, #0
{
 23fa646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fa648:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
 23fa64a:	252d      	movs	r5, #45	; 0x2d
 23fa64c:	4e1b      	ldr	r6, [pc, #108]	; (23fa6bc <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
 23fa64e:	f88d 3007 	strb.w	r3, [sp, #7]
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 23fa652:	b2aa      	uxth	r2, r5
 23fa654:	4620      	mov	r0, r4
 23fa656:	f816 3b01 	ldrb.w	r3, [r6], #1
 23fa65a:	69a1      	ldr	r1, [r4, #24]
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 23fa65c:	3501      	adds	r5, #1
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 23fa65e:	f7ff ff58 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
 23fa662:	2d88      	cmp	r5, #136	; 0x88
 23fa664:	d1f5      	bne.n	23fa652 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
 23fa666:	4620      	mov	r0, r4
 23fa668:	f7ff ff65 	bl	23fa536 <_ZN7VL53L1X20VL53L1X_StartRangingEv>
 23fa66c:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
 23fa66e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fa672:	b963      	cbnz	r3, 23fa68e <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
 23fa674:	4620      	mov	r0, r4
 23fa676:	f10d 0107 	add.w	r1, sp, #7
		if (timeout++ > 150)
 23fa67a:	3d01      	subs	r5, #1
		status = VL53L1X_CheckForDataReady(&dataReady);
 23fa67c:	f7ff ffc6 	bl	23fa60c <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
 23fa680:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fa684:	d017      	beq.n	23fa6b6 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
 23fa686:	2001      	movs	r0, #1
 23fa688:	f002 fd74 	bl	23fd174 <delay>
	while (dataReady == 0)
 23fa68c:	e7ef      	b.n	23fa66e <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
 23fa68e:	4620      	mov	r0, r4
 23fa690:	f7ff ff4c 	bl	23fa52c <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
 23fa694:	4620      	mov	r0, r4
 23fa696:	f7ff ff53 	bl	23fa540 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 23fa69a:	2309      	movs	r3, #9
 23fa69c:	2208      	movs	r2, #8
 23fa69e:	69a1      	ldr	r1, [r4, #24]
 23fa6a0:	4620      	mov	r0, r4
 23fa6a2:	f7ff ff36 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
 23fa6a6:	2300      	movs	r3, #0
 23fa6a8:	220b      	movs	r2, #11
 23fa6aa:	4620      	mov	r0, r4
 23fa6ac:	69a1      	ldr	r1, [r4, #24]
 23fa6ae:	f7ff ff30 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
 23fa6b2:	b002      	add	sp, #8
 23fa6b4:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
 23fa6b6:	f06f 0006 	mvn.w	r0, #6
 23fa6ba:	e7fa      	b.n	23fa6b2 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
 23fa6bc:	023ff9e5 	.word	0x023ff9e5

023fa6c0 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>:
{
 23fa6c0:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 23fa6c2:	224b      	movs	r2, #75	; 0x4b
 23fa6c4:	f10d 0307 	add.w	r3, sp, #7
{
 23fa6c8:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 23fa6ca:	6981      	ldr	r1, [r0, #24]
 23fa6cc:	f7ff ff81 	bl	23fa5d2 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (TempDM == 0x14)
 23fa6d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 23fa6d4:	2b14      	cmp	r3, #20
 23fa6d6:	d103      	bne.n	23fa6e0 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x20>
		*DM = 1;
 23fa6d8:	2301      	movs	r3, #1
		*DM = 2;
 23fa6da:	8023      	strh	r3, [r4, #0]
}
 23fa6dc:	b002      	add	sp, #8
 23fa6de:	bd10      	pop	{r4, pc}
	if (TempDM == 0x0A)
 23fa6e0:	2b0a      	cmp	r3, #10
 23fa6e2:	d1fb      	bne.n	23fa6dc <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1c>
		*DM = 2;
 23fa6e4:	2302      	movs	r3, #2
 23fa6e6:	e7f8      	b.n	23fa6da <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt+0x1a>

023fa6e8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>:
{
 23fa6e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fa6ea:	460d      	mov	r5, r1
	status = VL53L1X_GetDistanceMode(&DM);
 23fa6ec:	f10d 0106 	add.w	r1, sp, #6
{
 23fa6f0:	4604      	mov	r4, r0
	status = VL53L1X_GetDistanceMode(&DM);
 23fa6f2:	f7ff ffe5 	bl	23fa6c0 <_ZN7VL53L1X23VL53L1X_GetDistanceModeEPt>
	if (DM == 0)
 23fa6f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	status = VL53L1X_GetDistanceMode(&DM);
 23fa6fa:	4606      	mov	r6, r0
	if (DM == 0)
 23fa6fc:	b153      	cbz	r3, 23fa714 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
	else if (DM == 1)
 23fa6fe:	2b01      	cmp	r3, #1
 23fa700:	d152      	bne.n	23fa7a8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xc0>
		switch (TimingBudgetInMs)
 23fa702:	2d32      	cmp	r5, #50	; 0x32
 23fa704:	d032      	beq.n	23fa76c <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x84>
 23fa706:	d807      	bhi.n	23fa718 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x30>
 23fa708:	2d14      	cmp	r5, #20
 23fa70a:	d025      	beq.n	23fa758 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x70>
 23fa70c:	2d21      	cmp	r5, #33	; 0x21
 23fa70e:	d02b      	beq.n	23fa768 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x80>
 23fa710:	2d0f      	cmp	r5, #15
 23fa712:	d012      	beq.n	23fa73a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x52>
		return 1;
 23fa714:	2601      	movs	r6, #1
 23fa716:	e01c      	b.n	23fa752 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x6a>
		switch (TimingBudgetInMs)
 23fa718:	2dc8      	cmp	r5, #200	; 0xc8
 23fa71a:	d031      	beq.n	23fa780 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x98>
 23fa71c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 23fa720:	d038      	beq.n	23fa794 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xac>
 23fa722:	2d64      	cmp	r5, #100	; 0x64
 23fa724:	d1f6      	bne.n	23fa714 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa726:	f240 23e1 	movw	r3, #737	; 0x2e1
 23fa72a:	225e      	movs	r2, #94	; 0x5e
 23fa72c:	4620      	mov	r0, r4
 23fa72e:	69a1      	ldr	r1, [r4, #24]
 23fa730:	f7ff ff0b 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa734:	f44f 7362 	mov.w	r3, #904	; 0x388
 23fa738:	e006      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa73a:	231d      	movs	r3, #29
 23fa73c:	225e      	movs	r2, #94	; 0x5e
 23fa73e:	4620      	mov	r0, r4
 23fa740:	69a1      	ldr	r1, [r4, #24]
 23fa742:	f7ff ff02 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa746:	2327      	movs	r3, #39	; 0x27
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa748:	2261      	movs	r2, #97	; 0x61
 23fa74a:	4620      	mov	r0, r4
 23fa74c:	69a1      	ldr	r1, [r4, #24]
 23fa74e:	f7ff fefc 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
}
 23fa752:	4630      	mov	r0, r6
 23fa754:	b002      	add	sp, #8
 23fa756:	bd70      	pop	{r4, r5, r6, pc}
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa758:	2351      	movs	r3, #81	; 0x51
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa75a:	225e      	movs	r2, #94	; 0x5e
 23fa75c:	4620      	mov	r0, r4
 23fa75e:	69a1      	ldr	r1, [r4, #24]
 23fa760:	f7ff fef3 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa764:	236e      	movs	r3, #110	; 0x6e
 23fa766:	e7ef      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa768:	23d6      	movs	r3, #214	; 0xd6
 23fa76a:	e7f6      	b.n	23fa75a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa76c:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 23fa770:	225e      	movs	r2, #94	; 0x5e
 23fa772:	4620      	mov	r0, r4
 23fa774:	69a1      	ldr	r1, [r4, #24]
 23fa776:	f7ff fee8 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa77a:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 23fa77e:	e7e3      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa780:	f240 33e1 	movw	r3, #993	; 0x3e1
 23fa784:	225e      	movs	r2, #94	; 0x5e
 23fa786:	4620      	mov	r0, r4
 23fa788:	69a1      	ldr	r1, [r4, #24]
 23fa78a:	f7ff fede 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa78e:	f240 4396 	movw	r3, #1174	; 0x496
 23fa792:	e7d9      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa794:	f240 5391 	movw	r3, #1425	; 0x591
 23fa798:	225e      	movs	r2, #94	; 0x5e
 23fa79a:	4620      	mov	r0, r4
 23fa79c:	69a1      	ldr	r1, [r4, #24]
 23fa79e:	f7ff fed4 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa7a2:	f240 53c1 	movw	r3, #1473	; 0x5c1
 23fa7a6:	e7cf      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
 23fa7a8:	2d64      	cmp	r5, #100	; 0x64
 23fa7aa:	d027      	beq.n	23fa7fc <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x114>
 23fa7ac:	d80d      	bhi.n	23fa7ca <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0xe2>
 23fa7ae:	2d21      	cmp	r5, #33	; 0x21
 23fa7b0:	d01a      	beq.n	23fa7e8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x100>
 23fa7b2:	2d32      	cmp	r5, #50	; 0x32
 23fa7b4:	d01a      	beq.n	23fa7ec <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x104>
 23fa7b6:	2d14      	cmp	r5, #20
 23fa7b8:	d1ac      	bne.n	23fa714 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7ba:	231e      	movs	r3, #30
 23fa7bc:	225e      	movs	r2, #94	; 0x5e
 23fa7be:	4620      	mov	r0, r4
 23fa7c0:	69a1      	ldr	r1, [r4, #24]
 23fa7c2:	f7ff fec2 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa7c6:	2322      	movs	r3, #34	; 0x22
 23fa7c8:	e7be      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
		switch (TimingBudgetInMs)
 23fa7ca:	2dc8      	cmp	r5, #200	; 0xc8
 23fa7cc:	d020      	beq.n	23fa810 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x128>
 23fa7ce:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 23fa7d2:	d19f      	bne.n	23fa714 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x2c>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7d4:	f240 438f 	movw	r3, #1167	; 0x48f
 23fa7d8:	225e      	movs	r2, #94	; 0x5e
 23fa7da:	4620      	mov	r0, r4
 23fa7dc:	69a1      	ldr	r1, [r4, #24]
 23fa7de:	f7ff feb4 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa7e2:	f240 43a4 	movw	r3, #1188	; 0x4a4
 23fa7e6:	e7af      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7e8:	2360      	movs	r3, #96	; 0x60
 23fa7ea:	e7b6      	b.n	23fa75a <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x72>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7ec:	23ad      	movs	r3, #173	; 0xad
 23fa7ee:	225e      	movs	r2, #94	; 0x5e
 23fa7f0:	4620      	mov	r0, r4
 23fa7f2:	69a1      	ldr	r1, [r4, #24]
 23fa7f4:	f7ff fea9 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa7f8:	23c6      	movs	r3, #198	; 0xc6
 23fa7fa:	e7a5      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa7fc:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 23fa800:	225e      	movs	r2, #94	; 0x5e
 23fa802:	4620      	mov	r0, r4
 23fa804:	69a1      	ldr	r1, [r4, #24]
 23fa806:	f7ff fea0 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa80a:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
 23fa80e:	e79b      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 23fa810:	f240 23d9 	movw	r3, #729	; 0x2d9
 23fa814:	225e      	movs	r2, #94	; 0x5e
 23fa816:	4620      	mov	r0, r4
 23fa818:	69a1      	ldr	r1, [r4, #24]
 23fa81a:	f7ff fe96 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
			VL53L1_WrWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 23fa81e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
 23fa822:	e791      	b.n	23fa748 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt+0x60>

023fa824 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
 23fa824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fa826:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
 23fa828:	2300      	movs	r3, #0
 23fa82a:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
 23fa82e:	2302      	movs	r3, #2
 23fa830:	7809      	ldrb	r1, [r1, #0]
 23fa832:	9300      	str	r3, [sp, #0]
 23fa834:	ab03      	add	r3, sp, #12
 23fa836:	f7ff fe96 	bl	23fa566 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
 23fa83a:	b930      	cbnz	r0, 23fa84a <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
 23fa83c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 23fa840:	f89d 300d 	ldrb.w	r3, [sp, #13]
 23fa844:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 23fa848:	8023      	strh	r3, [r4, #0]
}
 23fa84a:	b004      	add	sp, #16
 23fa84c:	bd10      	pop	{r4, pc}

023fa84e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>:
{
 23fa84e:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 23fa850:	225e      	movs	r2, #94	; 0x5e
 23fa852:	f10d 0306 	add.w	r3, sp, #6
{
 23fa856:	460c      	mov	r4, r1
	status = VL53L1_RdWord(Device, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 23fa858:	6981      	ldr	r1, [r0, #24]
 23fa85a:	f7ff ffe3 	bl	23fa824 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	switch (Temp)
 23fa85e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fa862:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 23fa866:	d034      	beq.n	23fa8d2 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
 23fa868:	d810      	bhi.n	23fa88c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3e>
 23fa86a:	2b51      	cmp	r3, #81	; 0x51
 23fa86c:	d02f      	beq.n	23fa8ce <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
 23fa86e:	d805      	bhi.n	23fa87c <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2e>
 23fa870:	2b1d      	cmp	r3, #29
 23fa872:	d028      	beq.n	23fa8c6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x78>
 23fa874:	2b1e      	cmp	r3, #30
 23fa876:	d02a      	beq.n	23fa8ce <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x80>
		*pTimingBudget = 0;
 23fa878:	2300      	movs	r3, #0
 23fa87a:	e025      	b.n	23fa8c8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fa87c:	2bad      	cmp	r3, #173	; 0xad
 23fa87e:	d028      	beq.n	23fa8d2 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x84>
 23fa880:	2bd6      	cmp	r3, #214	; 0xd6
 23fa882:	d001      	beq.n	23fa888 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x3a>
 23fa884:	2b60      	cmp	r3, #96	; 0x60
 23fa886:	d1f7      	bne.n	23fa878 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 33;
 23fa888:	2321      	movs	r3, #33	; 0x21
 23fa88a:	e01d      	b.n	23fa8c8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fa88c:	f240 32e1 	movw	r2, #993	; 0x3e1
 23fa890:	4293      	cmp	r3, r2
 23fa892:	d020      	beq.n	23fa8d6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
 23fa894:	d80c      	bhi.n	23fa8b0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x62>
 23fa896:	f240 22d9 	movw	r2, #729	; 0x2d9
 23fa89a:	4293      	cmp	r3, r2
 23fa89c:	d01b      	beq.n	23fa8d6 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x88>
 23fa89e:	f240 22e1 	movw	r2, #737	; 0x2e1
 23fa8a2:	4293      	cmp	r3, r2
 23fa8a4:	d002      	beq.n	23fa8ac <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x5e>
 23fa8a6:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 23fa8aa:	d1e5      	bne.n	23fa878 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 100;
 23fa8ac:	2364      	movs	r3, #100	; 0x64
 23fa8ae:	e00b      	b.n	23fa8c8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
	switch (Temp)
 23fa8b0:	f240 428f 	movw	r2, #1167	; 0x48f
 23fa8b4:	4293      	cmp	r3, r2
 23fa8b6:	d003      	beq.n	23fa8c0 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x72>
 23fa8b8:	f240 5291 	movw	r2, #1425	; 0x591
 23fa8bc:	4293      	cmp	r3, r2
 23fa8be:	d1db      	bne.n	23fa878 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x2a>
		*pTimingBudget = 500;
 23fa8c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 23fa8c4:	e000      	b.n	23fa8c8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 15;
 23fa8c6:	230f      	movs	r3, #15
		*pTimingBudget = 0;
 23fa8c8:	8023      	strh	r3, [r4, #0]
}
 23fa8ca:	b002      	add	sp, #8
 23fa8cc:	bd10      	pop	{r4, pc}
		*pTimingBudget = 20;
 23fa8ce:	2314      	movs	r3, #20
 23fa8d0:	e7fa      	b.n	23fa8c8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 50;
 23fa8d2:	2332      	movs	r3, #50	; 0x32
 23fa8d4:	e7f8      	b.n	23fa8c8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>
		*pTimingBudget = 200;
 23fa8d6:	23c8      	movs	r3, #200	; 0xc8
 23fa8d8:	e7f6      	b.n	23fa8c8 <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt+0x7a>

023fa8da <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>:
{
 23fa8da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa8dc:	460d      	mov	r5, r1
	status = VL53L1X_GetTimingBudgetInMs(&TB);
 23fa8de:	f10d 0106 	add.w	r1, sp, #6
{
 23fa8e2:	4604      	mov	r4, r0
	status = VL53L1X_GetTimingBudgetInMs(&TB);
 23fa8e4:	f7ff ffb3 	bl	23fa84e <_ZN7VL53L1X27VL53L1X_GetTimingBudgetInMsEPt>
	switch (DM)
 23fa8e8:	2d01      	cmp	r5, #1
 23fa8ea:	d008      	beq.n	23fa8fe <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x24>
 23fa8ec:	2d02      	cmp	r5, #2
 23fa8ee:	d02d      	beq.n	23fa94c <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x72>
	status = VL53L1X_SetTimingBudgetInMs(TB);
 23fa8f0:	4620      	mov	r0, r4
 23fa8f2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 23fa8f6:	f7ff fef7 	bl	23fa6e8 <_ZN7VL53L1X27VL53L1X_SetTimingBudgetInMsEt>
}
 23fa8fa:	b003      	add	sp, #12
 23fa8fc:	bd30      	pop	{r4, r5, pc}
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 23fa8fe:	2314      	movs	r3, #20
 23fa900:	224b      	movs	r2, #75	; 0x4b
 23fa902:	69a1      	ldr	r1, [r4, #24]
 23fa904:	4620      	mov	r0, r4
 23fa906:	f7ff fe04 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 23fa90a:	2307      	movs	r3, #7
 23fa90c:	2260      	movs	r2, #96	; 0x60
 23fa90e:	69a1      	ldr	r1, [r4, #24]
 23fa910:	4620      	mov	r0, r4
 23fa912:	f7ff fdfe 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 23fa916:	2305      	movs	r3, #5
 23fa918:	2263      	movs	r2, #99	; 0x63
 23fa91a:	69a1      	ldr	r1, [r4, #24]
 23fa91c:	4620      	mov	r0, r4
 23fa91e:	f7ff fdf8 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 23fa922:	2338      	movs	r3, #56	; 0x38
 23fa924:	2269      	movs	r2, #105	; 0x69
 23fa926:	69a1      	ldr	r1, [r4, #24]
 23fa928:	4620      	mov	r0, r4
 23fa92a:	f7ff fdf2 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0705);
 23fa92e:	f240 7305 	movw	r3, #1797	; 0x705
 23fa932:	2278      	movs	r2, #120	; 0x78
 23fa934:	4620      	mov	r0, r4
 23fa936:	69a1      	ldr	r1, [r4, #24]
 23fa938:	f7ff fe07 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 23fa93c:	f240 6306 	movw	r3, #1542	; 0x606
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 23fa940:	227a      	movs	r2, #122	; 0x7a
 23fa942:	4620      	mov	r0, r4
 23fa944:	69a1      	ldr	r1, [r4, #24]
 23fa946:	f7ff fe00 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		break;
 23fa94a:	e7d1      	b.n	23fa8f0 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x16>
		status = VL53L1_WrByte(Device, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 23fa94c:	230a      	movs	r3, #10
 23fa94e:	224b      	movs	r2, #75	; 0x4b
 23fa950:	69a1      	ldr	r1, [r4, #24]
 23fa952:	4620      	mov	r0, r4
 23fa954:	f7ff fddd 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 23fa958:	230f      	movs	r3, #15
 23fa95a:	2260      	movs	r2, #96	; 0x60
 23fa95c:	69a1      	ldr	r1, [r4, #24]
 23fa95e:	4620      	mov	r0, r4
 23fa960:	f7ff fdd7 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 23fa964:	230d      	movs	r3, #13
 23fa966:	2263      	movs	r2, #99	; 0x63
 23fa968:	69a1      	ldr	r1, [r4, #24]
 23fa96a:	4620      	mov	r0, r4
 23fa96c:	f7ff fdd1 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrByte(Device, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 23fa970:	23b8      	movs	r3, #184	; 0xb8
 23fa972:	2269      	movs	r2, #105	; 0x69
 23fa974:	69a1      	ldr	r1, [r4, #24]
 23fa976:	4620      	mov	r0, r4
 23fa978:	f7ff fdcb 	bl	23fa512 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
		status = VL53L1_WrWord(Device, SD_CONFIG__WOI_SD0, 0x0F0D);
 23fa97c:	f640 730d 	movw	r3, #3853	; 0xf0d
 23fa980:	2278      	movs	r2, #120	; 0x78
 23fa982:	4620      	mov	r0, r4
 23fa984:	69a1      	ldr	r1, [r4, #24]
 23fa986:	f7ff fde0 	bl	23fa54a <_ZN7VL53L1X13VL53L1_WrWordEP12VL53L1_Dev_ttt>
		status = VL53L1_WrWord(Device, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 23fa98a:	f640 630e 	movw	r3, #3598	; 0xe0e
 23fa98e:	e7d7      	b.n	23fa940 <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt+0x66>

023fa990 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
	uint16_t tmp = 0;
 23fa990:	2300      	movs	r3, #0
{
 23fa992:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 23fa994:	f240 120f 	movw	r2, #271	; 0x10f
{
 23fa998:	460c      	mov	r4, r1
	uint16_t tmp = 0;
 23fa99a:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
 23fa99e:	6981      	ldr	r1, [r0, #24]
 23fa9a0:	f10d 0306 	add.w	r3, sp, #6
 23fa9a4:	f7ff ff3e 	bl	23fa824 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
 23fa9a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fa9ac:	8023      	strh	r3, [r4, #0]
}
 23fa9ae:	b002      	add	sp, #8
 23fa9b0:	bd10      	pop	{r4, pc}

023fa9b2 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
 23fa9b2:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
 23fa9b4:	2296      	movs	r2, #150	; 0x96
{
 23fa9b6:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
 23fa9b8:	f10d 0306 	add.w	r3, sp, #6
 23fa9bc:	6981      	ldr	r1, [r0, #24]
 23fa9be:	f7ff ff31 	bl	23fa824 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
 23fa9c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23fa9c6:	8023      	strh	r3, [r4, #0]
}
 23fa9c8:	b002      	add	sp, #8
 23fa9ca:	bd10      	pop	{r4, pc}

023fa9cc <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
 23fa9cc:	4770      	bx	lr

023fa9ce <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
 23fa9ce:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
 23fa9d0:	6880      	ldr	r0, [r0, #8]
 23fa9d2:	2800      	cmp	r0, #0
 23fa9d4:	db03      	blt.n	23fa9de <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
 23fa9d6:	2100      	movs	r1, #0
 23fa9d8:	b280      	uxth	r0, r0
 23fa9da:	f003 fc22 	bl	23fe222 <digitalWrite>
       }
       delay(10);
    }
 23fa9de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
 23fa9e2:	200a      	movs	r0, #10
 23fa9e4:	f002 bbc6 	b.w	23fd174 <delay>

023fa9e8 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
 23fa9e8:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
 23fa9ea:	6880      	ldr	r0, [r0, #8]
 23fa9ec:	2800      	cmp	r0, #0
 23fa9ee:	db03      	blt.n	23fa9f8 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
 23fa9f0:	2101      	movs	r1, #1
 23fa9f2:	b280      	uxth	r0, r0
 23fa9f4:	f003 fc15 	bl	23fe222 <digitalWrite>
    }
 23fa9f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
 23fa9fc:	200a      	movs	r0, #10
 23fa9fe:	f002 bbb9 	b.w	23fd174 <delay>

023faa02 <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
 23faa02:	b510      	push	{r4, lr}
 23faa04:	4604      	mov	r4, r0
 23faa06:	211c      	movs	r1, #28
 23faa08:	f7fe f877 	bl	23f8afa <_ZdlPvj>
 23faa0c:	4620      	mov	r0, r4
 23faa0e:	bd10      	pop	{r4, pc}

023faa10 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
 23faa10:	b513      	push	{r0, r1, r4, lr}
 23faa12:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
 23faa14:	f10d 0106 	add.w	r1, sp, #6
 23faa18:	f7ff ffcb 	bl	23fa9b2 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
 23faa1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23faa20:	6023      	str	r3, [r4, #0]
	return status;
    }
 23faa22:	b002      	add	sp, #8
 23faa24:	bd10      	pop	{r4, pc}

023faa26 <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
 23faa26:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
 23faa28:	f10d 0106 	add.w	r1, sp, #6
 23faa2c:	f7ff ffb0 	bl	23fa990 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	}
 23faa30:	f64e 63ac 	movw	r3, #61100	; 0xeeac
		if (sensorId == 0xEEAC)
 23faa34:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
 23faa38:	1ac0      	subs	r0, r0, r3
 23faa3a:	bf18      	it	ne
 23faa3c:	f04f 30ff 	movne.w	r0, #4294967295
 23faa40:	b003      	add	sp, #12
 23faa42:	f85d fb04 	ldr.w	pc, [sp], #4

023faa46 <_ZN7VL53L1X4InitEv>:
    virtual int Init()
 23faa46:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
 23faa48:	f7ff fdfc 	bl	23fa644 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
 23faa4c:	bd08      	pop	{r3, pc}
	...

023faa50 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23faa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23faa54:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
 23faa58:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23faa5c:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
 23faa60:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23faa62:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23faa64:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
 23faa66:	460f      	mov	r7, r1
 23faa68:	4616      	mov	r6, r2
 23faa6a:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23faa6c:	f7fe f83f 	bl	23f8aee <_Znwj>
 23faa70:	4604      	mov	r4, r0
 23faa72:	b180      	cbz	r0, 23faa96 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23faa74:	4b0a      	ldr	r3, [pc, #40]	; (23faaa0 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       if(gpio0 >= 0)
 23faa76:	2e00      	cmp	r6, #0
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23faa78:	e9c0 3700 	strd	r3, r7, [r0]
       Device = &MyDevice;
 23faa7c:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
 23faa80:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
 23faa84:	f880 9010 	strb.w	r9, [r0, #16]
       MyDevice.I2cHandle = i2c;
 23faa88:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
 23faa8a:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
 23faa8c:	db03      	blt.n	23faa96 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
 23faa8e:	2101      	movs	r1, #1
 23faa90:	b2b0      	uxth	r0, r6
 23faa92:	f003 fbb5 	bl	23fe200 <pinMode>
}
 23faa96:	4628      	mov	r0, r5
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
 23faa98:	612c      	str	r4, [r5, #16]
}
 23faa9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23faa9e:	bf00      	nop
 23faaa0:	023ffa48 	.word	0x023ffa48

023faaa4 <_ZN10SFEVL53L1X7checkIDEv>:
}

/*Checks the ID of the device, returns true if ID is correct*/

bool SFEVL53L1X::checkID()
{
 23faaa4:	b507      	push	{r0, r1, r2, lr}
	uint16_t sensorId;
	_device->VL53L1X_GetSensorId(&sensorId);
 23faaa6:	f10d 0106 	add.w	r1, sp, #6
 23faaaa:	6900      	ldr	r0, [r0, #16]
 23faaac:	f7ff ff70 	bl	23fa990 <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	if (sensorId == 0xEACC)
		return true;
	return false;
}
 23faab0:	f64e 23cc 	movw	r3, #60108	; 0xeacc
	if (sensorId == 0xEACC)
 23faab4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 23faab8:	1ac3      	subs	r3, r0, r3
 23faaba:	4258      	negs	r0, r3
 23faabc:	4158      	adcs	r0, r3
 23faabe:	b003      	add	sp, #12
 23faac0:	f85d fb04 	ldr.w	pc, [sp], #4

023faac4 <_ZN10SFEVL53L1X5beginEv>:
{
 23faac4:	b510      	push	{r4, lr}
 23faac6:	4604      	mov	r4, r0
	if (checkID() == false)
 23faac8:	f7ff ffec 	bl	23faaa4 <_ZN10SFEVL53L1X7checkIDEv>
 23faacc:	b130      	cbz	r0, 23faadc <_ZN10SFEVL53L1X5beginEv+0x18>
	return _device->VL53L1X_SensorInit();
 23faace:	6920      	ldr	r0, [r4, #16]
 23faad0:	f7ff fdb8 	bl	23fa644 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
 23faad4:	3800      	subs	r0, #0
 23faad6:	bf18      	it	ne
 23faad8:	2001      	movne	r0, #1
}
 23faada:	bd10      	pop	{r4, pc}
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);
 23faadc:	2001      	movs	r0, #1
 23faade:	e7fc      	b.n	23faada <_ZN10SFEVL53L1X5beginEv+0x16>

023faae0 <_ZN10SFEVL53L1X14clearInterruptEv>:
	return _i2cAddress;
}

void SFEVL53L1X::clearInterrupt()
{
	_device->VL53L1X_ClearInterrupt();
 23faae0:	6900      	ldr	r0, [r0, #16]
 23faae2:	f7ff bd23 	b.w	23fa52c <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>

023faae6 <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
 23faae6:	6900      	ldr	r0, [r0, #16]
 23faae8:	f7ff bd25 	b.w	23fa536 <_ZN7VL53L1X20VL53L1X_StartRangingEv>

023faaec <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
 23faaec:	6900      	ldr	r0, [r0, #16]
 23faaee:	f7ff bd27 	b.w	23fa540 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

023faaf2 <_ZN10SFEVL53L1X17checkForDataReadyEv>:
}

bool SFEVL53L1X::checkForDataReady()
{
 23faaf2:	b507      	push	{r0, r1, r2, lr}
	uint8_t dataReady;
	_device->VL53L1X_CheckForDataReady(&dataReady);
 23faaf4:	f10d 0107 	add.w	r1, sp, #7
 23faaf8:	6900      	ldr	r0, [r0, #16]
 23faafa:	f7ff fd87 	bl	23fa60c <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
	return (bool)dataReady;
 23faafe:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 23fab02:	3800      	subs	r0, #0
 23fab04:	bf18      	it	ne
 23fab06:	2001      	movne	r0, #1
 23fab08:	b003      	add	sp, #12
 23fab0a:	f85d fb04 	ldr.w	pc, [sp], #4

023fab0e <_ZN10SFEVL53L1X19setDistanceModeLongEv>:
	return timingBudget;
}

void SFEVL53L1X::setDistanceModeLong()
{
	_device->VL53L1X_SetDistanceMode(2);
 23fab0e:	2102      	movs	r1, #2
 23fab10:	6900      	ldr	r0, [r0, #16]
 23fab12:	f7ff bee2 	b.w	23fa8da <_ZN7VL53L1X23VL53L1X_SetDistanceModeEt>

023fab16 <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
 23fab16:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
 23fab18:	f10d 0106 	add.w	r1, sp, #6
 23fab1c:	6900      	ldr	r0, [r0, #16]
 23fab1e:	f7ff ff48 	bl	23fa9b2 <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
 23fab22:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 23fab26:	b003      	add	sp, #12
 23fab28:	f85d fb04 	ldr.w	pc, [sp], #4

023fab2c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fab2c:	b509      	push	{r0, r3, lr}
 23fab2e:	4804      	ldr	r0, [pc, #16]	; (23fab40 <netdb_freeaddrinfo+0x14>)
 23fab30:	6800      	ldr	r0, [r0, #0]
 23fab32:	4b04      	ldr	r3, [pc, #16]	; (23fab44 <netdb_freeaddrinfo+0x18>)
 23fab34:	4403      	add	r3, r0
 23fab36:	681b      	ldr	r3, [r3, #0]
 23fab38:	689b      	ldr	r3, [r3, #8]
 23fab3a:	9302      	str	r3, [sp, #8]
 23fab3c:	bd09      	pop	{r0, r3, pc}
 23fab3e:	0000      	.short	0x0000
 23fab40:	1007ad38 	.word	0x1007ad38
 23fab44:	00000050 	.word	0x00000050

023fab48 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fab48:	b509      	push	{r0, r3, lr}
 23fab4a:	4804      	ldr	r0, [pc, #16]	; (23fab5c <netdb_getaddrinfo+0x14>)
 23fab4c:	6800      	ldr	r0, [r0, #0]
 23fab4e:	4b04      	ldr	r3, [pc, #16]	; (23fab60 <netdb_getaddrinfo+0x18>)
 23fab50:	4403      	add	r3, r0
 23fab52:	681b      	ldr	r3, [r3, #0]
 23fab54:	68db      	ldr	r3, [r3, #12]
 23fab56:	9302      	str	r3, [sp, #8]
 23fab58:	bd09      	pop	{r0, r3, pc}
 23fab5a:	0000      	.short	0x0000
 23fab5c:	1007ad38 	.word	0x1007ad38
 23fab60:	00000050 	.word	0x00000050

023fab64 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23fab64:	b509      	push	{r0, r3, lr}
 23fab66:	4804      	ldr	r0, [pc, #16]	; (23fab78 <hal_pin_map+0x14>)
 23fab68:	6800      	ldr	r0, [r0, #0]
 23fab6a:	4b04      	ldr	r3, [pc, #16]	; (23fab7c <hal_pin_map+0x18>)
 23fab6c:	4403      	add	r3, r0
 23fab6e:	681b      	ldr	r3, [r3, #0]
 23fab70:	681b      	ldr	r3, [r3, #0]
 23fab72:	9302      	str	r3, [sp, #8]
 23fab74:	bd09      	pop	{r0, r3, pc}
 23fab76:	0000      	.short	0x0000
 23fab78:	1007ad38 	.word	0x1007ad38
 23fab7c:	00000014 	.word	0x00000014

023fab80 <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fab80:	b509      	push	{r0, r3, lr}
 23fab82:	4804      	ldr	r0, [pc, #16]	; (23fab94 <hal_gpio_mode+0x14>)
 23fab84:	6800      	ldr	r0, [r0, #0]
 23fab86:	4b04      	ldr	r3, [pc, #16]	; (23fab98 <hal_gpio_mode+0x18>)
 23fab88:	4403      	add	r3, r0
 23fab8a:	681b      	ldr	r3, [r3, #0]
 23fab8c:	689b      	ldr	r3, [r3, #8]
 23fab8e:	9302      	str	r3, [sp, #8]
 23fab90:	bd09      	pop	{r0, r3, pc}
 23fab92:	0000      	.short	0x0000
 23fab94:	1007ad38 	.word	0x1007ad38
 23fab98:	00000014 	.word	0x00000014

023fab9c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fab9c:	b509      	push	{r0, r3, lr}
 23fab9e:	4804      	ldr	r0, [pc, #16]	; (23fabb0 <hal_gpio_get_mode+0x14>)
 23faba0:	6800      	ldr	r0, [r0, #0]
 23faba2:	4b04      	ldr	r3, [pc, #16]	; (23fabb4 <hal_gpio_get_mode+0x18>)
 23faba4:	4403      	add	r3, r0
 23faba6:	681b      	ldr	r3, [r3, #0]
 23faba8:	68db      	ldr	r3, [r3, #12]
 23fabaa:	9302      	str	r3, [sp, #8]
 23fabac:	bd09      	pop	{r0, r3, pc}
 23fabae:	0000      	.short	0x0000
 23fabb0:	1007ad38 	.word	0x1007ad38
 23fabb4:	00000014 	.word	0x00000014

023fabb8 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fabb8:	b509      	push	{r0, r3, lr}
 23fabba:	4804      	ldr	r0, [pc, #16]	; (23fabcc <hal_gpio_write+0x14>)
 23fabbc:	6800      	ldr	r0, [r0, #0]
 23fabbe:	4b04      	ldr	r3, [pc, #16]	; (23fabd0 <hal_gpio_write+0x18>)
 23fabc0:	4403      	add	r3, r0
 23fabc2:	681b      	ldr	r3, [r3, #0]
 23fabc4:	691b      	ldr	r3, [r3, #16]
 23fabc6:	9302      	str	r3, [sp, #8]
 23fabc8:	bd09      	pop	{r0, r3, pc}
 23fabca:	0000      	.short	0x0000
 23fabcc:	1007ad38 	.word	0x1007ad38
 23fabd0:	00000014 	.word	0x00000014

023fabd4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23fabd4:	b509      	push	{r0, r3, lr}
 23fabd6:	4804      	ldr	r0, [pc, #16]	; (23fabe8 <hal_gpio_read+0x14>)
 23fabd8:	6800      	ldr	r0, [r0, #0]
 23fabda:	4b04      	ldr	r3, [pc, #16]	; (23fabec <hal_gpio_read+0x18>)
 23fabdc:	4403      	add	r3, r0
 23fabde:	681b      	ldr	r3, [r3, #0]
 23fabe0:	695b      	ldr	r3, [r3, #20]
 23fabe2:	9302      	str	r3, [sp, #8]
 23fabe4:	bd09      	pop	{r0, r3, pc}
 23fabe6:	0000      	.short	0x0000
 23fabe8:	1007ad38 	.word	0x1007ad38
 23fabec:	00000014 	.word	0x00000014

023fabf0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fabf0:	b509      	push	{r0, r3, lr}
 23fabf2:	4804      	ldr	r0, [pc, #16]	; (23fac04 <HAL_RNG_GetRandomNumber+0x14>)
 23fabf4:	6800      	ldr	r0, [r0, #0]
 23fabf6:	4b04      	ldr	r3, [pc, #16]	; (23fac08 <HAL_RNG_GetRandomNumber+0x18>)
 23fabf8:	4403      	add	r3, r0
 23fabfa:	681b      	ldr	r3, [r3, #0]
 23fabfc:	685b      	ldr	r3, [r3, #4]
 23fabfe:	9302      	str	r3, [sp, #8]
 23fac00:	bd09      	pop	{r0, r3, pc}
 23fac02:	0000      	.short	0x0000
 23fac04:	1007ad38 	.word	0x1007ad38
 23fac08:	00000000 	.word	0x00000000

023fac0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fac0c:	b509      	push	{r0, r3, lr}
 23fac0e:	4804      	ldr	r0, [pc, #16]	; (23fac20 <HAL_Delay_Microseconds+0x14>)
 23fac10:	6800      	ldr	r0, [r0, #0]
 23fac12:	4b04      	ldr	r3, [pc, #16]	; (23fac24 <HAL_Delay_Microseconds+0x18>)
 23fac14:	4403      	add	r3, r0
 23fac16:	681b      	ldr	r3, [r3, #0]
 23fac18:	68db      	ldr	r3, [r3, #12]
 23fac1a:	9302      	str	r3, [sp, #8]
 23fac1c:	bd09      	pop	{r0, r3, pc}
 23fac1e:	0000      	.short	0x0000
 23fac20:	1007ad38 	.word	0x1007ad38
 23fac24:	00000000 	.word	0x00000000

023fac28 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fac28:	b509      	push	{r0, r3, lr}
 23fac2a:	4804      	ldr	r0, [pc, #16]	; (23fac3c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fac2c:	6800      	ldr	r0, [r0, #0]
 23fac2e:	4b04      	ldr	r3, [pc, #16]	; (23fac40 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fac30:	4403      	add	r3, r0
 23fac32:	681b      	ldr	r3, [r3, #0]
 23fac34:	695b      	ldr	r3, [r3, #20]
 23fac36:	9302      	str	r3, [sp, #8]
 23fac38:	bd09      	pop	{r0, r3, pc}
 23fac3a:	0000      	.short	0x0000
 23fac3c:	1007ad38 	.word	0x1007ad38
 23fac40:	00000000 	.word	0x00000000

023fac44 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fac44:	b509      	push	{r0, r3, lr}
 23fac46:	4804      	ldr	r0, [pc, #16]	; (23fac58 <hal_timer_millis+0x14>)
 23fac48:	6800      	ldr	r0, [r0, #0]
 23fac4a:	4b04      	ldr	r3, [pc, #16]	; (23fac5c <hal_timer_millis+0x18>)
 23fac4c:	4403      	add	r3, r0
 23fac4e:	681b      	ldr	r3, [r3, #0]
 23fac50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fac52:	9302      	str	r3, [sp, #8]
 23fac54:	bd09      	pop	{r0, r3, pc}
 23fac56:	0000      	.short	0x0000
 23fac58:	1007ad38 	.word	0x1007ad38
 23fac5c:	00000000 	.word	0x00000000

023fac60 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
 23fac60:	b509      	push	{r0, r3, lr}
 23fac62:	4804      	ldr	r0, [pc, #16]	; (23fac74 <_open+0x14>)
 23fac64:	6800      	ldr	r0, [r0, #0]
 23fac66:	4b04      	ldr	r3, [pc, #16]	; (23fac78 <_open+0x18>)
 23fac68:	4403      	add	r3, r0
 23fac6a:	681b      	ldr	r3, [r3, #0]
 23fac6c:	681b      	ldr	r3, [r3, #0]
 23fac6e:	9302      	str	r3, [sp, #8]
 23fac70:	bd09      	pop	{r0, r3, pc}
 23fac72:	0000      	.short	0x0000
 23fac74:	1007ad38 	.word	0x1007ad38
 23fac78:	00000064 	.word	0x00000064

023fac7c <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
 23fac7c:	b509      	push	{r0, r3, lr}
 23fac7e:	4804      	ldr	r0, [pc, #16]	; (23fac90 <_write+0x14>)
 23fac80:	6800      	ldr	r0, [r0, #0]
 23fac82:	4b04      	ldr	r3, [pc, #16]	; (23fac94 <_write+0x18>)
 23fac84:	4403      	add	r3, r0
 23fac86:	681b      	ldr	r3, [r3, #0]
 23fac88:	685b      	ldr	r3, [r3, #4]
 23fac8a:	9302      	str	r3, [sp, #8]
 23fac8c:	bd09      	pop	{r0, r3, pc}
 23fac8e:	0000      	.short	0x0000
 23fac90:	1007ad38 	.word	0x1007ad38
 23fac94:	00000064 	.word	0x00000064

023fac98 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
 23fac98:	b509      	push	{r0, r3, lr}
 23fac9a:	4804      	ldr	r0, [pc, #16]	; (23facac <_read+0x14>)
 23fac9c:	6800      	ldr	r0, [r0, #0]
 23fac9e:	4b04      	ldr	r3, [pc, #16]	; (23facb0 <_read+0x18>)
 23faca0:	4403      	add	r3, r0
 23faca2:	681b      	ldr	r3, [r3, #0]
 23faca4:	689b      	ldr	r3, [r3, #8]
 23faca6:	9302      	str	r3, [sp, #8]
 23faca8:	bd09      	pop	{r0, r3, pc}
 23facaa:	0000      	.short	0x0000
 23facac:	1007ad38 	.word	0x1007ad38
 23facb0:	00000064 	.word	0x00000064

023facb4 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
 23facb4:	b509      	push	{r0, r3, lr}
 23facb6:	4804      	ldr	r0, [pc, #16]	; (23facc8 <_close+0x14>)
 23facb8:	6800      	ldr	r0, [r0, #0]
 23facba:	4b04      	ldr	r3, [pc, #16]	; (23faccc <_close+0x18>)
 23facbc:	4403      	add	r3, r0
 23facbe:	681b      	ldr	r3, [r3, #0]
 23facc0:	68db      	ldr	r3, [r3, #12]
 23facc2:	9302      	str	r3, [sp, #8]
 23facc4:	bd09      	pop	{r0, r3, pc}
 23facc6:	0000      	.short	0x0000
 23facc8:	1007ad38 	.word	0x1007ad38
 23faccc:	00000064 	.word	0x00000064

023facd0 <_lseek>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
 23facd0:	b509      	push	{r0, r3, lr}
 23facd2:	4804      	ldr	r0, [pc, #16]	; (23face4 <_lseek+0x14>)
 23facd4:	6800      	ldr	r0, [r0, #0]
 23facd6:	4b04      	ldr	r3, [pc, #16]	; (23face8 <_lseek+0x18>)
 23facd8:	4403      	add	r3, r0
 23facda:	681b      	ldr	r3, [r3, #0]
 23facdc:	6a1b      	ldr	r3, [r3, #32]
 23facde:	9302      	str	r3, [sp, #8]
 23face0:	bd09      	pop	{r0, r3, pc}
 23face2:	0000      	.short	0x0000
 23face4:	1007ad38 	.word	0x1007ad38
 23face8:	00000064 	.word	0x00000064

023facec <_unlink>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
 23facec:	b509      	push	{r0, r3, lr}
 23facee:	4804      	ldr	r0, [pc, #16]	; (23fad00 <_unlink+0x14>)
 23facf0:	6800      	ldr	r0, [r0, #0]
 23facf2:	4b04      	ldr	r3, [pc, #16]	; (23fad04 <_unlink+0x18>)
 23facf4:	4403      	add	r3, r0
 23facf6:	681b      	ldr	r3, [r3, #0]
 23facf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23facfa:	9302      	str	r3, [sp, #8]
 23facfc:	bd09      	pop	{r0, r3, pc}
 23facfe:	0000      	.short	0x0000
 23fad00:	1007ad38 	.word	0x1007ad38
 23fad04:	00000064 	.word	0x00000064

023fad08 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
 23fad08:	b509      	push	{r0, r3, lr}
 23fad0a:	4804      	ldr	r0, [pc, #16]	; (23fad1c <opendir+0x14>)
 23fad0c:	6800      	ldr	r0, [r0, #0]
 23fad0e:	4b04      	ldr	r3, [pc, #16]	; (23fad20 <opendir+0x18>)
 23fad10:	4403      	add	r3, r0
 23fad12:	681b      	ldr	r3, [r3, #0]
 23fad14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fad16:	9302      	str	r3, [sp, #8]
 23fad18:	bd09      	pop	{r0, r3, pc}
 23fad1a:	0000      	.short	0x0000
 23fad1c:	1007ad38 	.word	0x1007ad38
 23fad20:	00000064 	.word	0x00000064

023fad24 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
 23fad24:	b509      	push	{r0, r3, lr}
 23fad26:	4804      	ldr	r0, [pc, #16]	; (23fad38 <readdir+0x14>)
 23fad28:	6800      	ldr	r0, [r0, #0]
 23fad2a:	4b04      	ldr	r3, [pc, #16]	; (23fad3c <readdir+0x18>)
 23fad2c:	4403      	add	r3, r0
 23fad2e:	681b      	ldr	r3, [r3, #0]
 23fad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fad32:	9302      	str	r3, [sp, #8]
 23fad34:	bd09      	pop	{r0, r3, pc}
 23fad36:	0000      	.short	0x0000
 23fad38:	1007ad38 	.word	0x1007ad38
 23fad3c:	00000064 	.word	0x00000064

023fad40 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
 23fad40:	b509      	push	{r0, r3, lr}
 23fad42:	4804      	ldr	r0, [pc, #16]	; (23fad54 <closedir+0x14>)
 23fad44:	6800      	ldr	r0, [r0, #0]
 23fad46:	4b04      	ldr	r3, [pc, #16]	; (23fad58 <closedir+0x18>)
 23fad48:	4403      	add	r3, r0
 23fad4a:	681b      	ldr	r3, [r3, #0]
 23fad4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fad4e:	9302      	str	r3, [sp, #8]
 23fad50:	bd09      	pop	{r0, r3, pc}
 23fad52:	0000      	.short	0x0000
 23fad54:	1007ad38 	.word	0x1007ad38
 23fad58:	00000064 	.word	0x00000064

023fad5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fad5c:	b509      	push	{r0, r3, lr}
 23fad5e:	4804      	ldr	r0, [pc, #16]	; (23fad70 <os_mutex_recursive_create+0x14>)
 23fad60:	6800      	ldr	r0, [r0, #0]
 23fad62:	4b04      	ldr	r3, [pc, #16]	; (23fad74 <os_mutex_recursive_create+0x18>)
 23fad64:	4403      	add	r3, r0
 23fad66:	681b      	ldr	r3, [r3, #0]
 23fad68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fad6a:	9302      	str	r3, [sp, #8]
 23fad6c:	bd09      	pop	{r0, r3, pc}
 23fad6e:	0000      	.short	0x0000
 23fad70:	1007ad38 	.word	0x1007ad38
 23fad74:	00000030 	.word	0x00000030

023fad78 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fad78:	b509      	push	{r0, r3, lr}
 23fad7a:	4804      	ldr	r0, [pc, #16]	; (23fad8c <os_mutex_recursive_destroy+0x14>)
 23fad7c:	6800      	ldr	r0, [r0, #0]
 23fad7e:	4b04      	ldr	r3, [pc, #16]	; (23fad90 <os_mutex_recursive_destroy+0x18>)
 23fad80:	4403      	add	r3, r0
 23fad82:	681b      	ldr	r3, [r3, #0]
 23fad84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fad86:	9302      	str	r3, [sp, #8]
 23fad88:	bd09      	pop	{r0, r3, pc}
 23fad8a:	0000      	.short	0x0000
 23fad8c:	1007ad38 	.word	0x1007ad38
 23fad90:	00000030 	.word	0x00000030

023fad94 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fad94:	b509      	push	{r0, r3, lr}
 23fad96:	4804      	ldr	r0, [pc, #16]	; (23fada8 <os_mutex_recursive_lock+0x14>)
 23fad98:	6800      	ldr	r0, [r0, #0]
 23fad9a:	4b04      	ldr	r3, [pc, #16]	; (23fadac <os_mutex_recursive_lock+0x18>)
 23fad9c:	4403      	add	r3, r0
 23fad9e:	681b      	ldr	r3, [r3, #0]
 23fada0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fada2:	9302      	str	r3, [sp, #8]
 23fada4:	bd09      	pop	{r0, r3, pc}
 23fada6:	0000      	.short	0x0000
 23fada8:	1007ad38 	.word	0x1007ad38
 23fadac:	00000030 	.word	0x00000030

023fadb0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fadb0:	b509      	push	{r0, r3, lr}
 23fadb2:	4804      	ldr	r0, [pc, #16]	; (23fadc4 <os_mutex_recursive_unlock+0x14>)
 23fadb4:	6800      	ldr	r0, [r0, #0]
 23fadb6:	4b04      	ldr	r3, [pc, #16]	; (23fadc8 <os_mutex_recursive_unlock+0x18>)
 23fadb8:	4403      	add	r3, r0
 23fadba:	681b      	ldr	r3, [r3, #0]
 23fadbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fadbe:	9302      	str	r3, [sp, #8]
 23fadc0:	bd09      	pop	{r0, r3, pc}
 23fadc2:	0000      	.short	0x0000
 23fadc4:	1007ad38 	.word	0x1007ad38
 23fadc8:	00000030 	.word	0x00000030

023fadcc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fadcc:	b509      	push	{r0, r3, lr}
 23fadce:	4804      	ldr	r0, [pc, #16]	; (23fade0 <inet_inet_ntop+0x14>)
 23fadd0:	6800      	ldr	r0, [r0, #0]
 23fadd2:	4b04      	ldr	r3, [pc, #16]	; (23fade4 <inet_inet_ntop+0x18>)
 23fadd4:	4403      	add	r3, r0
 23fadd6:	681b      	ldr	r3, [r3, #0]
 23fadd8:	695b      	ldr	r3, [r3, #20]
 23fadda:	9302      	str	r3, [sp, #8]
 23faddc:	bd09      	pop	{r0, r3, pc}
 23fadde:	0000      	.short	0x0000
 23fade0:	1007ad38 	.word	0x1007ad38
 23fade4:	0000004c 	.word	0x0000004c

023fade8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fade8:	b509      	push	{r0, r3, lr}
 23fadea:	4804      	ldr	r0, [pc, #16]	; (23fadfc <hal_usart_end+0x14>)
 23fadec:	6800      	ldr	r0, [r0, #0]
 23fadee:	4b04      	ldr	r3, [pc, #16]	; (23fae00 <hal_usart_end+0x18>)
 23fadf0:	4403      	add	r3, r0
 23fadf2:	681b      	ldr	r3, [r3, #0]
 23fadf4:	689b      	ldr	r3, [r3, #8]
 23fadf6:	9302      	str	r3, [sp, #8]
 23fadf8:	bd09      	pop	{r0, r3, pc}
 23fadfa:	0000      	.short	0x0000
 23fadfc:	1007ad38 	.word	0x1007ad38
 23fae00:	00000024 	.word	0x00000024

023fae04 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fae04:	b509      	push	{r0, r3, lr}
 23fae06:	4804      	ldr	r0, [pc, #16]	; (23fae18 <hal_usart_write+0x14>)
 23fae08:	6800      	ldr	r0, [r0, #0]
 23fae0a:	4b04      	ldr	r3, [pc, #16]	; (23fae1c <hal_usart_write+0x18>)
 23fae0c:	4403      	add	r3, r0
 23fae0e:	681b      	ldr	r3, [r3, #0]
 23fae10:	68db      	ldr	r3, [r3, #12]
 23fae12:	9302      	str	r3, [sp, #8]
 23fae14:	bd09      	pop	{r0, r3, pc}
 23fae16:	0000      	.short	0x0000
 23fae18:	1007ad38 	.word	0x1007ad38
 23fae1c:	00000024 	.word	0x00000024

023fae20 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fae20:	b509      	push	{r0, r3, lr}
 23fae22:	4804      	ldr	r0, [pc, #16]	; (23fae34 <hal_usart_available+0x14>)
 23fae24:	6800      	ldr	r0, [r0, #0]
 23fae26:	4b04      	ldr	r3, [pc, #16]	; (23fae38 <hal_usart_available+0x18>)
 23fae28:	4403      	add	r3, r0
 23fae2a:	681b      	ldr	r3, [r3, #0]
 23fae2c:	691b      	ldr	r3, [r3, #16]
 23fae2e:	9302      	str	r3, [sp, #8]
 23fae30:	bd09      	pop	{r0, r3, pc}
 23fae32:	0000      	.short	0x0000
 23fae34:	1007ad38 	.word	0x1007ad38
 23fae38:	00000024 	.word	0x00000024

023fae3c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fae3c:	b509      	push	{r0, r3, lr}
 23fae3e:	4804      	ldr	r0, [pc, #16]	; (23fae50 <hal_usart_read+0x14>)
 23fae40:	6800      	ldr	r0, [r0, #0]
 23fae42:	4b04      	ldr	r3, [pc, #16]	; (23fae54 <hal_usart_read+0x18>)
 23fae44:	4403      	add	r3, r0
 23fae46:	681b      	ldr	r3, [r3, #0]
 23fae48:	695b      	ldr	r3, [r3, #20]
 23fae4a:	9302      	str	r3, [sp, #8]
 23fae4c:	bd09      	pop	{r0, r3, pc}
 23fae4e:	0000      	.short	0x0000
 23fae50:	1007ad38 	.word	0x1007ad38
 23fae54:	00000024 	.word	0x00000024

023fae58 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fae58:	b509      	push	{r0, r3, lr}
 23fae5a:	4804      	ldr	r0, [pc, #16]	; (23fae6c <hal_usart_peek+0x14>)
 23fae5c:	6800      	ldr	r0, [r0, #0]
 23fae5e:	4b04      	ldr	r3, [pc, #16]	; (23fae70 <hal_usart_peek+0x18>)
 23fae60:	4403      	add	r3, r0
 23fae62:	681b      	ldr	r3, [r3, #0]
 23fae64:	699b      	ldr	r3, [r3, #24]
 23fae66:	9302      	str	r3, [sp, #8]
 23fae68:	bd09      	pop	{r0, r3, pc}
 23fae6a:	0000      	.short	0x0000
 23fae6c:	1007ad38 	.word	0x1007ad38
 23fae70:	00000024 	.word	0x00000024

023fae74 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fae74:	b509      	push	{r0, r3, lr}
 23fae76:	4804      	ldr	r0, [pc, #16]	; (23fae88 <hal_usart_flush+0x14>)
 23fae78:	6800      	ldr	r0, [r0, #0]
 23fae7a:	4b04      	ldr	r3, [pc, #16]	; (23fae8c <hal_usart_flush+0x18>)
 23fae7c:	4403      	add	r3, r0
 23fae7e:	681b      	ldr	r3, [r3, #0]
 23fae80:	69db      	ldr	r3, [r3, #28]
 23fae82:	9302      	str	r3, [sp, #8]
 23fae84:	bd09      	pop	{r0, r3, pc}
 23fae86:	0000      	.short	0x0000
 23fae88:	1007ad38 	.word	0x1007ad38
 23fae8c:	00000024 	.word	0x00000024

023fae90 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fae90:	b509      	push	{r0, r3, lr}
 23fae92:	4804      	ldr	r0, [pc, #16]	; (23faea4 <hal_usart_is_enabled+0x14>)
 23fae94:	6800      	ldr	r0, [r0, #0]
 23fae96:	4b04      	ldr	r3, [pc, #16]	; (23faea8 <hal_usart_is_enabled+0x18>)
 23fae98:	4403      	add	r3, r0
 23fae9a:	681b      	ldr	r3, [r3, #0]
 23fae9c:	6a1b      	ldr	r3, [r3, #32]
 23fae9e:	9302      	str	r3, [sp, #8]
 23faea0:	bd09      	pop	{r0, r3, pc}
 23faea2:	0000      	.short	0x0000
 23faea4:	1007ad38 	.word	0x1007ad38
 23faea8:	00000024 	.word	0x00000024

023faeac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23faeac:	b509      	push	{r0, r3, lr}
 23faeae:	4804      	ldr	r0, [pc, #16]	; (23faec0 <hal_usart_available_data_for_write+0x14>)
 23faeb0:	6800      	ldr	r0, [r0, #0]
 23faeb2:	4b04      	ldr	r3, [pc, #16]	; (23faec4 <hal_usart_available_data_for_write+0x18>)
 23faeb4:	4403      	add	r3, r0
 23faeb6:	681b      	ldr	r3, [r3, #0]
 23faeb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23faeba:	9302      	str	r3, [sp, #8]
 23faebc:	bd09      	pop	{r0, r3, pc}
 23faebe:	0000      	.short	0x0000
 23faec0:	1007ad38 	.word	0x1007ad38
 23faec4:	00000024 	.word	0x00000024

023faec8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23faec8:	b509      	push	{r0, r3, lr}
 23faeca:	4804      	ldr	r0, [pc, #16]	; (23faedc <hal_usart_begin_config+0x14>)
 23faecc:	6800      	ldr	r0, [r0, #0]
 23faece:	4b04      	ldr	r3, [pc, #16]	; (23faee0 <hal_usart_begin_config+0x18>)
 23faed0:	4403      	add	r3, r0
 23faed2:	681b      	ldr	r3, [r3, #0]
 23faed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23faed6:	9302      	str	r3, [sp, #8]
 23faed8:	bd09      	pop	{r0, r3, pc}
 23faeda:	0000      	.short	0x0000
 23faedc:	1007ad38 	.word	0x1007ad38
 23faee0:	00000024 	.word	0x00000024

023faee4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23faee4:	b509      	push	{r0, r3, lr}
 23faee6:	4804      	ldr	r0, [pc, #16]	; (23faef8 <hal_usart_init_ex+0x14>)
 23faee8:	6800      	ldr	r0, [r0, #0]
 23faeea:	4b04      	ldr	r3, [pc, #16]	; (23faefc <hal_usart_init_ex+0x18>)
 23faeec:	4403      	add	r3, r0
 23faeee:	681b      	ldr	r3, [r3, #0]
 23faef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23faef2:	9302      	str	r3, [sp, #8]
 23faef4:	bd09      	pop	{r0, r3, pc}
 23faef6:	0000      	.short	0x0000
 23faef8:	1007ad38 	.word	0x1007ad38
 23faefc:	00000024 	.word	0x00000024

023faf00 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23faf00:	b509      	push	{r0, r3, lr}
 23faf02:	4804      	ldr	r0, [pc, #16]	; (23faf14 <hal_i2c_begin+0x14>)
 23faf04:	6800      	ldr	r0, [r0, #0]
 23faf06:	4b04      	ldr	r3, [pc, #16]	; (23faf18 <hal_i2c_begin+0x18>)
 23faf08:	4403      	add	r3, r0
 23faf0a:	681b      	ldr	r3, [r3, #0]
 23faf0c:	68db      	ldr	r3, [r3, #12]
 23faf0e:	9302      	str	r3, [sp, #8]
 23faf10:	bd09      	pop	{r0, r3, pc}
 23faf12:	0000      	.short	0x0000
 23faf14:	1007ad38 	.word	0x1007ad38
 23faf18:	00000010 	.word	0x00000010

023faf1c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23faf1c:	b509      	push	{r0, r3, lr}
 23faf1e:	4804      	ldr	r0, [pc, #16]	; (23faf30 <hal_i2c_begin_transmission+0x14>)
 23faf20:	6800      	ldr	r0, [r0, #0]
 23faf22:	4b04      	ldr	r3, [pc, #16]	; (23faf34 <hal_i2c_begin_transmission+0x18>)
 23faf24:	4403      	add	r3, r0
 23faf26:	681b      	ldr	r3, [r3, #0]
 23faf28:	699b      	ldr	r3, [r3, #24]
 23faf2a:	9302      	str	r3, [sp, #8]
 23faf2c:	bd09      	pop	{r0, r3, pc}
 23faf2e:	0000      	.short	0x0000
 23faf30:	1007ad38 	.word	0x1007ad38
 23faf34:	00000010 	.word	0x00000010

023faf38 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23faf38:	b509      	push	{r0, r3, lr}
 23faf3a:	4804      	ldr	r0, [pc, #16]	; (23faf4c <hal_i2c_end_transmission+0x14>)
 23faf3c:	6800      	ldr	r0, [r0, #0]
 23faf3e:	4b04      	ldr	r3, [pc, #16]	; (23faf50 <hal_i2c_end_transmission+0x18>)
 23faf40:	4403      	add	r3, r0
 23faf42:	681b      	ldr	r3, [r3, #0]
 23faf44:	69db      	ldr	r3, [r3, #28]
 23faf46:	9302      	str	r3, [sp, #8]
 23faf48:	bd09      	pop	{r0, r3, pc}
 23faf4a:	0000      	.short	0x0000
 23faf4c:	1007ad38 	.word	0x1007ad38
 23faf50:	00000010 	.word	0x00000010

023faf54 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23faf54:	b509      	push	{r0, r3, lr}
 23faf56:	4804      	ldr	r0, [pc, #16]	; (23faf68 <hal_i2c_write+0x14>)
 23faf58:	6800      	ldr	r0, [r0, #0]
 23faf5a:	4b04      	ldr	r3, [pc, #16]	; (23faf6c <hal_i2c_write+0x18>)
 23faf5c:	4403      	add	r3, r0
 23faf5e:	681b      	ldr	r3, [r3, #0]
 23faf60:	6a1b      	ldr	r3, [r3, #32]
 23faf62:	9302      	str	r3, [sp, #8]
 23faf64:	bd09      	pop	{r0, r3, pc}
 23faf66:	0000      	.short	0x0000
 23faf68:	1007ad38 	.word	0x1007ad38
 23faf6c:	00000010 	.word	0x00000010

023faf70 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23faf70:	b509      	push	{r0, r3, lr}
 23faf72:	4804      	ldr	r0, [pc, #16]	; (23faf84 <hal_i2c_available+0x14>)
 23faf74:	6800      	ldr	r0, [r0, #0]
 23faf76:	4b04      	ldr	r3, [pc, #16]	; (23faf88 <hal_i2c_available+0x18>)
 23faf78:	4403      	add	r3, r0
 23faf7a:	681b      	ldr	r3, [r3, #0]
 23faf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23faf7e:	9302      	str	r3, [sp, #8]
 23faf80:	bd09      	pop	{r0, r3, pc}
 23faf82:	0000      	.short	0x0000
 23faf84:	1007ad38 	.word	0x1007ad38
 23faf88:	00000010 	.word	0x00000010

023faf8c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23faf8c:	b509      	push	{r0, r3, lr}
 23faf8e:	4804      	ldr	r0, [pc, #16]	; (23fafa0 <hal_i2c_read+0x14>)
 23faf90:	6800      	ldr	r0, [r0, #0]
 23faf92:	4b04      	ldr	r3, [pc, #16]	; (23fafa4 <hal_i2c_read+0x18>)
 23faf94:	4403      	add	r3, r0
 23faf96:	681b      	ldr	r3, [r3, #0]
 23faf98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23faf9a:	9302      	str	r3, [sp, #8]
 23faf9c:	bd09      	pop	{r0, r3, pc}
 23faf9e:	0000      	.short	0x0000
 23fafa0:	1007ad38 	.word	0x1007ad38
 23fafa4:	00000010 	.word	0x00000010

023fafa8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fafa8:	b509      	push	{r0, r3, lr}
 23fafaa:	4804      	ldr	r0, [pc, #16]	; (23fafbc <hal_i2c_peek+0x14>)
 23fafac:	6800      	ldr	r0, [r0, #0]
 23fafae:	4b04      	ldr	r3, [pc, #16]	; (23fafc0 <hal_i2c_peek+0x18>)
 23fafb0:	4403      	add	r3, r0
 23fafb2:	681b      	ldr	r3, [r3, #0]
 23fafb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fafb6:	9302      	str	r3, [sp, #8]
 23fafb8:	bd09      	pop	{r0, r3, pc}
 23fafba:	0000      	.short	0x0000
 23fafbc:	1007ad38 	.word	0x1007ad38
 23fafc0:	00000010 	.word	0x00000010

023fafc4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fafc4:	b509      	push	{r0, r3, lr}
 23fafc6:	4804      	ldr	r0, [pc, #16]	; (23fafd8 <hal_i2c_flush+0x14>)
 23fafc8:	6800      	ldr	r0, [r0, #0]
 23fafca:	4b04      	ldr	r3, [pc, #16]	; (23fafdc <hal_i2c_flush+0x18>)
 23fafcc:	4403      	add	r3, r0
 23fafce:	681b      	ldr	r3, [r3, #0]
 23fafd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fafd2:	9302      	str	r3, [sp, #8]
 23fafd4:	bd09      	pop	{r0, r3, pc}
 23fafd6:	0000      	.short	0x0000
 23fafd8:	1007ad38 	.word	0x1007ad38
 23fafdc:	00000010 	.word	0x00000010

023fafe0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fafe0:	b509      	push	{r0, r3, lr}
 23fafe2:	4804      	ldr	r0, [pc, #16]	; (23faff4 <hal_i2c_is_enabled+0x14>)
 23fafe4:	6800      	ldr	r0, [r0, #0]
 23fafe6:	4b04      	ldr	r3, [pc, #16]	; (23faff8 <hal_i2c_is_enabled+0x18>)
 23fafe8:	4403      	add	r3, r0
 23fafea:	681b      	ldr	r3, [r3, #0]
 23fafec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fafee:	9302      	str	r3, [sp, #8]
 23faff0:	bd09      	pop	{r0, r3, pc}
 23faff2:	0000      	.short	0x0000
 23faff4:	1007ad38 	.word	0x1007ad38
 23faff8:	00000010 	.word	0x00000010

023faffc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23faffc:	b509      	push	{r0, r3, lr}
 23faffe:	4804      	ldr	r0, [pc, #16]	; (23fb010 <hal_i2c_init+0x14>)
 23fb000:	6800      	ldr	r0, [r0, #0]
 23fb002:	4b04      	ldr	r3, [pc, #16]	; (23fb014 <hal_i2c_init+0x18>)
 23fb004:	4403      	add	r3, r0
 23fb006:	681b      	ldr	r3, [r3, #0]
 23fb008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb00a:	9302      	str	r3, [sp, #8]
 23fb00c:	bd09      	pop	{r0, r3, pc}
 23fb00e:	0000      	.short	0x0000
 23fb010:	1007ad38 	.word	0x1007ad38
 23fb014:	00000010 	.word	0x00000010

023fb018 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fb018:	b509      	push	{r0, r3, lr}
 23fb01a:	4804      	ldr	r0, [pc, #16]	; (23fb02c <hal_i2c_request_ex+0x14>)
 23fb01c:	6800      	ldr	r0, [r0, #0]
 23fb01e:	4b04      	ldr	r3, [pc, #16]	; (23fb030 <hal_i2c_request_ex+0x18>)
 23fb020:	4403      	add	r3, r0
 23fb022:	681b      	ldr	r3, [r3, #0]
 23fb024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fb026:	9302      	str	r3, [sp, #8]
 23fb028:	bd09      	pop	{r0, r3, pc}
 23fb02a:	0000      	.short	0x0000
 23fb02c:	1007ad38 	.word	0x1007ad38
 23fb030:	00000010 	.word	0x00000010

023fb034 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fb034:	b509      	push	{r0, r3, lr}
 23fb036:	4804      	ldr	r0, [pc, #16]	; (23fb048 <hal_spi_begin+0x14>)
 23fb038:	6800      	ldr	r0, [r0, #0]
 23fb03a:	4b04      	ldr	r3, [pc, #16]	; (23fb04c <hal_spi_begin+0x18>)
 23fb03c:	4403      	add	r3, r0
 23fb03e:	681b      	ldr	r3, [r3, #0]
 23fb040:	681b      	ldr	r3, [r3, #0]
 23fb042:	9302      	str	r3, [sp, #8]
 23fb044:	bd09      	pop	{r0, r3, pc}
 23fb046:	0000      	.short	0x0000
 23fb048:	1007ad38 	.word	0x1007ad38
 23fb04c:	00000018 	.word	0x00000018

023fb050 <hal_spi_set_data_mode>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fb050:	b509      	push	{r0, r3, lr}
 23fb052:	4804      	ldr	r0, [pc, #16]	; (23fb064 <hal_spi_set_data_mode+0x14>)
 23fb054:	6800      	ldr	r0, [r0, #0]
 23fb056:	4b04      	ldr	r3, [pc, #16]	; (23fb068 <hal_spi_set_data_mode+0x18>)
 23fb058:	4403      	add	r3, r0
 23fb05a:	681b      	ldr	r3, [r3, #0]
 23fb05c:	68db      	ldr	r3, [r3, #12]
 23fb05e:	9302      	str	r3, [sp, #8]
 23fb060:	bd09      	pop	{r0, r3, pc}
 23fb062:	0000      	.short	0x0000
 23fb064:	1007ad38 	.word	0x1007ad38
 23fb068:	00000018 	.word	0x00000018

023fb06c <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fb06c:	b509      	push	{r0, r3, lr}
 23fb06e:	4804      	ldr	r0, [pc, #16]	; (23fb080 <hal_spi_set_clock_divider+0x14>)
 23fb070:	6800      	ldr	r0, [r0, #0]
 23fb072:	4b04      	ldr	r3, [pc, #16]	; (23fb084 <hal_spi_set_clock_divider+0x18>)
 23fb074:	4403      	add	r3, r0
 23fb076:	681b      	ldr	r3, [r3, #0]
 23fb078:	691b      	ldr	r3, [r3, #16]
 23fb07a:	9302      	str	r3, [sp, #8]
 23fb07c:	bd09      	pop	{r0, r3, pc}
 23fb07e:	0000      	.short	0x0000
 23fb080:	1007ad38 	.word	0x1007ad38
 23fb084:	00000018 	.word	0x00000018

023fb088 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fb088:	b509      	push	{r0, r3, lr}
 23fb08a:	4804      	ldr	r0, [pc, #16]	; (23fb09c <hal_spi_transfer+0x14>)
 23fb08c:	6800      	ldr	r0, [r0, #0]
 23fb08e:	4b04      	ldr	r3, [pc, #16]	; (23fb0a0 <hal_spi_transfer+0x18>)
 23fb090:	4403      	add	r3, r0
 23fb092:	681b      	ldr	r3, [r3, #0]
 23fb094:	695b      	ldr	r3, [r3, #20]
 23fb096:	9302      	str	r3, [sp, #8]
 23fb098:	bd09      	pop	{r0, r3, pc}
 23fb09a:	0000      	.short	0x0000
 23fb09c:	1007ad38 	.word	0x1007ad38
 23fb0a0:	00000018 	.word	0x00000018

023fb0a4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fb0a4:	b509      	push	{r0, r3, lr}
 23fb0a6:	4804      	ldr	r0, [pc, #16]	; (23fb0b8 <hal_spi_init+0x14>)
 23fb0a8:	6800      	ldr	r0, [r0, #0]
 23fb0aa:	4b04      	ldr	r3, [pc, #16]	; (23fb0bc <hal_spi_init+0x18>)
 23fb0ac:	4403      	add	r3, r0
 23fb0ae:	681b      	ldr	r3, [r3, #0]
 23fb0b0:	69db      	ldr	r3, [r3, #28]
 23fb0b2:	9302      	str	r3, [sp, #8]
 23fb0b4:	bd09      	pop	{r0, r3, pc}
 23fb0b6:	0000      	.short	0x0000
 23fb0b8:	1007ad38 	.word	0x1007ad38
 23fb0bc:	00000018 	.word	0x00000018

023fb0c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fb0c0:	b509      	push	{r0, r3, lr}
 23fb0c2:	4804      	ldr	r0, [pc, #16]	; (23fb0d4 <hal_spi_is_enabled+0x14>)
 23fb0c4:	6800      	ldr	r0, [r0, #0]
 23fb0c6:	4b04      	ldr	r3, [pc, #16]	; (23fb0d8 <hal_spi_is_enabled+0x18>)
 23fb0c8:	4403      	add	r3, r0
 23fb0ca:	681b      	ldr	r3, [r3, #0]
 23fb0cc:	6a1b      	ldr	r3, [r3, #32]
 23fb0ce:	9302      	str	r3, [sp, #8]
 23fb0d0:	bd09      	pop	{r0, r3, pc}
 23fb0d2:	0000      	.short	0x0000
 23fb0d4:	1007ad38 	.word	0x1007ad38
 23fb0d8:	00000018 	.word	0x00000018

023fb0dc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fb0dc:	b509      	push	{r0, r3, lr}
 23fb0de:	4804      	ldr	r0, [pc, #16]	; (23fb0f0 <hal_spi_info+0x14>)
 23fb0e0:	6800      	ldr	r0, [r0, #0]
 23fb0e2:	4b04      	ldr	r3, [pc, #16]	; (23fb0f4 <hal_spi_info+0x18>)
 23fb0e4:	4403      	add	r3, r0
 23fb0e6:	681b      	ldr	r3, [r3, #0]
 23fb0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb0ea:	9302      	str	r3, [sp, #8]
 23fb0ec:	bd09      	pop	{r0, r3, pc}
 23fb0ee:	0000      	.short	0x0000
 23fb0f0:	1007ad38 	.word	0x1007ad38
 23fb0f4:	00000018 	.word	0x00000018

023fb0f8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fb0f8:	b509      	push	{r0, r3, lr}
 23fb0fa:	4804      	ldr	r0, [pc, #16]	; (23fb10c <hal_spi_acquire+0x14>)
 23fb0fc:	6800      	ldr	r0, [r0, #0]
 23fb0fe:	4b04      	ldr	r3, [pc, #16]	; (23fb110 <hal_spi_acquire+0x18>)
 23fb100:	4403      	add	r3, r0
 23fb102:	681b      	ldr	r3, [r3, #0]
 23fb104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb106:	9302      	str	r3, [sp, #8]
 23fb108:	bd09      	pop	{r0, r3, pc}
 23fb10a:	0000      	.short	0x0000
 23fb10c:	1007ad38 	.word	0x1007ad38
 23fb110:	00000018 	.word	0x00000018

023fb114 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fb114:	b509      	push	{r0, r3, lr}
 23fb116:	4804      	ldr	r0, [pc, #16]	; (23fb128 <hal_spi_release+0x14>)
 23fb118:	6800      	ldr	r0, [r0, #0]
 23fb11a:	4b04      	ldr	r3, [pc, #16]	; (23fb12c <hal_spi_release+0x18>)
 23fb11c:	4403      	add	r3, r0
 23fb11e:	681b      	ldr	r3, [r3, #0]
 23fb120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb122:	9302      	str	r3, [sp, #8]
 23fb124:	bd09      	pop	{r0, r3, pc}
 23fb126:	0000      	.short	0x0000
 23fb128:	1007ad38 	.word	0x1007ad38
 23fb12c:	00000018 	.word	0x00000018

023fb130 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fb130:	b509      	push	{r0, r3, lr}
 23fb132:	4804      	ldr	r0, [pc, #16]	; (23fb144 <HAL_USB_USART_Init+0x14>)
 23fb134:	6800      	ldr	r0, [r0, #0]
 23fb136:	4b04      	ldr	r3, [pc, #16]	; (23fb148 <HAL_USB_USART_Init+0x18>)
 23fb138:	4403      	add	r3, r0
 23fb13a:	681b      	ldr	r3, [r3, #0]
 23fb13c:	681b      	ldr	r3, [r3, #0]
 23fb13e:	9302      	str	r3, [sp, #8]
 23fb140:	bd09      	pop	{r0, r3, pc}
 23fb142:	0000      	.short	0x0000
 23fb144:	1007ad38 	.word	0x1007ad38
 23fb148:	00000034 	.word	0x00000034

023fb14c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fb14c:	b509      	push	{r0, r3, lr}
 23fb14e:	4804      	ldr	r0, [pc, #16]	; (23fb160 <HAL_USB_USART_Begin+0x14>)
 23fb150:	6800      	ldr	r0, [r0, #0]
 23fb152:	4b04      	ldr	r3, [pc, #16]	; (23fb164 <HAL_USB_USART_Begin+0x18>)
 23fb154:	4403      	add	r3, r0
 23fb156:	681b      	ldr	r3, [r3, #0]
 23fb158:	685b      	ldr	r3, [r3, #4]
 23fb15a:	9302      	str	r3, [sp, #8]
 23fb15c:	bd09      	pop	{r0, r3, pc}
 23fb15e:	0000      	.short	0x0000
 23fb160:	1007ad38 	.word	0x1007ad38
 23fb164:	00000034 	.word	0x00000034

023fb168 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fb168:	b509      	push	{r0, r3, lr}
 23fb16a:	4804      	ldr	r0, [pc, #16]	; (23fb17c <HAL_USB_USART_End+0x14>)
 23fb16c:	6800      	ldr	r0, [r0, #0]
 23fb16e:	4b04      	ldr	r3, [pc, #16]	; (23fb180 <HAL_USB_USART_End+0x18>)
 23fb170:	4403      	add	r3, r0
 23fb172:	681b      	ldr	r3, [r3, #0]
 23fb174:	689b      	ldr	r3, [r3, #8]
 23fb176:	9302      	str	r3, [sp, #8]
 23fb178:	bd09      	pop	{r0, r3, pc}
 23fb17a:	0000      	.short	0x0000
 23fb17c:	1007ad38 	.word	0x1007ad38
 23fb180:	00000034 	.word	0x00000034

023fb184 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fb184:	b509      	push	{r0, r3, lr}
 23fb186:	4804      	ldr	r0, [pc, #16]	; (23fb198 <HAL_USB_USART_Available_Data+0x14>)
 23fb188:	6800      	ldr	r0, [r0, #0]
 23fb18a:	4b04      	ldr	r3, [pc, #16]	; (23fb19c <HAL_USB_USART_Available_Data+0x18>)
 23fb18c:	4403      	add	r3, r0
 23fb18e:	681b      	ldr	r3, [r3, #0]
 23fb190:	691b      	ldr	r3, [r3, #16]
 23fb192:	9302      	str	r3, [sp, #8]
 23fb194:	bd09      	pop	{r0, r3, pc}
 23fb196:	0000      	.short	0x0000
 23fb198:	1007ad38 	.word	0x1007ad38
 23fb19c:	00000034 	.word	0x00000034

023fb1a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fb1a0:	b509      	push	{r0, r3, lr}
 23fb1a2:	4804      	ldr	r0, [pc, #16]	; (23fb1b4 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fb1a4:	6800      	ldr	r0, [r0, #0]
 23fb1a6:	4b04      	ldr	r3, [pc, #16]	; (23fb1b8 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fb1a8:	4403      	add	r3, r0
 23fb1aa:	681b      	ldr	r3, [r3, #0]
 23fb1ac:	695b      	ldr	r3, [r3, #20]
 23fb1ae:	9302      	str	r3, [sp, #8]
 23fb1b0:	bd09      	pop	{r0, r3, pc}
 23fb1b2:	0000      	.short	0x0000
 23fb1b4:	1007ad38 	.word	0x1007ad38
 23fb1b8:	00000034 	.word	0x00000034

023fb1bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb1bc:	b509      	push	{r0, r3, lr}
 23fb1be:	4804      	ldr	r0, [pc, #16]	; (23fb1d0 <HAL_USB_USART_Receive_Data+0x14>)
 23fb1c0:	6800      	ldr	r0, [r0, #0]
 23fb1c2:	4b04      	ldr	r3, [pc, #16]	; (23fb1d4 <HAL_USB_USART_Receive_Data+0x18>)
 23fb1c4:	4403      	add	r3, r0
 23fb1c6:	681b      	ldr	r3, [r3, #0]
 23fb1c8:	699b      	ldr	r3, [r3, #24]
 23fb1ca:	9302      	str	r3, [sp, #8]
 23fb1cc:	bd09      	pop	{r0, r3, pc}
 23fb1ce:	0000      	.short	0x0000
 23fb1d0:	1007ad38 	.word	0x1007ad38
 23fb1d4:	00000034 	.word	0x00000034

023fb1d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb1d8:	b509      	push	{r0, r3, lr}
 23fb1da:	4804      	ldr	r0, [pc, #16]	; (23fb1ec <HAL_USB_USART_Send_Data+0x14>)
 23fb1dc:	6800      	ldr	r0, [r0, #0]
 23fb1de:	4b04      	ldr	r3, [pc, #16]	; (23fb1f0 <HAL_USB_USART_Send_Data+0x18>)
 23fb1e0:	4403      	add	r3, r0
 23fb1e2:	681b      	ldr	r3, [r3, #0]
 23fb1e4:	69db      	ldr	r3, [r3, #28]
 23fb1e6:	9302      	str	r3, [sp, #8]
 23fb1e8:	bd09      	pop	{r0, r3, pc}
 23fb1ea:	0000      	.short	0x0000
 23fb1ec:	1007ad38 	.word	0x1007ad38
 23fb1f0:	00000034 	.word	0x00000034

023fb1f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fb1f4:	b509      	push	{r0, r3, lr}
 23fb1f6:	4804      	ldr	r0, [pc, #16]	; (23fb208 <HAL_USB_USART_Flush_Data+0x14>)
 23fb1f8:	6800      	ldr	r0, [r0, #0]
 23fb1fa:	4b04      	ldr	r3, [pc, #16]	; (23fb20c <HAL_USB_USART_Flush_Data+0x18>)
 23fb1fc:	4403      	add	r3, r0
 23fb1fe:	681b      	ldr	r3, [r3, #0]
 23fb200:	6a1b      	ldr	r3, [r3, #32]
 23fb202:	9302      	str	r3, [sp, #8]
 23fb204:	bd09      	pop	{r0, r3, pc}
 23fb206:	0000      	.short	0x0000
 23fb208:	1007ad38 	.word	0x1007ad38
 23fb20c:	00000034 	.word	0x00000034

023fb210 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23fb210:	b509      	push	{r0, r3, lr}
 23fb212:	4804      	ldr	r0, [pc, #16]	; (23fb224 <HAL_USB_USART_Is_Connected+0x14>)
 23fb214:	6800      	ldr	r0, [r0, #0]
 23fb216:	4b04      	ldr	r3, [pc, #16]	; (23fb228 <HAL_USB_USART_Is_Connected+0x18>)
 23fb218:	4403      	add	r3, r0
 23fb21a:	681b      	ldr	r3, [r3, #0]
 23fb21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb21e:	9302      	str	r3, [sp, #8]
 23fb220:	bd09      	pop	{r0, r3, pc}
 23fb222:	0000      	.short	0x0000
 23fb224:	1007ad38 	.word	0x1007ad38
 23fb228:	00000034 	.word	0x00000034

023fb22c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fb22c:	b509      	push	{r0, r3, lr}
 23fb22e:	4804      	ldr	r0, [pc, #16]	; (23fb240 <panic_+0x14>)
 23fb230:	6800      	ldr	r0, [r0, #0]
 23fb232:	4b04      	ldr	r3, [pc, #16]	; (23fb244 <panic_+0x18>)
 23fb234:	4403      	add	r3, r0
 23fb236:	681b      	ldr	r3, [r3, #0]
 23fb238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb23a:	9302      	str	r3, [sp, #8]
 23fb23c:	bd09      	pop	{r0, r3, pc}
 23fb23e:	0000      	.short	0x0000
 23fb240:	1007ad38 	.word	0x1007ad38
 23fb244:	00000048 	.word	0x00000048

023fb248 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fb248:	b509      	push	{r0, r3, lr}
 23fb24a:	4804      	ldr	r0, [pc, #16]	; (23fb25c <log_message_v+0x14>)
 23fb24c:	6800      	ldr	r0, [r0, #0]
 23fb24e:	4b04      	ldr	r3, [pc, #16]	; (23fb260 <log_message_v+0x18>)
 23fb250:	4403      	add	r3, r0
 23fb252:	681b      	ldr	r3, [r3, #0]
 23fb254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb256:	9302      	str	r3, [sp, #8]
 23fb258:	bd09      	pop	{r0, r3, pc}
 23fb25a:	0000      	.short	0x0000
 23fb25c:	1007ad38 	.word	0x1007ad38
 23fb260:	00000048 	.word	0x00000048

023fb264 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fb264:	b509      	push	{r0, r3, lr}
 23fb266:	4804      	ldr	r0, [pc, #16]	; (23fb278 <log_level_name+0x14>)
 23fb268:	6800      	ldr	r0, [r0, #0]
 23fb26a:	4b04      	ldr	r3, [pc, #16]	; (23fb27c <log_level_name+0x18>)
 23fb26c:	4403      	add	r3, r0
 23fb26e:	681b      	ldr	r3, [r3, #0]
 23fb270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fb272:	9302      	str	r3, [sp, #8]
 23fb274:	bd09      	pop	{r0, r3, pc}
 23fb276:	0000      	.short	0x0000
 23fb278:	1007ad38 	.word	0x1007ad38
 23fb27c:	00000048 	.word	0x00000048

023fb280 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fb280:	b509      	push	{r0, r3, lr}
 23fb282:	4804      	ldr	r0, [pc, #16]	; (23fb294 <log_set_callbacks+0x14>)
 23fb284:	6800      	ldr	r0, [r0, #0]
 23fb286:	4b04      	ldr	r3, [pc, #16]	; (23fb298 <log_set_callbacks+0x18>)
 23fb288:	4403      	add	r3, r0
 23fb28a:	681b      	ldr	r3, [r3, #0]
 23fb28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fb28e:	9302      	str	r3, [sp, #8]
 23fb290:	bd09      	pop	{r0, r3, pc}
 23fb292:	0000      	.short	0x0000
 23fb294:	1007ad38 	.word	0x1007ad38
 23fb298:	00000048 	.word	0x00000048

023fb29c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fb29c:	b509      	push	{r0, r3, lr}
 23fb29e:	4804      	ldr	r0, [pc, #16]	; (23fb2b0 <set_system_mode+0x14>)
 23fb2a0:	6800      	ldr	r0, [r0, #0]
 23fb2a2:	4b04      	ldr	r3, [pc, #16]	; (23fb2b4 <set_system_mode+0x18>)
 23fb2a4:	4403      	add	r3, r0
 23fb2a6:	681b      	ldr	r3, [r3, #0]
 23fb2a8:	685b      	ldr	r3, [r3, #4]
 23fb2aa:	9302      	str	r3, [sp, #8]
 23fb2ac:	bd09      	pop	{r0, r3, pc}
 23fb2ae:	0000      	.short	0x0000
 23fb2b0:	1007ad38 	.word	0x1007ad38
 23fb2b4:	00000008 	.word	0x00000008

023fb2b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fb2b8:	b509      	push	{r0, r3, lr}
 23fb2ba:	4804      	ldr	r0, [pc, #16]	; (23fb2cc <system_delay_ms+0x14>)
 23fb2bc:	6800      	ldr	r0, [r0, #0]
 23fb2be:	4b04      	ldr	r3, [pc, #16]	; (23fb2d0 <system_delay_ms+0x18>)
 23fb2c0:	4403      	add	r3, r0
 23fb2c2:	681b      	ldr	r3, [r3, #0]
 23fb2c4:	695b      	ldr	r3, [r3, #20]
 23fb2c6:	9302      	str	r3, [sp, #8]
 23fb2c8:	bd09      	pop	{r0, r3, pc}
 23fb2ca:	0000      	.short	0x0000
 23fb2cc:	1007ad38 	.word	0x1007ad38
 23fb2d0:	00000008 	.word	0x00000008

023fb2d4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fb2d4:	b509      	push	{r0, r3, lr}
 23fb2d6:	4804      	ldr	r0, [pc, #16]	; (23fb2e8 <application_thread_current+0x14>)
 23fb2d8:	6800      	ldr	r0, [r0, #0]
 23fb2da:	4b04      	ldr	r3, [pc, #16]	; (23fb2ec <application_thread_current+0x18>)
 23fb2dc:	4403      	add	r3, r0
 23fb2de:	681b      	ldr	r3, [r3, #0]
 23fb2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fb2e2:	9302      	str	r3, [sp, #8]
 23fb2e4:	bd09      	pop	{r0, r3, pc}
 23fb2e6:	0000      	.short	0x0000
 23fb2e8:	1007ad38 	.word	0x1007ad38
 23fb2ec:	00000008 	.word	0x00000008

023fb2f0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fb2f0:	b509      	push	{r0, r3, lr}
 23fb2f2:	4804      	ldr	r0, [pc, #16]	; (23fb304 <application_thread_invoke+0x14>)
 23fb2f4:	6800      	ldr	r0, [r0, #0]
 23fb2f6:	4b04      	ldr	r3, [pc, #16]	; (23fb308 <application_thread_invoke+0x18>)
 23fb2f8:	4403      	add	r3, r0
 23fb2fa:	681b      	ldr	r3, [r3, #0]
 23fb2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fb2fe:	9302      	str	r3, [sp, #8]
 23fb300:	bd09      	pop	{r0, r3, pc}
 23fb302:	0000      	.short	0x0000
 23fb304:	1007ad38 	.word	0x1007ad38
 23fb308:	00000008 	.word	0x00000008

023fb30c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fb30c:	b509      	push	{r0, r3, lr}
 23fb30e:	4804      	ldr	r0, [pc, #16]	; (23fb320 <system_ctrl_set_app_request_handler+0x14>)
 23fb310:	6800      	ldr	r0, [r0, #0]
 23fb312:	4b04      	ldr	r3, [pc, #16]	; (23fb324 <system_ctrl_set_app_request_handler+0x18>)
 23fb314:	4403      	add	r3, r0
 23fb316:	681b      	ldr	r3, [r3, #0]
 23fb318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fb31c:	9302      	str	r3, [sp, #8]
 23fb31e:	bd09      	pop	{r0, r3, pc}
 23fb320:	1007ad38 	.word	0x1007ad38
 23fb324:	00000008 	.word	0x00000008

023fb328 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fb328:	b509      	push	{r0, r3, lr}
 23fb32a:	4804      	ldr	r0, [pc, #16]	; (23fb33c <system_ctrl_set_result+0x14>)
 23fb32c:	6800      	ldr	r0, [r0, #0]
 23fb32e:	4b04      	ldr	r3, [pc, #16]	; (23fb340 <system_ctrl_set_result+0x18>)
 23fb330:	4403      	add	r3, r0
 23fb332:	681b      	ldr	r3, [r3, #0]
 23fb334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fb338:	9302      	str	r3, [sp, #8]
 23fb33a:	bd09      	pop	{r0, r3, pc}
 23fb33c:	1007ad38 	.word	0x1007ad38
 23fb340:	00000008 	.word	0x00000008

023fb344 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb344:	b509      	push	{r0, r3, lr}
 23fb346:	4804      	ldr	r0, [pc, #16]	; (23fb358 <network_connect+0x14>)
 23fb348:	6800      	ldr	r0, [r0, #0]
 23fb34a:	4b04      	ldr	r3, [pc, #16]	; (23fb35c <network_connect+0x18>)
 23fb34c:	4403      	add	r3, r0
 23fb34e:	681b      	ldr	r3, [r3, #0]
 23fb350:	685b      	ldr	r3, [r3, #4]
 23fb352:	9302      	str	r3, [sp, #8]
 23fb354:	bd09      	pop	{r0, r3, pc}
 23fb356:	0000      	.short	0x0000
 23fb358:	1007ad38 	.word	0x1007ad38
 23fb35c:	00000028 	.word	0x00000028

023fb360 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fb360:	b509      	push	{r0, r3, lr}
 23fb362:	4804      	ldr	r0, [pc, #16]	; (23fb374 <network_connecting+0x14>)
 23fb364:	6800      	ldr	r0, [r0, #0]
 23fb366:	4b04      	ldr	r3, [pc, #16]	; (23fb378 <network_connecting+0x18>)
 23fb368:	4403      	add	r3, r0
 23fb36a:	681b      	ldr	r3, [r3, #0]
 23fb36c:	689b      	ldr	r3, [r3, #8]
 23fb36e:	9302      	str	r3, [sp, #8]
 23fb370:	bd09      	pop	{r0, r3, pc}
 23fb372:	0000      	.short	0x0000
 23fb374:	1007ad38 	.word	0x1007ad38
 23fb378:	00000028 	.word	0x00000028

023fb37c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fb37c:	b509      	push	{r0, r3, lr}
 23fb37e:	4804      	ldr	r0, [pc, #16]	; (23fb390 <network_disconnect+0x14>)
 23fb380:	6800      	ldr	r0, [r0, #0]
 23fb382:	4b04      	ldr	r3, [pc, #16]	; (23fb394 <network_disconnect+0x18>)
 23fb384:	4403      	add	r3, r0
 23fb386:	681b      	ldr	r3, [r3, #0]
 23fb388:	68db      	ldr	r3, [r3, #12]
 23fb38a:	9302      	str	r3, [sp, #8]
 23fb38c:	bd09      	pop	{r0, r3, pc}
 23fb38e:	0000      	.short	0x0000
 23fb390:	1007ad38 	.word	0x1007ad38
 23fb394:	00000028 	.word	0x00000028

023fb398 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fb398:	b509      	push	{r0, r3, lr}
 23fb39a:	4804      	ldr	r0, [pc, #16]	; (23fb3ac <network_ready+0x14>)
 23fb39c:	6800      	ldr	r0, [r0, #0]
 23fb39e:	4b04      	ldr	r3, [pc, #16]	; (23fb3b0 <network_ready+0x18>)
 23fb3a0:	4403      	add	r3, r0
 23fb3a2:	681b      	ldr	r3, [r3, #0]
 23fb3a4:	691b      	ldr	r3, [r3, #16]
 23fb3a6:	9302      	str	r3, [sp, #8]
 23fb3a8:	bd09      	pop	{r0, r3, pc}
 23fb3aa:	0000      	.short	0x0000
 23fb3ac:	1007ad38 	.word	0x1007ad38
 23fb3b0:	00000028 	.word	0x00000028

023fb3b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb3b4:	b509      	push	{r0, r3, lr}
 23fb3b6:	4804      	ldr	r0, [pc, #16]	; (23fb3c8 <network_on+0x14>)
 23fb3b8:	6800      	ldr	r0, [r0, #0]
 23fb3ba:	4b04      	ldr	r3, [pc, #16]	; (23fb3cc <network_on+0x18>)
 23fb3bc:	4403      	add	r3, r0
 23fb3be:	681b      	ldr	r3, [r3, #0]
 23fb3c0:	695b      	ldr	r3, [r3, #20]
 23fb3c2:	9302      	str	r3, [sp, #8]
 23fb3c4:	bd09      	pop	{r0, r3, pc}
 23fb3c6:	0000      	.short	0x0000
 23fb3c8:	1007ad38 	.word	0x1007ad38
 23fb3cc:	00000028 	.word	0x00000028

023fb3d0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb3d0:	b509      	push	{r0, r3, lr}
 23fb3d2:	4804      	ldr	r0, [pc, #16]	; (23fb3e4 <network_off+0x14>)
 23fb3d4:	6800      	ldr	r0, [r0, #0]
 23fb3d6:	4b04      	ldr	r3, [pc, #16]	; (23fb3e8 <network_off+0x18>)
 23fb3d8:	4403      	add	r3, r0
 23fb3da:	681b      	ldr	r3, [r3, #0]
 23fb3dc:	699b      	ldr	r3, [r3, #24]
 23fb3de:	9302      	str	r3, [sp, #8]
 23fb3e0:	bd09      	pop	{r0, r3, pc}
 23fb3e2:	0000      	.short	0x0000
 23fb3e4:	1007ad38 	.word	0x1007ad38
 23fb3e8:	00000028 	.word	0x00000028

023fb3ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fb3ec:	b509      	push	{r0, r3, lr}
 23fb3ee:	4804      	ldr	r0, [pc, #16]	; (23fb400 <network_listen+0x14>)
 23fb3f0:	6800      	ldr	r0, [r0, #0]
 23fb3f2:	4b04      	ldr	r3, [pc, #16]	; (23fb404 <network_listen+0x18>)
 23fb3f4:	4403      	add	r3, r0
 23fb3f6:	681b      	ldr	r3, [r3, #0]
 23fb3f8:	69db      	ldr	r3, [r3, #28]
 23fb3fa:	9302      	str	r3, [sp, #8]
 23fb3fc:	bd09      	pop	{r0, r3, pc}
 23fb3fe:	0000      	.short	0x0000
 23fb400:	1007ad38 	.word	0x1007ad38
 23fb404:	00000028 	.word	0x00000028

023fb408 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fb408:	b509      	push	{r0, r3, lr}
 23fb40a:	4804      	ldr	r0, [pc, #16]	; (23fb41c <network_listening+0x14>)
 23fb40c:	6800      	ldr	r0, [r0, #0]
 23fb40e:	4b04      	ldr	r3, [pc, #16]	; (23fb420 <network_listening+0x18>)
 23fb410:	4403      	add	r3, r0
 23fb412:	681b      	ldr	r3, [r3, #0]
 23fb414:	6a1b      	ldr	r3, [r3, #32]
 23fb416:	9302      	str	r3, [sp, #8]
 23fb418:	bd09      	pop	{r0, r3, pc}
 23fb41a:	0000      	.short	0x0000
 23fb41c:	1007ad38 	.word	0x1007ad38
 23fb420:	00000028 	.word	0x00000028

023fb424 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fb424:	b509      	push	{r0, r3, lr}
 23fb426:	4804      	ldr	r0, [pc, #16]	; (23fb438 <network_set_listen_timeout+0x14>)
 23fb428:	6800      	ldr	r0, [r0, #0]
 23fb42a:	4b04      	ldr	r3, [pc, #16]	; (23fb43c <network_set_listen_timeout+0x18>)
 23fb42c:	4403      	add	r3, r0
 23fb42e:	681b      	ldr	r3, [r3, #0]
 23fb430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb432:	9302      	str	r3, [sp, #8]
 23fb434:	bd09      	pop	{r0, r3, pc}
 23fb436:	0000      	.short	0x0000
 23fb438:	1007ad38 	.word	0x1007ad38
 23fb43c:	00000028 	.word	0x00000028

023fb440 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fb440:	b509      	push	{r0, r3, lr}
 23fb442:	4804      	ldr	r0, [pc, #16]	; (23fb454 <network_get_listen_timeout+0x14>)
 23fb444:	6800      	ldr	r0, [r0, #0]
 23fb446:	4b04      	ldr	r3, [pc, #16]	; (23fb458 <network_get_listen_timeout+0x18>)
 23fb448:	4403      	add	r3, r0
 23fb44a:	681b      	ldr	r3, [r3, #0]
 23fb44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb44e:	9302      	str	r3, [sp, #8]
 23fb450:	bd09      	pop	{r0, r3, pc}
 23fb452:	0000      	.short	0x0000
 23fb454:	1007ad38 	.word	0x1007ad38
 23fb458:	00000028 	.word	0x00000028

023fb45c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fb45c:	b509      	push	{r0, r3, lr}
 23fb45e:	4804      	ldr	r0, [pc, #16]	; (23fb470 <network_is_on+0x14>)
 23fb460:	6800      	ldr	r0, [r0, #0]
 23fb462:	4b04      	ldr	r3, [pc, #16]	; (23fb474 <network_is_on+0x18>)
 23fb464:	4403      	add	r3, r0
 23fb466:	681b      	ldr	r3, [r3, #0]
 23fb468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb46a:	9302      	str	r3, [sp, #8]
 23fb46c:	bd09      	pop	{r0, r3, pc}
 23fb46e:	0000      	.short	0x0000
 23fb470:	1007ad38 	.word	0x1007ad38
 23fb474:	00000028 	.word	0x00000028

023fb478 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fb478:	b509      	push	{r0, r3, lr}
 23fb47a:	4804      	ldr	r0, [pc, #16]	; (23fb48c <network_is_off+0x14>)
 23fb47c:	6800      	ldr	r0, [r0, #0]
 23fb47e:	4b04      	ldr	r3, [pc, #16]	; (23fb490 <network_is_off+0x18>)
 23fb480:	4403      	add	r3, r0
 23fb482:	681b      	ldr	r3, [r3, #0]
 23fb484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb486:	9302      	str	r3, [sp, #8]
 23fb488:	bd09      	pop	{r0, r3, pc}
 23fb48a:	0000      	.short	0x0000
 23fb48c:	1007ad38 	.word	0x1007ad38
 23fb490:	00000028 	.word	0x00000028

023fb494 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fb494:	b509      	push	{r0, r3, lr}
 23fb496:	4804      	ldr	r0, [pc, #16]	; (23fb4a8 <spark_process+0x14>)
 23fb498:	6800      	ldr	r0, [r0, #0]
 23fb49a:	4b04      	ldr	r3, [pc, #16]	; (23fb4ac <spark_process+0x18>)
 23fb49c:	4403      	add	r3, r0
 23fb49e:	681b      	ldr	r3, [r3, #0]
 23fb4a0:	689b      	ldr	r3, [r3, #8]
 23fb4a2:	9302      	str	r3, [sp, #8]
 23fb4a4:	bd09      	pop	{r0, r3, pc}
 23fb4a6:	0000      	.short	0x0000
 23fb4a8:	1007ad38 	.word	0x1007ad38
 23fb4ac:	0000002c 	.word	0x0000002c

023fb4b0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fb4b0:	b509      	push	{r0, r3, lr}
 23fb4b2:	4804      	ldr	r0, [pc, #16]	; (23fb4c4 <spark_cloud_flag_connected+0x14>)
 23fb4b4:	6800      	ldr	r0, [r0, #0]
 23fb4b6:	4b04      	ldr	r3, [pc, #16]	; (23fb4c8 <spark_cloud_flag_connected+0x18>)
 23fb4b8:	4403      	add	r3, r0
 23fb4ba:	681b      	ldr	r3, [r3, #0]
 23fb4bc:	695b      	ldr	r3, [r3, #20]
 23fb4be:	9302      	str	r3, [sp, #8]
 23fb4c0:	bd09      	pop	{r0, r3, pc}
 23fb4c2:	0000      	.short	0x0000
 23fb4c4:	1007ad38 	.word	0x1007ad38
 23fb4c8:	0000002c 	.word	0x0000002c

023fb4cc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fb4cc:	b509      	push	{r0, r3, lr}
 23fb4ce:	4804      	ldr	r0, [pc, #16]	; (23fb4e0 <spark_send_event+0x14>)
 23fb4d0:	6800      	ldr	r0, [r0, #0]
 23fb4d2:	4b04      	ldr	r3, [pc, #16]	; (23fb4e4 <spark_send_event+0x18>)
 23fb4d4:	4403      	add	r3, r0
 23fb4d6:	681b      	ldr	r3, [r3, #0]
 23fb4d8:	6a1b      	ldr	r3, [r3, #32]
 23fb4da:	9302      	str	r3, [sp, #8]
 23fb4dc:	bd09      	pop	{r0, r3, pc}
 23fb4de:	0000      	.short	0x0000
 23fb4e0:	1007ad38 	.word	0x1007ad38
 23fb4e4:	0000002c 	.word	0x0000002c

023fb4e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fb4e8:	b509      	push	{r0, r3, lr}
 23fb4ea:	4804      	ldr	r0, [pc, #16]	; (23fb4fc <spark_set_random_seed_from_cloud_handler+0x14>)
 23fb4ec:	6800      	ldr	r0, [r0, #0]
 23fb4ee:	4b04      	ldr	r3, [pc, #16]	; (23fb500 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fb4f0:	4403      	add	r3, r0
 23fb4f2:	681b      	ldr	r3, [r3, #0]
 23fb4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb4f6:	9302      	str	r3, [sp, #8]
 23fb4f8:	bd09      	pop	{r0, r3, pc}
 23fb4fa:	0000      	.short	0x0000
 23fb4fc:	1007ad38 	.word	0x1007ad38
 23fb500:	0000002c 	.word	0x0000002c

023fb504 <asset_manager_get_info>:
#endif // DYNALIB_EXPORT

DYNALIB_BEGIN(system_asset_manager)

DYNALIB_FN(0, system_asset_manager, asset_manager_set_notify_hook, int(asset_manager_notify_hook, void*, void*))
DYNALIB_FN(1, system_asset_manager, asset_manager_get_info, int(asset_manager_info*, void*))
 23fb504:	b509      	push	{r0, r3, lr}
 23fb506:	4804      	ldr	r0, [pc, #16]	; (23fb518 <asset_manager_get_info+0x14>)
 23fb508:	6800      	ldr	r0, [r0, #0]
 23fb50a:	4b04      	ldr	r3, [pc, #16]	; (23fb51c <asset_manager_get_info+0x18>)
 23fb50c:	4403      	add	r3, r0
 23fb50e:	681b      	ldr	r3, [r3, #0]
 23fb510:	685b      	ldr	r3, [r3, #4]
 23fb512:	9302      	str	r3, [sp, #8]
 23fb514:	bd09      	pop	{r0, r3, pc}
 23fb516:	0000      	.short	0x0000
 23fb518:	1007ad38 	.word	0x1007ad38
 23fb51c:	00000074 	.word	0x00000074

023fb520 <asset_manager_free_info>:
DYNALIB_FN(2, system_asset_manager, asset_manager_free_info, void(asset_manager_info*, void*))
 23fb520:	b509      	push	{r0, r3, lr}
 23fb522:	4804      	ldr	r0, [pc, #16]	; (23fb534 <asset_manager_free_info+0x14>)
 23fb524:	6800      	ldr	r0, [r0, #0]
 23fb526:	4b04      	ldr	r3, [pc, #16]	; (23fb538 <asset_manager_free_info+0x18>)
 23fb528:	4403      	add	r3, r0
 23fb52a:	681b      	ldr	r3, [r3, #0]
 23fb52c:	689b      	ldr	r3, [r3, #8]
 23fb52e:	9302      	str	r3, [sp, #8]
 23fb530:	bd09      	pop	{r0, r3, pc}
 23fb532:	0000      	.short	0x0000
 23fb534:	1007ad38 	.word	0x1007ad38
 23fb538:	00000074 	.word	0x00000074

023fb53c <asset_manager_set_consumer_state>:
DYNALIB_FN(3, system_asset_manager, asset_manager_set_consumer_state, int(asset_manager_consumer_state, void*))
 23fb53c:	b509      	push	{r0, r3, lr}
 23fb53e:	4804      	ldr	r0, [pc, #16]	; (23fb550 <asset_manager_set_consumer_state+0x14>)
 23fb540:	6800      	ldr	r0, [r0, #0]
 23fb542:	4b04      	ldr	r3, [pc, #16]	; (23fb554 <asset_manager_set_consumer_state+0x18>)
 23fb544:	4403      	add	r3, r0
 23fb546:	681b      	ldr	r3, [r3, #0]
 23fb548:	68db      	ldr	r3, [r3, #12]
 23fb54a:	9302      	str	r3, [sp, #8]
 23fb54c:	bd09      	pop	{r0, r3, pc}
 23fb54e:	0000      	.short	0x0000
 23fb550:	1007ad38 	.word	0x1007ad38
 23fb554:	00000074 	.word	0x00000074

023fb558 <asset_manager_open>:
DYNALIB_FN(4, system_asset_manager, asset_manager_open, int(asset_manager_stream**, const asset_manager_asset*, void*))
 23fb558:	b509      	push	{r0, r3, lr}
 23fb55a:	4804      	ldr	r0, [pc, #16]	; (23fb56c <asset_manager_open+0x14>)
 23fb55c:	6800      	ldr	r0, [r0, #0]
 23fb55e:	4b04      	ldr	r3, [pc, #16]	; (23fb570 <asset_manager_open+0x18>)
 23fb560:	4403      	add	r3, r0
 23fb562:	681b      	ldr	r3, [r3, #0]
 23fb564:	691b      	ldr	r3, [r3, #16]
 23fb566:	9302      	str	r3, [sp, #8]
 23fb568:	bd09      	pop	{r0, r3, pc}
 23fb56a:	0000      	.short	0x0000
 23fb56c:	1007ad38 	.word	0x1007ad38
 23fb570:	00000074 	.word	0x00000074

023fb574 <asset_manager_available>:
DYNALIB_FN(5, system_asset_manager, asset_manager_available, int(asset_manager_stream*, void*))
 23fb574:	b509      	push	{r0, r3, lr}
 23fb576:	4804      	ldr	r0, [pc, #16]	; (23fb588 <asset_manager_available+0x14>)
 23fb578:	6800      	ldr	r0, [r0, #0]
 23fb57a:	4b04      	ldr	r3, [pc, #16]	; (23fb58c <asset_manager_available+0x18>)
 23fb57c:	4403      	add	r3, r0
 23fb57e:	681b      	ldr	r3, [r3, #0]
 23fb580:	695b      	ldr	r3, [r3, #20]
 23fb582:	9302      	str	r3, [sp, #8]
 23fb584:	bd09      	pop	{r0, r3, pc}
 23fb586:	0000      	.short	0x0000
 23fb588:	1007ad38 	.word	0x1007ad38
 23fb58c:	00000074 	.word	0x00000074

023fb590 <asset_manager_read>:
DYNALIB_FN(6, system_asset_manager, asset_manager_read, int(asset_manager_stream*, char*, size_t, void*))
 23fb590:	b509      	push	{r0, r3, lr}
 23fb592:	4804      	ldr	r0, [pc, #16]	; (23fb5a4 <asset_manager_read+0x14>)
 23fb594:	6800      	ldr	r0, [r0, #0]
 23fb596:	4b04      	ldr	r3, [pc, #16]	; (23fb5a8 <asset_manager_read+0x18>)
 23fb598:	4403      	add	r3, r0
 23fb59a:	681b      	ldr	r3, [r3, #0]
 23fb59c:	699b      	ldr	r3, [r3, #24]
 23fb59e:	9302      	str	r3, [sp, #8]
 23fb5a0:	bd09      	pop	{r0, r3, pc}
 23fb5a2:	0000      	.short	0x0000
 23fb5a4:	1007ad38 	.word	0x1007ad38
 23fb5a8:	00000074 	.word	0x00000074

023fb5ac <asset_manager_peek>:
DYNALIB_FN(7, system_asset_manager, asset_manager_peek, int(asset_manager_stream*, char*, size_t, void*))
 23fb5ac:	b509      	push	{r0, r3, lr}
 23fb5ae:	4804      	ldr	r0, [pc, #16]	; (23fb5c0 <asset_manager_peek+0x14>)
 23fb5b0:	6800      	ldr	r0, [r0, #0]
 23fb5b2:	4b04      	ldr	r3, [pc, #16]	; (23fb5c4 <asset_manager_peek+0x18>)
 23fb5b4:	4403      	add	r3, r0
 23fb5b6:	681b      	ldr	r3, [r3, #0]
 23fb5b8:	69db      	ldr	r3, [r3, #28]
 23fb5ba:	9302      	str	r3, [sp, #8]
 23fb5bc:	bd09      	pop	{r0, r3, pc}
 23fb5be:	0000      	.short	0x0000
 23fb5c0:	1007ad38 	.word	0x1007ad38
 23fb5c4:	00000074 	.word	0x00000074

023fb5c8 <asset_manager_skip>:
DYNALIB_FN(8, system_asset_manager, asset_manager_skip, int(asset_manager_stream*, size_t, void*))
 23fb5c8:	b509      	push	{r0, r3, lr}
 23fb5ca:	4804      	ldr	r0, [pc, #16]	; (23fb5dc <asset_manager_skip+0x14>)
 23fb5cc:	6800      	ldr	r0, [r0, #0]
 23fb5ce:	4b04      	ldr	r3, [pc, #16]	; (23fb5e0 <asset_manager_skip+0x18>)
 23fb5d0:	4403      	add	r3, r0
 23fb5d2:	681b      	ldr	r3, [r3, #0]
 23fb5d4:	6a1b      	ldr	r3, [r3, #32]
 23fb5d6:	9302      	str	r3, [sp, #8]
 23fb5d8:	bd09      	pop	{r0, r3, pc}
 23fb5da:	0000      	.short	0x0000
 23fb5dc:	1007ad38 	.word	0x1007ad38
 23fb5e0:	00000074 	.word	0x00000074

023fb5e4 <asset_manager_close>:
DYNALIB_FN(9, system_asset_manager, asset_manager_seek, int(asset_manager_stream*, size_t, void*))
DYNALIB_FN(10, system_asset_manager, asset_manager_close, void(asset_manager_stream*, void*))
 23fb5e4:	b509      	push	{r0, r3, lr}
 23fb5e6:	4804      	ldr	r0, [pc, #16]	; (23fb5f8 <asset_manager_close+0x14>)
 23fb5e8:	6800      	ldr	r0, [r0, #0]
 23fb5ea:	4b04      	ldr	r3, [pc, #16]	; (23fb5fc <asset_manager_close+0x18>)
 23fb5ec:	4403      	add	r3, r0
 23fb5ee:	681b      	ldr	r3, [r3, #0]
 23fb5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb5f2:	9302      	str	r3, [sp, #8]
 23fb5f4:	bd09      	pop	{r0, r3, pc}
 23fb5f6:	0000      	.short	0x0000
 23fb5f8:	1007ad38 	.word	0x1007ad38
 23fb5fc:	00000074 	.word	0x00000074

023fb600 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fb600:	b509      	push	{r0, r3, lr}
 23fb602:	4804      	ldr	r0, [pc, #16]	; (23fb614 <malloc+0x14>)
 23fb604:	6800      	ldr	r0, [r0, #0]
 23fb606:	4b04      	ldr	r3, [pc, #16]	; (23fb618 <malloc+0x18>)
 23fb608:	4403      	add	r3, r0
 23fb60a:	681b      	ldr	r3, [r3, #0]
 23fb60c:	681b      	ldr	r3, [r3, #0]
 23fb60e:	9302      	str	r3, [sp, #8]
 23fb610:	bd09      	pop	{r0, r3, pc}
 23fb612:	0000      	.short	0x0000
 23fb614:	1007ad38 	.word	0x1007ad38
 23fb618:	00000004 	.word	0x00000004

023fb61c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fb61c:	b509      	push	{r0, r3, lr}
 23fb61e:	4804      	ldr	r0, [pc, #16]	; (23fb630 <free+0x14>)
 23fb620:	6800      	ldr	r0, [r0, #0]
 23fb622:	4b04      	ldr	r3, [pc, #16]	; (23fb634 <free+0x18>)
 23fb624:	4403      	add	r3, r0
 23fb626:	681b      	ldr	r3, [r3, #0]
 23fb628:	685b      	ldr	r3, [r3, #4]
 23fb62a:	9302      	str	r3, [sp, #8]
 23fb62c:	bd09      	pop	{r0, r3, pc}
 23fb62e:	0000      	.short	0x0000
 23fb630:	1007ad38 	.word	0x1007ad38
 23fb634:	00000004 	.word	0x00000004

023fb638 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fb638:	b509      	push	{r0, r3, lr}
 23fb63a:	4804      	ldr	r0, [pc, #16]	; (23fb64c <realloc+0x14>)
 23fb63c:	6800      	ldr	r0, [r0, #0]
 23fb63e:	4b04      	ldr	r3, [pc, #16]	; (23fb650 <realloc+0x18>)
 23fb640:	4403      	add	r3, r0
 23fb642:	681b      	ldr	r3, [r3, #0]
 23fb644:	689b      	ldr	r3, [r3, #8]
 23fb646:	9302      	str	r3, [sp, #8]
 23fb648:	bd09      	pop	{r0, r3, pc}
 23fb64a:	0000      	.short	0x0000
 23fb64c:	1007ad38 	.word	0x1007ad38
 23fb650:	00000004 	.word	0x00000004

023fb654 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fb654:	b509      	push	{r0, r3, lr}
 23fb656:	4804      	ldr	r0, [pc, #16]	; (23fb668 <vsnprintf+0x14>)
 23fb658:	6800      	ldr	r0, [r0, #0]
 23fb65a:	4b04      	ldr	r3, [pc, #16]	; (23fb66c <vsnprintf+0x18>)
 23fb65c:	4403      	add	r3, r0
 23fb65e:	681b      	ldr	r3, [r3, #0]
 23fb660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb662:	9302      	str	r3, [sp, #8]
 23fb664:	bd09      	pop	{r0, r3, pc}
 23fb666:	0000      	.short	0x0000
 23fb668:	1007ad38 	.word	0x1007ad38
 23fb66c:	00000004 	.word	0x00000004

023fb670 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fb670:	b509      	push	{r0, r3, lr}
 23fb672:	4804      	ldr	r0, [pc, #16]	; (23fb684 <abort+0x14>)
 23fb674:	6800      	ldr	r0, [r0, #0]
 23fb676:	4b04      	ldr	r3, [pc, #16]	; (23fb688 <abort+0x18>)
 23fb678:	4403      	add	r3, r0
 23fb67a:	681b      	ldr	r3, [r3, #0]
 23fb67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb67e:	9302      	str	r3, [sp, #8]
 23fb680:	bd09      	pop	{r0, r3, pc}
 23fb682:	0000      	.short	0x0000
 23fb684:	1007ad38 	.word	0x1007ad38
 23fb688:	00000004 	.word	0x00000004

023fb68c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fb68c:	b509      	push	{r0, r3, lr}
 23fb68e:	4804      	ldr	r0, [pc, #16]	; (23fb6a0 <_malloc_r+0x14>)
 23fb690:	6800      	ldr	r0, [r0, #0]
 23fb692:	4b04      	ldr	r3, [pc, #16]	; (23fb6a4 <_malloc_r+0x18>)
 23fb694:	4403      	add	r3, r0
 23fb696:	681b      	ldr	r3, [r3, #0]
 23fb698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb69a:	9302      	str	r3, [sp, #8]
 23fb69c:	bd09      	pop	{r0, r3, pc}
 23fb69e:	0000      	.short	0x0000
 23fb6a0:	1007ad38 	.word	0x1007ad38
 23fb6a4:	00000004 	.word	0x00000004

023fb6a8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fb6a8:	b509      	push	{r0, r3, lr}
 23fb6aa:	4804      	ldr	r0, [pc, #16]	; (23fb6bc <__errno+0x14>)
 23fb6ac:	6800      	ldr	r0, [r0, #0]
 23fb6ae:	4b04      	ldr	r3, [pc, #16]	; (23fb6c0 <__errno+0x18>)
 23fb6b0:	4403      	add	r3, r0
 23fb6b2:	681b      	ldr	r3, [r3, #0]
 23fb6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb6b6:	9302      	str	r3, [sp, #8]
 23fb6b8:	bd09      	pop	{r0, r3, pc}
 23fb6ba:	0000      	.short	0x0000
 23fb6bc:	1007ad38 	.word	0x1007ad38
 23fb6c0:	00000004 	.word	0x00000004

023fb6c4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fb6c4:	b509      	push	{r0, r3, lr}
 23fb6c6:	4804      	ldr	r0, [pc, #16]	; (23fb6d8 <__assert_func+0x14>)
 23fb6c8:	6800      	ldr	r0, [r0, #0]
 23fb6ca:	4b04      	ldr	r3, [pc, #16]	; (23fb6dc <__assert_func+0x18>)
 23fb6cc:	4403      	add	r3, r0
 23fb6ce:	681b      	ldr	r3, [r3, #0]
 23fb6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb6d2:	9302      	str	r3, [sp, #8]
 23fb6d4:	bd09      	pop	{r0, r3, pc}
 23fb6d6:	0000      	.short	0x0000
 23fb6d8:	1007ad38 	.word	0x1007ad38
 23fb6dc:	00000004 	.word	0x00000004

023fb6e0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fb6e0:	b509      	push	{r0, r3, lr}
 23fb6e2:	4804      	ldr	r0, [pc, #16]	; (23fb6f4 <newlib_impure_ptr_callback+0x14>)
 23fb6e4:	6800      	ldr	r0, [r0, #0]
 23fb6e6:	4b04      	ldr	r3, [pc, #16]	; (23fb6f8 <newlib_impure_ptr_callback+0x18>)
 23fb6e8:	4403      	add	r3, r0
 23fb6ea:	681b      	ldr	r3, [r3, #0]
 23fb6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb6ee:	9302      	str	r3, [sp, #8]
 23fb6f0:	bd09      	pop	{r0, r3, pc}
 23fb6f2:	0000      	.short	0x0000
 23fb6f4:	1007ad38 	.word	0x1007ad38
 23fb6f8:	00000004 	.word	0x00000004

023fb6fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fb6fc:	2200      	movs	r2, #0
 23fb6fe:	6840      	ldr	r0, [r0, #4]
 23fb700:	4611      	mov	r1, r2
 23fb702:	f7ff be81 	b.w	23fb408 <network_listening>

023fb706 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fb706:	2200      	movs	r2, #0
 23fb708:	6840      	ldr	r0, [r0, #4]
 23fb70a:	4611      	mov	r1, r2
 23fb70c:	f7ff be98 	b.w	23fb440 <network_get_listen_timeout>

023fb710 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fb710:	2200      	movs	r2, #0
 23fb712:	6840      	ldr	r0, [r0, #4]
 23fb714:	f7ff be86 	b.w	23fb424 <network_set_listen_timeout>

023fb718 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fb718:	2200      	movs	r2, #0
 23fb71a:	6840      	ldr	r0, [r0, #4]
 23fb71c:	f081 0101 	eor.w	r1, r1, #1
 23fb720:	f7ff be64 	b.w	23fb3ec <network_listen>

023fb724 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fb724:	2300      	movs	r3, #0
 23fb726:	6840      	ldr	r0, [r0, #4]
 23fb728:	461a      	mov	r2, r3
 23fb72a:	4619      	mov	r1, r3
 23fb72c:	f7ff be50 	b.w	23fb3d0 <network_off>

023fb730 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fb730:	2300      	movs	r3, #0
 23fb732:	6840      	ldr	r0, [r0, #4]
 23fb734:	461a      	mov	r2, r3
 23fb736:	4619      	mov	r1, r3
 23fb738:	f7ff be3c 	b.w	23fb3b4 <network_on>

023fb73c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fb73c:	2200      	movs	r2, #0
 23fb73e:	6840      	ldr	r0, [r0, #4]
 23fb740:	4611      	mov	r1, r2
 23fb742:	f7ff be29 	b.w	23fb398 <network_ready>

023fb746 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fb746:	2200      	movs	r2, #0
 23fb748:	6840      	ldr	r0, [r0, #4]
 23fb74a:	4611      	mov	r1, r2
 23fb74c:	f7ff be08 	b.w	23fb360 <network_connecting>

023fb750 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fb750:	2200      	movs	r2, #0
 23fb752:	2102      	movs	r1, #2
 23fb754:	6840      	ldr	r0, [r0, #4]
 23fb756:	f7ff be11 	b.w	23fb37c <network_disconnect>

023fb75a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fb75a:	2300      	movs	r3, #0
 23fb75c:	6840      	ldr	r0, [r0, #4]
 23fb75e:	461a      	mov	r2, r3
 23fb760:	f7ff bdf0 	b.w	23fb344 <network_connect>

023fb764 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fb764:	2203      	movs	r2, #3
 23fb766:	4b02      	ldr	r3, [pc, #8]	; (23fb770 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fb768:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fb76a:	4a02      	ldr	r2, [pc, #8]	; (23fb774 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fb76c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fb76e:	4770      	bx	lr
 23fb770:	1007ae54 	.word	0x1007ae54
 23fb774:	023ffa6c 	.word	0x023ffa6c

023fb778 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fb778:	2100      	movs	r1, #0
 23fb77a:	f7ff bccb 	b.w	23fb114 <hal_spi_release>

023fb77e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fb77e:	2100      	movs	r1, #0
 23fb780:	f7ff bcba 	b.w	23fb0f8 <hal_spi_acquire>

023fb784 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fb784:	b510      	push	{r4, lr}
 23fb786:	4604      	mov	r4, r0
 23fb788:	4608      	mov	r0, r1
{
    _spi = spi;
 23fb78a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fb78c:	f7ff fc8a 	bl	23fb0a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fb790:	2300      	movs	r3, #0
}
 23fb792:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fb794:	6063      	str	r3, [r4, #4]
}
 23fb796:	bd10      	pop	{r4, pc}

023fb798 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fb798:	b513      	push	{r0, r1, r4, lr}
 23fb79a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fb79c:	7800      	ldrb	r0, [r0, #0]
 23fb79e:	f7ff ffee 	bl	23fb77e <_ZN8SPIClass4lockEv.isra.0>
 23fb7a2:	b958      	cbnz	r0, 23fb7bc <_ZN8SPIClass5beginEv+0x24>
 23fb7a4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fb7a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fb7aa:	9001      	str	r0, [sp, #4]
 23fb7ac:	f7ff fc42 	bl	23fb034 <hal_spi_begin>
        unlock();
 23fb7b0:	9801      	ldr	r0, [sp, #4]
    }
}
 23fb7b2:	b002      	add	sp, #8
 23fb7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fb7b8:	f7ff bfde 	b.w	23fb778 <_ZN8SPIClass6unlockEv.isra.0>
 23fb7bc:	b002      	add	sp, #8
 23fb7be:	bd10      	pop	{r4, pc}

023fb7c0 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23fb7c0:	b513      	push	{r0, r1, r4, lr}
 23fb7c2:	4604      	mov	r4, r0
    if (!lock())
 23fb7c4:	7800      	ldrb	r0, [r0, #0]
{
 23fb7c6:	9101      	str	r1, [sp, #4]
    if (!lock())
 23fb7c8:	f7ff ffd9 	bl	23fb77e <_ZN8SPIClass4lockEv.isra.0>
 23fb7cc:	9901      	ldr	r1, [sp, #4]
 23fb7ce:	b948      	cbnz	r0, 23fb7e4 <_ZN8SPIClass11setDataModeEh+0x24>
 23fb7d0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23fb7d2:	9001      	str	r0, [sp, #4]
 23fb7d4:	f7ff fc3c 	bl	23fb050 <hal_spi_set_data_mode>
        unlock();
 23fb7d8:	9801      	ldr	r0, [sp, #4]
    }
}
 23fb7da:	b002      	add	sp, #8
 23fb7dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fb7e0:	f7ff bfca 	b.w	23fb778 <_ZN8SPIClass6unlockEv.isra.0>
 23fb7e4:	b002      	add	sp, #8
 23fb7e6:	bd10      	pop	{r4, pc}

023fb7e8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fb7e8:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fb7ea:	2400      	movs	r4, #0
 23fb7ec:	0840      	lsrs	r0, r0, #1
 23fb7ee:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fb7f0:	6818      	ldr	r0, [r3, #0]
 23fb7f2:	b2e5      	uxtb	r5, r4
 23fb7f4:	4288      	cmp	r0, r1
 23fb7f6:	d906      	bls.n	23fb806 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fb7f8:	3401      	adds	r4, #1
 23fb7fa:	2c08      	cmp	r4, #8
 23fb7fc:	d002      	beq.n	23fb804 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fb7fe:	0840      	lsrs	r0, r0, #1
 23fb800:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fb802:	e7f5      	b.n	23fb7f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fb804:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fb806:	4b02      	ldr	r3, [pc, #8]	; (23fb810 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fb808:	5d5b      	ldrb	r3, [r3, r5]
 23fb80a:	7013      	strb	r3, [r2, #0]
}
 23fb80c:	bd30      	pop	{r4, r5, pc}
 23fb80e:	bf00      	nop
 23fb810:	023ffaa0 	.word	0x023ffaa0

023fb814 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fb814:	2300      	movs	r3, #0
{
 23fb816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb81a:	4604      	mov	r4, r0
 23fb81c:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fb81e:	7800      	ldrb	r0, [r0, #0]
{
 23fb820:	460e      	mov	r6, r1
 23fb822:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fb824:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fb826:	f7ff ffaa 	bl	23fb77e <_ZN8SPIClass4lockEv.isra.0>
 23fb82a:	4605      	mov	r5, r0
 23fb82c:	bb00      	cbnz	r0, 23fb870 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fb82e:	4601      	mov	r1, r0
 23fb830:	2214      	movs	r2, #20
 23fb832:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fb834:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fb838:	f002 ff6f 	bl	23fe71a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fb83c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fb83e:	462a      	mov	r2, r5
 23fb840:	4640      	mov	r0, r8
 23fb842:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fb844:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fb848:	f7ff fc48 	bl	23fb0dc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fb84c:	fb07 f106 	mul.w	r1, r7, r6
 23fb850:	9804      	ldr	r0, [sp, #16]
 23fb852:	ab02      	add	r3, sp, #8
 23fb854:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fb858:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fb85c:	f7ff ffc4 	bl	23fb7e8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fb860:	7820      	ldrb	r0, [r4, #0]
 23fb862:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fb866:	f7ff fc01 	bl	23fb06c <hal_spi_set_clock_divider>
        unlock();
 23fb86a:	7820      	ldrb	r0, [r4, #0]
 23fb86c:	f7ff ff84 	bl	23fb778 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23fb870:	9802      	ldr	r0, [sp, #8]
 23fb872:	b008      	add	sp, #32
 23fb874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb878 <_ZN8SPIClass15setClockDividerEh>:
{
 23fb878:	b538      	push	{r3, r4, r5, lr}
 23fb87a:	4604      	mov	r4, r0
    if (!lock())
 23fb87c:	7800      	ldrb	r0, [r0, #0]
{
 23fb87e:	460d      	mov	r5, r1
    if (!lock())
 23fb880:	f7ff ff7d 	bl	23fb77e <_ZN8SPIClass4lockEv.isra.0>
 23fb884:	4603      	mov	r3, r0
 23fb886:	b9d0      	cbnz	r0, 23fb8be <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
 23fb888:	6861      	ldr	r1, [r4, #4]
 23fb88a:	b199      	cbz	r1, 23fb8b4 <_ZN8SPIClass15setClockDividerEh+0x3c>
 23fb88c:	4a0c      	ldr	r2, [pc, #48]	; (23fb8c0 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
 23fb88e:	f812 0b01 	ldrb.w	r0, [r2], #1
 23fb892:	4285      	cmp	r5, r0
 23fb894:	d002      	beq.n	23fb89c <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
 23fb896:	3301      	adds	r3, #1
 23fb898:	2b08      	cmp	r3, #8
 23fb89a:	d1f8      	bne.n	23fb88e <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
 23fb89c:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
 23fb89e:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
 23fb8a0:	2201      	movs	r2, #1
 23fb8a2:	4620      	mov	r0, r4
 23fb8a4:	40d9      	lsrs	r1, r3
 23fb8a6:	f7ff ffb5 	bl	23fb814 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
 23fb8aa:	7820      	ldrb	r0, [r4, #0]
}
 23fb8ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
 23fb8b0:	f7ff bf62 	b.w	23fb778 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
 23fb8b4:	4629      	mov	r1, r5
 23fb8b6:	7820      	ldrb	r0, [r4, #0]
 23fb8b8:	f7ff fbd8 	bl	23fb06c <hal_spi_set_clock_divider>
 23fb8bc:	e7f5      	b.n	23fb8aa <_ZN8SPIClass15setClockDividerEh+0x32>
}
 23fb8be:	bd38      	pop	{r3, r4, r5, pc}
 23fb8c0:	023ffaa0 	.word	0x023ffaa0

023fb8c4 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 23fb8c4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fb8c6:	7800      	ldrb	r0, [r0, #0]
 23fb8c8:	f7ff fbde 	bl	23fb088 <hal_spi_transfer>
}
 23fb8cc:	b2c0      	uxtb	r0, r0
 23fb8ce:	bd08      	pop	{r3, pc}

023fb8d0 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 23fb8d0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 23fb8d2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fb8d4:	4604      	mov	r4, r0
      if (_M_manager)
 23fb8d6:	b113      	cbz	r3, 23fb8de <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fb8d8:	2203      	movs	r2, #3
 23fb8da:	4601      	mov	r1, r0
 23fb8dc:	4798      	blx	r3
    }
 23fb8de:	4620      	mov	r0, r4
 23fb8e0:	bd10      	pop	{r4, pc}

023fb8e2 <_ZN11SystemClass13assetsHandledEb>:
    }
    return assets;
}

int SystemClass::assetsHandled(bool state) {
    return asset_manager_set_consumer_state(state ? ASSET_MANAGER_CONSUMER_STATE_HANDLED : ASSET_MANAGER_CONSUMER_STATE_WANT, nullptr);
 23fb8e2:	2800      	cmp	r0, #0
 23fb8e4:	f04f 0100 	mov.w	r1, #0
 23fb8e8:	bf14      	ite	ne
 23fb8ea:	2001      	movne	r0, #1
 23fb8ec:	2002      	moveq	r0, #2
 23fb8ee:	f7ff be25 	b.w	23fb53c <asset_manager_set_consumer_state>

023fb8f2 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>:
	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
	: _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
	{ }

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
 23fb8f2:	b510      	push	{r4, lr}
 23fb8f4:	4604      	mov	r4, r0
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23fb8f6:	6800      	ldr	r0, [r0, #0]
 23fb8f8:	b108      	cbz	r0, 23fb8fe <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev+0xc>
	  delete [] __ptr;
 23fb8fa:	f7fd f8fc 	bl	23f8af6 <_ZdaPv>
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
 23fb8fe:	4620      	mov	r0, r4
 23fb900:	bd10      	pop	{r4, pc}

023fb902 <_ZN8particle6BufferC1Ej>:
private:
    std::unique_ptr<char[]> buffer_;
    size_t size_;
};

inline Buffer::Buffer(size_t size)
 23fb902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 23fb904:	2700      	movs	r7, #0
 23fb906:	4604      	mov	r4, r0
 23fb908:	460d      	mov	r5, r1
        : size_(size) {
 23fb90a:	e9c0 7100 	strd	r7, r1, [r0]
    if (size_ > 0) {
 23fb90e:	b1c9      	cbz	r1, 23fb944 <_ZN8particle6BufferC1Ej+0x42>

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 23fb910:	4608      	mov	r0, r1
 23fb912:	f7fd f8ee 	bl	23f8af2 <_Znaj>
 23fb916:	4606      	mov	r6, r0
 23fb918:	b138      	cbz	r0, 23fb92a <_ZN8particle6BufferC1Ej+0x28>
 23fb91a:	1e6b      	subs	r3, r5, #1
 23fb91c:	3301      	adds	r3, #1
 23fb91e:	bfac      	ite	ge
 23fb920:	462a      	movge	r2, r5
 23fb922:	463a      	movlt	r2, r7
 23fb924:	4639      	mov	r1, r7
 23fb926:	f002 fef8 	bl	23fe71a <memset>
	_M_ptr() = nullptr;
 23fb92a:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 23fb92c:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = nullptr;
 23fb92e:	9301      	str	r3, [sp, #4]
	_M_ptr() = __p;
 23fb930:	6026      	str	r6, [r4, #0]
	if (__old_p)
 23fb932:	b108      	cbz	r0, 23fb938 <_ZN8particle6BufferC1Ej+0x36>
	  delete [] __ptr;
 23fb934:	f7fd f8df 	bl	23f8af6 <_ZdaPv>
        buffer_ = std::make_unique<char[]>(size_);
 23fb938:	a801      	add	r0, sp, #4
 23fb93a:	f7ff ffda 	bl	23fb8f2 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
        if (!buffer_) {
 23fb93e:	6823      	ldr	r3, [r4, #0]
 23fb940:	b903      	cbnz	r3, 23fb944 <_ZN8particle6BufferC1Ej+0x42>
            size_ = 0;
 23fb942:	6063      	str	r3, [r4, #4]
        }
    }
}
 23fb944:	4620      	mov	r0, r4
 23fb946:	b003      	add	sp, #12
 23fb948:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fb94c <_ZN8particle16ApplicationAssetC1ERKS0_>:
/**
 * Application asset.
 * 
 * Instances of this class are returned in `System.assetsAvailable()` and `System.assetsRequired()`
 */
class ApplicationAsset: public Stream {
 23fb94c:	b538      	push	{r3, r4, r5, lr}
 23fb94e:	460d      	mov	r5, r1
 23fb950:	4604      	mov	r4, r0
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 23fb952:	684b      	ldr	r3, [r1, #4]
 23fb954:	3110      	adds	r1, #16
 23fb956:	6043      	str	r3, [r0, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
 23fb958:	f851 3c08 	ldr.w	r3, [r1, #-8]
 23fb95c:	6083      	str	r3, [r0, #8]
 23fb95e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 23fb962:	60c3      	str	r3, [r0, #12]
 23fb964:	4b13      	ldr	r3, [pc, #76]	; (23fb9b4 <_ZN8particle16ApplicationAssetC1ERKS0_+0x68>)
 23fb966:	f840 3b10 	str.w	r3, [r0], #16
 23fb96a:	f000 f99a 	bl	23fbca2 <_ZN6StringC1ERKS_>
    /**
     * Copy cosntructor.
     * 
     * @param other Asset Hash object to copy from.
     */
    AssetHash(const AssetHash& other) = default;
 23fb96e:	f895 3020 	ldrb.w	r3, [r5, #32]
inline Buffer::Buffer(const uint8_t* data, size_t size)
        : Buffer((const char*)data, size) {

}
inline Buffer::Buffer(const Buffer& other)
        : Buffer(other.size()) {
 23fb972:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fb976:	f884 3020 	strb.w	r3, [r4, #32]
 23fb97a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 23fb97c:	f7ff ffc1 	bl	23fb902 <_ZN8particle6BufferC1Ej>
    if (size_ > 0 && other.size() > 0) {
 23fb980:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 23fb982:	b12a      	cbz	r2, 23fb990 <_ZN8particle16ApplicationAssetC1ERKS0_+0x44>
 23fb984:	6aab      	ldr	r3, [r5, #40]	; 0x28
 23fb986:	b11b      	cbz	r3, 23fb990 <_ZN8particle16ApplicationAssetC1ERKS0_+0x44>
        memcpy(buffer_.get(), other.buffer_.get(), size_);
 23fb988:	6a69      	ldr	r1, [r5, #36]	; 0x24
 23fb98a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb98c:	f002 fe9e 	bl	23fe6cc <memcpy>
 23fb990:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 23fb992:	62e3      	str	r3, [r4, #44]	; 0x2c
 23fb994:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 23fb996:	6323      	str	r3, [r4, #48]	; 0x30
 23fb998:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23fb99c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fb9a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fb9a2:	63a3      	str	r3, [r4, #56]	; 0x38
      : _M_pi(__r._M_pi)
 23fb9a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 23fb9a6:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (_M_pi != 0)
 23fb9a8:	b113      	cbz	r3, 23fb9b0 <_ZN8particle16ApplicationAssetC1ERKS0_+0x64>
    { ++_M_use_count; }
 23fb9aa:	685a      	ldr	r2, [r3, #4]
 23fb9ac:	3201      	adds	r2, #1
 23fb9ae:	605a      	str	r2, [r3, #4]
 23fb9b0:	4620      	mov	r0, r4
 23fb9b2:	bd38      	pop	{r3, r4, r5, pc}
 23fb9b4:	023ffad4 	.word	0x023ffad4

023fb9b8 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 23fb9b8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fb9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb9bc:	4606      	mov	r6, r0
 23fb9be:	460c      	mov	r4, r1
 23fb9c0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 23fb9c2:	d915      	bls.n	23fb9f0 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
 23fb9c4:	4290      	cmp	r0, r2
 23fb9c6:	d214      	bcs.n	23fb9f2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3a>
            // Move elements in reverse order
            --p;
            --end;
 23fb9c8:	f1a2 0540 	sub.w	r5, r2, #64	; 0x40
            dest += end - p - 1;
 23fb9cc:	1a6b      	subs	r3, r5, r1
 23fb9ce:	f1a1 0740 	sub.w	r7, r1, #64	; 0x40
 23fb9d2:	441e      	add	r6, r3
            for (; end != p; --end, --dest) {
 23fb9d4:	42af      	cmp	r7, r5
 23fb9d6:	d01a      	beq.n	23fba0e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
                new(dest) T(std::move(*end));
 23fb9d8:	b11e      	cbz	r6, 23fb9e2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
 23fb9da:	4629      	mov	r1, r5
 23fb9dc:	4630      	mov	r0, r6
 23fb9de:	f7ff ffb5 	bl	23fb94c <_ZN8particle16ApplicationAssetC1ERKS0_>
                end->~T();
 23fb9e2:	682b      	ldr	r3, [r5, #0]
 23fb9e4:	4628      	mov	r0, r5
 23fb9e6:	681b      	ldr	r3, [r3, #0]
 23fb9e8:	4798      	blx	r3
            for (; end != p; --end, --dest) {
 23fb9ea:	3d40      	subs	r5, #64	; 0x40
 23fb9ec:	3e40      	subs	r6, #64	; 0x40
 23fb9ee:	e7f1      	b.n	23fb9d4 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
            }
        } else if (dest != p) {
 23fb9f0:	d00d      	beq.n	23fba0e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
            for (; p != end; ++p, ++dest) {
 23fb9f2:	42ac      	cmp	r4, r5
 23fb9f4:	d00b      	beq.n	23fba0e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
                new(dest) T(std::move(*p));
 23fb9f6:	b11e      	cbz	r6, 23fba00 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x48>
 23fb9f8:	4621      	mov	r1, r4
 23fb9fa:	4630      	mov	r0, r6
 23fb9fc:	f7ff ffa6 	bl	23fb94c <_ZN8particle16ApplicationAssetC1ERKS0_>
                p->~T();
 23fba00:	6823      	ldr	r3, [r4, #0]
 23fba02:	4620      	mov	r0, r4
 23fba04:	681b      	ldr	r3, [r3, #0]
 23fba06:	4798      	blx	r3
            for (; p != end; ++p, ++dest) {
 23fba08:	3440      	adds	r4, #64	; 0x40
 23fba0a:	3640      	adds	r6, #64	; 0x40
 23fba0c:	e7f1      	b.n	23fb9f2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3a>
            }
        }
    }
 23fba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fba10 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
 23fba10:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fba12:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fba14:	4605      	mov	r5, r0
        if (n > 0) {
 23fba16:	dd11      	ble.n	23fba3c <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 23fba18:	01b0      	lsls	r0, r6, #6
 23fba1a:	f7ff fdf1 	bl	23fb600 <malloc>
            if (!d) {
 23fba1e:	4604      	mov	r4, r0
 23fba20:	b158      	cbz	r0, 23fba3a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fba22:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fba26:	eb01 1282 	add.w	r2, r1, r2, lsl #6
 23fba2a:	f7ff ffc5 	bl	23fb9b8 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 23fba2e:	6828      	ldr	r0, [r5, #0]
 23fba30:	f7ff fdf4 	bl	23fb61c <free>
        return true;
 23fba34:	2001      	movs	r0, #1
        data_ = d;
 23fba36:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fba38:	60ae      	str	r6, [r5, #8]
    }
 23fba3a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fba3c:	2400      	movs	r4, #0
 23fba3e:	e7f6      	b.n	23fba2e <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

023fba40 <_ZN8particle16ApplicationAssetD1Ev>:

    /**
     * Destroy the Application Asset object.
     * 
     */
    virtual ~ApplicationAsset() = default;
 23fba40:	b538      	push	{r3, r4, r5, lr}
 23fba42:	4b0f      	ldr	r3, [pc, #60]	; (23fba80 <_ZN8particle16ApplicationAssetD1Ev+0x40>)
	if (_M_pi != nullptr)
 23fba44:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 23fba46:	4605      	mov	r5, r0
 23fba48:	6003      	str	r3, [r0, #0]
 23fba4a:	b17c      	cbz	r4, 23fba6c <_ZN8particle16ApplicationAssetD1Ev+0x2c>
      if (--_M_use_count == 0)
 23fba4c:	6863      	ldr	r3, [r4, #4]
 23fba4e:	3b01      	subs	r3, #1
 23fba50:	6063      	str	r3, [r4, #4]
 23fba52:	b95b      	cbnz	r3, 23fba6c <_ZN8particle16ApplicationAssetD1Ev+0x2c>
          _M_dispose();
 23fba54:	6823      	ldr	r3, [r4, #0]
 23fba56:	4620      	mov	r0, r4
 23fba58:	689b      	ldr	r3, [r3, #8]
 23fba5a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fba5c:	68a3      	ldr	r3, [r4, #8]
 23fba5e:	3b01      	subs	r3, #1
 23fba60:	60a3      	str	r3, [r4, #8]
 23fba62:	b91b      	cbnz	r3, 23fba6c <_ZN8particle16ApplicationAssetD1Ev+0x2c>
            _M_destroy();
 23fba64:	6823      	ldr	r3, [r4, #0]
 23fba66:	4620      	mov	r0, r4
 23fba68:	68db      	ldr	r3, [r3, #12]
 23fba6a:	4798      	blx	r3
class Buffer {
 23fba6c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 23fba70:	f7ff ff3f 	bl	23fb8f2 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
 23fba74:	f105 0010 	add.w	r0, r5, #16
 23fba78:	f000 f87c 	bl	23fbb74 <_ZN6StringD1Ev>
 23fba7c:	4628      	mov	r0, r5
 23fba7e:	bd38      	pop	{r3, r4, r5, pc}
 23fba80:	023ffad4 	.word	0x023ffad4

023fba84 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fba84:	b530      	push	{r4, r5, lr}
 23fba86:	4604      	mov	r4, r0
 23fba88:	b091      	sub	sp, #68	; 0x44
    return insert(size_, std::move(value));
 23fba8a:	6845      	ldr	r5, [r0, #4]
 23fba8c:	4668      	mov	r0, sp
 23fba8e:	f7ff ff5d 	bl	23fb94c <_ZN8particle16ApplicationAssetC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fba92:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fba96:	4299      	cmp	r1, r3
 23fba98:	da0f      	bge.n	23fbaba <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x36>
        return false;
    }
    T* const p = data_ + i;
 23fba9a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fba9c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fba9e:	eb03 1585 	add.w	r5, r3, r5, lsl #6
    move(p + 1, p, data_ + size_);
 23fbaa2:	4629      	mov	r1, r5
 23fbaa4:	eb03 1282 	add.w	r2, r3, r2, lsl #6
 23fbaa8:	f105 0040 	add.w	r0, r5, #64	; 0x40
 23fbaac:	f7ff ff84 	bl	23fb9b8 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
 23fbab0:	b975      	cbnz	r5, 23fbad0 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x4c>
    ++size_;
 23fbab2:	6863      	ldr	r3, [r4, #4]
 23fbab4:	3301      	adds	r3, #1
 23fbab6:	6063      	str	r3, [r4, #4]
    return true;
 23fbab8:	e005      	b.n	23fbac6 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x42>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fbaba:	4620      	mov	r0, r4
 23fbabc:	3101      	adds	r1, #1
 23fbabe:	f7ff ffa7 	bl	23fba10 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
 23fbac2:	2800      	cmp	r0, #0
 23fbac4:	d1e9      	bne.n	23fba9a <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x16>
    return insert(size_, std::move(value));
 23fbac6:	4668      	mov	r0, sp
 23fbac8:	f7ff ffba 	bl	23fba40 <_ZN8particle16ApplicationAssetD1Ev>
}
 23fbacc:	b011      	add	sp, #68	; 0x44
 23fbace:	bd30      	pop	{r4, r5, pc}
    new(p) T(std::move(value));
 23fbad0:	4669      	mov	r1, sp
 23fbad2:	4628      	mov	r0, r5
 23fbad4:	f7ff ff3a 	bl	23fb94c <_ZN8particle16ApplicationAssetC1ERKS0_>
 23fbad8:	e7eb      	b.n	23fbab2 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0+0x2e>

023fbada <_ZN11SystemClass15assetsAvailableEv>:
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fbada:	b570      	push	{r4, r5, r6, lr}
        capacity_(0) {
 23fbadc:	2400      	movs	r4, #0
    asset_manager_info info = {};
 23fbade:	261c      	movs	r6, #28
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fbae0:	b098      	sub	sp, #96	; 0x60
    asset_manager_info info = {};
 23fbae2:	4621      	mov	r1, r4
 23fbae4:	e9c0 4400 	strd	r4, r4, [r0]
 23fbae8:	6084      	str	r4, [r0, #8]
 23fbaea:	4632      	mov	r2, r6
spark::Vector<ApplicationAsset> SystemClass::assetsAvailable() {
 23fbaec:	4605      	mov	r5, r0
    asset_manager_info info = {};
 23fbaee:	a801      	add	r0, sp, #4
 23fbaf0:	f002 fe13 	bl	23fe71a <memset>
    int r = asset_manager_get_info(&info, nullptr);
 23fbaf4:	4621      	mov	r1, r4
 23fbaf6:	a801      	add	r0, sp, #4
    info.size = sizeof(info);
 23fbaf8:	f8ad 6004 	strh.w	r6, [sp, #4]
    int r = asset_manager_get_info(&info, nullptr);
 23fbafc:	f7ff fd02 	bl	23fb504 <asset_manager_get_info>
    if (r) {
 23fbb00:	4604      	mov	r4, r0
 23fbb02:	b9c0      	cbnz	r0, 23fbb36 <_ZN11SystemClass15assetsAvailableEv+0x5c>
    for (size_t i = 0; i < info.available_count; i++) {
 23fbb04:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 23fbb08:	42a3      	cmp	r3, r4
 23fbb0a:	d910      	bls.n	23fbb2e <_ZN11SystemClass15assetsAvailableEv+0x54>
        assets.append(ApplicationAsset(a));
 23fbb0c:	9b06      	ldr	r3, [sp, #24]
        asset_manager_asset* a = (asset_manager_asset*)(((uint8_t*)info.available) + info.asset_size * i);
 23fbb0e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        assets.append(ApplicationAsset(a));
 23fbb12:	a808      	add	r0, sp, #32
 23fbb14:	fb04 3101 	mla	r1, r4, r1, r3
 23fbb18:	f000 fa0e 	bl	23fbf38 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset>
 23fbb1c:	4628      	mov	r0, r5
 23fbb1e:	a908      	add	r1, sp, #32
 23fbb20:	f7ff ffb0 	bl	23fba84 <_ZN5spark6VectorIN8particle16ApplicationAssetENS_16DefaultAllocatorEE6appendES2_.isra.0>
 23fbb24:	a808      	add	r0, sp, #32
 23fbb26:	f7ff ff8b 	bl	23fba40 <_ZN8particle16ApplicationAssetD1Ev>
    for (size_t i = 0; i < info.available_count; i++) {
 23fbb2a:	3401      	adds	r4, #1
 23fbb2c:	e7ea      	b.n	23fbb04 <_ZN11SystemClass15assetsAvailableEv+0x2a>
    SCOPE_GUARD({
 23fbb2e:	2100      	movs	r1, #0
 23fbb30:	a801      	add	r0, sp, #4
 23fbb32:	f7ff fcf5 	bl	23fb520 <asset_manager_free_info>
}
 23fbb36:	4628      	mov	r0, r5
 23fbb38:	b018      	add	sp, #96	; 0x60
 23fbb3a:	bd70      	pop	{r4, r5, r6, pc}

023fbb3c <_ZN8particle16ApplicationAssetD0Ev>:
 23fbb3c:	b510      	push	{r4, lr}
 23fbb3e:	4604      	mov	r4, r0
 23fbb40:	f7ff ff7e 	bl	23fba40 <_ZN8particle16ApplicationAssetD1Ev>
 23fbb44:	4620      	mov	r0, r4
 23fbb46:	2140      	movs	r1, #64	; 0x40
 23fbb48:	f7fc ffd7 	bl	23f8afa <_ZdlPvj>
 23fbb4c:	4620      	mov	r0, r4
 23fbb4e:	bd10      	pop	{r4, pc}

023fbb50 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fbb50:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fbb52:	2000      	movs	r0, #0
 23fbb54:	4b04      	ldr	r3, [pc, #16]	; (23fbb68 <_GLOBAL__sub_I_System+0x18>)
 23fbb56:	601a      	str	r2, [r3, #0]
 23fbb58:	4b04      	ldr	r3, [pc, #16]	; (23fbb6c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fbb5a:	4a05      	ldr	r2, [pc, #20]	; (23fbb70 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fbb5c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fbb60:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fbb62:	f7ff bb9b 	b.w	23fb29c <set_system_mode>
 23fbb66:	bf00      	nop
 23fbb68:	1007ae68 	.word	0x1007ae68
 23fbb6c:	1007ae5c 	.word	0x1007ae5c
 23fbb70:	ffff0000 	.word	0xffff0000

023fbb74 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fbb74:	b510      	push	{r4, lr}
 23fbb76:	4604      	mov	r4, r0
{
	free(buffer);
 23fbb78:	6800      	ldr	r0, [r0, #0]
 23fbb7a:	f7ff fd4f 	bl	23fb61c <free>
}
 23fbb7e:	4620      	mov	r0, r4
 23fbb80:	bd10      	pop	{r4, pc}

023fbb82 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fbb82:	b510      	push	{r4, lr}
 23fbb84:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fbb86:	6800      	ldr	r0, [r0, #0]
 23fbb88:	b108      	cbz	r0, 23fbb8e <_ZN6String10invalidateEv+0xc>
 23fbb8a:	f7ff fd47 	bl	23fb61c <free>
	buffer = NULL;
 23fbb8e:	2300      	movs	r3, #0
	capacity = len = 0;
 23fbb90:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fbb94:	6023      	str	r3, [r4, #0]
}
 23fbb96:	bd10      	pop	{r4, pc}

023fbb98 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fbb98:	b538      	push	{r3, r4, r5, lr}
 23fbb9a:	4604      	mov	r4, r0
 23fbb9c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fbb9e:	6800      	ldr	r0, [r0, #0]
 23fbba0:	3101      	adds	r1, #1
 23fbba2:	f7ff fd49 	bl	23fb638 <realloc>
	if (newbuffer) {
 23fbba6:	b110      	cbz	r0, 23fbbae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fbba8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fbbac:	2001      	movs	r0, #1
	}
	return 0;
}
 23fbbae:	bd38      	pop	{r3, r4, r5, pc}

023fbbb0 <_ZN6String7reserveEj>:
{
 23fbbb0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fbbb2:	6803      	ldr	r3, [r0, #0]
{
 23fbbb4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fbbb6:	b123      	cbz	r3, 23fbbc2 <_ZN6String7reserveEj+0x12>
 23fbbb8:	6843      	ldr	r3, [r0, #4]
 23fbbba:	428b      	cmp	r3, r1
 23fbbbc:	d301      	bcc.n	23fbbc2 <_ZN6String7reserveEj+0x12>
 23fbbbe:	2001      	movs	r0, #1
}
 23fbbc0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fbbc2:	4620      	mov	r0, r4
 23fbbc4:	f7ff ffe8 	bl	23fbb98 <_ZN6String12changeBufferEj>
 23fbbc8:	2800      	cmp	r0, #0
 23fbbca:	d0f9      	beq.n	23fbbc0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fbbcc:	68a3      	ldr	r3, [r4, #8]
 23fbbce:	2b00      	cmp	r3, #0
 23fbbd0:	d1f5      	bne.n	23fbbbe <_ZN6String7reserveEj+0xe>
 23fbbd2:	6822      	ldr	r2, [r4, #0]
 23fbbd4:	7013      	strb	r3, [r2, #0]
 23fbbd6:	e7f2      	b.n	23fbbbe <_ZN6String7reserveEj+0xe>

023fbbd8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fbbd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fbbda:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fbbdc:	4611      	mov	r1, r2
 23fbbde:	9201      	str	r2, [sp, #4]
{
 23fbbe0:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fbbe2:	f7ff ffe5 	bl	23fbbb0 <_ZN6String7reserveEj>
 23fbbe6:	9a01      	ldr	r2, [sp, #4]
 23fbbe8:	b928      	cbnz	r0, 23fbbf6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fbbea:	4620      	mov	r0, r4
 23fbbec:	f7ff ffc9 	bl	23fbb82 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fbbf0:	4620      	mov	r0, r4
 23fbbf2:	b003      	add	sp, #12
 23fbbf4:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fbbf6:	4629      	mov	r1, r5
	len = length;
 23fbbf8:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fbbfa:	6820      	ldr	r0, [r4, #0]
 23fbbfc:	f002 fd66 	bl	23fe6cc <memcpy>
	buffer[len] = 0;
 23fbc00:	2100      	movs	r1, #0
 23fbc02:	6822      	ldr	r2, [r4, #0]
 23fbc04:	68a3      	ldr	r3, [r4, #8]
 23fbc06:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fbc08:	e7f2      	b.n	23fbbf0 <_ZN6String4copyEPKcj+0x18>

023fbc0a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fbc0a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fbc0c:	b513      	push	{r0, r1, r4, lr}
 23fbc0e:	4604      	mov	r4, r0
	capacity = 0;
 23fbc10:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fbc14:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fbc16:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fbc18:	b141      	cbz	r1, 23fbc2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fbc1a:	4608      	mov	r0, r1
 23fbc1c:	9101      	str	r1, [sp, #4]
 23fbc1e:	f7fc ff41 	bl	23f8aa4 <strlen>
 23fbc22:	9901      	ldr	r1, [sp, #4]
 23fbc24:	4602      	mov	r2, r0
 23fbc26:	4620      	mov	r0, r4
 23fbc28:	f7ff ffd6 	bl	23fbbd8 <_ZN6String4copyEPKcj>
}
 23fbc2c:	4620      	mov	r0, r4
 23fbc2e:	b002      	add	sp, #8
 23fbc30:	bd10      	pop	{r4, pc}

023fbc32 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fbc32:	b538      	push	{r3, r4, r5, lr}
 23fbc34:	4605      	mov	r5, r0
	if (buffer) {
 23fbc36:	6800      	ldr	r0, [r0, #0]
{
 23fbc38:	460c      	mov	r4, r1
	if (buffer) {
 23fbc3a:	b170      	cbz	r0, 23fbc5a <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23fbc3c:	686a      	ldr	r2, [r5, #4]
 23fbc3e:	688b      	ldr	r3, [r1, #8]
 23fbc40:	429a      	cmp	r2, r3
 23fbc42:	d308      	bcc.n	23fbc56 <_ZN6String4moveERS_+0x24>
 23fbc44:	6809      	ldr	r1, [r1, #0]
 23fbc46:	b131      	cbz	r1, 23fbc56 <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23fbc48:	f002 fdb5 	bl	23fe7b6 <strcpy>
			len = rhs.len;
 23fbc4c:	68a3      	ldr	r3, [r4, #8]
 23fbc4e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23fbc50:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23fbc52:	60a3      	str	r3, [r4, #8]
}
 23fbc54:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23fbc56:	f7ff fce1 	bl	23fb61c <free>
	buffer = rhs.buffer;
 23fbc5a:	6823      	ldr	r3, [r4, #0]
 23fbc5c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23fbc5e:	6863      	ldr	r3, [r4, #4]
 23fbc60:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23fbc62:	68a3      	ldr	r3, [r4, #8]
 23fbc64:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23fbc66:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23fbc68:	e9c4 3300 	strd	r3, r3, [r4]
 23fbc6c:	e7f1      	b.n	23fbc52 <_ZN6String4moveERS_+0x20>

023fbc6e <_ZN6StringC1EOS_>:
	buffer = NULL;
 23fbc6e:	2300      	movs	r3, #0
String::String(String &&rval)
 23fbc70:	b510      	push	{r4, lr}
 23fbc72:	4604      	mov	r4, r0
	capacity = 0;
 23fbc74:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fbc78:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fbc7a:	7303      	strb	r3, [r0, #12]
	move(rval);
 23fbc7c:	f7ff ffd9 	bl	23fbc32 <_ZN6String4moveERS_>
}
 23fbc80:	4620      	mov	r0, r4
 23fbc82:	bd10      	pop	{r4, pc}

023fbc84 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fbc84:	4288      	cmp	r0, r1
{
 23fbc86:	b510      	push	{r4, lr}
 23fbc88:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fbc8a:	d005      	beq.n	23fbc98 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fbc8c:	680b      	ldr	r3, [r1, #0]
 23fbc8e:	b12b      	cbz	r3, 23fbc9c <_ZN6StringaSERKS_+0x18>
 23fbc90:	688a      	ldr	r2, [r1, #8]
 23fbc92:	4619      	mov	r1, r3
 23fbc94:	f7ff ffa0 	bl	23fbbd8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fbc98:	4620      	mov	r0, r4
 23fbc9a:	bd10      	pop	{r4, pc}
	else invalidate();
 23fbc9c:	f7ff ff71 	bl	23fbb82 <_ZN6String10invalidateEv>
 23fbca0:	e7fa      	b.n	23fbc98 <_ZN6StringaSERKS_+0x14>

023fbca2 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fbca2:	2300      	movs	r3, #0
String::String(const String &value)
 23fbca4:	b510      	push	{r4, lr}
 23fbca6:	4604      	mov	r4, r0
	capacity = 0;
 23fbca8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fbcac:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fbcae:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fbcb0:	f7ff ffe8 	bl	23fbc84 <_ZN6StringaSERKS_>
}
 23fbcb4:	4620      	mov	r0, r4
 23fbcb6:	bd10      	pop	{r4, pc}

023fbcb8 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 23fbcb8:	4288      	cmp	r0, r1
{
 23fbcba:	b510      	push	{r4, lr}
 23fbcbc:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 23fbcbe:	d001      	beq.n	23fbcc4 <_ZN6StringaSEOS_+0xc>
 23fbcc0:	f7ff ffb7 	bl	23fbc32 <_ZN6String4moveERS_>
	return *this;
}
 23fbcc4:	4620      	mov	r0, r4
 23fbcc6:	bd10      	pop	{r4, pc}

023fbcc8 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 23fbcc8:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23fbcca:	6882      	ldr	r2, [r0, #8]
 23fbccc:	b93a      	cbnz	r2, 23fbcde <_ZNK6String6equalsEPKc+0x16>
 23fbcce:	b121      	cbz	r1, 23fbcda <_ZNK6String6equalsEPKc+0x12>
 23fbcd0:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 23fbcd2:	fab0 f080 	clz	r0, r0
 23fbcd6:	0940      	lsrs	r0, r0, #5
 23fbcd8:	e000      	b.n	23fbcdc <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 23fbcda:	2001      	movs	r0, #1
}
 23fbcdc:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 23fbcde:	6800      	ldr	r0, [r0, #0]
 23fbce0:	b909      	cbnz	r1, 23fbce6 <_ZNK6String6equalsEPKc+0x1e>
 23fbce2:	7800      	ldrb	r0, [r0, #0]
 23fbce4:	e7f5      	b.n	23fbcd2 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 23fbce6:	f7fc fed3 	bl	23f8a90 <strcmp>
 23fbcea:	e7f2      	b.n	23fbcd2 <_ZNK6String6equalsEPKc+0xa>

023fbcec <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 23fbcec:	4613      	mov	r3, r2
 23fbcee:	b510      	push	{r4, lr}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 23fbcf0:	688a      	ldr	r2, [r1, #8]
 23fbcf2:	6884      	ldr	r4, [r0, #8]
 23fbcf4:	1aa4      	subs	r4, r4, r2
 23fbcf6:	429c      	cmp	r4, r3
 23fbcf8:	d30a      	bcc.n	23fbd10 <_ZNK6String10startsWithERKS_j+0x24>
 23fbcfa:	6800      	ldr	r0, [r0, #0]
 23fbcfc:	b138      	cbz	r0, 23fbd0e <_ZNK6String10startsWithERKS_j+0x22>
 23fbcfe:	6809      	ldr	r1, [r1, #0]
 23fbd00:	b141      	cbz	r1, 23fbd14 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 23fbd02:	4418      	add	r0, r3
 23fbd04:	f002 fd7d 	bl	23fe802 <strncmp>
 23fbd08:	fab0 f080 	clz	r0, r0
 23fbd0c:	0940      	lsrs	r0, r0, #5
}
 23fbd0e:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 23fbd10:	2000      	movs	r0, #0
 23fbd12:	e7fc      	b.n	23fbd0e <_ZNK6String10startsWithERKS_j+0x22>
 23fbd14:	4608      	mov	r0, r1
 23fbd16:	e7fa      	b.n	23fbd0e <_ZNK6String10startsWithERKS_j+0x22>

023fbd18 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
 23fbd18:	6882      	ldr	r2, [r0, #8]
 23fbd1a:	688b      	ldr	r3, [r1, #8]
 23fbd1c:	429a      	cmp	r2, r3
 23fbd1e:	d302      	bcc.n	23fbd26 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 23fbd20:	2200      	movs	r2, #0
 23fbd22:	f7ff bfe3 	b.w	23fbcec <_ZNK6String10startsWithERKS_j>
}
 23fbd26:	2000      	movs	r0, #0
 23fbd28:	4770      	bx	lr

023fbd2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fbd2a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fbd2c:	6843      	ldr	r3, [r0, #4]
    {
 23fbd2e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fbd30:	3b01      	subs	r3, #1
 23fbd32:	6043      	str	r3, [r0, #4]
 23fbd34:	b963      	cbnz	r3, 23fbd50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fbd36:	6803      	ldr	r3, [r0, #0]
 23fbd38:	689b      	ldr	r3, [r3, #8]
 23fbd3a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fbd3c:	68a3      	ldr	r3, [r4, #8]
 23fbd3e:	3b01      	subs	r3, #1
 23fbd40:	60a3      	str	r3, [r4, #8]
 23fbd42:	b92b      	cbnz	r3, 23fbd50 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fbd44:	6823      	ldr	r3, [r4, #0]
 23fbd46:	4620      	mov	r0, r4
    }
 23fbd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fbd4c:	68db      	ldr	r3, [r3, #12]
 23fbd4e:	4718      	bx	r3
    }
 23fbd50:	bd10      	pop	{r4, pc}

023fbd52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fbd52:	b570      	push	{r4, r5, r6, lr}
 23fbd54:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fbd56:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fbd5a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fbd5e:	42ae      	cmp	r6, r5
 23fbd60:	d004      	beq.n	23fbd6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fbd62:	4628      	mov	r0, r5
 23fbd64:	f7ff ff06 	bl	23fbb74 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fbd68:	3510      	adds	r5, #16
 23fbd6a:	e7f8      	b.n	23fbd5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fbd6c:	6820      	ldr	r0, [r4, #0]
 23fbd6e:	f7ff fc55 	bl	23fb61c <free>
}
 23fbd72:	4620      	mov	r0, r4
 23fbd74:	bd70      	pop	{r4, r5, r6, pc}

023fbd76 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fbd76:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbd78:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fbd7a:	460b      	mov	r3, r1
 23fbd7c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbd7e:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fbd82:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fbd86:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fbd8a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fbd8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fbd92:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fbd96:	b002      	add	sp, #8
 23fbd98:	bd10      	pop	{r4, pc}
	...

023fbd9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fbd9c:	2300      	movs	r3, #0
 23fbd9e:	4802      	ldr	r0, [pc, #8]	; (23fbda8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fbda0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fbda2:	f7fe bfdb 	b.w	23fad5c <os_mutex_recursive_create>
 23fbda6:	bf00      	nop
 23fbda8:	1007ae6c 	.word	0x1007ae6c

023fbdac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fbdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbdae:	4606      	mov	r6, r0
 23fbdb0:	460d      	mov	r5, r1
  size_t n = 0;
 23fbdb2:	2400      	movs	r4, #0
 23fbdb4:	188f      	adds	r7, r1, r2
  while (size--) {
 23fbdb6:	42bd      	cmp	r5, r7
 23fbdb8:	d00c      	beq.n	23fbdd4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fbdba:	6833      	ldr	r3, [r6, #0]
 23fbdbc:	4630      	mov	r0, r6
 23fbdbe:	689b      	ldr	r3, [r3, #8]
 23fbdc0:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fbdc4:	4798      	blx	r3
     if (chunk>=0)
 23fbdc6:	1e03      	subs	r3, r0, #0
 23fbdc8:	db01      	blt.n	23fbdce <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fbdca:	441c      	add	r4, r3
  while (size--) {
 23fbdcc:	e7f3      	b.n	23fbdb6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fbdce:	2c00      	cmp	r4, #0
 23fbdd0:	bf08      	it	eq
 23fbdd2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fbdd4:	4620      	mov	r0, r4
 23fbdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbdd8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fbdd8:	6803      	ldr	r3, [r0, #0]
 23fbdda:	689b      	ldr	r3, [r3, #8]
 23fbddc:	4718      	bx	r3

023fbdde <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fbdde:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fbde0:	2a01      	cmp	r2, #1
 23fbde2:	bf98      	it	ls
 23fbde4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fbde6:	b530      	push	{r4, r5, lr}
 23fbde8:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fbdea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fbdee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fbdf0:	460d      	mov	r5, r1
 23fbdf2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fbdf6:	fb01 5312 	mls	r3, r1, r2, r5
 23fbdfa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fbdfe:	2b09      	cmp	r3, #9
 23fbe00:	bf94      	ite	ls
 23fbe02:	3330      	addls	r3, #48	; 0x30
 23fbe04:	3337      	addhi	r3, #55	; 0x37
 23fbe06:	b2db      	uxtb	r3, r3
  } while(n);
 23fbe08:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fbe0a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fbe0e:	d9ef      	bls.n	23fbdf0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fbe10:	4621      	mov	r1, r4
 23fbe12:	f7fd fa45 	bl	23f92a0 <_ZN5Print5writeEPKc>
}
 23fbe16:	b00b      	add	sp, #44	; 0x2c
 23fbe18:	bd30      	pop	{r4, r5, pc}

023fbe1a <_ZN8particle16ApplicationAsset4readEv>:
        return r;
    }
    return 0;
}

int ApplicationAsset::read() {
 23fbe1a:	b507      	push	{r0, r1, r2, lr}
    char c;
    int r = read(&c, sizeof(c));
 23fbe1c:	6803      	ldr	r3, [r0, #0]
 23fbe1e:	2201      	movs	r2, #1
 23fbe20:	6a1b      	ldr	r3, [r3, #32]
 23fbe22:	f10d 0107 	add.w	r1, sp, #7
 23fbe26:	4798      	blx	r3
    if (r == 1) {
 23fbe28:	2801      	cmp	r0, #1
        return c;
 23fbe2a:	bf08      	it	eq
 23fbe2c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
    return r;
}
 23fbe30:	b003      	add	sp, #12
 23fbe32:	f85d fb04 	ldr.w	pc, [sp], #4

023fbe36 <_ZN8particle16ApplicationAsset4peekEv>:
        size -= actuallyRead;
    }
    return pos;
}

int ApplicationAsset::peek() {
 23fbe36:	b507      	push	{r0, r1, r2, lr}
    char c;
    int r = peek(&c, sizeof(c));
 23fbe38:	6803      	ldr	r3, [r0, #0]
 23fbe3a:	2201      	movs	r2, #1
 23fbe3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbe3e:	f10d 0107 	add.w	r1, sp, #7
 23fbe42:	4798      	blx	r3
    if (r == 1) {
 23fbe44:	2801      	cmp	r0, #1
        return c;
 23fbe46:	bf08      	it	eq
 23fbe48:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
    return r;
}
 23fbe4c:	b003      	add	sp, #12
 23fbe4e:	f85d fb04 	ldr.w	pc, [sp], #4

023fbe52 <_ZN8particle16ApplicationAsset5flushEv>:
    return asset_manager_skip(data_->stream, size, nullptr);
}

void ApplicationAsset::flush() {
    return;
}
 23fbe52:	4770      	bx	lr

023fbe54 <_ZN8particle16ApplicationAsset5writeEh>:
    data_.reset();
}

size_t ApplicationAsset::write(uint8_t c) {
    return 0;
}
 23fbe54:	2000      	movs	r0, #0
 23fbe56:	4770      	bx	lr

023fbe58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbe58:	4770      	bx	lr
	...

023fbe5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
 23fbe5c:	4b06      	ldr	r3, [pc, #24]	; (23fbe78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 23fbe5e:	b510      	push	{r4, lr}
	    ||
 23fbe60:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 23fbe62:	f100 040c 	add.w	r4, r0, #12
 23fbe66:	d005      	beq.n	23fbe74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
 23fbe68:	4608      	mov	r0, r1
 23fbe6a:	f002 fb0f 	bl	23fe48c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
 23fbe6e:	2800      	cmp	r0, #0
 23fbe70:	bf08      	it	eq
 23fbe72:	2400      	moveq	r4, #0
      }
 23fbe74:	4620      	mov	r0, r4
 23fbe76:	bd10      	pop	{r4, pc}
 23fbe78:	023ffaa8 	.word	0x023ffaa8

023fbe7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 23fbe7c:	b510      	push	{r4, lr}
 23fbe7e:	4604      	mov	r4, r0
 23fbe80:	2110      	movs	r1, #16
 23fbe82:	f7fc fe3a 	bl	23f8afa <_ZdlPvj>
 23fbe86:	4620      	mov	r0, r4
 23fbe88:	bd10      	pop	{r4, pc}

023fbe8a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
 23fbe8a:	2110      	movs	r1, #16
 23fbe8c:	f7fc be35 	b.w	23f8afa <_ZdlPvj>

023fbe90 <_ZNK8particle16ApplicationAsset4nameEv>:
String ApplicationAsset::name() const {
 23fbe90:	b510      	push	{r4, lr}
 23fbe92:	4604      	mov	r4, r0
    return name_;
 23fbe94:	3110      	adds	r1, #16
 23fbe96:	f7ff ff04 	bl	23fbca2 <_ZN6StringC1ERKS_>
}
 23fbe9a:	4620      	mov	r0, r4
 23fbe9c:	bd10      	pop	{r4, pc}

023fbe9e <_ZNK8particle16ApplicationAsset4sizeEv>:
}
 23fbe9e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 23fbea0:	4770      	bx	lr

023fbea2 <_ZNK8particle16ApplicationAsset7isValidEv>:
    return name_.length() > 0 && hash_.isValid();
 23fbea2:	6983      	ldr	r3, [r0, #24]
 23fbea4:	b143      	cbz	r3, 23fbeb8 <_ZNK8particle16ApplicationAsset7isValidEv+0x16>
inline const Buffer& AssetHash::hash() const {
    return hash_;
}

inline bool AssetHash::isValid() const {
    return type_ != Type::INVALID && hash_.size() > 0;
 23fbea6:	f990 3020 	ldrsb.w	r3, [r0, #32]
 23fbeaa:	3301      	adds	r3, #1
 23fbeac:	d004      	beq.n	23fbeb8 <_ZNK8particle16ApplicationAsset7isValidEv+0x16>
 23fbeae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 23fbeb0:	3800      	subs	r0, #0
 23fbeb2:	bf18      	it	ne
 23fbeb4:	2001      	movne	r0, #1
 23fbeb6:	4770      	bx	lr
 23fbeb8:	2000      	movs	r0, #0
}
 23fbeba:	4770      	bx	lr

023fbebc <_ZN8particle16ApplicationAsset4DataD1Ev>:

ApplicationAsset::Data::Data(asset_manager_stream* s)
        : stream(s) {
}

ApplicationAsset::Data::~Data() {
 23fbebc:	b510      	push	{r4, lr}
 23fbebe:	4604      	mov	r4, r0
    if (stream) {
 23fbec0:	6800      	ldr	r0, [r0, #0]
 23fbec2:	b110      	cbz	r0, 23fbeca <_ZN8particle16ApplicationAsset4DataD1Ev+0xe>
        asset_manager_close(stream, nullptr);
 23fbec4:	2100      	movs	r1, #0
 23fbec6:	f7ff fb8d 	bl	23fb5e4 <asset_manager_close>
        stream = nullptr;
    }
}
 23fbeca:	4620      	mov	r0, r4
 23fbecc:	bd10      	pop	{r4, pc}

023fbece <_ZNSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 23fbece:	300c      	adds	r0, #12
 23fbed0:	f7ff bff4 	b.w	23fbebc <_ZN8particle16ApplicationAsset4DataD1Ev>

023fbed4 <_ZN8particle6BufferC1ERKS0_>:
inline Buffer::Buffer(const Buffer& other)
 23fbed4:	b538      	push	{r3, r4, r5, lr}
 23fbed6:	4604      	mov	r4, r0
 23fbed8:	460d      	mov	r5, r1
        : Buffer(other.size()) {
 23fbeda:	6849      	ldr	r1, [r1, #4]
 23fbedc:	f7ff fd11 	bl	23fb902 <_ZN8particle6BufferC1Ej>
    if (size_ > 0 && other.size() > 0) {
 23fbee0:	6862      	ldr	r2, [r4, #4]
 23fbee2:	b12a      	cbz	r2, 23fbef0 <_ZN8particle6BufferC1ERKS0_+0x1c>
 23fbee4:	686b      	ldr	r3, [r5, #4]
 23fbee6:	b11b      	cbz	r3, 23fbef0 <_ZN8particle6BufferC1ERKS0_+0x1c>
        memcpy(buffer_.get(), other.buffer_.get(), size_);
 23fbee8:	6829      	ldr	r1, [r5, #0]
 23fbeea:	6820      	ldr	r0, [r4, #0]
 23fbeec:	f002 fbee 	bl	23fe6cc <memcpy>
    }
}
 23fbef0:	4620      	mov	r0, r4
 23fbef2:	bd38      	pop	{r3, r4, r5, pc}

023fbef4 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE>:
        : type_(Type::INVALID) {
 23fbef4:	23ff      	movs	r3, #255	; 0xff
inline AssetHash::AssetHash(const Buffer& hash, Type type)
 23fbef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fbef8:	4615      	mov	r5, r2
 23fbefa:	4604      	mov	r4, r0
 23fbefc:	460e      	mov	r6, r1
        : type_(Type::INVALID) {
 23fbefe:	f800 3b04 	strb.w	r3, [r0], #4
 23fbf02:	2100      	movs	r1, #0
 23fbf04:	f7ff fcfd 	bl	23fb902 <_ZN8particle6BufferC1Ej>
    if (type == Type::SHA256 && hash.size() == SHA256_HASH_SIZE) {
 23fbf08:	b995      	cbnz	r5, 23fbf30 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE+0x3c>
 23fbf0a:	6873      	ldr	r3, [r6, #4]
 23fbf0c:	2b20      	cmp	r3, #32
 23fbf0e:	d10f      	bne.n	23fbf30 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE+0x3c>
        hash_ = hash;
 23fbf10:	4631      	mov	r1, r6
 23fbf12:	4668      	mov	r0, sp
 23fbf14:	f7ff ffde 	bl	23fbed4 <_ZN8particle6BufferC1ERKS0_>
      __a = _GLIBCXX_MOVE(__b);
 23fbf18:	9a00      	ldr	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbf1a:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fbf1c:	6062      	str	r2, [r4, #4]
 23fbf1e:	9a01      	ldr	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbf20:	9300      	str	r3, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbf22:	68a3      	ldr	r3, [r4, #8]
class Buffer {
 23fbf24:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23fbf26:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbf28:	9301      	str	r3, [sp, #4]
 23fbf2a:	f7ff fce2 	bl	23fb8f2 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
        type_ = type;
 23fbf2e:	7025      	strb	r5, [r4, #0]
}
 23fbf30:	4620      	mov	r0, r4
 23fbf32:	b002      	add	sp, #8
 23fbf34:	bd70      	pop	{r4, r5, r6, pc}
	...

023fbf38 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset>:
ApplicationAsset::ApplicationAsset(const asset_manager_asset* asset)
 23fbf38:	b5f0      	push	{r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fbf3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbf3e:	2600      	movs	r6, #0
    ApplicationAsset() = default;
 23fbf40:	4607      	mov	r7, r0
 23fbf42:	e9c0 6301 	strd	r6, r3, [r0, #4]
 23fbf46:	4b31      	ldr	r3, [pc, #196]	; (23fc00c <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xd4>)
 23fbf48:	4604      	mov	r4, r0
 23fbf4a:	f847 3b10 	str.w	r3, [r7], #16
 23fbf4e:	b089      	sub	sp, #36	; 0x24
 23fbf50:	460d      	mov	r5, r1
 23fbf52:	4638      	mov	r0, r7
 23fbf54:	492e      	ldr	r1, [pc, #184]	; (23fc010 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xd8>)
 23fbf56:	f7ff fe58 	bl	23fbc0a <_ZN6StringC1EPK19__FlashStringHelper>
        : type_(Type::INVALID) {
 23fbf5a:	23ff      	movs	r3, #255	; 0xff
 23fbf5c:	4631      	mov	r1, r6
 23fbf5e:	f884 3020 	strb.w	r3, [r4, #32]
 23fbf62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 23fbf66:	f7ff fccc 	bl	23fb902 <_ZN8particle6BufferC1Ej>
 23fbf6a:	e9c4 660b 	strd	r6, r6, [r4, #44]	; 0x2c
      constexpr __shared_count() noexcept : _M_pi(0)
 23fbf6e:	e9c4 660e 	strd	r6, r6, [r4, #56]	; 0x38
 23fbf72:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    if (!asset) {
 23fbf76:	2d00      	cmp	r5, #0
 23fbf78:	d045      	beq.n	23fc006 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xce>
    if (asset->name) {
 23fbf7a:	6829      	ldr	r1, [r5, #0]
 23fbf7c:	b149      	cbz	r1, 23fbf92 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0x5a>
        name_ = String(asset->name);
 23fbf7e:	a804      	add	r0, sp, #16
 23fbf80:	f7ff fe43 	bl	23fbc0a <_ZN6StringC1EPK19__FlashStringHelper>
 23fbf84:	4638      	mov	r0, r7
 23fbf86:	a904      	add	r1, sp, #16
 23fbf88:	f7ff fe96 	bl	23fbcb8 <_ZN6StringaSEOS_>
 23fbf8c:	a804      	add	r0, sp, #16
 23fbf8e:	f7ff fdf1 	bl	23fbb74 <_ZN6StringD1Ev>
    if (asset->hash && asset->hash_length) {
 23fbf92:	686e      	ldr	r6, [r5, #4]
 23fbf94:	2e00      	cmp	r6, #0
 23fbf96:	d031      	beq.n	23fbffc <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xc4>
 23fbf98:	892a      	ldrh	r2, [r5, #8]
 23fbf9a:	2a00      	cmp	r2, #0
 23fbf9c:	d02e      	beq.n	23fbffc <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xc4>
        : Buffer(size) {
 23fbf9e:	4611      	mov	r1, r2
 23fbfa0:	a802      	add	r0, sp, #8
        hash_ = AssetHash(asset->hash, asset->hash_length, (AssetHash::Type)asset->hash_type);
 23fbfa2:	f995 700a 	ldrsb.w	r7, [r5, #10]
 23fbfa6:	9201      	str	r2, [sp, #4]
 23fbfa8:	f7ff fcab 	bl	23fb902 <_ZN8particle6BufferC1Ej>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 23fbfac:	9802      	ldr	r0, [sp, #8]
    if (buffer_ && data && size > 0) {
 23fbfae:	b118      	cbz	r0, 23fbfb8 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0x80>
        memcpy(buffer_.get(), data, size);
 23fbfb0:	4631      	mov	r1, r6
 23fbfb2:	9a01      	ldr	r2, [sp, #4]
 23fbfb4:	f002 fb8a 	bl	23fe6cc <memcpy>
        : AssetHash(Buffer(hash, length), type) {
 23fbfb8:	463a      	mov	r2, r7
 23fbfba:	a902      	add	r1, sp, #8
 23fbfbc:	a804      	add	r0, sp, #16
 23fbfbe:	f7ff ff99 	bl	23fbef4 <_ZN8particle9AssetHashC1ERKNS_6BufferENS0_4TypeE>
class Buffer {
 23fbfc2:	a802      	add	r0, sp, #8
 23fbfc4:	f7ff fc95 	bl	23fb8f2 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
    AssetHash& operator=(AssetHash&& other) = default;
 23fbfc8:	f89d 3010 	ldrb.w	r3, [sp, #16]

inline Buffer::Buffer(Buffer&& other)
        : Buffer() {
 23fbfcc:	2100      	movs	r1, #0
 23fbfce:	f884 3020 	strb.w	r3, [r4, #32]
 23fbfd2:	a802      	add	r0, sp, #8
 23fbfd4:	f7ff fc95 	bl	23fb902 <_ZN8particle6BufferC1Ej>
 23fbfd8:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fbfda:	9905      	ldr	r1, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbfdc:	9305      	str	r3, [sp, #20]
 23fbfde:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fbfe0:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbfe2:	9306      	str	r3, [sp, #24]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbfe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
class Buffer {
 23fbfe6:	a802      	add	r0, sp, #8
      __b = _GLIBCXX_MOVE(__tmp);
 23fbfe8:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbfea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
 23fbfec:	6261      	str	r1, [r4, #36]	; 0x24
 23fbfee:	62a2      	str	r2, [r4, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fbff0:	9303      	str	r3, [sp, #12]
 23fbff2:	f7ff fc7e 	bl	23fb8f2 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
 23fbff6:	a805      	add	r0, sp, #20
 23fbff8:	f7ff fc7b 	bl	23fb8f2 <_ZNSt10unique_ptrIA_cSt14default_deleteIS0_EED1Ev>
    if (asset->size) {
 23fbffc:	68eb      	ldr	r3, [r5, #12]
 23fbffe:	b103      	cbz	r3, 23fc002 <_ZN8particle16ApplicationAssetC1EPK19asset_manager_asset+0xca>
        size_ = asset->size;
 23fc000:	62e3      	str	r3, [r4, #44]	; 0x2c
    storageSize_ = asset->storage_size;
 23fc002:	692b      	ldr	r3, [r5, #16]
 23fc004:	6323      	str	r3, [r4, #48]	; 0x30
}
 23fc006:	4620      	mov	r0, r4
 23fc008:	b009      	add	sp, #36	; 0x24
 23fc00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fc00c:	023ffad4 	.word	0x023ffad4
 23fc010:	023ffb5a 	.word	0x023ffb5a

023fc014 <_ZN8particle16ApplicationAsset17prepareForReadingEb>:
int ApplicationAsset::prepareForReading(bool keepOpen) {
 23fc014:	b570      	push	{r4, r5, r6, lr}
 23fc016:	b08a      	sub	sp, #40	; 0x28
 23fc018:	4604      	mov	r4, r0
 23fc01a:	460e      	mov	r6, r1
    if (!isValid()) {
 23fc01c:	f7ff ff41 	bl	23fbea2 <_ZNK8particle16ApplicationAsset7isValidEv>
 23fc020:	2800      	cmp	r0, #0
 23fc022:	d04e      	beq.n	23fc0c2 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xae>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const // never throws
      { return _M_ptr == 0 ? false : true; }
 23fc024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (data_ && data_->stream) {
 23fc026:	b113      	cbz	r3, 23fc02e <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x1a>
 23fc028:	681b      	ldr	r3, [r3, #0]
 23fc02a:	2b00      	cmp	r3, #0
 23fc02c:	d13c      	bne.n	23fc0a8 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
    } else if (eof_) {
 23fc02e:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 23fc032:	2d00      	cmp	r5, #0
 23fc034:	d148      	bne.n	23fc0c8 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xb4>
    if (size() == 0) {
 23fc036:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 23fc038:	2b00      	cmp	r3, #0
 23fc03a:	d048      	beq.n	23fc0ce <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xba>
    a.name = name_.c_str();
 23fc03c:	6923      	ldr	r3, [r4, #16]
    asset_manager_asset a = {};
 23fc03e:	e9cd 5507 	strd	r5, r5, [sp, #28]
    a.name = name_.c_str();
 23fc042:	9305      	str	r3, [sp, #20]
    a.hash = hash_.hash().data();
 23fc044:	6a63      	ldr	r3, [r4, #36]	; 0x24
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc046:	462a      	mov	r2, r5
    a.hash = hash_.hash().data();
 23fc048:	9306      	str	r3, [sp, #24]
    a.hash_length = hash_.hash().size();
 23fc04a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc04c:	4668      	mov	r0, sp
    a.hash_length = hash_.hash().size();
 23fc04e:	f8ad 301c 	strh.w	r3, [sp, #28]
    a.hash_type = hash_.type();
 23fc052:	f894 3020 	ldrb.w	r3, [r4, #32]
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc056:	a905      	add	r1, sp, #20
    asset_manager_stream* stream = nullptr;
 23fc058:	9500      	str	r5, [sp, #0]
    asset_manager_asset a = {};
 23fc05a:	9509      	str	r5, [sp, #36]	; 0x24
    a.hash_type = hash_.type();
 23fc05c:	f88d 301e 	strb.w	r3, [sp, #30]
    CHECK(asset_manager_open(&stream, &a, nullptr));
 23fc060:	f7ff fa7a 	bl	23fb558 <asset_manager_open>
 23fc064:	2800      	cmp	r0, #0
 23fc066:	db2a      	blt.n	23fc0be <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
    if (keepOpen) {
 23fc068:	b1e6      	cbz	r6, 23fc0a4 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x90>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 23fc06a:	2010      	movs	r0, #16

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 23fc06c:	9501      	str	r5, [sp, #4]
 23fc06e:	f7fc fd3e 	bl	23f8aee <_Znwj>
	  auto __pi = ::new (__mem)
 23fc072:	b130      	cbz	r0, 23fc082 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x6e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fc074:	2301      	movs	r3, #1
 23fc076:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
 23fc07a:	4b16      	ldr	r3, [pc, #88]	; (23fc0d4 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xc0>)
 23fc07c:	6003      	str	r3, [r0, #0]
        : stream(s) {
 23fc07e:	9b00      	ldr	r3, [sp, #0]
 23fc080:	60c3      	str	r3, [r0, #12]
	__r._M_pi = _M_pi;
 23fc082:	2300      	movs	r3, #0
	__r._M_ptr = 0;
 23fc084:	e9cd 3301 	strd	r3, r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fc08a:	9303      	str	r3, [sp, #12]
 23fc08c:	f100 030c 	add.w	r3, r0, #12
      __b = _GLIBCXX_MOVE(__tmp);
 23fc090:	63a3      	str	r3, [r4, #56]	; 0x38
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fc092:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	__r._M_pi = _M_pi;
 23fc094:	63e0      	str	r0, [r4, #60]	; 0x3c
      ~__shared_ptr() = default;
 23fc096:	a804      	add	r0, sp, #16
	_M_pi = __tmp;
 23fc098:	9304      	str	r3, [sp, #16]
      ~__shared_ptr() = default;
 23fc09a:	f7fc fd9b 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc09e:	a802      	add	r0, sp, #8
 23fc0a0:	f7fc fd98 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!data_) {
 23fc0a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 23fc0a6:	b109      	cbz	r1, 23fc0ac <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x98>
        return 0;
 23fc0a8:	2000      	movs	r0, #0
 23fc0aa:	e008      	b.n	23fc0be <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        asset_manager_close(stream, nullptr);
 23fc0ac:	9800      	ldr	r0, [sp, #0]
 23fc0ae:	f7ff fa99 	bl	23fb5e4 <asset_manager_close>
    if (keepOpen && !data_) {
 23fc0b2:	2e00      	cmp	r6, #0
 23fc0b4:	d0f8      	beq.n	23fc0a8 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
 23fc0b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 23fc0b8:	2b00      	cmp	r3, #0
 23fc0ba:	d1f5      	bne.n	23fc0a8 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0x94>
        return SYSTEM_ERROR_NO_MEMORY;
 23fc0bc:	4806      	ldr	r0, [pc, #24]	; (23fc0d8 <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xc4>)
}
 23fc0be:	b00a      	add	sp, #40	; 0x28
 23fc0c0:	bd70      	pop	{r4, r5, r6, pc}
        return SYSTEM_ERROR_INVALID_STATE;
 23fc0c2:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
 23fc0c6:	e7fa      	b.n	23fc0be <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        return SYSTEM_ERROR_END_OF_STREAM;
 23fc0c8:	f06f 00c8 	mvn.w	r0, #200	; 0xc8
 23fc0cc:	e7f7      	b.n	23fc0be <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
        return SYSTEM_ERROR_NOT_ENOUGH_DATA;
 23fc0ce:	f06f 00be 	mvn.w	r0, #190	; 0xbe
 23fc0d2:	e7f4      	b.n	23fc0be <_ZN8particle16ApplicationAsset17prepareForReadingEb+0xaa>
 23fc0d4:	023ffab8 	.word	0x023ffab8
 23fc0d8:	fffffefc 	.word	0xfffffefc

023fc0dc <_ZN8particle16ApplicationAsset4peekEPcj>:
int ApplicationAsset::peek(char* buffer, size_t size) {
 23fc0dc:	b570      	push	{r4, r5, r6, lr}
 23fc0de:	460c      	mov	r4, r1
    CHECK(prepareForReading());
 23fc0e0:	2101      	movs	r1, #1
int ApplicationAsset::peek(char* buffer, size_t size) {
 23fc0e2:	4606      	mov	r6, r0
 23fc0e4:	4615      	mov	r5, r2
    CHECK(prepareForReading());
 23fc0e6:	f7ff ff95 	bl	23fc014 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fc0ea:	2800      	cmp	r0, #0
 23fc0ec:	db0b      	blt.n	23fc106 <_ZN8particle16ApplicationAsset4peekEPcj+0x2a>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc0ee:	b14c      	cbz	r4, 23fc104 <_ZN8particle16ApplicationAsset4peekEPcj+0x28>
 23fc0f0:	b145      	cbz	r5, 23fc104 <_ZN8particle16ApplicationAsset4peekEPcj+0x28>
    return asset_manager_peek(data_->stream, buffer, size, nullptr);
 23fc0f2:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 23fc0f4:	462a      	mov	r2, r5
 23fc0f6:	4621      	mov	r1, r4
}
 23fc0f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return asset_manager_peek(data_->stream, buffer, size, nullptr);
 23fc0fc:	2300      	movs	r3, #0
 23fc0fe:	6800      	ldr	r0, [r0, #0]
 23fc100:	f7ff ba54 	b.w	23fb5ac <asset_manager_peek>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc104:	4800      	ldr	r0, [pc, #0]	; (23fc108 <_ZN8particle16ApplicationAsset4peekEPcj+0x2c>)
}
 23fc106:	bd70      	pop	{r4, r5, r6, pc}
 23fc108:	fffffef2 	.word	0xfffffef2

023fc10c <_ZN8particle16ApplicationAsset4skipEj>:
int ApplicationAsset::skip(size_t size) {
 23fc10c:	b538      	push	{r3, r4, r5, lr}
 23fc10e:	460c      	mov	r4, r1
    CHECK(prepareForReading());
 23fc110:	2101      	movs	r1, #1
int ApplicationAsset::skip(size_t size) {
 23fc112:	4605      	mov	r5, r0
    CHECK(prepareForReading());
 23fc114:	f7ff ff7e 	bl	23fc014 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fc118:	2800      	cmp	r0, #0
 23fc11a:	db07      	blt.n	23fc12c <_ZN8particle16ApplicationAsset4skipEj+0x20>
    return asset_manager_skip(data_->stream, size, nullptr);
 23fc11c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc11e:	4621      	mov	r1, r4
 23fc120:	6818      	ldr	r0, [r3, #0]
 23fc122:	2200      	movs	r2, #0
}
 23fc124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return asset_manager_skip(data_->stream, size, nullptr);
 23fc128:	f7ff ba4e 	b.w	23fb5c8 <asset_manager_skip>
}
 23fc12c:	bd38      	pop	{r3, r4, r5, pc}

023fc12e <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>:
      reset() noexcept
 23fc12e:	b507      	push	{r0, r1, r2, lr}
      __a = _GLIBCXX_MOVE(__b);
 23fc130:	6803      	ldr	r3, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fc132:	6842      	ldr	r2, [r0, #4]
 23fc134:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc136:	2300      	movs	r3, #0
 23fc138:	6003      	str	r3, [r0, #0]
	__r._M_pi = _M_pi;
 23fc13a:	6043      	str	r3, [r0, #4]
      ~__shared_ptr() = default;
 23fc13c:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
 23fc13e:	9201      	str	r2, [sp, #4]
      ~__shared_ptr() = default;
 23fc140:	f7fc fd48 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      { __shared_ptr().swap(*this); }
 23fc144:	b003      	add	sp, #12
 23fc146:	f85d fb04 	ldr.w	pc, [sp], #4

023fc14a <_ZN8particle16ApplicationAsset9availableEv>:
int ApplicationAsset::available() {
 23fc14a:	b538      	push	{r3, r4, r5, lr}
    int r = prepareForReading();
 23fc14c:	2101      	movs	r1, #1
int ApplicationAsset::available() {
 23fc14e:	4605      	mov	r5, r0
    int r = prepareForReading();
 23fc150:	f7ff ff60 	bl	23fc014 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
    if (!r) {
 23fc154:	4604      	mov	r4, r0
 23fc156:	b928      	cbnz	r0, 23fc164 <_ZN8particle16ApplicationAsset9availableEv+0x1a>
        r = asset_manager_available(data_->stream, nullptr);
 23fc158:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc15a:	4601      	mov	r1, r0
 23fc15c:	6818      	ldr	r0, [r3, #0]
 23fc15e:	f7ff fa09 	bl	23fb574 <asset_manager_available>
 23fc162:	4604      	mov	r4, r0
    if (r == SYSTEM_ERROR_END_OF_STREAM && !eof_) {
 23fc164:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fc168:	d109      	bne.n	23fc17e <_ZN8particle16ApplicationAsset9availableEv+0x34>
 23fc16a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23fc16e:	b933      	cbnz	r3, 23fc17e <_ZN8particle16ApplicationAsset9availableEv+0x34>
        data_.reset();
 23fc170:	f105 0038 	add.w	r0, r5, #56	; 0x38
 23fc174:	f7ff ffdb 	bl	23fc12e <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>
        eof_ = true;
 23fc178:	2301      	movs	r3, #1
 23fc17a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 23fc17e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 23fc182:	bd38      	pop	{r3, r4, r5, pc}

023fc184 <_ZN8particle16ApplicationAsset4readEPcj>:
int ApplicationAsset::read(char* buffer, size_t size) {
 23fc184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc188:	4688      	mov	r8, r1
    CHECK(prepareForReading());
 23fc18a:	2101      	movs	r1, #1
int ApplicationAsset::read(char* buffer, size_t size) {
 23fc18c:	4607      	mov	r7, r0
 23fc18e:	4615      	mov	r5, r2
    CHECK(prepareForReading());
 23fc190:	f7ff ff40 	bl	23fc014 <_ZN8particle16ApplicationAsset17prepareForReadingEb>
 23fc194:	1e04      	subs	r4, r0, #0
 23fc196:	db1b      	blt.n	23fc1d0 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc198:	f1b8 0f00 	cmp.w	r8, #0
 23fc19c:	d020      	beq.n	23fc1e0 <_ZN8particle16ApplicationAsset4readEPcj+0x5c>
 23fc19e:	b1fd      	cbz	r5, 23fc1e0 <_ZN8particle16ApplicationAsset4readEPcj+0x5c>
 23fc1a0:	2600      	movs	r6, #0
        int actuallyRead = asset_manager_read(data_->stream, buffer + pos, size, nullptr);
 23fc1a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 23fc1a4:	2300      	movs	r3, #0
 23fc1a6:	462a      	mov	r2, r5
 23fc1a8:	6800      	ldr	r0, [r0, #0]
 23fc1aa:	eb08 0106 	add.w	r1, r8, r6
 23fc1ae:	f7ff f9ef 	bl	23fb590 <asset_manager_read>
        if (actuallyRead <= 0) {
 23fc1b2:	1e04      	subs	r4, r0, #0
 23fc1b4:	dc0f      	bgt.n	23fc1d6 <_ZN8particle16ApplicationAsset4readEPcj+0x52>
            if (actuallyRead == SYSTEM_ERROR_END_OF_STREAM) {
 23fc1b6:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fc1ba:	d106      	bne.n	23fc1ca <_ZN8particle16ApplicationAsset4readEPcj+0x46>
                data_.reset();
 23fc1bc:	f107 0038 	add.w	r0, r7, #56	; 0x38
 23fc1c0:	f7ff ffb5 	bl	23fc12e <_ZNSt12__shared_ptrIN8particle16ApplicationAsset4DataELN9__gnu_cxx12_Lock_policyE0EE5resetEv>
                eof_ = true;
 23fc1c4:	2301      	movs	r3, #1
 23fc1c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            return pos > 0 ? pos : actuallyRead;
 23fc1ca:	2e00      	cmp	r6, #0
 23fc1cc:	bf18      	it	ne
 23fc1ce:	4634      	movne	r4, r6
}
 23fc1d0:	4620      	mov	r0, r4
 23fc1d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while (size > 0) {
 23fc1d6:	1b2d      	subs	r5, r5, r4
        pos += actuallyRead;
 23fc1d8:	4426      	add	r6, r4
    while (size > 0) {
 23fc1da:	d1e2      	bne.n	23fc1a2 <_ZN8particle16ApplicationAsset4readEPcj+0x1e>
    return pos;
 23fc1dc:	4634      	mov	r4, r6
 23fc1de:	e7f7      	b.n	23fc1d0 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
    CHECK_TRUE(buffer && size, SYSTEM_ERROR_INVALID_ARGUMENT);
 23fc1e0:	4c00      	ldr	r4, [pc, #0]	; (23fc1e4 <_ZN8particle16ApplicationAsset4readEPcj+0x60>)
 23fc1e2:	e7f5      	b.n	23fc1d0 <_ZN8particle16ApplicationAsset4readEPcj+0x4c>
 23fc1e4:	fffffef2 	.word	0xfffffef2

023fc1e8 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23fc1e8:	6880      	ldr	r0, [r0, #8]
 23fc1ea:	6803      	ldr	r3, [r0, #0]
 23fc1ec:	68db      	ldr	r3, [r3, #12]
 23fc1ee:	4718      	bx	r3

023fc1f0 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fc1f0:	4770      	bx	lr

023fc1f2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fc1f2:	4608      	mov	r0, r1
 23fc1f4:	b111      	cbz	r1, 23fc1fc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fc1f6:	680b      	ldr	r3, [r1, #0]
 23fc1f8:	685b      	ldr	r3, [r3, #4]
 23fc1fa:	4718      	bx	r3
}
 23fc1fc:	4770      	bx	lr

023fc1fe <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fc1fe:	4770      	bx	lr

023fc200 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc200:	4770      	bx	lr

023fc202 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fc202:	4770      	bx	lr

023fc204 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fc204:	4770      	bx	lr

023fc206 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fc206:	b538      	push	{r3, r4, r5, lr}
 23fc208:	4604      	mov	r4, r0
 23fc20a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fc20c:	6800      	ldr	r0, [r0, #0]
 23fc20e:	212e      	movs	r1, #46	; 0x2e
 23fc210:	f002 fac7 	bl	23fe7a2 <strchrnul>
    size = s - category;
 23fc214:	6823      	ldr	r3, [r4, #0]
 23fc216:	1ac3      	subs	r3, r0, r3
 23fc218:	602b      	str	r3, [r5, #0]
    if (size) {
 23fc21a:	b123      	cbz	r3, 23fc226 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fc21c:	7803      	ldrb	r3, [r0, #0]
 23fc21e:	b103      	cbz	r3, 23fc222 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fc220:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fc222:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc224:	6020      	str	r0, [r4, #0]
}
 23fc226:	4618      	mov	r0, r3
 23fc228:	bd38      	pop	{r3, r4, r5, pc}

023fc22a <_ZN5spark16JSONStreamWriterD0Ev>:
 23fc22a:	b510      	push	{r4, lr}
 23fc22c:	4604      	mov	r4, r0
 23fc22e:	210c      	movs	r1, #12
 23fc230:	f7fc fc63 	bl	23f8afa <_ZdlPvj>
 23fc234:	4620      	mov	r0, r4
 23fc236:	bd10      	pop	{r4, pc}

023fc238 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fc238:	b510      	push	{r4, lr}
 23fc23a:	4604      	mov	r4, r0
 23fc23c:	2104      	movs	r1, #4
 23fc23e:	f7fc fc5c 	bl	23f8afa <_ZdlPvj>
 23fc242:	4620      	mov	r0, r4
 23fc244:	bd10      	pop	{r4, pc}

023fc246 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fc246:	b510      	push	{r4, lr}
 23fc248:	4604      	mov	r4, r0
 23fc24a:	2104      	movs	r1, #4
 23fc24c:	f7fc fc55 	bl	23f8afa <_ZdlPvj>
 23fc250:	4620      	mov	r0, r4
 23fc252:	bd10      	pop	{r4, pc}

023fc254 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fc254:	f7fe bd9e 	b.w	23fad94 <os_mutex_recursive_lock>

023fc258 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fc258:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fc25a:	f7fc fc19 	bl	23f8a90 <strcmp>
}
 23fc25e:	fab0 f080 	clz	r0, r0
 23fc262:	0940      	lsrs	r0, r0, #5
 23fc264:	bd08      	pop	{r3, pc}

023fc266 <__tcf_1>:
 23fc266:	4770      	bx	lr

023fc268 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fc268:	b510      	push	{r4, lr}
 23fc26a:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fc26c:	f001 fba6 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23fc270:	4284      	cmp	r4, r0
 23fc272:	d105      	bne.n	23fc280 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fc274:	f001 fba2 	bl	23fd9bc <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fc278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fc27c:	f001 bb90 	b.w	23fd9a0 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fc280:	f002 f82a 	bl	23fe2d8 <_Z22__fetch_global_Serial1v>
 23fc284:	4284      	cmp	r4, r0
 23fc286:	d105      	bne.n	23fc294 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fc288:	f002 f826 	bl	23fe2d8 <_Z22__fetch_global_Serial1v>
}
 23fc28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fc290:	f001 bc11 	b.w	23fdab6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fc294:	b12c      	cbz	r4, 23fc2a2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fc296:	6823      	ldr	r3, [r4, #0]
 23fc298:	4620      	mov	r0, r4
}
 23fc29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc29e:	685b      	ldr	r3, [r3, #4]
 23fc2a0:	4718      	bx	r3
 23fc2a2:	bd10      	pop	{r4, pc}

023fc2a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc2a4:	680b      	ldr	r3, [r1, #0]
 23fc2a6:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fc2a8:	684b      	ldr	r3, [r1, #4]
 23fc2aa:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fc2ac:	b113      	cbz	r3, 23fc2b4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fc2ae:	685a      	ldr	r2, [r3, #4]
 23fc2b0:	3201      	adds	r2, #1
 23fc2b2:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fc2b4:	4770      	bx	lr

023fc2b6 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fc2b6:	b513      	push	{r0, r1, r4, lr}
 23fc2b8:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fc2ba:	4608      	mov	r0, r1
 23fc2bc:	9101      	str	r1, [sp, #4]
 23fc2be:	f7fc fbf1 	bl	23f8aa4 <strlen>
 23fc2c2:	4602      	mov	r2, r0
 23fc2c4:	4620      	mov	r0, r4
 23fc2c6:	9901      	ldr	r1, [sp, #4]
}
 23fc2c8:	b002      	add	sp, #8
 23fc2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fc2ce:	f001 bf49 	b.w	23fe164 <_ZN5spark10JSONWriter5valueEPKcj>

023fc2d2 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fc2d2:	b513      	push	{r0, r1, r4, lr}
 23fc2d4:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fc2d6:	4608      	mov	r0, r1
 23fc2d8:	9101      	str	r1, [sp, #4]
 23fc2da:	f7fc fbe3 	bl	23f8aa4 <strlen>
 23fc2de:	4602      	mov	r2, r0
 23fc2e0:	4620      	mov	r0, r4
 23fc2e2:	6823      	ldr	r3, [r4, #0]
 23fc2e4:	9901      	ldr	r1, [sp, #4]
 23fc2e6:	68db      	ldr	r3, [r3, #12]
}
 23fc2e8:	b002      	add	sp, #8
 23fc2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fc2ee:	4718      	bx	r3

023fc2f0 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fc2f0:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc2f2:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fc2f4:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc2f8:	2201      	movs	r2, #1
 23fc2fa:	68db      	ldr	r3, [r3, #12]
 23fc2fc:	f10d 0107 	add.w	r1, sp, #7
 23fc300:	4798      	blx	r3
}
 23fc302:	b003      	add	sp, #12
 23fc304:	f85d fb04 	ldr.w	pc, [sp], #4

023fc308 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fc308:	680a      	ldr	r2, [r1, #0]
 23fc30a:	b510      	push	{r4, lr}
 23fc30c:	6002      	str	r2, [r0, #0]
 23fc30e:	684a      	ldr	r2, [r1, #4]
 23fc310:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fc312:	2200      	movs	r2, #0
 23fc314:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fc318:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc31a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc31c:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc31e:	6084      	str	r4, [r0, #8]
 23fc320:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc322:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fc324:	60c4      	str	r4, [r0, #12]
 23fc326:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc328:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fc32a:	6104      	str	r4, [r0, #16]
 23fc32c:	bd10      	pop	{r4, pc}
	...

023fc330 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fc334:	f04f 0a14 	mov.w	sl, #20
 23fc338:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fc33c:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fc33e:	4645      	mov	r5, r8
 23fc340:	fb0a f404 	mul.w	r4, sl, r4
 23fc344:	9300      	str	r3, [sp, #0]
 23fc346:	4b17      	ldr	r3, [pc, #92]	; (23fc3a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc348:	10a4      	asrs	r4, r4, #2
 23fc34a:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fc34c:	2c00      	cmp	r4, #0
 23fc34e:	dd21      	ble.n	23fc394 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fc350:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fc352:	fb0a f006 	mul.w	r0, sl, r6
 23fc356:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fc35a:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fc35e:	463a      	mov	r2, r7
 23fc360:	455f      	cmp	r7, fp
 23fc362:	bf28      	it	cs
 23fc364:	465a      	movcs	r2, fp
 23fc366:	5828      	ldr	r0, [r5, r0]
 23fc368:	9101      	str	r1, [sp, #4]
 23fc36a:	f002 fa4a 	bl	23fe802 <strncmp>
                if (cmp == 0) {
 23fc36e:	2800      	cmp	r0, #0
 23fc370:	f04f 0301 	mov.w	r3, #1
 23fc374:	9901      	ldr	r1, [sp, #4]
 23fc376:	d10b      	bne.n	23fc390 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fc378:	455f      	cmp	r7, fp
 23fc37a:	d103      	bne.n	23fc384 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fc37c:	9a00      	ldr	r2, [sp, #0]
 23fc37e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fc380:	4634      	mov	r4, r6
 23fc382:	e7e3      	b.n	23fc34c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fc384:	d9fc      	bls.n	23fc380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fc386:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fc388:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fc38c:	3e01      	subs	r6, #1
 23fc38e:	e7f7      	b.n	23fc380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fc390:	dbf9      	blt.n	23fc386 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fc392:	e7f5      	b.n	23fc380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fc394:	eba5 0508 	sub.w	r5, r5, r8
}
 23fc398:	4802      	ldr	r0, [pc, #8]	; (23fc3a4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fc39a:	10ad      	asrs	r5, r5, #2
 23fc39c:	4368      	muls	r0, r5
 23fc39e:	b003      	add	sp, #12
 23fc3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fc3a4:	cccccccd 	.word	0xcccccccd

023fc3a8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc3a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fc3aa:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fc3ac:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fc3ae:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fc3b0:	b303      	cbz	r3, 23fc3f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fc3b2:	b1f9      	cbz	r1, 23fc3f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fc3b4:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fc3b6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fc3ba:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fc3bc:	a903      	add	r1, sp, #12
 23fc3be:	a801      	add	r0, sp, #4
 23fc3c0:	f7ff ff21 	bl	23fc206 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fc3c4:	4601      	mov	r1, r0
 23fc3c6:	b1a8      	cbz	r0, 23fc3f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc3c8:	f10d 030b 	add.w	r3, sp, #11
 23fc3cc:	4620      	mov	r0, r4
 23fc3ce:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fc3d0:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fc3d4:	f7ff ffac 	bl	23fc330 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fc3d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fc3dc:	b153      	cbz	r3, 23fc3f4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fc3de:	6823      	ldr	r3, [r4, #0]
 23fc3e0:	2414      	movs	r4, #20
 23fc3e2:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fc3e6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fc3ea:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fc3ec:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fc3ee:	bfa8      	it	ge
 23fc3f0:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fc3f2:	e7e3      	b.n	23fc3bc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fc3f4:	4628      	mov	r0, r5
 23fc3f6:	b004      	add	sp, #16
 23fc3f8:	bd70      	pop	{r4, r5, r6, pc}

023fc3fa <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fc3fa:	b40e      	push	{r1, r2, r3}
 23fc3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc3fe:	b08c      	sub	sp, #48	; 0x30
 23fc400:	af00      	add	r7, sp, #0
 23fc402:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fc406:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc40a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc40c:	462b      	mov	r3, r5
 23fc40e:	2120      	movs	r1, #32
 23fc410:	f107 0010 	add.w	r0, r7, #16
 23fc414:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc416:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc418:	f7ff f91c 	bl	23fb654 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fc41c:	281f      	cmp	r0, #31
 23fc41e:	687a      	ldr	r2, [r7, #4]
 23fc420:	d91a      	bls.n	23fc458 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fc422:	f100 0308 	add.w	r3, r0, #8
 23fc426:	f023 0307 	bic.w	r3, r3, #7
        }
 23fc42a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fc42c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc430:	1c41      	adds	r1, r0, #1
 23fc432:	462b      	mov	r3, r5
 23fc434:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc436:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc438:	f7ff f90c 	bl	23fb654 <vsnprintf>
        if (n > 0) {
 23fc43c:	1e02      	subs	r2, r0, #0
 23fc43e:	dd04      	ble.n	23fc44a <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fc440:	6823      	ldr	r3, [r4, #0]
 23fc442:	4669      	mov	r1, sp
 23fc444:	4620      	mov	r0, r4
 23fc446:	68db      	ldr	r3, [r3, #12]
 23fc448:	4798      	blx	r3
 23fc44a:	46b5      	mov	sp, r6
}
 23fc44c:	3730      	adds	r7, #48	; 0x30
 23fc44e:	46bd      	mov	sp, r7
 23fc450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc454:	b003      	add	sp, #12
 23fc456:	4770      	bx	lr
    } else if (n > 0) {
 23fc458:	2800      	cmp	r0, #0
 23fc45a:	d0f7      	beq.n	23fc44c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fc45c:	6823      	ldr	r3, [r4, #0]
 23fc45e:	4602      	mov	r2, r0
 23fc460:	68db      	ldr	r3, [r3, #12]
 23fc462:	4620      	mov	r0, r4
 23fc464:	f107 0110 	add.w	r1, r7, #16
 23fc468:	4798      	blx	r3
}
 23fc46a:	e7ef      	b.n	23fc44c <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fc46c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fc46c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fc46e:	4c08      	ldr	r4, [pc, #32]	; (23fc490 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fc470:	e8d4 3f8f 	ldab	r3, [r4]
 23fc474:	07db      	lsls	r3, r3, #31
 23fc476:	d409      	bmi.n	23fc48c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc478:	4620      	mov	r0, r4
 23fc47a:	f7fc fb4d 	bl	23f8b18 <__cxa_guard_acquire>
 23fc47e:	b128      	cbz	r0, 23fc48c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fc480:	4620      	mov	r0, r4
 23fc482:	f7fc fb4e 	bl	23f8b22 <__cxa_guard_release>
 23fc486:	4803      	ldr	r0, [pc, #12]	; (23fc494 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fc488:	f002 f912 	bl	23fe6b0 <atexit>
}
 23fc48c:	4802      	ldr	r0, [pc, #8]	; (23fc498 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fc48e:	bd10      	pop	{r4, pc}
 23fc490:	1007ae74 	.word	0x1007ae74
 23fc494:	023fc1ff 	.word	0x023fc1ff
 23fc498:	1007ad3c 	.word	0x1007ad3c

023fc49c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fc49c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fc49e:	4c08      	ldr	r4, [pc, #32]	; (23fc4c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fc4a0:	e8d4 3f8f 	ldab	r3, [r4]
 23fc4a4:	07db      	lsls	r3, r3, #31
 23fc4a6:	d409      	bmi.n	23fc4bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc4a8:	4620      	mov	r0, r4
 23fc4aa:	f7fc fb35 	bl	23f8b18 <__cxa_guard_acquire>
 23fc4ae:	b128      	cbz	r0, 23fc4bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fc4b0:	4620      	mov	r0, r4
 23fc4b2:	f7fc fb36 	bl	23f8b22 <__cxa_guard_release>
 23fc4b6:	4803      	ldr	r0, [pc, #12]	; (23fc4c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fc4b8:	f002 f8fa 	bl	23fe6b0 <atexit>
    return &factory;
}
 23fc4bc:	4802      	ldr	r0, [pc, #8]	; (23fc4c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fc4be:	bd10      	pop	{r4, pc}
 23fc4c0:	1007ae78 	.word	0x1007ae78
 23fc4c4:	023fc267 	.word	0x023fc267
 23fc4c8:	1007ad40 	.word	0x1007ad40

023fc4cc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fc4cc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fc4ce:	2500      	movs	r5, #0
 23fc4d0:	4604      	mov	r4, r0
 23fc4d2:	e9c0 5500 	strd	r5, r5, [r0]
 23fc4d6:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fc4da:	6085      	str	r5, [r0, #8]
 23fc4dc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fc4de:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fc4e2:	f7fe fc3b 	bl	23fad5c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fc4e6:	f7ff ffc1 	bl	23fc46c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fc4ea:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fc4ec:	f7ff ffd6 	bl	23fc49c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fc4f0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fc4f2:	6220      	str	r0, [r4, #32]
}
 23fc4f4:	4620      	mov	r0, r4
 23fc4f6:	bd38      	pop	{r3, r4, r5, pc}

023fc4f8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fc4f8:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fc4fa:	4c0a      	ldr	r4, [pc, #40]	; (23fc524 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fc4fc:	e8d4 3f8f 	ldab	r3, [r4]
 23fc500:	07db      	lsls	r3, r3, #31
 23fc502:	d40c      	bmi.n	23fc51e <_ZN5spark10LogManager8instanceEv+0x26>
 23fc504:	4620      	mov	r0, r4
 23fc506:	f7fc fb07 	bl	23f8b18 <__cxa_guard_acquire>
 23fc50a:	b140      	cbz	r0, 23fc51e <_ZN5spark10LogManager8instanceEv+0x26>
 23fc50c:	4806      	ldr	r0, [pc, #24]	; (23fc528 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fc50e:	f7ff ffdd 	bl	23fc4cc <_ZN5spark10LogManagerC1Ev>
 23fc512:	4620      	mov	r0, r4
 23fc514:	f7fc fb05 	bl	23f8b22 <__cxa_guard_release>
 23fc518:	4804      	ldr	r0, [pc, #16]	; (23fc52c <_ZN5spark10LogManager8instanceEv+0x34>)
 23fc51a:	f002 f8c9 	bl	23fe6b0 <atexit>
    return &mgr;
}
 23fc51e:	4802      	ldr	r0, [pc, #8]	; (23fc528 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fc520:	bd10      	pop	{r4, pc}
 23fc522:	bf00      	nop
 23fc524:	1007ae70 	.word	0x1007ae70
 23fc528:	1007ae80 	.word	0x1007ae80
 23fc52c:	023fca49 	.word	0x023fca49

023fc530 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fc530:	2300      	movs	r3, #0
 23fc532:	4a02      	ldr	r2, [pc, #8]	; (23fc53c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fc534:	4902      	ldr	r1, [pc, #8]	; (23fc540 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fc536:	4803      	ldr	r0, [pc, #12]	; (23fc544 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fc538:	f7fe bea2 	b.w	23fb280 <log_set_callbacks>
 23fc53c:	023fc831 	.word	0x023fc831
 23fc540:	023fc7bd 	.word	0x023fc7bd
 23fc544:	023fc73d 	.word	0x023fc73d

023fc548 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fc548:	2300      	movs	r3, #0
 23fc54a:	461a      	mov	r2, r3
 23fc54c:	4619      	mov	r1, r3
 23fc54e:	4618      	mov	r0, r3
 23fc550:	f7fe be96 	b.w	23fb280 <log_set_callbacks>

023fc554 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fc554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc556:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fc558:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fc55a:	4668      	mov	r0, sp
 23fc55c:	f7ff fea2 	bl	23fc2a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc560:	466a      	mov	r2, sp
 23fc562:	4629      	mov	r1, r5
 23fc564:	4620      	mov	r0, r4
 23fc566:	f001 fd1d 	bl	23fdfa4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fc56a:	a801      	add	r0, sp, #4
 23fc56c:	f7fc fb32 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc570:	4620      	mov	r0, r4
 23fc572:	b003      	add	sp, #12
 23fc574:	bd30      	pop	{r4, r5, pc}

023fc576 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fc576:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc578:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fc57a:	68cd      	ldr	r5, [r1, #12]
 23fc57c:	4668      	mov	r0, sp
 23fc57e:	f7ff fe91 	bl	23fc2a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc582:	466a      	mov	r2, sp
 23fc584:	4629      	mov	r1, r5
 23fc586:	4620      	mov	r0, r4
 23fc588:	f001 fce8 	bl	23fdf5c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc58c:	a801      	add	r0, sp, #4
 23fc58e:	f7fc fb21 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc592:	4620      	mov	r0, r4
 23fc594:	b003      	add	sp, #12
 23fc596:	bd30      	pop	{r4, r5, pc}

023fc598 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fc598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc59a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fc59c:	690d      	ldr	r5, [r1, #16]
 23fc59e:	4668      	mov	r0, sp
 23fc5a0:	f7ff fe80 	bl	23fc2a4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fc5a4:	466a      	mov	r2, sp
 23fc5a6:	4629      	mov	r1, r5
 23fc5a8:	4620      	mov	r0, r4
 23fc5aa:	f001 fc80 	bl	23fdeae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fc5ae:	a801      	add	r0, sp, #4
 23fc5b0:	f7fc fb10 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc5b4:	4620      	mov	r0, r4
 23fc5b6:	b003      	add	sp, #12
 23fc5b8:	bd30      	pop	{r4, r5, pc}
	...

023fc5bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fc5bc:	b570      	push	{r4, r5, r6, lr}
 23fc5be:	b08a      	sub	sp, #40	; 0x28
 23fc5c0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fc5c2:	4601      	mov	r1, r0
 23fc5c4:	a804      	add	r0, sp, #16
 23fc5c6:	f7ff ffc5 	bl	23fc554 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fc5ca:	4e14      	ldr	r6, [pc, #80]	; (23fc61c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fc5cc:	a804      	add	r0, sp, #16
 23fc5ce:	f001 fd01 	bl	23fdfd4 <_ZN5spark18JSONObjectIterator4nextEv>
 23fc5d2:	b1e8      	cbz	r0, 23fc610 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fc5d4:	4668      	mov	r0, sp
 23fc5d6:	a904      	add	r1, sp, #16
 23fc5d8:	f7ff ffcd 	bl	23fc576 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fc5dc:	4631      	mov	r1, r6
 23fc5de:	9802      	ldr	r0, [sp, #8]
 23fc5e0:	f7ff fe3a 	bl	23fc258 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fc5e4:	4604      	mov	r4, r0
 23fc5e6:	b110      	cbz	r0, 23fc5ee <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fc5e8:	1e2c      	subs	r4, r5, #0
 23fc5ea:	bf18      	it	ne
 23fc5ec:	2401      	movne	r4, #1
 23fc5ee:	a801      	add	r0, sp, #4
 23fc5f0:	f7fc faf0 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc5f4:	2c00      	cmp	r4, #0
 23fc5f6:	d0e9      	beq.n	23fc5cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fc5f8:	4668      	mov	r0, sp
 23fc5fa:	a904      	add	r1, sp, #16
 23fc5fc:	f7ff ffcc 	bl	23fc598 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fc600:	4668      	mov	r0, sp
 23fc602:	f001 fc8a 	bl	23fdf1a <_ZNK5spark9JSONValue5toIntEv>
 23fc606:	6028      	str	r0, [r5, #0]
 23fc608:	a801      	add	r0, sp, #4
 23fc60a:	f7fc fae3 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fc60e:	e7dd      	b.n	23fc5cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fc610:	a805      	add	r0, sp, #20
 23fc612:	f7fc fadf 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fc616:	b00a      	add	sp, #40	; 0x28
 23fc618:	bd70      	pop	{r4, r5, r6, pc}
 23fc61a:	bf00      	nop
 23fc61c:	023ffb00 	.word	0x023ffb00

023fc620 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fc620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc622:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fc624:	4913      	ldr	r1, [pc, #76]	; (23fc674 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fc626:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fc628:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fc62a:	f7fc fa31 	bl	23f8a90 <strcmp>
 23fc62e:	b950      	cbnz	r0, 23fc646 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fc630:	f001 f9c4 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23fc634:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc638:	f001 f9ae 	bl	23fd998 <_ZN9USBSerial5beginEl>
}
 23fc63c:	b003      	add	sp, #12
 23fc63e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fc642:	f001 b9bb 	b.w	23fd9bc <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fc646:	4620      	mov	r0, r4
 23fc648:	490b      	ldr	r1, [pc, #44]	; (23fc678 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fc64a:	f7fc fa21 	bl	23f8a90 <strcmp>
 23fc64e:	b978      	cbnz	r0, 23fc670 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fc650:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fc654:	a901      	add	r1, sp, #4
 23fc656:	4628      	mov	r0, r5
        int baud = 9600;
 23fc658:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fc65a:	f7ff ffaf 	bl	23fc5bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fc65e:	f001 fe3b 	bl	23fe2d8 <_Z22__fetch_global_Serial1v>
 23fc662:	9901      	ldr	r1, [sp, #4]
 23fc664:	f001 fa24 	bl	23fdab0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fc668:	f001 fe36 	bl	23fe2d8 <_Z22__fetch_global_Serial1v>
}
 23fc66c:	b003      	add	sp, #12
 23fc66e:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fc670:	2000      	movs	r0, #0
 23fc672:	e7fb      	b.n	23fc66c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fc674:	023ffb05 	.word	0x023ffb05
 23fc678:	023ffb0c 	.word	0x023ffb0c

023fc67c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc67c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fc67e:	2614      	movs	r6, #20
 23fc680:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc684:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc686:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc68a:	42ae      	cmp	r6, r5
 23fc68c:	d005      	beq.n	23fc69a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fc68e:	f105 0008 	add.w	r0, r5, #8
 23fc692:	f7ff fff3 	bl	23fc67c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc696:	3514      	adds	r5, #20
 23fc698:	e7f7      	b.n	23fc68a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fc69a:	6820      	ldr	r0, [r4, #0]
 23fc69c:	f7fe ffbe 	bl	23fb61c <free>
}
 23fc6a0:	4620      	mov	r0, r4
 23fc6a2:	bd70      	pop	{r4, r5, r6, pc}

023fc6a4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fc6a4:	b510      	push	{r4, lr}
 23fc6a6:	4604      	mov	r4, r0
 23fc6a8:	300c      	adds	r0, #12
 23fc6aa:	f7ff ffe7 	bl	23fc67c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fc6ae:	4620      	mov	r0, r4
 23fc6b0:	f7ff fb4f 	bl	23fbd52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fc6b4:	4620      	mov	r0, r4
 23fc6b6:	bd10      	pop	{r4, pc}

023fc6b8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fc6b8:	b510      	push	{r4, lr}
 23fc6ba:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fc6bc:	4b03      	ldr	r3, [pc, #12]	; (23fc6cc <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fc6be:	f840 3b04 	str.w	r3, [r0], #4
 23fc6c2:	f7ff ffef 	bl	23fc6a4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fc6c6:	4620      	mov	r0, r4
 23fc6c8:	bd10      	pop	{r4, pc}
 23fc6ca:	bf00      	nop
 23fc6cc:	023fecd0 	.word	0x023fecd0

023fc6d0 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fc6d0:	b510      	push	{r4, lr}
 23fc6d2:	4604      	mov	r4, r0
 23fc6d4:	f7ff fff0 	bl	23fc6b8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fc6d8:	4620      	mov	r0, r4
 23fc6da:	2124      	movs	r1, #36	; 0x24
 23fc6dc:	f7fc fa0d 	bl	23f8afa <_ZdlPvj>
 23fc6e0:	4620      	mov	r0, r4
 23fc6e2:	bd10      	pop	{r4, pc}

023fc6e4 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fc6e4:	b510      	push	{r4, lr}
 23fc6e6:	4604      	mov	r4, r0
 23fc6e8:	4b02      	ldr	r3, [pc, #8]	; (23fc6f4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fc6ea:	6003      	str	r3, [r0, #0]
 23fc6ec:	f7ff ffe4 	bl	23fc6b8 <_ZN5spark16StreamLogHandlerD1Ev>
 23fc6f0:	4620      	mov	r0, r4
 23fc6f2:	bd10      	pop	{r4, pc}
 23fc6f4:	023ffbac 	.word	0x023ffbac

023fc6f8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fc6f8:	b510      	push	{r4, lr}
 23fc6fa:	4604      	mov	r4, r0
 23fc6fc:	f7ff fff2 	bl	23fc6e4 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fc700:	4620      	mov	r0, r4
 23fc702:	2124      	movs	r1, #36	; 0x24
 23fc704:	f7fc f9f9 	bl	23f8afa <_ZdlPvj>
 23fc708:	4620      	mov	r0, r4
 23fc70a:	bd10      	pop	{r4, pc}

023fc70c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23fc70c:	2200      	movs	r2, #0
 23fc70e:	e9c0 2200 	strd	r2, r2, [r0]
 23fc712:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fc714:	b510      	push	{r4, lr}
 23fc716:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc718:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fc71a:	6004      	str	r4, [r0, #0]
 23fc71c:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc71e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fc720:	6044      	str	r4, [r0, #4]
 23fc722:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fc724:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc726:	6084      	str	r4, [r0, #8]
}
 23fc728:	bd10      	pop	{r4, pc}

023fc72a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fc72a:	b510      	push	{r4, lr}
 23fc72c:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fc72e:	6803      	ldr	r3, [r0, #0]
 23fc730:	6818      	ldr	r0, [r3, #0]
 23fc732:	f7fe fb3d 	bl	23fadb0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fc736:	4620      	mov	r0, r4
 23fc738:	bd10      	pop	{r4, pc}
	...

023fc73c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fc73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc740:	b087      	sub	sp, #28
 23fc742:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fc744:	4b1c      	ldr	r3, [pc, #112]	; (23fc7b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fc746:	4680      	mov	r8, r0
 23fc748:	685b      	ldr	r3, [r3, #4]
 23fc74a:	4689      	mov	r9, r1
 23fc74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fc750:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fc752:	b96b      	cbnz	r3, 23fc770 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fc754:	f7ff fed0 	bl	23fc4f8 <_ZN5spark10LogManager8instanceEv>
 23fc758:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc75a:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fc75e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc760:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fc762:	f7ff fd77 	bl	23fc254 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fc766:	7b23      	ldrb	r3, [r4, #12]
 23fc768:	b12b      	cbz	r3, 23fc776 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fc76a:	a805      	add	r0, sp, #20
 23fc76c:	f7ff ffdd 	bl	23fc72a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fc770:	b007      	add	sp, #28
 23fc772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fc776:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fc778:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fc77c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fc77e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fc782:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc786:	45aa      	cmp	sl, r5
 23fc788:	d012      	beq.n	23fc7b0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fc78a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fc78e:	4631      	mov	r1, r6
 23fc790:	1d38      	adds	r0, r7, #4
 23fc792:	f7ff fe09 	bl	23fc3a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fc796:	4581      	cmp	r9, r0
 23fc798:	d3f5      	bcc.n	23fc786 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fc79a:	9a03      	ldr	r2, [sp, #12]
 23fc79c:	683b      	ldr	r3, [r7, #0]
 23fc79e:	9200      	str	r2, [sp, #0]
 23fc7a0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fc7a4:	464a      	mov	r2, r9
 23fc7a6:	4633      	mov	r3, r6
 23fc7a8:	4641      	mov	r1, r8
 23fc7aa:	4638      	mov	r0, r7
 23fc7ac:	47d8      	blx	fp
 23fc7ae:	e7ea      	b.n	23fc786 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fc7b0:	2300      	movs	r3, #0
 23fc7b2:	7323      	strb	r3, [r4, #12]
 23fc7b4:	e7d9      	b.n	23fc76a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fc7b6:	bf00      	nop
 23fc7b8:	e000ed00 	.word	0xe000ed00

023fc7bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fc7bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fc7c0:	469b      	mov	fp, r3
 23fc7c2:	4b1a      	ldr	r3, [pc, #104]	; (23fc82c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fc7c4:	4680      	mov	r8, r0
 23fc7c6:	685b      	ldr	r3, [r3, #4]
 23fc7c8:	4689      	mov	r9, r1
 23fc7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fc7ce:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fc7d0:	b96b      	cbnz	r3, 23fc7ee <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fc7d2:	f7ff fe91 	bl	23fc4f8 <_ZN5spark10LogManager8instanceEv>
 23fc7d6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc7d8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc7dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc7de:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fc7e0:	f7ff fd38 	bl	23fc254 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fc7e4:	7b23      	ldrb	r3, [r4, #12]
 23fc7e6:	b12b      	cbz	r3, 23fc7f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fc7e8:	a801      	add	r0, sp, #4
 23fc7ea:	f7ff ff9e 	bl	23fc72a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fc7ee:	b003      	add	sp, #12
 23fc7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fc7f4:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fc7f6:	b2f6      	uxtb	r6, r6
 23fc7f8:	7323      	strb	r3, [r4, #12]
 23fc7fa:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fc7fe:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc802:	4555      	cmp	r5, sl
 23fc804:	d00e      	beq.n	23fc824 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fc806:	f855 7b04 	ldr.w	r7, [r5], #4
 23fc80a:	4659      	mov	r1, fp
 23fc80c:	1d38      	adds	r0, r7, #4
 23fc80e:	f7ff fdcb 	bl	23fc3a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fc812:	4286      	cmp	r6, r0
 23fc814:	d3f5      	bcc.n	23fc802 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fc816:	683b      	ldr	r3, [r7, #0]
 23fc818:	464a      	mov	r2, r9
 23fc81a:	4641      	mov	r1, r8
 23fc81c:	4638      	mov	r0, r7
 23fc81e:	68db      	ldr	r3, [r3, #12]
 23fc820:	4798      	blx	r3
 23fc822:	e7ee      	b.n	23fc802 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fc824:	2300      	movs	r3, #0
 23fc826:	7323      	strb	r3, [r4, #12]
 23fc828:	e7de      	b.n	23fc7e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fc82a:	bf00      	nop
 23fc82c:	e000ed00 	.word	0xe000ed00

023fc830 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fc830:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fc834:	4b16      	ldr	r3, [pc, #88]	; (23fc890 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fc836:	4605      	mov	r5, r0
 23fc838:	685b      	ldr	r3, [r3, #4]
 23fc83a:	460f      	mov	r7, r1
 23fc83c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fc840:	bb1b      	cbnz	r3, 23fc88a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fc842:	f7ff fe59 	bl	23fc4f8 <_ZN5spark10LogManager8instanceEv>
 23fc846:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fc848:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc84c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc84e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fc850:	f7ff fd00 	bl	23fc254 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fc854:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fc858:	2446      	movs	r4, #70	; 0x46
 23fc85a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fc85e:	45b0      	cmp	r8, r6
 23fc860:	d109      	bne.n	23fc876 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fc862:	a801      	add	r0, sp, #4
 23fc864:	f7ff ff61 	bl	23fc72a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fc868:	42a5      	cmp	r5, r4
 23fc86a:	bfb4      	ite	lt
 23fc86c:	2000      	movlt	r0, #0
 23fc86e:	2001      	movge	r0, #1
}
 23fc870:	b002      	add	sp, #8
 23fc872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fc876:	f856 0b04 	ldr.w	r0, [r6], #4
 23fc87a:	4639      	mov	r1, r7
 23fc87c:	3004      	adds	r0, #4
 23fc87e:	f7ff fd93 	bl	23fc3a8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fc882:	4284      	cmp	r4, r0
 23fc884:	bfa8      	it	ge
 23fc886:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fc888:	e7e9      	b.n	23fc85e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fc88a:	2000      	movs	r0, #0
 23fc88c:	e7f0      	b.n	23fc870 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fc88e:	bf00      	nop
 23fc890:	e000ed00 	.word	0xe000ed00

023fc894 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc896:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fc89a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fc89c:	4604      	mov	r4, r0
 23fc89e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fc8a0:	db0d      	blt.n	23fc8be <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fc8a2:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fc8a4:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fc8a6:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fc8a8:	dd04      	ble.n	23fc8b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fc8aa:	00b9      	lsls	r1, r7, #2
 23fc8ac:	f7fe fec4 	bl	23fb638 <realloc>
            if (!d) {
 23fc8b0:	b918      	cbnz	r0, 23fc8ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fc8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fc8b4:	f7fe feb2 	bl	23fb61c <free>
        T* d = nullptr;
 23fc8b8:	2000      	movs	r0, #0
        data_ = d;
 23fc8ba:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fc8bc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fc8be:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fc8c0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fc8c2:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fc8c6:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc8c8:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fc8cc:	1d08      	adds	r0, r1, #4
 23fc8ce:	f001 ff0a 	bl	23fe6e6 <memmove>
    new(p) T(std::move(value));
 23fc8d2:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fc8d6:	6863      	ldr	r3, [r4, #4]
    return true;
 23fc8d8:	2001      	movs	r0, #1
    ++size_;
 23fc8da:	3301      	adds	r3, #1
 23fc8dc:	6063      	str	r3, [r4, #4]
    return true;
 23fc8de:	e7e8      	b.n	23fc8b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fc8e0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fc8e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc8e2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fc8e4:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc8e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc8ea:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fc8ec:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fc8ee:	f7ff fcb1 	bl	23fc254 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fc8f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fc8f6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fc8fa:	4293      	cmp	r3, r2
 23fc8fc:	4619      	mov	r1, r3
 23fc8fe:	d00a      	beq.n	23fc916 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fc900:	6809      	ldr	r1, [r1, #0]
 23fc902:	3304      	adds	r3, #4
 23fc904:	42a9      	cmp	r1, r5
 23fc906:	d1f8      	bne.n	23fc8fa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fc908:	a801      	add	r0, sp, #4
 23fc90a:	f7ff ff0e 	bl	23fc72a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fc90e:	2500      	movs	r5, #0
}
 23fc910:	4628      	mov	r0, r5
 23fc912:	b003      	add	sp, #12
 23fc914:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fc916:	4629      	mov	r1, r5
 23fc918:	4620      	mov	r0, r4
 23fc91a:	f7ff ffbb 	bl	23fc894 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fc91e:	4605      	mov	r5, r0
 23fc920:	2800      	cmp	r0, #0
 23fc922:	d0f1      	beq.n	23fc908 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fc924:	6863      	ldr	r3, [r4, #4]
 23fc926:	2b01      	cmp	r3, #1
 23fc928:	d101      	bne.n	23fc92e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fc92a:	f7ff fe01 	bl	23fc530 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fc92e:	a801      	add	r0, sp, #4
 23fc930:	f7ff fefb 	bl	23fc72a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fc934:	e7ec      	b.n	23fc910 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fc936 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fc936:	460b      	mov	r3, r1
 23fc938:	b570      	push	{r4, r5, r6, lr}
 23fc93a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fc93c:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fc940:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fc944:	4282      	cmp	r2, r0
 23fc946:	d00f      	beq.n	23fc968 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fc948:	4601      	mov	r1, r0
            if (*p == value) {
 23fc94a:	681d      	ldr	r5, [r3, #0]
 23fc94c:	f851 6b04 	ldr.w	r6, [r1], #4
 23fc950:	42ae      	cmp	r6, r5
 23fc952:	d107      	bne.n	23fc964 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fc954:	1a52      	subs	r2, r2, r1
 23fc956:	f001 fec6 	bl	23fe6e6 <memmove>
    return true;
 23fc95a:	2001      	movs	r0, #1
    --size_;
 23fc95c:	6863      	ldr	r3, [r4, #4]
 23fc95e:	3b01      	subs	r3, #1
 23fc960:	6063      	str	r3, [r4, #4]
}
 23fc962:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fc964:	4608      	mov	r0, r1
 23fc966:	e7ed      	b.n	23fc944 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fc968:	2000      	movs	r0, #0
 23fc96a:	e7fa      	b.n	23fc962 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fc96c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fc96c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fc96e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fc970:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fc974:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fc976:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fc978:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fc97a:	f7ff fc6b 	bl	23fc254 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fc97e:	4620      	mov	r0, r4
 23fc980:	a901      	add	r1, sp, #4
 23fc982:	f7ff ffd8 	bl	23fc936 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fc986:	b118      	cbz	r0, 23fc990 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fc988:	6863      	ldr	r3, [r4, #4]
 23fc98a:	b90b      	cbnz	r3, 23fc990 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fc98c:	f7ff fddc 	bl	23fc548 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fc990:	a803      	add	r0, sp, #12
 23fc992:	f7ff feca 	bl	23fc72a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fc996:	b004      	add	sp, #16
 23fc998:	bd10      	pop	{r4, pc}

023fc99a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fc99a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fc99c:	b570      	push	{r4, r5, r6, lr}
 23fc99e:	4604      	mov	r4, r0
 23fc9a0:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fc9a4:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fc9a8:	42ae      	cmp	r6, r5
 23fc9aa:	d015      	beq.n	23fc9d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fc9ac:	4620      	mov	r0, r4
 23fc9ae:	f105 0110 	add.w	r1, r5, #16
 23fc9b2:	f7ff ffc0 	bl	23fc936 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fc9b6:	6863      	ldr	r3, [r4, #4]
 23fc9b8:	b90b      	cbnz	r3, 23fc9be <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fc9ba:	f7ff fdc5 	bl	23fc548 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fc9be:	69e0      	ldr	r0, [r4, #28]
 23fc9c0:	6929      	ldr	r1, [r5, #16]
 23fc9c2:	6803      	ldr	r3, [r0, #0]
 23fc9c4:	68db      	ldr	r3, [r3, #12]
 23fc9c6:	4798      	blx	r3
        if (h.stream) {
 23fc9c8:	6969      	ldr	r1, [r5, #20]
 23fc9ca:	b119      	cbz	r1, 23fc9d4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fc9cc:	6a20      	ldr	r0, [r4, #32]
 23fc9ce:	6803      	ldr	r3, [r0, #0]
 23fc9d0:	68db      	ldr	r3, [r3, #12]
 23fc9d2:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fc9d4:	3518      	adds	r5, #24
 23fc9d6:	e7e7      	b.n	23fc9a8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fc9d8:	2618      	movs	r6, #24
 23fc9da:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fc9de:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc9e2:	42ae      	cmp	r6, r5
 23fc9e4:	d004      	beq.n	23fc9f0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fc9e6:	4628      	mov	r0, r5
 23fc9e8:	f7ff f8c4 	bl	23fbb74 <_ZN6StringD1Ev>
 23fc9ec:	3518      	adds	r5, #24
 23fc9ee:	e7f8      	b.n	23fc9e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fc9f0:	2300      	movs	r3, #0
 23fc9f2:	6163      	str	r3, [r4, #20]
}
 23fc9f4:	bd70      	pop	{r4, r5, r6, pc}

023fc9f6 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fc9f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fc9f8:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fc9fa:	f7ff fda5 	bl	23fc548 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fc9fe:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fca02:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fca04:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fca06:	f7ff fc25 	bl	23fc254 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fca0a:	4620      	mov	r0, r4
 23fca0c:	f7ff ffc5 	bl	23fc99a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fca10:	a801      	add	r0, sp, #4
 23fca12:	f7ff fe8a 	bl	23fc72a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fca16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fca18:	b108      	cbz	r0, 23fca1e <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fca1a:	f7fe f9ad 	bl	23fad78 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fca1e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fca22:	2618      	movs	r6, #24
 23fca24:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fca28:	42ae      	cmp	r6, r5
 23fca2a:	d004      	beq.n	23fca36 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fca2c:	4628      	mov	r0, r5
 23fca2e:	f7ff f8a1 	bl	23fbb74 <_ZN6StringD1Ev>
 23fca32:	3518      	adds	r5, #24
 23fca34:	e7f8      	b.n	23fca28 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fca36:	6920      	ldr	r0, [r4, #16]
 23fca38:	f7fe fdf0 	bl	23fb61c <free>
 23fca3c:	6820      	ldr	r0, [r4, #0]
 23fca3e:	f7fe fded 	bl	23fb61c <free>
}
 23fca42:	4620      	mov	r0, r4
 23fca44:	b002      	add	sp, #8
 23fca46:	bd70      	pop	{r4, r5, r6, pc}

023fca48 <__tcf_2>:
    static LogManager mgr;
 23fca48:	4801      	ldr	r0, [pc, #4]	; (23fca50 <__tcf_2+0x8>)
 23fca4a:	f7ff bfd4 	b.w	23fc9f6 <_ZN5spark10LogManagerD1Ev>
 23fca4e:	bf00      	nop
 23fca50:	1007ae80 	.word	0x1007ae80

023fca54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fca54:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fca56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fca58:	4604      	mov	r4, r0
 23fca5a:	460d      	mov	r5, r1
 23fca5c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fca5e:	d915      	bls.n	23fca8c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fca60:	4290      	cmp	r0, r2
 23fca62:	d214      	bcs.n	23fca8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fca64:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fca68:	1a75      	subs	r5, r6, r1
 23fca6a:	f1a1 0714 	sub.w	r7, r1, #20
 23fca6e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fca70:	42b7      	cmp	r7, r6
 23fca72:	d01a      	beq.n	23fcaaa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fca74:	b11c      	cbz	r4, 23fca7e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fca76:	4631      	mov	r1, r6
 23fca78:	4620      	mov	r0, r4
 23fca7a:	f7ff fc45 	bl	23fc308 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fca7e:	f106 0008 	add.w	r0, r6, #8
 23fca82:	f7ff fdfb 	bl	23fc67c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fca86:	3e14      	subs	r6, #20
 23fca88:	3c14      	subs	r4, #20
 23fca8a:	e7f1      	b.n	23fca70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fca8c:	d00d      	beq.n	23fcaaa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fca8e:	42b5      	cmp	r5, r6
 23fca90:	d00b      	beq.n	23fcaaa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fca92:	b11c      	cbz	r4, 23fca9c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fca94:	4629      	mov	r1, r5
 23fca96:	4620      	mov	r0, r4
 23fca98:	f7ff fc36 	bl	23fc308 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fca9c:	f105 0008 	add.w	r0, r5, #8
 23fcaa0:	f7ff fdec 	bl	23fc67c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fcaa4:	3514      	adds	r5, #20
 23fcaa6:	3414      	adds	r4, #20
 23fcaa8:	e7f1      	b.n	23fca8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fcaaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcaac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fcaac:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fcaae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fcab0:	4604      	mov	r4, r0
 23fcab2:	460d      	mov	r5, r1
 23fcab4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fcab6:	d914      	bls.n	23fcae2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fcab8:	4290      	cmp	r0, r2
 23fcaba:	d213      	bcs.n	23fcae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fcabc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fcac0:	1a75      	subs	r5, r6, r1
 23fcac2:	f1a1 0710 	sub.w	r7, r1, #16
 23fcac6:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fcac8:	42b7      	cmp	r7, r6
 23fcaca:	d018      	beq.n	23fcafe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fcacc:	b11c      	cbz	r4, 23fcad6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fcace:	4631      	mov	r1, r6
 23fcad0:	4620      	mov	r0, r4
 23fcad2:	f7ff f8cc 	bl	23fbc6e <_ZN6StringC1EOS_>
                end->~T();
 23fcad6:	4630      	mov	r0, r6
 23fcad8:	f7ff f84c 	bl	23fbb74 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fcadc:	3e10      	subs	r6, #16
 23fcade:	3c10      	subs	r4, #16
 23fcae0:	e7f2      	b.n	23fcac8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fcae2:	d00c      	beq.n	23fcafe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fcae4:	42b5      	cmp	r5, r6
 23fcae6:	d00a      	beq.n	23fcafe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fcae8:	b11c      	cbz	r4, 23fcaf2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fcaea:	4629      	mov	r1, r5
 23fcaec:	4620      	mov	r0, r4
 23fcaee:	f7ff f8be 	bl	23fbc6e <_ZN6StringC1EOS_>
                p->~T();
 23fcaf2:	4628      	mov	r0, r5
 23fcaf4:	f7ff f83e 	bl	23fbb74 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fcaf8:	3510      	adds	r5, #16
 23fcafa:	3410      	adds	r4, #16
 23fcafc:	e7f2      	b.n	23fcae4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fcafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fcb00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fcb00:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fcb02:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fcb04:	4605      	mov	r5, r0
        if (n > 0) {
 23fcb06:	dd11      	ble.n	23fcb2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fcb08:	0130      	lsls	r0, r6, #4
 23fcb0a:	f7fe fd79 	bl	23fb600 <malloc>
            if (!d) {
 23fcb0e:	4604      	mov	r4, r0
 23fcb10:	b158      	cbz	r0, 23fcb2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fcb12:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fcb16:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fcb1a:	f7ff ffc7 	bl	23fcaac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fcb1e:	6828      	ldr	r0, [r5, #0]
 23fcb20:	f7fe fd7c 	bl	23fb61c <free>
        return true;
 23fcb24:	2001      	movs	r0, #1
        data_ = d;
 23fcb26:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fcb28:	60ae      	str	r6, [r5, #8]
    }
 23fcb2a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fcb2c:	2400      	movs	r4, #0
 23fcb2e:	e7f6      	b.n	23fcb1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fcb30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fcb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcb34:	4690      	mov	r8, r2
        capacity_(0) {
 23fcb36:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fcb38:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fcb3a:	b095      	sub	sp, #84	; 0x54
 23fcb3c:	9103      	str	r1, [sp, #12]
    return size_;
 23fcb3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fcb42:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fcb44:	4299      	cmp	r1, r3
        capacity_(0) {
 23fcb46:	e9c0 3300 	strd	r3, r3, [r0]
 23fcb4a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fcb4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fcb52:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fcb56:	7602      	strb	r2, [r0, #24]
 23fcb58:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fcb5a:	dc23      	bgt.n	23fcba4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fcb5c:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fcb60:	2314      	movs	r3, #20
 23fcb62:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fcb66:	42af      	cmp	r7, r5
 23fcb68:	d03b      	beq.n	23fcbe2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fcb6a:	4629      	mov	r1, r5
 23fcb6c:	a80b      	add	r0, sp, #44	; 0x2c
 23fcb6e:	f7ff f87e 	bl	23fbc6e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fcb72:	a90b      	add	r1, sp, #44	; 0x2c
 23fcb74:	a80f      	add	r0, sp, #60	; 0x3c
 23fcb76:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fcb78:	f7ff f879 	bl	23fbc6e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcb7c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fcb80:	4299      	cmp	r1, r3
 23fcb82:	da1b      	bge.n	23fcbbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fcb84:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fcb86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fcb88:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fcb8c:	4631      	mov	r1, r6
 23fcb8e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fcb92:	f106 0010 	add.w	r0, r6, #16
 23fcb96:	f7ff ff89 	bl	23fcaac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fcb9a:	b9ee      	cbnz	r6, 23fcbd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fcb9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fcb9e:	3301      	adds	r3, #1
 23fcba0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fcba2:	e011      	b.n	23fcbc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fcba4:	a808      	add	r0, sp, #32
 23fcba6:	f7ff ffab 	bl	23fcb00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fcbaa:	2800      	cmp	r0, #0
 23fcbac:	d1d6      	bne.n	23fcb5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fcbae:	a808      	add	r0, sp, #32
 23fcbb0:	f7ff f8cf 	bl	23fbd52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fcbb4:	4620      	mov	r0, r4
 23fcbb6:	b015      	add	sp, #84	; 0x54
 23fcbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcbbc:	3101      	adds	r1, #1
 23fcbbe:	a808      	add	r0, sp, #32
 23fcbc0:	f7ff ff9e 	bl	23fcb00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fcbc4:	2800      	cmp	r0, #0
 23fcbc6:	d1dd      	bne.n	23fcb84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fcbc8:	a80f      	add	r0, sp, #60	; 0x3c
 23fcbca:	f7fe ffd3 	bl	23fbb74 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fcbce:	a80b      	add	r0, sp, #44	; 0x2c
 23fcbd0:	f7fe ffd0 	bl	23fbb74 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fcbd4:	3514      	adds	r5, #20
 23fcbd6:	e7c6      	b.n	23fcb66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fcbd8:	4630      	mov	r0, r6
 23fcbda:	a90f      	add	r1, sp, #60	; 0x3c
 23fcbdc:	f7ff f847 	bl	23fbc6e <_ZN6StringC1EOS_>
 23fcbe0:	e7dc      	b.n	23fcb9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fcbe2:	2600      	movs	r6, #0
 23fcbe4:	f04f 0914 	mov.w	r9, #20
 23fcbe8:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fcbec:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fcbee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fcbf2:	429e      	cmp	r6, r3
 23fcbf4:	da7c      	bge.n	23fccf0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23fcbf6:	0133      	lsls	r3, r6, #4
 23fcbf8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fcbfa:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fcbfc:	b90b      	cbnz	r3, 23fcc02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fcbfe:	3601      	adds	r6, #1
 23fcc00:	e7f5      	b.n	23fcbee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fcc02:	2300      	movs	r3, #0
 23fcc04:	9307      	str	r3, [sp, #28]
 23fcc06:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fcc0a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fcc0c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fcc0e:	a907      	add	r1, sp, #28
 23fcc10:	a806      	add	r0, sp, #24
 23fcc12:	f7ff faf8 	bl	23fc206 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fcc16:	4682      	mov	sl, r0
 23fcc18:	2800      	cmp	r0, #0
 23fcc1a:	d0f0      	beq.n	23fcbfe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fcc1c:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcc20:	4601      	mov	r1, r0
            bool found = false;
 23fcc22:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcc26:	4628      	mov	r0, r5
 23fcc28:	9a07      	ldr	r2, [sp, #28]
 23fcc2a:	f10d 0317 	add.w	r3, sp, #23
 23fcc2e:	f7ff fb7f 	bl	23fc330 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcc32:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fcc36:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fcc38:	2f00      	cmp	r7, #0
 23fcc3a:	d14a      	bne.n	23fccd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fcc3c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fcc40:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fcc44:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fcc48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fcc4c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fcc50:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fcc54:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fcc56:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fcc5a:	4293      	cmp	r3, r2
 23fcc5c:	db17      	blt.n	23fcc8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fcc5e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fcc62:	f1ba 0f00 	cmp.w	sl, #0
 23fcc66:	dd30      	ble.n	23fccca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fcc68:	fb09 f00a 	mul.w	r0, r9, sl
 23fcc6c:	f7fe fcc8 	bl	23fb600 <malloc>
            if (!d) {
 23fcc70:	4683      	mov	fp, r0
 23fcc72:	b360      	cbz	r0, 23fccce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fcc74:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fcc78:	fb09 1202 	mla	r2, r9, r2, r1
 23fcc7c:	f7ff feea 	bl	23fca54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fcc80:	6828      	ldr	r0, [r5, #0]
 23fcc82:	f7fe fccb 	bl	23fb61c <free>
        data_ = d;
 23fcc86:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fcc8a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fcc8e:	682b      	ldr	r3, [r5, #0]
 23fcc90:	9a01      	ldr	r2, [sp, #4]
 23fcc92:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fcc96:	686a      	ldr	r2, [r5, #4]
 23fcc98:	4651      	mov	r1, sl
 23fcc9a:	fb09 3202 	mla	r2, r9, r2, r3
 23fcc9e:	f10a 0014 	add.w	r0, sl, #20
 23fcca2:	f7ff fed7 	bl	23fca54 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fcca6:	f1ba 0f00 	cmp.w	sl, #0
 23fccaa:	d003      	beq.n	23fccb4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fccac:	4650      	mov	r0, sl
 23fccae:	a90f      	add	r1, sp, #60	; 0x3c
 23fccb0:	f7ff fb2a 	bl	23fc308 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fccb4:	686b      	ldr	r3, [r5, #4]
 23fccb6:	3301      	adds	r3, #1
 23fccb8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fccba:	a811      	add	r0, sp, #68	; 0x44
 23fccbc:	f7ff fcde 	bl	23fc67c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fccc0:	b13f      	cbz	r7, 23fccd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fccc2:	a80b      	add	r0, sp, #44	; 0x2c
 23fccc4:	f7ff fcda 	bl	23fc67c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fccc8:	e771      	b.n	23fcbae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fccca:	46bb      	mov	fp, r7
 23fcccc:	e7d8      	b.n	23fcc80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fccce:	2701      	movs	r7, #1
 23fccd0:	e7f3      	b.n	23fccba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fccd2:	9b01      	ldr	r3, [sp, #4]
 23fccd4:	682d      	ldr	r5, [r5, #0]
 23fccd6:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fccda:	9b06      	ldr	r3, [sp, #24]
 23fccdc:	781b      	ldrb	r3, [r3, #0]
 23fccde:	b92b      	cbnz	r3, 23fccec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fcce0:	f8d8 3000 	ldr.w	r3, [r8]
 23fcce4:	9a02      	ldr	r2, [sp, #8]
 23fcce6:	4413      	add	r3, r2
 23fcce8:	7c1b      	ldrb	r3, [r3, #16]
 23fccea:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fccec:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fccee:	e78e      	b.n	23fcc0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccf0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fccf2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccf4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fccf6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fccf8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fccfa:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fccfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fccfe:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcd00:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fcd02:	60a2      	str	r2, [r4, #8]
 23fcd04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fcd06:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcd08:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fcd0a:	60e2      	str	r2, [r4, #12]
 23fcd0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fcd0e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fcd10:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fcd12:	6122      	str	r2, [r4, #16]
 23fcd14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fcd16:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fcd18:	9b03      	ldr	r3, [sp, #12]
 23fcd1a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fcd1c:	6162      	str	r2, [r4, #20]
 23fcd1e:	7623      	strb	r3, [r4, #24]
 23fcd20:	e7cf      	b.n	23fccc2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fcd24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fcd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcd26:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fcd28:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fcd2a:	4617      	mov	r7, r2
 23fcd2c:	b087      	sub	sp, #28
 23fcd2e:	460d      	mov	r5, r1
        stream_(&stream) {
 23fcd30:	4668      	mov	r0, sp
 23fcd32:	4619      	mov	r1, r3
 23fcd34:	f7fc f85a 	bl	23f8dec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fcd38:	4b0b      	ldr	r3, [pc, #44]	; (23fcd68 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fcd3a:	4669      	mov	r1, sp
 23fcd3c:	f846 3b04 	str.w	r3, [r6], #4
 23fcd40:	a803      	add	r0, sp, #12
 23fcd42:	f7fc f853 	bl	23f8dec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fcd46:	4639      	mov	r1, r7
 23fcd48:	aa03      	add	r2, sp, #12
 23fcd4a:	4630      	mov	r0, r6
 23fcd4c:	f7ff fef0 	bl	23fcb30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcd50:	a803      	add	r0, sp, #12
 23fcd52:	f7fb fff7 	bl	23f8d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fcd56:	4668      	mov	r0, sp
 23fcd58:	f7fb fff4 	bl	23f8d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fcd5c:	4620      	mov	r0, r4
        stream_(&stream) {
 23fcd5e:	4b03      	ldr	r3, [pc, #12]	; (23fcd6c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fcd60:	6225      	str	r5, [r4, #32]
 23fcd62:	6023      	str	r3, [r4, #0]
}
 23fcd64:	b007      	add	sp, #28
 23fcd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fcd68:	023fecd0 	.word	0x023fecd0
 23fcd6c:	023ffb94 	.word	0x023ffb94

023fcd70 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fcd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fcd72:	460f      	mov	r7, r1
 23fcd74:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fcd76:	4638      	mov	r0, r7
 23fcd78:	491c      	ldr	r1, [pc, #112]	; (23fcdec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fcd7a:	4616      	mov	r6, r2
 23fcd7c:	461d      	mov	r5, r3
 23fcd7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fcd80:	f7fb fe86 	bl	23f8a90 <strcmp>
 23fcd84:	b9c0      	cbnz	r0, 23fcdb8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fcd86:	b1a4      	cbz	r4, 23fcdb2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fcd88:	4629      	mov	r1, r5
 23fcd8a:	a801      	add	r0, sp, #4
 23fcd8c:	f7ff fcbe 	bl	23fc70c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fcd90:	2024      	movs	r0, #36	; 0x24
 23fcd92:	4917      	ldr	r1, [pc, #92]	; (23fcdf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fcd94:	f001 fb70 	bl	23fe478 <_ZnwjRKSt9nothrow_t>
 23fcd98:	4605      	mov	r5, r0
 23fcd9a:	b130      	cbz	r0, 23fcdaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fcd9c:	ab01      	add	r3, sp, #4
 23fcd9e:	4632      	mov	r2, r6
 23fcda0:	4621      	mov	r1, r4
 23fcda2:	f7ff ffbf 	bl	23fcd24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcda6:	4b13      	ldr	r3, [pc, #76]	; (23fcdf4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fcda8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fcdaa:	a801      	add	r0, sp, #4
 23fcdac:	f7fb ffca 	bl	23f8d44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fcdb0:	462c      	mov	r4, r5
}
 23fcdb2:	4620      	mov	r0, r4
 23fcdb4:	b005      	add	sp, #20
 23fcdb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fcdb8:	4638      	mov	r0, r7
 23fcdba:	490f      	ldr	r1, [pc, #60]	; (23fcdf8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fcdbc:	f7fb fe68 	bl	23f8a90 <strcmp>
 23fcdc0:	b990      	cbnz	r0, 23fcde8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fcdc2:	2c00      	cmp	r4, #0
 23fcdc4:	d0f5      	beq.n	23fcdb2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fcdc6:	4629      	mov	r1, r5
 23fcdc8:	a801      	add	r0, sp, #4
 23fcdca:	f7ff fc9f 	bl	23fc70c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fcdce:	2024      	movs	r0, #36	; 0x24
 23fcdd0:	4907      	ldr	r1, [pc, #28]	; (23fcdf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fcdd2:	f001 fb51 	bl	23fe478 <_ZnwjRKSt9nothrow_t>
 23fcdd6:	4605      	mov	r5, r0
 23fcdd8:	2800      	cmp	r0, #0
 23fcdda:	d0e6      	beq.n	23fcdaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fcddc:	4632      	mov	r2, r6
 23fcdde:	4621      	mov	r1, r4
 23fcde0:	ab01      	add	r3, sp, #4
 23fcde2:	f7ff ff9f 	bl	23fcd24 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fcde6:	e7e0      	b.n	23fcdaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fcde8:	2400      	movs	r4, #0
 23fcdea:	e7e2      	b.n	23fcdb2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fcdec:	023ffb14 	.word	0x023ffb14
 23fcdf0:	023ffd41 	.word	0x023ffd41
 23fcdf4:	023ffbac 	.word	0x023ffbac
 23fcdf8:	023ffb18 	.word	0x023ffb18

023fcdfc <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fcdfc:	4b01      	ldr	r3, [pc, #4]	; (23fce04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fcdfe:	4a02      	ldr	r2, [pc, #8]	; (23fce08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fce00:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fce02:	4770      	bx	lr
 23fce04:	1007ae7c 	.word	0x1007ae7c
 23fce08:	023ffb29 	.word	0x023ffb29

023fce0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fce0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fce10:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fce12:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fce16:	4604      	mov	r4, r0
 23fce18:	460e      	mov	r6, r1
 23fce1a:	4617      	mov	r7, r2
 23fce1c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fce1e:	f000 fdcd 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23fce22:	4581      	cmp	r9, r0
 23fce24:	d04d      	beq.n	23fcec2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fce26:	792b      	ldrb	r3, [r5, #4]
 23fce28:	0719      	lsls	r1, r3, #28
 23fce2a:	d504      	bpl.n	23fce36 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fce2c:	4620      	mov	r0, r4
 23fce2e:	696a      	ldr	r2, [r5, #20]
 23fce30:	4954      	ldr	r1, [pc, #336]	; (23fcf84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fce32:	f7ff fae2 	bl	23fc3fa <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fce36:	f1b8 0f00 	cmp.w	r8, #0
 23fce3a:	d00d      	beq.n	23fce58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fce3c:	215b      	movs	r1, #91	; 0x5b
 23fce3e:	4620      	mov	r0, r4
 23fce40:	f7ff fa56 	bl	23fc2f0 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fce44:	4641      	mov	r1, r8
 23fce46:	4620      	mov	r0, r4
 23fce48:	f7ff fa43 	bl	23fc2d2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fce4c:	6823      	ldr	r3, [r4, #0]
 23fce4e:	2202      	movs	r2, #2
 23fce50:	4620      	mov	r0, r4
 23fce52:	68db      	ldr	r3, [r3, #12]
 23fce54:	494c      	ldr	r1, [pc, #304]	; (23fcf88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fce56:	4798      	blx	r3
    if (attr.has_file) {
 23fce58:	792b      	ldrb	r3, [r5, #4]
 23fce5a:	07da      	lsls	r2, r3, #31
 23fce5c:	d524      	bpl.n	23fcea8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fce5e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fce62:	212f      	movs	r1, #47	; 0x2f
 23fce64:	4640      	mov	r0, r8
 23fce66:	f001 fce0 	bl	23fe82a <strrchr>
    if (s1) {
 23fce6a:	b108      	cbz	r0, 23fce70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fce6c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fce70:	4641      	mov	r1, r8
 23fce72:	4620      	mov	r0, r4
 23fce74:	f7ff fa2d 	bl	23fc2d2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fce78:	792b      	ldrb	r3, [r5, #4]
 23fce7a:	079b      	lsls	r3, r3, #30
 23fce7c:	d508      	bpl.n	23fce90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fce7e:	213a      	movs	r1, #58	; 0x3a
 23fce80:	4620      	mov	r0, r4
 23fce82:	f7ff fa35 	bl	23fc2f0 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fce86:	4620      	mov	r0, r4
 23fce88:	68ea      	ldr	r2, [r5, #12]
 23fce8a:	4940      	ldr	r1, [pc, #256]	; (23fcf8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fce8c:	f7ff fab5 	bl	23fc3fa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fce90:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fce92:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fce94:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fce98:	4620      	mov	r0, r4
            write(", ", 2);
 23fce9a:	f04f 0202 	mov.w	r2, #2
 23fce9e:	68db      	ldr	r3, [r3, #12]
 23fcea0:	bf14      	ite	ne
 23fcea2:	493b      	ldrne	r1, [pc, #236]	; (23fcf90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fcea4:	493b      	ldreq	r1, [pc, #236]	; (23fcf94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fcea6:	4798      	blx	r3
    if (attr.has_function) {
 23fcea8:	792b      	ldrb	r3, [r5, #4]
 23fceaa:	0758      	lsls	r0, r3, #29
 23fceac:	d51d      	bpl.n	23fceea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fceae:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fceb0:	460b      	mov	r3, r1
 23fceb2:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fceb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fceb8:	b160      	cbz	r0, 23fced4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fceba:	2820      	cmp	r0, #32
 23fcebc:	d108      	bne.n	23fced0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fcebe:	4619      	mov	r1, r3
 23fcec0:	e7f7      	b.n	23fceb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fcec2:	4835      	ldr	r0, [pc, #212]	; (23fcf98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fcec4:	f000 ff0b 	bl	23fdcde <_ZN5spark12NetworkClass9listeningEv>
 23fcec8:	2800      	cmp	r0, #0
 23fceca:	d0ac      	beq.n	23fce26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fcecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fced0:	2828      	cmp	r0, #40	; 0x28
 23fced2:	d1ee      	bne.n	23fceb2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fced4:	6823      	ldr	r3, [r4, #0]
 23fced6:	1a52      	subs	r2, r2, r1
 23fced8:	4620      	mov	r0, r4
 23fceda:	68db      	ldr	r3, [r3, #12]
 23fcedc:	4798      	blx	r3
        write("(): ", 4);
 23fcede:	6823      	ldr	r3, [r4, #0]
 23fcee0:	2204      	movs	r2, #4
 23fcee2:	4620      	mov	r0, r4
 23fcee4:	68db      	ldr	r3, [r3, #12]
 23fcee6:	492d      	ldr	r1, [pc, #180]	; (23fcf9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fcee8:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fceea:	2100      	movs	r1, #0
 23fceec:	4638      	mov	r0, r7
 23fceee:	f7fe f9b9 	bl	23fb264 <log_level_name>
 23fcef2:	4601      	mov	r1, r0
    write(s);
 23fcef4:	4620      	mov	r0, r4
 23fcef6:	f7ff f9ec 	bl	23fc2d2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fcefa:	6823      	ldr	r3, [r4, #0]
 23fcefc:	2202      	movs	r2, #2
 23fcefe:	4620      	mov	r0, r4
 23fcf00:	68db      	ldr	r3, [r3, #12]
 23fcf02:	4924      	ldr	r1, [pc, #144]	; (23fcf94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fcf04:	4798      	blx	r3
    if (msg) {
 23fcf06:	b11e      	cbz	r6, 23fcf10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fcf08:	4631      	mov	r1, r6
 23fcf0a:	4620      	mov	r0, r4
 23fcf0c:	f7ff f9e1 	bl	23fc2d2 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fcf10:	792b      	ldrb	r3, [r5, #4]
 23fcf12:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fcf16:	d02c      	beq.n	23fcf72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fcf18:	6823      	ldr	r3, [r4, #0]
 23fcf1a:	4921      	ldr	r1, [pc, #132]	; (23fcfa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fcf1c:	68db      	ldr	r3, [r3, #12]
 23fcf1e:	2202      	movs	r2, #2
 23fcf20:	4620      	mov	r0, r4
 23fcf22:	4798      	blx	r3
        if (attr.has_code) {
 23fcf24:	792b      	ldrb	r3, [r5, #4]
 23fcf26:	06d9      	lsls	r1, r3, #27
 23fcf28:	d50a      	bpl.n	23fcf40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fcf2a:	6823      	ldr	r3, [r4, #0]
 23fcf2c:	2207      	movs	r2, #7
 23fcf2e:	4620      	mov	r0, r4
 23fcf30:	491c      	ldr	r1, [pc, #112]	; (23fcfa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fcf32:	68db      	ldr	r3, [r3, #12]
 23fcf34:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fcf36:	4620      	mov	r0, r4
 23fcf38:	69aa      	ldr	r2, [r5, #24]
 23fcf3a:	491b      	ldr	r1, [pc, #108]	; (23fcfa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fcf3c:	f7ff fa5d 	bl	23fc3fa <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fcf40:	792b      	ldrb	r3, [r5, #4]
 23fcf42:	069a      	lsls	r2, r3, #26
 23fcf44:	d511      	bpl.n	23fcf6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fcf46:	06db      	lsls	r3, r3, #27
 23fcf48:	d505      	bpl.n	23fcf56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fcf4a:	6823      	ldr	r3, [r4, #0]
 23fcf4c:	2202      	movs	r2, #2
 23fcf4e:	4620      	mov	r0, r4
 23fcf50:	68db      	ldr	r3, [r3, #12]
 23fcf52:	490f      	ldr	r1, [pc, #60]	; (23fcf90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fcf54:	4798      	blx	r3
            write("details = ", 10);
 23fcf56:	6823      	ldr	r3, [r4, #0]
 23fcf58:	4620      	mov	r0, r4
 23fcf5a:	4914      	ldr	r1, [pc, #80]	; (23fcfac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fcf5c:	220a      	movs	r2, #10
 23fcf5e:	68db      	ldr	r3, [r3, #12]
 23fcf60:	4798      	blx	r3
            write(attr.details);
 23fcf62:	4620      	mov	r0, r4
 23fcf64:	69e9      	ldr	r1, [r5, #28]
 23fcf66:	f7ff f9b4 	bl	23fc2d2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fcf6a:	215d      	movs	r1, #93	; 0x5d
 23fcf6c:	4620      	mov	r0, r4
 23fcf6e:	f7ff f9bf 	bl	23fc2f0 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fcf72:	6823      	ldr	r3, [r4, #0]
 23fcf74:	4620      	mov	r0, r4
}
 23fcf76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fcf7a:	2202      	movs	r2, #2
 23fcf7c:	68db      	ldr	r3, [r3, #12]
 23fcf7e:	490c      	ldr	r1, [pc, #48]	; (23fcfb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fcf80:	4718      	bx	r3
 23fcf82:	bf00      	nop
 23fcf84:	023ffb2d 	.word	0x023ffb2d
 23fcf88:	023ffb34 	.word	0x023ffb34
 23fcf8c:	023febf2 	.word	0x023febf2
 23fcf90:	023ffb37 	.word	0x023ffb37
 23fcf94:	023ffb3c 	.word	0x023ffb3c
 23fcf98:	1007aee4 	.word	0x1007aee4
 23fcf9c:	023ffb3a 	.word	0x023ffb3a
 23fcfa0:	023ffb3f 	.word	0x023ffb3f
 23fcfa4:	023ffb42 	.word	0x023ffb42
 23fcfa8:	023ffb4a 	.word	0x023ffb4a
 23fcfac:	023ffb4d 	.word	0x023ffb4d
 23fcfb0:	023ffb58 	.word	0x023ffb58

023fcfb4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fcfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fcfb8:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fcfba:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fcfbc:	460d      	mov	r5, r1
 23fcfbe:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fcfc0:	f000 fcfc 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23fcfc4:	4287      	cmp	r7, r0
 23fcfc6:	d007      	beq.n	23fcfd8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fcfc8:	6a20      	ldr	r0, [r4, #32]
 23fcfca:	4632      	mov	r2, r6
 23fcfcc:	6803      	ldr	r3, [r0, #0]
 23fcfce:	4629      	mov	r1, r5
}
 23fcfd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fcfd4:	68db      	ldr	r3, [r3, #12]
 23fcfd6:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fcfd8:	4803      	ldr	r0, [pc, #12]	; (23fcfe8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fcfda:	f000 fe80 	bl	23fdcde <_ZN5spark12NetworkClass9listeningEv>
 23fcfde:	2800      	cmp	r0, #0
 23fcfe0:	d0f2      	beq.n	23fcfc8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fcfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fcfe6:	bf00      	nop
 23fcfe8:	1007aee4 	.word	0x1007aee4

023fcfec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fcfec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fcff0:	b085      	sub	sp, #20
    return stream_;
 23fcff2:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fcff6:	4605      	mov	r5, r0
 23fcff8:	460f      	mov	r7, r1
 23fcffa:	4690      	mov	r8, r2
 23fcffc:	461e      	mov	r6, r3
 23fcffe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fd000:	f000 fcdc 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23fd004:	4581      	cmp	r9, r0
 23fd006:	d105      	bne.n	23fd014 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fd008:	4849      	ldr	r0, [pc, #292]	; (23fd130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fd00a:	f000 fe68 	bl	23fdcde <_ZN5spark12NetworkClass9listeningEv>
 23fd00e:	2800      	cmp	r0, #0
 23fd010:	f040 808a 	bne.w	23fd128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fd014:	f04f 0900 	mov.w	r9, #0
 23fd018:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23fd01a:	4a46      	ldr	r2, [pc, #280]	; (23fd134 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fd01c:	a801      	add	r0, sp, #4
 23fd01e:	9201      	str	r2, [sp, #4]
 23fd020:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23fd022:	f88d 9008 	strb.w	r9, [sp, #8]
 23fd026:	f000 fffe 	bl	23fe026 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fd02a:	4649      	mov	r1, r9
 23fd02c:	4640      	mov	r0, r8
 23fd02e:	f7fe f919 	bl	23fb264 <log_level_name>
 23fd032:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fd034:	4940      	ldr	r1, [pc, #256]	; (23fd138 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fd036:	2201      	movs	r2, #1
 23fd038:	a801      	add	r0, sp, #4
 23fd03a:	f001 f883 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd03e:	4641      	mov	r1, r8
 23fd040:	f7ff f939 	bl	23fc2b6 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fd044:	b13f      	cbz	r7, 23fd056 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23fd046:	493d      	ldr	r1, [pc, #244]	; (23fd13c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fd048:	2201      	movs	r2, #1
 23fd04a:	a801      	add	r0, sp, #4
 23fd04c:	f001 f87a 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd050:	4639      	mov	r1, r7
 23fd052:	f7ff f930 	bl	23fc2b6 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fd056:	b13e      	cbz	r6, 23fd068 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23fd058:	4939      	ldr	r1, [pc, #228]	; (23fd140 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fd05a:	2201      	movs	r2, #1
 23fd05c:	a801      	add	r0, sp, #4
 23fd05e:	f001 f871 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd062:	4631      	mov	r1, r6
 23fd064:	f7ff f927 	bl	23fc2b6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fd068:	7923      	ldrb	r3, [r4, #4]
 23fd06a:	07df      	lsls	r7, r3, #31
 23fd06c:	d50e      	bpl.n	23fd08c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23fd06e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fd070:	212f      	movs	r1, #47	; 0x2f
 23fd072:	4630      	mov	r0, r6
 23fd074:	f001 fbd9 	bl	23fe82a <strrchr>
    if (s1) {
 23fd078:	b100      	cbz	r0, 23fd07c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23fd07a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fd07c:	4931      	ldr	r1, [pc, #196]	; (23fd144 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fd07e:	2201      	movs	r2, #1
 23fd080:	a801      	add	r0, sp, #4
 23fd082:	f001 f85f 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd086:	4631      	mov	r1, r6
 23fd088:	f7ff f915 	bl	23fc2b6 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fd08c:	7923      	ldrb	r3, [r4, #4]
 23fd08e:	079e      	lsls	r6, r3, #30
 23fd090:	d507      	bpl.n	23fd0a2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23fd092:	492d      	ldr	r1, [pc, #180]	; (23fd148 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fd094:	2202      	movs	r2, #2
 23fd096:	a801      	add	r0, sp, #4
 23fd098:	f001 f854 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd09c:	68e1      	ldr	r1, [r4, #12]
 23fd09e:	f000 ffcf 	bl	23fe040 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fd0a2:	7923      	ldrb	r3, [r4, #4]
 23fd0a4:	0758      	lsls	r0, r3, #29
 23fd0a6:	d514      	bpl.n	23fd0d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fd0a8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fd0aa:	4633      	mov	r3, r6
 23fd0ac:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fd0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd0b2:	b12a      	cbz	r2, 23fd0c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23fd0b4:	2a20      	cmp	r2, #32
 23fd0b6:	d101      	bne.n	23fd0bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23fd0b8:	461e      	mov	r6, r3
 23fd0ba:	e7f7      	b.n	23fd0ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23fd0bc:	2a28      	cmp	r2, #40	; 0x28
 23fd0be:	d1f5      	bne.n	23fd0ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23fd0c0:	2202      	movs	r2, #2
 23fd0c2:	4922      	ldr	r1, [pc, #136]	; (23fd14c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fd0c4:	a801      	add	r0, sp, #4
 23fd0c6:	f001 f83d 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd0ca:	4631      	mov	r1, r6
 23fd0cc:	1bba      	subs	r2, r7, r6
 23fd0ce:	f001 f849 	bl	23fe164 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fd0d2:	7923      	ldrb	r3, [r4, #4]
 23fd0d4:	0719      	lsls	r1, r3, #28
 23fd0d6:	d507      	bpl.n	23fd0e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23fd0d8:	491d      	ldr	r1, [pc, #116]	; (23fd150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fd0da:	2201      	movs	r2, #1
 23fd0dc:	a801      	add	r0, sp, #4
 23fd0de:	f001 f831 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd0e2:	6961      	ldr	r1, [r4, #20]
 23fd0e4:	f000 ffbe 	bl	23fe064 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fd0e8:	7923      	ldrb	r3, [r4, #4]
 23fd0ea:	06da      	lsls	r2, r3, #27
 23fd0ec:	d508      	bpl.n	23fd100 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fd0ee:	2204      	movs	r2, #4
 23fd0f0:	4918      	ldr	r1, [pc, #96]	; (23fd154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fd0f2:	eb0d 0002 	add.w	r0, sp, r2
 23fd0f6:	f001 f825 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd0fa:	69a1      	ldr	r1, [r4, #24]
 23fd0fc:	f000 ffa0 	bl	23fe040 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fd100:	7923      	ldrb	r3, [r4, #4]
 23fd102:	069b      	lsls	r3, r3, #26
 23fd104:	d507      	bpl.n	23fd116 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fd106:	4914      	ldr	r1, [pc, #80]	; (23fd158 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fd108:	2206      	movs	r2, #6
 23fd10a:	a801      	add	r0, sp, #4
 23fd10c:	f001 f81a 	bl	23fe144 <_ZN5spark10JSONWriter4nameEPKcj>
 23fd110:	69e1      	ldr	r1, [r4, #28]
 23fd112:	f7ff f8d0 	bl	23fc2b6 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fd116:	a801      	add	r0, sp, #4
 23fd118:	f000 ff6f 	bl	23fdffa <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fd11c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fd11e:	2202      	movs	r2, #2
 23fd120:	6803      	ldr	r3, [r0, #0]
 23fd122:	490e      	ldr	r1, [pc, #56]	; (23fd15c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fd124:	68db      	ldr	r3, [r3, #12]
 23fd126:	4798      	blx	r3
}
 23fd128:	b005      	add	sp, #20
 23fd12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fd12e:	bf00      	nop
 23fd130:	1007aee4 	.word	0x1007aee4
 23fd134:	023ffb7c 	.word	0x023ffb7c
 23fd138:	023ffb0a 	.word	0x023ffb0a
 23fd13c:	023ffb5b 	.word	0x023ffb5b
 23fd140:	023ffec7 	.word	0x023ffec7
 23fd144:	023ffb5d 	.word	0x023ffb5d
 23fd148:	023ffb5f 	.word	0x023ffb5f
 23fd14c:	023ffb62 	.word	0x023ffb62
 23fd150:	023fecc3 	.word	0x023fecc3
 23fd154:	023ffb65 	.word	0x023ffb65
 23fd158:	023ffb6a 	.word	0x023ffb6a
 23fd15c:	023ffb58 	.word	0x023ffb58

023fd160 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fd160:	4b02      	ldr	r3, [pc, #8]	; (23fd16c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fd162:	681a      	ldr	r2, [r3, #0]
 23fd164:	4b02      	ldr	r3, [pc, #8]	; (23fd170 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fd166:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fd168:	4770      	bx	lr
 23fd16a:	bf00      	nop
 23fd16c:	1007ad44 	.word	0x1007ad44
 23fd170:	1007aea8 	.word	0x1007aea8

023fd174 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fd174:	2100      	movs	r1, #0
 23fd176:	f7fe b89f 	b.w	23fb2b8 <system_delay_ms>
	...

023fd17c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fd17c:	2200      	movs	r2, #0
 23fd17e:	4b01      	ldr	r3, [pc, #4]	; (23fd184 <_GLOBAL__sub_I_RGB+0x8>)
 23fd180:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fd182:	4770      	bx	lr
 23fd184:	1007aeac 	.word	0x1007aeac

023fd188 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fd188:	4b01      	ldr	r3, [pc, #4]	; (23fd190 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fd18a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fd18c:	4770      	bx	lr
 23fd18e:	bf00      	nop
 23fd190:	1007ad48 	.word	0x1007ad48

023fd194 <serialEventRun>:
{
 23fd194:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fd196:	4b0f      	ldr	r3, [pc, #60]	; (23fd1d4 <serialEventRun+0x40>)
 23fd198:	b143      	cbz	r3, 23fd1ac <serialEventRun+0x18>
 23fd19a:	f000 fc0f 	bl	23fd9bc <_Z16_fetch_usbserialv>
 23fd19e:	6803      	ldr	r3, [r0, #0]
 23fd1a0:	691b      	ldr	r3, [r3, #16]
 23fd1a2:	4798      	blx	r3
 23fd1a4:	2800      	cmp	r0, #0
 23fd1a6:	dd01      	ble.n	23fd1ac <serialEventRun+0x18>
        serialEvent();
 23fd1a8:	e000      	b.n	23fd1ac <serialEventRun+0x18>
 23fd1aa:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fd1ac:	4b0a      	ldr	r3, [pc, #40]	; (23fd1d8 <serialEventRun+0x44>)
 23fd1ae:	b143      	cbz	r3, 23fd1c2 <serialEventRun+0x2e>
 23fd1b0:	f001 f892 	bl	23fe2d8 <_Z22__fetch_global_Serial1v>
 23fd1b4:	6803      	ldr	r3, [r0, #0]
 23fd1b6:	691b      	ldr	r3, [r3, #16]
 23fd1b8:	4798      	blx	r3
 23fd1ba:	2800      	cmp	r0, #0
 23fd1bc:	dd01      	ble.n	23fd1c2 <serialEventRun+0x2e>
        serialEvent1();
 23fd1be:	e000      	b.n	23fd1c2 <serialEventRun+0x2e>
 23fd1c0:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fd1c2:	4b06      	ldr	r3, [pc, #24]	; (23fd1dc <serialEventRun+0x48>)
 23fd1c4:	b10b      	cbz	r3, 23fd1ca <serialEventRun+0x36>
 23fd1c6:	f001 f8cd 	bl	23fe364 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fd1ca:	4b05      	ldr	r3, [pc, #20]	; (23fd1e0 <serialEventRun+0x4c>)
 23fd1cc:	b10b      	cbz	r3, 23fd1d2 <serialEventRun+0x3e>
 23fd1ce:	f001 f8ff 	bl	23fe3d0 <_Z15serialEventRun3v>
}
 23fd1d2:	bd08      	pop	{r3, pc}
	...

023fd1e4 <_post_loop>:
{
 23fd1e4:	b508      	push	{r3, lr}
	serialEventRun();
 23fd1e6:	f7ff ffd5 	bl	23fd194 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fd1ea:	f7fd fd1d 	bl	23fac28 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fd1ee:	4b01      	ldr	r3, [pc, #4]	; (23fd1f4 <_post_loop+0x10>)
 23fd1f0:	6018      	str	r0, [r3, #0]
}
 23fd1f2:	bd08      	pop	{r3, pc}
 23fd1f4:	1007af34 	.word	0x1007af34

023fd1f8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd1f8:	4805      	ldr	r0, [pc, #20]	; (23fd210 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fd1fa:	4a06      	ldr	r2, [pc, #24]	; (23fd214 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fd1fc:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fd1fe:	1a12      	subs	r2, r2, r0
 23fd200:	4905      	ldr	r1, [pc, #20]	; (23fd218 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fd202:	f001 fa63 	bl	23fe6cc <memcpy>
    __backup_sram_signature = signature;
 23fd206:	4b05      	ldr	r3, [pc, #20]	; (23fd21c <_Z33system_initialize_user_backup_ramv+0x24>)
 23fd208:	4a05      	ldr	r2, [pc, #20]	; (23fd220 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fd20a:	601a      	str	r2, [r3, #0]
}
 23fd20c:	bd08      	pop	{r3, pc}
 23fd20e:	bf00      	nop
 23fd210:	1007b400 	.word	0x1007b400
 23fd214:	1007b404 	.word	0x1007b404
 23fd218:	085ff688 	.word	0x085ff688
 23fd21c:	1007b400 	.word	0x1007b400
 23fd220:	9a271c1e 	.word	0x9a271c1e

023fd224 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd224:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fd226:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd228:	461a      	mov	r2, r3
 23fd22a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd22e:	9300      	str	r3, [sp, #0]
 23fd230:	f7fe f87a 	bl	23fb328 <system_ctrl_set_result>
}
 23fd234:	b003      	add	sp, #12
 23fd236:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fd23c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fd23c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fd23e:	8843      	ldrh	r3, [r0, #2]
 23fd240:	2b0a      	cmp	r3, #10
 23fd242:	d008      	beq.n	23fd256 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fd244:	2b50      	cmp	r3, #80	; 0x50
 23fd246:	d10b      	bne.n	23fd260 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fd248:	4b09      	ldr	r3, [pc, #36]	; (23fd270 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fd24a:	681b      	ldr	r3, [r3, #0]
 23fd24c:	b14b      	cbz	r3, 23fd262 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fd24e:	b003      	add	sp, #12
 23fd250:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fd254:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fd256:	f7ff ffe5 	bl	23fd224 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fd25a:	b003      	add	sp, #12
 23fd25c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fd260:	2300      	movs	r3, #0
 23fd262:	461a      	mov	r2, r3
 23fd264:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fd268:	9300      	str	r3, [sp, #0]
 23fd26a:	f7fe f85d 	bl	23fb328 <system_ctrl_set_result>
}
 23fd26e:	e7f4      	b.n	23fd25a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fd270:	1007aec0 	.word	0x1007aec0

023fd274 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd274:	2100      	movs	r1, #0
{
 23fd276:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fd278:	4811      	ldr	r0, [pc, #68]	; (23fd2c0 <module_user_init_hook+0x4c>)
 23fd27a:	f7fe fa31 	bl	23fb6e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fd27e:	4b11      	ldr	r3, [pc, #68]	; (23fd2c4 <module_user_init_hook+0x50>)
 23fd280:	681a      	ldr	r2, [r3, #0]
 23fd282:	4b11      	ldr	r3, [pc, #68]	; (23fd2c8 <module_user_init_hook+0x54>)
 23fd284:	429a      	cmp	r2, r3
 23fd286:	bf0c      	ite	eq
 23fd288:	2201      	moveq	r2, #1
 23fd28a:	2200      	movne	r2, #0
 23fd28c:	4b0f      	ldr	r3, [pc, #60]	; (23fd2cc <module_user_init_hook+0x58>)
 23fd28e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fd290:	d001      	beq.n	23fd296 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fd292:	f7ff ffb1 	bl	23fd1f8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fd296:	f7fd fcab 	bl	23fabf0 <HAL_RNG_GetRandomNumber>
 23fd29a:	4604      	mov	r4, r0
    srand(seed);
 23fd29c:	f001 fa46 	bl	23fe72c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fd2a0:	4b0b      	ldr	r3, [pc, #44]	; (23fd2d0 <module_user_init_hook+0x5c>)
 23fd2a2:	b113      	cbz	r3, 23fd2aa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fd2a4:	4620      	mov	r0, r4
 23fd2a6:	e000      	b.n	23fd2aa <module_user_init_hook+0x36>
 23fd2a8:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fd2aa:	2100      	movs	r1, #0
 23fd2ac:	4808      	ldr	r0, [pc, #32]	; (23fd2d0 <module_user_init_hook+0x5c>)
 23fd2ae:	f7fe f91b 	bl	23fb4e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fd2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fd2b6:	2100      	movs	r1, #0
 23fd2b8:	4806      	ldr	r0, [pc, #24]	; (23fd2d4 <module_user_init_hook+0x60>)
 23fd2ba:	f7fe b827 	b.w	23fb30c <system_ctrl_set_app_request_handler>
 23fd2be:	bf00      	nop
 23fd2c0:	023fd189 	.word	0x023fd189
 23fd2c4:	1007b400 	.word	0x1007b400
 23fd2c8:	9a271c1e 	.word	0x9a271c1e
 23fd2cc:	1007aebc 	.word	0x1007aebc
 23fd2d0:	00000000 	.word	0x00000000
 23fd2d4:	023fd23d 	.word	0x023fd23d

023fd2d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fd2d8:	4770      	bx	lr

023fd2da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fd2da:	2000      	movs	r0, #0
 23fd2dc:	4770      	bx	lr

023fd2de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fd2de:	b510      	push	{r4, lr}
 23fd2e0:	4604      	mov	r4, r0
 23fd2e2:	2110      	movs	r1, #16
 23fd2e4:	f7fb fc09 	bl	23f8afa <_ZdlPvj>
 23fd2e8:	4620      	mov	r0, r4
 23fd2ea:	bd10      	pop	{r4, pc}

023fd2ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fd2ec:	b508      	push	{r3, lr}
      { delete this; }
 23fd2ee:	f7ff fff6 	bl	23fd2de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fd2f2:	bd08      	pop	{r3, pc}

023fd2f4 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fd2f4:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fd2f6:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fd2f8:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fd2fc:	6002      	str	r2, [r0, #0]
 23fd2fe:	8084      	strh	r4, [r0, #4]
 23fd300:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd302:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd304:	680c      	ldr	r4, [r1, #0]
 23fd306:	8085      	strh	r5, [r0, #4]
 23fd308:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd30a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fd30c:	bd30      	pop	{r4, r5, pc}

023fd30e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fd30e:	b510      	push	{r4, lr}
 23fd310:	4604      	mov	r4, r0
    free((void*)msg_);
 23fd312:	6800      	ldr	r0, [r0, #0]
 23fd314:	f7fe f982 	bl	23fb61c <free>
}
 23fd318:	4620      	mov	r0, r4
 23fd31a:	bd10      	pop	{r4, pc}

023fd31c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fd31c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fd31e:	68c4      	ldr	r4, [r0, #12]
 23fd320:	b314      	cbz	r4, 23fd368 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fd322:	7823      	ldrb	r3, [r4, #0]
 23fd324:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fd326:	2b02      	cmp	r3, #2
 23fd328:	d103      	bne.n	23fd332 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fd32a:	f104 000c 	add.w	r0, r4, #12
 23fd32e:	f7ff ffee 	bl	23fd30e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fd332:	1d23      	adds	r3, r4, #4
 23fd334:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fd336:	b135      	cbz	r5, 23fd346 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 23fd338:	4628      	mov	r0, r5
 23fd33a:	f7fe fac9 	bl	23fb8d0 <_ZNSt14_Function_baseD1Ev>
 23fd33e:	2110      	movs	r1, #16
 23fd340:	4628      	mov	r0, r5
 23fd342:	f7fb fbda 	bl	23f8afa <_ZdlPvj>
 23fd346:	f104 0308 	add.w	r3, r4, #8
 23fd34a:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fd34c:	b135      	cbz	r5, 23fd35c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fd34e:	4628      	mov	r0, r5
 23fd350:	f7fe fabe 	bl	23fb8d0 <_ZNSt14_Function_baseD1Ev>
 23fd354:	2110      	movs	r1, #16
 23fd356:	4628      	mov	r0, r5
 23fd358:	f7fb fbcf 	bl	23f8afa <_ZdlPvj>
 23fd35c:	4620      	mov	r0, r4
 23fd35e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fd362:	2114      	movs	r1, #20
 23fd364:	f7fb bbc9 	b.w	23f8afa <_ZdlPvj>
 23fd368:	bd38      	pop	{r3, r4, r5, pc}

023fd36a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd36a:	680b      	ldr	r3, [r1, #0]
 23fd36c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd36e:	684b      	ldr	r3, [r1, #4]
 23fd370:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd372:	b113      	cbz	r3, 23fd37a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fd374:	685a      	ldr	r2, [r3, #4]
 23fd376:	3201      	adds	r2, #1
 23fd378:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd37a:	4770      	bx	lr

023fd37c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fd37c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd37e:	4604      	mov	r4, r0
 23fd380:	4668      	mov	r0, sp
 23fd382:	460d      	mov	r5, r1
 23fd384:	f7ff fff1 	bl	23fd36a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd388:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fd38a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd38c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fd38e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fd390:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fd392:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fd394:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
 23fd396:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fd398:	f7fb fc1c 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fd39c:	b135      	cbz	r5, 23fd3ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fd39e:	1d28      	adds	r0, r5, #4
 23fd3a0:	f7fb fc18 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd3a4:	2108      	movs	r1, #8
 23fd3a6:	4628      	mov	r0, r5
 23fd3a8:	f7fb fba7 	bl	23f8afa <_ZdlPvj>
        return p;
    }
 23fd3ac:	4620      	mov	r0, r4
 23fd3ae:	b003      	add	sp, #12
 23fd3b0:	bd30      	pop	{r4, r5, pc}

023fd3b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fd3b2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fd3b4:	b510      	push	{r4, lr}
      if (_M_empty())
 23fd3b6:	b90a      	cbnz	r2, 23fd3bc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fd3b8:	f001 f865 	bl	23fe486 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd3bc:	68c3      	ldr	r3, [r0, #12]
    }
 23fd3be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd3c2:	4718      	bx	r3

023fd3c4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fd3c4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fd3c6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fd3c8:	f100 0110 	add.w	r1, r0, #16
 23fd3cc:	f7ff fff1 	bl	23fd3b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fd3d0:	bd08      	pop	{r3, pc}

023fd3d2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fd3d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fd3d4:	b510      	push	{r4, lr}
      if (_M_empty())
 23fd3d6:	b90a      	cbnz	r2, 23fd3dc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fd3d8:	f001 f855 	bl	23fe486 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd3dc:	68c3      	ldr	r3, [r0, #12]
    }
 23fd3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fd3e2:	4718      	bx	r3

023fd3e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fd3e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fd3e6:	6800      	ldr	r0, [r0, #0]
 23fd3e8:	f100 0110 	add.w	r1, r0, #16
 23fd3ec:	f7ff fff1 	bl	23fd3d2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fd3f0:	bd08      	pop	{r3, pc}
	...

023fd3f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fd3f4:	b538      	push	{r3, r4, r5, lr}
 23fd3f6:	2300      	movs	r3, #0
 23fd3f8:	4604      	mov	r4, r0
 23fd3fa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd3fc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fd3fe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd400:	f7fb fb75 	bl	23f8aee <_Znwj>
 23fd404:	b128      	cbz	r0, 23fd412 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fd406:	2301      	movs	r3, #1
 23fd408:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fd40c:	4b02      	ldr	r3, [pc, #8]	; (23fd418 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fd40e:	60c5      	str	r5, [r0, #12]
 23fd410:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fd412:	6020      	str	r0, [r4, #0]
	}
 23fd414:	4620      	mov	r0, r4
 23fd416:	bd38      	pop	{r3, r4, r5, pc}
 23fd418:	023ffc10 	.word	0x023ffc10

023fd41c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fd41c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd41e:	2300      	movs	r3, #0
 23fd420:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fd422:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fd424:	4604      	mov	r4, r0
 23fd426:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fd428:	b12b      	cbz	r3, 23fd436 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fd42a:	2202      	movs	r2, #2
 23fd42c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fd42e:	68eb      	ldr	r3, [r5, #12]
 23fd430:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fd432:	68ab      	ldr	r3, [r5, #8]
 23fd434:	60a3      	str	r3, [r4, #8]
    }
 23fd436:	4620      	mov	r0, r4
 23fd438:	bd38      	pop	{r3, r4, r5, pc}
	...

023fd43c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fd43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd43e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
 23fd440:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fd442:	4668      	mov	r0, sp
 23fd444:	f7ff ff56 	bl	23fd2f4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fd448:	f04f 0302 	mov.w	r3, #2
 23fd44c:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fd450:	2a00      	cmp	r2, #0
 23fd452:	d103      	bne.n	23fd45c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fd454:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fd458:	2900      	cmp	r1, #0
 23fd45a:	d1f7      	bne.n	23fd44c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fd45c:	d121      	bne.n	23fd4a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fd45e:	f104 050c 	add.w	r5, r4, #12
 23fd462:	4669      	mov	r1, sp
 23fd464:	4628      	mov	r0, r5
 23fd466:	f7ff ff45 	bl	23fd2f4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fd46a:	2201      	movs	r2, #1
 23fd46c:	1c63      	adds	r3, r4, #1
 23fd46e:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fd472:	2000      	movs	r0, #0
 23fd474:	f104 0308 	add.w	r3, r4, #8
 23fd478:	e8d3 6fef 	ldaex	r6, [r3]
 23fd47c:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fd480:	2a00      	cmp	r2, #0
 23fd482:	d1f9      	bne.n	23fd478 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fd484:	b16e      	cbz	r6, 23fd4a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fd486:	f7fd ff25 	bl	23fb2d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fd48a:	b178      	cbz	r0, 23fd4ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fd48c:	4629      	mov	r1, r5
 23fd48e:	4630      	mov	r0, r6
 23fd490:	f7ff ff8f 	bl	23fd3b2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fd494:	4630      	mov	r0, r6
 23fd496:	f7fe fa1b 	bl	23fb8d0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fd49a:	2110      	movs	r1, #16
 23fd49c:	4630      	mov	r0, r6
 23fd49e:	f7fb fb2c 	bl	23f8afa <_ZdlPvj>
        p_->setError(std::move(error));
 23fd4a2:	4668      	mov	r0, sp
 23fd4a4:	f7ff ff33 	bl	23fd30e <_ZN8particle5ErrorD1Ev>
    }
 23fd4a8:	b009      	add	sp, #36	; 0x24
 23fd4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fd4ac:	4631      	mov	r1, r6
 23fd4ae:	a802      	add	r0, sp, #8
 23fd4b0:	f7ff ffb4 	bl	23fd41c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fd4b4:	68e0      	ldr	r0, [r4, #12]
 23fd4b6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd4ba:	b108      	cbz	r0, 23fd4c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fd4bc:	f001 f984 	bl	23fe7c8 <strdup>
        type_(type) {
 23fd4c0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fd4c2:	2010      	movs	r0, #16
 23fd4c4:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fd4c8:	f7fb fb11 	bl	23f8aee <_Znwj>
 23fd4cc:	4605      	mov	r5, r0
 23fd4ce:	b1e8      	cbz	r0, 23fd50c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fd4d0:	2700      	movs	r7, #0
 23fd4d2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd4d4:	2018      	movs	r0, #24
 23fd4d6:	f7fb fb0a 	bl	23f8aee <_Znwj>
 23fd4da:	4604      	mov	r4, r0
 23fd4dc:	b188      	cbz	r0, 23fd502 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fd4de:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd4e0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fd4e2:	a802      	add	r0, sp, #8
 23fd4e4:	f7fe fc47 	bl	23fbd76 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4e8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd4ea:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4ec:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd4ee:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd4f0:	9204      	str	r2, [sp, #16]
 23fd4f2:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd4f4:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fd4f6:	60e3      	str	r3, [r4, #12]
 23fd4f8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fd4fc:	9205      	str	r2, [sp, #20]
 23fd4fe:	f7ff fef9 	bl	23fd2f4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fd502:	4b08      	ldr	r3, [pc, #32]	; (23fd524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd504:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd506:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd508:	4b07      	ldr	r3, [pc, #28]	; (23fd528 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fd50a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fd50c:	a806      	add	r0, sp, #24
 23fd50e:	f7ff fefe 	bl	23fd30e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fd512:	a802      	add	r0, sp, #8
 23fd514:	f7fe f9dc 	bl	23fb8d0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd518:	2200      	movs	r2, #0
 23fd51a:	4629      	mov	r1, r5
 23fd51c:	4803      	ldr	r0, [pc, #12]	; (23fd52c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fd51e:	f7fd fee7 	bl	23fb2f0 <application_thread_invoke>
 23fd522:	e7b7      	b.n	23fd494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fd524:	023fd3c5 	.word	0x023fd3c5
 23fd528:	023fd641 	.word	0x023fd641
 23fd52c:	023fdac3 	.word	0x023fdac3

023fd530 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fd530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd534:	b08b      	sub	sp, #44	; 0x2c
 23fd536:	4605      	mov	r5, r0
 23fd538:	460f      	mov	r7, r1
 23fd53a:	4690      	mov	r8, r2
 23fd53c:	4699      	mov	r9, r3
 23fd53e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fd542:	f7fd ffb5 	bl	23fb4b0 <spark_cloud_flag_connected>
 23fd546:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fd548:	4683      	mov	fp, r0
 23fd54a:	bb38      	cbnz	r0, 23fd59c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fd54c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fd550:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fd552:	a905      	add	r1, sp, #20
 23fd554:	4630      	mov	r0, r6
 23fd556:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd55a:	f7ff fecb 	bl	23fd2f4 <_ZN8particle5ErrorC1EOS0_>
 23fd55e:	2014      	movs	r0, #20
 23fd560:	f7fb fac5 	bl	23f8aee <_Znwj>
 23fd564:	4604      	mov	r4, r0
 23fd566:	b148      	cbz	r0, 23fd57c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fd568:	2302      	movs	r3, #2
 23fd56a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd56c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fd56e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd572:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fd574:	4631      	mov	r1, r6
 23fd576:	300c      	adds	r0, #12
 23fd578:	f7ff febc 	bl	23fd2f4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd57c:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fd57e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd580:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fd584:	f7ff ff36 	bl	23fd3f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fd588:	4630      	mov	r0, r6
 23fd58a:	f7ff fec0 	bl	23fd30e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fd58e:	a805      	add	r0, sp, #20
 23fd590:	f7ff febd 	bl	23fd30e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 23fd594:	4628      	mov	r0, r5
 23fd596:	b00b      	add	sp, #44	; 0x2c
 23fd598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fd59c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fd59e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fd5a0:	2014      	movs	r0, #20
 23fd5a2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fd5a6:	9307      	str	r3, [sp, #28]
 23fd5a8:	f7fb faa1 	bl	23f8aee <_Znwj>
 23fd5ac:	4601      	mov	r1, r0
 23fd5ae:	b118      	cbz	r0, 23fd5b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fd5b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fd5b4:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fd5b6:	7044      	strb	r4, [r0, #1]
 23fd5b8:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fd5ba:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fd5bc:	f7ff ff1a 	bl	23fd3f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fd5c0:	4b1e      	ldr	r3, [pc, #120]	; (23fd63c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fd5c2:	2008      	movs	r0, #8
 23fd5c4:	9308      	str	r3, [sp, #32]
 23fd5c6:	f7fb fa92 	bl	23f8aee <_Znwj>
 23fd5ca:	4604      	mov	r4, r0
 23fd5cc:	b110      	cbz	r0, 23fd5d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fd5ce:	a903      	add	r1, sp, #12
 23fd5d0:	f7ff fecb 	bl	23fd36a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fd5d4:	464a      	mov	r2, r9
 23fd5d6:	4641      	mov	r1, r8
 23fd5d8:	4638      	mov	r0, r7
 23fd5da:	9600      	str	r6, [sp, #0]
 23fd5dc:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fd5e0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fd5e2:	f7fd ff73 	bl	23fb4cc <spark_send_event>
 23fd5e6:	b9b8      	cbnz	r0, 23fd618 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fd5e8:	9b03      	ldr	r3, [sp, #12]
 23fd5ea:	3301      	adds	r3, #1
 23fd5ec:	781b      	ldrb	r3, [r3, #0]
 23fd5ee:	b2db      	uxtb	r3, r3
 23fd5f0:	b993      	cbnz	r3, 23fd618 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fd5f2:	9305      	str	r3, [sp, #20]
 23fd5f4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fd5f8:	a905      	add	r1, sp, #20
 23fd5fa:	a803      	add	r0, sp, #12
 23fd5fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd600:	f7ff ff1c 	bl	23fd43c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fd604:	a805      	add	r0, sp, #20
 23fd606:	f7ff fe82 	bl	23fd30e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fd60a:	a805      	add	r0, sp, #20
 23fd60c:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fd60e:	f7ff feb5 	bl	23fd37c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fd612:	a806      	add	r0, sp, #24
 23fd614:	f7fb fade 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd618:	a903      	add	r1, sp, #12
 23fd61a:	a805      	add	r0, sp, #20
 23fd61c:	f7ff fea5 	bl	23fd36a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd620:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fd622:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fd624:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fd626:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fd628:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fd62a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fd62c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fd62e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fd630:	f7fb fad0 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd634:	a804      	add	r0, sp, #16
 23fd636:	f7fb facd 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fd63a:	e7ab      	b.n	23fd594 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fd63c:	023fd6bd 	.word	0x023fd6bd

023fd640 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fd640:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd644:	4605      	mov	r5, r0
	switch (__op)
 23fd646:	d103      	bne.n	23fd650 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd648:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd64a:	6003      	str	r3, [r0, #0]
      }
 23fd64c:	2000      	movs	r0, #0
 23fd64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23fd650:	2a02      	cmp	r2, #2
 23fd652:	d010      	beq.n	23fd676 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23fd654:	2a03      	cmp	r2, #3
 23fd656:	d1f9      	bne.n	23fd64c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd658:	6804      	ldr	r4, [r0, #0]
 23fd65a:	2c00      	cmp	r4, #0
 23fd65c:	d0f6      	beq.n	23fd64c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23fd65e:	f104 0010 	add.w	r0, r4, #16
 23fd662:	f7ff fe54 	bl	23fd30e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fd666:	4620      	mov	r0, r4
 23fd668:	f7fe f932 	bl	23fb8d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd66c:	2118      	movs	r1, #24
 23fd66e:	4620      	mov	r0, r4
 23fd670:	f7fb fa43 	bl	23f8afa <_ZdlPvj>
 23fd674:	e7ea      	b.n	23fd64c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd676:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fd678:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd67a:	f7fb fa38 	bl	23f8aee <_Znwj>
 23fd67e:	4604      	mov	r4, r0
 23fd680:	b150      	cbz	r0, 23fd698 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23fd682:	4631      	mov	r1, r6
 23fd684:	f7ff feca 	bl	23fd41c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fd688:	6930      	ldr	r0, [r6, #16]
 23fd68a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd68e:	b108      	cbz	r0, 23fd694 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23fd690:	f001 f89a 	bl	23fe7c8 <strdup>
        type_(type) {
 23fd694:	6120      	str	r0, [r4, #16]
 23fd696:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23fd698:	602c      	str	r4, [r5, #0]
	}
 23fd69a:	e7d7      	b.n	23fd64c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023fd69c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23fd69c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fd69e:	2300      	movs	r3, #0
 23fd6a0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fd6a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fd6a4:	4604      	mov	r4, r0
 23fd6a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fd6a8:	b12b      	cbz	r3, 23fd6b6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fd6aa:	2202      	movs	r2, #2
 23fd6ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fd6ae:	68eb      	ldr	r3, [r5, #12]
 23fd6b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fd6b2:	68ab      	ldr	r3, [r5, #8]
 23fd6b4:	60a3      	str	r3, [r4, #8]
    }
 23fd6b6:	4620      	mov	r0, r4
 23fd6b8:	bd38      	pop	{r3, r4, r5, pc}
	...

023fd6bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23fd6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd6be:	4604      	mov	r4, r0
 23fd6c0:	b089      	sub	sp, #36	; 0x24
 23fd6c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23fd6c4:	a801      	add	r0, sp, #4
 23fd6c6:	4611      	mov	r1, r2
 23fd6c8:	f7ff fe58 	bl	23fd37c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23fd6cc:	b1a4      	cbz	r4, 23fd6f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23fd6ce:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fd6d0:	b11d      	cbz	r5, 23fd6da <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23fd6d2:	4628      	mov	r0, r5
 23fd6d4:	f001 f878 	bl	23fe7c8 <strdup>
 23fd6d8:	4605      	mov	r5, r0
 23fd6da:	a801      	add	r0, sp, #4
 23fd6dc:	a903      	add	r1, sp, #12
        type_(type) {
 23fd6de:	9503      	str	r5, [sp, #12]
 23fd6e0:	f8ad 4010 	strh.w	r4, [sp, #16]
 23fd6e4:	f7ff feaa 	bl	23fd43c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fd6e8:	a803      	add	r0, sp, #12
 23fd6ea:	f7ff fe10 	bl	23fd30e <_ZN8particle5ErrorD1Ev>
 23fd6ee:	a802      	add	r0, sp, #8
 23fd6f0:	f7fb fa70 	bl	23f8bd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd6f4:	b009      	add	sp, #36	; 0x24
 23fd6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fd6f8:	2301      	movs	r3, #1
      { return _M_ptr; }
 23fd6fa:	9d01      	ldr	r5, [sp, #4]
 23fd6fc:	e8d5 2f4f 	ldrexb	r2, [r5]
 23fd700:	2a00      	cmp	r2, #0
 23fd702:	d103      	bne.n	23fd70c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23fd704:	e8c5 3f41 	strexb	r1, r3, [r5]
 23fd708:	2900      	cmp	r1, #0
 23fd70a:	d1f7      	bne.n	23fd6fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23fd70c:	d1ef      	bne.n	23fd6ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23fd70e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23fd710:	2201      	movs	r2, #1
 23fd712:	18eb      	adds	r3, r5, r3
 23fd714:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fd718:	1d2b      	adds	r3, r5, #4
 23fd71a:	e8d3 6fef 	ldaex	r6, [r3]
 23fd71e:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23fd722:	2a00      	cmp	r2, #0
 23fd724:	d1f9      	bne.n	23fd71a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23fd726:	2e00      	cmp	r6, #0
 23fd728:	d0e1      	beq.n	23fd6ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23fd72a:	4620      	mov	r0, r4
 23fd72c:	f7fd fdd2 	bl	23fb2d4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fd730:	4607      	mov	r7, r0
 23fd732:	b160      	cbz	r0, 23fd74e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fd734:	4630      	mov	r0, r6
 23fd736:	f105 010c 	add.w	r1, r5, #12
 23fd73a:	f7ff fe4a 	bl	23fd3d2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23fd73e:	4630      	mov	r0, r6
 23fd740:	f7fe f8c6 	bl	23fb8d0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fd744:	2110      	movs	r1, #16
 23fd746:	4630      	mov	r0, r6
 23fd748:	f7fb f9d7 	bl	23f8afa <_ZdlPvj>
 23fd74c:	e7cf      	b.n	23fd6ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fd74e:	4631      	mov	r1, r6
 23fd750:	a803      	add	r0, sp, #12
 23fd752:	f7ff ffa3 	bl	23fd69c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fd756:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fd758:	2010      	movs	r0, #16
 23fd75a:	f88d 301c 	strb.w	r3, [sp, #28]
 23fd75e:	f7fb f9c6 	bl	23f8aee <_Znwj>
 23fd762:	4605      	mov	r5, r0
 23fd764:	b1d0      	cbz	r0, 23fd79c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23fd766:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd768:	2014      	movs	r0, #20
 23fd76a:	f7fb f9c0 	bl	23f8aee <_Znwj>
 23fd76e:	4604      	mov	r4, r0
 23fd770:	b178      	cbz	r0, 23fd792 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23fd772:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fd774:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fd776:	a803      	add	r0, sp, #12
 23fd778:	f7fe fafd 	bl	23fbd76 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd77c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd77e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd780:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd782:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23fd784:	9205      	str	r2, [sp, #20]
 23fd786:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd788:	60e3      	str	r3, [r4, #12]
 23fd78a:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23fd78e:	9206      	str	r2, [sp, #24]
 23fd790:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd792:	4b07      	ldr	r3, [pc, #28]	; (23fd7b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fd794:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fd796:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fd798:	4b06      	ldr	r3, [pc, #24]	; (23fd7b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23fd79a:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23fd79c:	a803      	add	r0, sp, #12
 23fd79e:	f7fe f897 	bl	23fb8d0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fd7a2:	2200      	movs	r2, #0
 23fd7a4:	4629      	mov	r1, r5
 23fd7a6:	4804      	ldr	r0, [pc, #16]	; (23fd7b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fd7a8:	f7fd fda2 	bl	23fb2f0 <application_thread_invoke>
 23fd7ac:	e7c7      	b.n	23fd73e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fd7ae:	bf00      	nop
 23fd7b0:	023fd3e5 	.word	0x023fd3e5
 23fd7b4:	023fd7bd 	.word	0x023fd7bd
 23fd7b8:	023fdac3 	.word	0x023fdac3

023fd7bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fd7bc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fd7be:	b570      	push	{r4, r5, r6, lr}
 23fd7c0:	4604      	mov	r4, r0
	switch (__op)
 23fd7c2:	d103      	bne.n	23fd7cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fd7c4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fd7c6:	6003      	str	r3, [r0, #0]
      }
 23fd7c8:	2000      	movs	r0, #0
 23fd7ca:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fd7cc:	2a02      	cmp	r2, #2
 23fd7ce:	d00c      	beq.n	23fd7ea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fd7d0:	2a03      	cmp	r2, #3
 23fd7d2:	d1f9      	bne.n	23fd7c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fd7d4:	6804      	ldr	r4, [r0, #0]
 23fd7d6:	2c00      	cmp	r4, #0
 23fd7d8:	d0f6      	beq.n	23fd7c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fd7da:	4620      	mov	r0, r4
 23fd7dc:	f7fe f878 	bl	23fb8d0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fd7e0:	2114      	movs	r1, #20
 23fd7e2:	4620      	mov	r0, r4
 23fd7e4:	f7fb f989 	bl	23f8afa <_ZdlPvj>
 23fd7e8:	e7ee      	b.n	23fd7c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd7ea:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fd7ec:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fd7ee:	f7fb f97e 	bl	23f8aee <_Znwj>
 23fd7f2:	4605      	mov	r5, r0
 23fd7f4:	b120      	cbz	r0, 23fd800 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fd7f6:	4631      	mov	r1, r6
 23fd7f8:	f7ff ff50 	bl	23fd69c <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fd7fc:	7c33      	ldrb	r3, [r6, #16]
 23fd7fe:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fd800:	6025      	str	r5, [r4, #0]
	}
 23fd802:	e7e1      	b.n	23fd7c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fd804 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fd804:	4770      	bx	lr

023fd806 <_ZN9IPAddressD0Ev>:
 23fd806:	b510      	push	{r4, lr}
 23fd808:	4604      	mov	r4, r0
 23fd80a:	2118      	movs	r1, #24
 23fd80c:	f7fb f975 	bl	23f8afa <_ZdlPvj>
 23fd810:	4620      	mov	r0, r4
 23fd812:	bd10      	pop	{r4, pc}

023fd814 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fd814:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fd816:	7d03      	ldrb	r3, [r0, #20]
{
 23fd818:	460e      	mov	r6, r1
	if (address.v==6) {
 23fd81a:	2b06      	cmp	r3, #6
 23fd81c:	f04f 0400 	mov.w	r4, #0
{
 23fd820:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd822:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fd826:	d012      	beq.n	23fd84e <_ZNK9IPAddress7printToER5Print+0x3a>
 23fd828:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fd82c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fd830:	220a      	movs	r2, #10
 23fd832:	4630      	mov	r0, r6
 23fd834:	f7fe fad3 	bl	23fbdde <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fd838:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fd83a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fd83c:	d019      	beq.n	23fd872 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fd83e:	2c00      	cmp	r4, #0
 23fd840:	d0f4      	beq.n	23fd82c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fd842:	212e      	movs	r1, #46	; 0x2e
 23fd844:	4630      	mov	r0, r6
 23fd846:	f7fe fac7 	bl	23fbdd8 <_ZN5Print5printEc>
 23fd84a:	4404      	add	r4, r0
 23fd84c:	e7ee      	b.n	23fd82c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd84e:	232f      	movs	r3, #47	; 0x2f
 23fd850:	466a      	mov	r2, sp
 23fd852:	4639      	mov	r1, r7
 23fd854:	200a      	movs	r0, #10
		buf[0] = 0;
 23fd856:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fd85a:	f7fd fab7 	bl	23fadcc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fd85e:	4668      	mov	r0, sp
 23fd860:	f7fb f920 	bl	23f8aa4 <strlen>
 23fd864:	6833      	ldr	r3, [r6, #0]
 23fd866:	4602      	mov	r2, r0
 23fd868:	4669      	mov	r1, sp
 23fd86a:	4630      	mov	r0, r6
 23fd86c:	68db      	ldr	r3, [r3, #12]
 23fd86e:	4798      	blx	r3
 23fd870:	4604      	mov	r4, r0
    }
    return n;
}
 23fd872:	4620      	mov	r0, r4
 23fd874:	b00d      	add	sp, #52	; 0x34
 23fd876:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fd878 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fd878:	b510      	push	{r4, lr}
 23fd87a:	4604      	mov	r4, r0
 23fd87c:	4b04      	ldr	r3, [pc, #16]	; (23fd890 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fd87e:	2211      	movs	r2, #17
 23fd880:	2100      	movs	r1, #0
 23fd882:	f840 3b04 	str.w	r3, [r0], #4
 23fd886:	f000 ff48 	bl	23fe71a <memset>
}
 23fd88a:	4620      	mov	r0, r4
 23fd88c:	bd10      	pop	{r4, pc}
 23fd88e:	bf00      	nop
 23fd890:	023ffc2c 	.word	0x023ffc2c

023fd894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fd894:	4603      	mov	r3, r0
 23fd896:	4a07      	ldr	r2, [pc, #28]	; (23fd8b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fd898:	b510      	push	{r4, lr}
 23fd89a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fd89e:	f101 0210 	add.w	r2, r1, #16
 23fd8a2:	f851 4b04 	ldr.w	r4, [r1], #4
 23fd8a6:	4291      	cmp	r1, r2
 23fd8a8:	f843 4b04 	str.w	r4, [r3], #4
 23fd8ac:	d1f9      	bne.n	23fd8a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fd8ae:	780a      	ldrb	r2, [r1, #0]
 23fd8b0:	701a      	strb	r2, [r3, #0]
}
 23fd8b2:	bd10      	pop	{r4, pc}
 23fd8b4:	023ffc2c 	.word	0x023ffc2c

023fd8b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fd8b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fd8ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fd8be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fd8c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fd8c6:	2304      	movs	r3, #4
 23fd8c8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fd8cc:	6041      	str	r1, [r0, #4]
 23fd8ce:	7503      	strb	r3, [r0, #20]
}
 23fd8d0:	bd10      	pop	{r4, pc}
	...

023fd8d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fd8d4:	b507      	push	{r0, r1, r2, lr}
 23fd8d6:	4b06      	ldr	r3, [pc, #24]	; (23fd8f0 <_ZN9IPAddressC1EPKh+0x1c>)
 23fd8d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fd8da:	78cb      	ldrb	r3, [r1, #3]
 23fd8dc:	9300      	str	r3, [sp, #0]
 23fd8de:	788b      	ldrb	r3, [r1, #2]
 23fd8e0:	784a      	ldrb	r2, [r1, #1]
 23fd8e2:	7809      	ldrb	r1, [r1, #0]
 23fd8e4:	f7ff ffe8 	bl	23fd8b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fd8e8:	b003      	add	sp, #12
 23fd8ea:	f85d fb04 	ldr.w	pc, [sp], #4
 23fd8ee:	bf00      	nop
 23fd8f0:	023ffc2c 	.word	0x023ffc2c

023fd8f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fd8f4:	7441      	strb	r1, [r0, #17]
}
 23fd8f6:	4770      	bx	lr

023fd8f8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd8f8:	4770      	bx	lr

023fd8fa <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fd8fa:	4770      	bx	lr

023fd8fc <_ZN9USBSerial4readEv>:
{
 23fd8fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fd8fe:	2100      	movs	r1, #0
 23fd900:	7c00      	ldrb	r0, [r0, #16]
 23fd902:	f7fd fc5b 	bl	23fb1bc <HAL_USB_USART_Receive_Data>
}
 23fd906:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd90a:	bd08      	pop	{r3, pc}

023fd90c <_ZN9USBSerial4peekEv>:
{
 23fd90c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fd90e:	2101      	movs	r1, #1
 23fd910:	7c00      	ldrb	r0, [r0, #16]
 23fd912:	f7fd fc53 	bl	23fb1bc <HAL_USB_USART_Receive_Data>
}
 23fd916:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fd91a:	bd08      	pop	{r3, pc}

023fd91c <_ZN9USBSerial17availableForWriteEv>:
{
 23fd91c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fd91e:	7c00      	ldrb	r0, [r0, #16]
 23fd920:	f7fd fc3e 	bl	23fb1a0 <HAL_USB_USART_Available_Data_For_Write>
}
 23fd924:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd928:	bd08      	pop	{r3, pc}

023fd92a <_ZN9USBSerial9availableEv>:
{
 23fd92a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fd92c:	7c00      	ldrb	r0, [r0, #16]
 23fd92e:	f7fd fc29 	bl	23fb184 <HAL_USB_USART_Available_Data>
}
 23fd932:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fd936:	bd08      	pop	{r3, pc}

023fd938 <_ZN9USBSerial5writeEh>:
{
 23fd938:	b513      	push	{r0, r1, r4, lr}
 23fd93a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd93c:	7c00      	ldrb	r0, [r0, #16]
{
 23fd93e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fd940:	f7fd fc2e 	bl	23fb1a0 <HAL_USB_USART_Available_Data_For_Write>
 23fd944:	2800      	cmp	r0, #0
 23fd946:	9901      	ldr	r1, [sp, #4]
 23fd948:	dc01      	bgt.n	23fd94e <_ZN9USBSerial5writeEh+0x16>
 23fd94a:	7c60      	ldrb	r0, [r4, #17]
 23fd94c:	b120      	cbz	r0, 23fd958 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fd94e:	7c20      	ldrb	r0, [r4, #16]
 23fd950:	f7fd fc42 	bl	23fb1d8 <HAL_USB_USART_Send_Data>
 23fd954:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fd958:	b002      	add	sp, #8
 23fd95a:	bd10      	pop	{r4, pc}

023fd95c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fd95c:	7c00      	ldrb	r0, [r0, #16]
 23fd95e:	f7fd bc49 	b.w	23fb1f4 <HAL_USB_USART_Flush_Data>

023fd962 <_ZN9USBSerialD0Ev>:
 23fd962:	b510      	push	{r4, lr}
 23fd964:	4604      	mov	r4, r0
 23fd966:	2114      	movs	r1, #20
 23fd968:	f7fb f8c7 	bl	23f8afa <_ZdlPvj>
 23fd96c:	4620      	mov	r0, r4
 23fd96e:	bd10      	pop	{r4, pc}

023fd970 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd970:	b510      	push	{r4, lr}
 23fd972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fd976:	4604      	mov	r4, r0
 23fd978:	4608      	mov	r0, r1
 23fd97a:	2100      	movs	r1, #0
 23fd97c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fd980:	4b04      	ldr	r3, [pc, #16]	; (23fd994 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fd982:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fd984:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fd986:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fd988:	4611      	mov	r1, r2
  _blocking = true;
 23fd98a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fd98c:	f7fd fbd0 	bl	23fb130 <HAL_USB_USART_Init>
}
 23fd990:	4620      	mov	r0, r4
 23fd992:	bd10      	pop	{r4, pc}
 23fd994:	023ffc40 	.word	0x023ffc40

023fd998 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fd998:	2200      	movs	r2, #0
 23fd99a:	7c00      	ldrb	r0, [r0, #16]
 23fd99c:	f7fd bbd6 	b.w	23fb14c <HAL_USB_USART_Begin>

023fd9a0 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fd9a0:	7c00      	ldrb	r0, [r0, #16]
 23fd9a2:	f7fd bbe1 	b.w	23fb168 <HAL_USB_USART_End>

023fd9a6 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23fd9a6:	7c00      	ldrb	r0, [r0, #16]
 23fd9a8:	f7fd bc32 	b.w	23fb210 <HAL_USB_USART_Is_Connected>

023fd9ac <_Z19acquireSerialBufferv>:
{
 23fd9ac:	b510      	push	{r4, lr}
 23fd9ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fd9b0:	2214      	movs	r2, #20
 23fd9b2:	2100      	movs	r1, #0
 23fd9b4:	f000 feb1 	bl	23fe71a <memset>
}
 23fd9b8:	4620      	mov	r0, r4
 23fd9ba:	bd10      	pop	{r4, pc}

023fd9bc <_Z16_fetch_usbserialv>:
{
 23fd9bc:	b510      	push	{r4, lr}
 23fd9be:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fd9c0:	a803      	add	r0, sp, #12
 23fd9c2:	f7ff fff3 	bl	23fd9ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fd9c6:	4c0c      	ldr	r4, [pc, #48]	; (23fd9f8 <_Z16_fetch_usbserialv+0x3c>)
 23fd9c8:	e8d4 1f8f 	ldab	r1, [r4]
 23fd9cc:	f011 0101 	ands.w	r1, r1, #1
 23fd9d0:	d10f      	bne.n	23fd9f2 <_Z16_fetch_usbserialv+0x36>
 23fd9d2:	4620      	mov	r0, r4
 23fd9d4:	9101      	str	r1, [sp, #4]
 23fd9d6:	f7fb f89f 	bl	23f8b18 <__cxa_guard_acquire>
 23fd9da:	9901      	ldr	r1, [sp, #4]
 23fd9dc:	b148      	cbz	r0, 23fd9f2 <_Z16_fetch_usbserialv+0x36>
 23fd9de:	aa03      	add	r2, sp, #12
 23fd9e0:	4806      	ldr	r0, [pc, #24]	; (23fd9fc <_Z16_fetch_usbserialv+0x40>)
 23fd9e2:	f7ff ffc5 	bl	23fd970 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fd9e6:	4620      	mov	r0, r4
 23fd9e8:	f7fb f89b 	bl	23f8b22 <__cxa_guard_release>
 23fd9ec:	4804      	ldr	r0, [pc, #16]	; (23fda00 <_Z16_fetch_usbserialv+0x44>)
 23fd9ee:	f000 fe5f 	bl	23fe6b0 <atexit>
	return _usbserial;
}
 23fd9f2:	4802      	ldr	r0, [pc, #8]	; (23fd9fc <_Z16_fetch_usbserialv+0x40>)
 23fd9f4:	b008      	add	sp, #32
 23fd9f6:	bd10      	pop	{r4, pc}
 23fd9f8:	1007aec4 	.word	0x1007aec4
 23fd9fc:	1007aec8 	.word	0x1007aec8
 23fda00:	023fd8f9 	.word	0x023fd8f9

023fda04 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fda04:	4770      	bx	lr

023fda06 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fda06:	7441      	strb	r1, [r0, #17]
}
 23fda08:	4770      	bx	lr

023fda0a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fda0a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fda0c:	7c00      	ldrb	r0, [r0, #16]
 23fda0e:	f7fd fa4d 	bl	23faeac <hal_usart_available_data_for_write>
}
 23fda12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fda16:	bd08      	pop	{r3, pc}

023fda18 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fda18:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fda1a:	7c00      	ldrb	r0, [r0, #16]
 23fda1c:	f7fd fa00 	bl	23fae20 <hal_usart_available>
}
 23fda20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fda24:	bd08      	pop	{r3, pc}

023fda26 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fda26:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fda28:	7c00      	ldrb	r0, [r0, #16]
 23fda2a:	f7fd fa15 	bl	23fae58 <hal_usart_peek>
}
 23fda2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fda32:	bd08      	pop	{r3, pc}

023fda34 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fda34:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fda36:	7c00      	ldrb	r0, [r0, #16]
 23fda38:	f7fd fa00 	bl	23fae3c <hal_usart_read>
}
 23fda3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fda40:	bd08      	pop	{r3, pc}

023fda42 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fda42:	7c00      	ldrb	r0, [r0, #16]
 23fda44:	f7fd ba16 	b.w	23fae74 <hal_usart_flush>

023fda48 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fda48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fda4a:	7c45      	ldrb	r5, [r0, #17]
{
 23fda4c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fda4e:	b12d      	cbz	r5, 23fda5c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fda50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fda52:	b003      	add	sp, #12
 23fda54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fda58:	f7fd b9d4 	b.w	23fae04 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fda5c:	7c00      	ldrb	r0, [r0, #16]
 23fda5e:	9101      	str	r1, [sp, #4]
 23fda60:	f7fd fa24 	bl	23faeac <hal_usart_available_data_for_write>
 23fda64:	2800      	cmp	r0, #0
 23fda66:	9901      	ldr	r1, [sp, #4]
 23fda68:	dcf2      	bgt.n	23fda50 <_ZN11USARTSerial5writeEh+0x8>
}
 23fda6a:	4628      	mov	r0, r5
 23fda6c:	b003      	add	sp, #12
 23fda6e:	bd30      	pop	{r4, r5, pc}

023fda70 <_ZN11USARTSerialD0Ev>:
 23fda70:	b510      	push	{r4, lr}
 23fda72:	4604      	mov	r4, r0
 23fda74:	2114      	movs	r1, #20
 23fda76:	f7fb f840 	bl	23f8afa <_ZdlPvj>
 23fda7a:	4620      	mov	r0, r4
 23fda7c:	bd10      	pop	{r4, pc}
	...

023fda80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fda80:	b510      	push	{r4, lr}
 23fda82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fda86:	4604      	mov	r4, r0
 23fda88:	4608      	mov	r0, r1
 23fda8a:	4611      	mov	r1, r2
 23fda8c:	2200      	movs	r2, #0
 23fda8e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fda92:	4b04      	ldr	r3, [pc, #16]	; (23fdaa4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fda94:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fda96:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fda98:	2301      	movs	r3, #1
 23fda9a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fda9c:	f7fd fa22 	bl	23faee4 <hal_usart_init_ex>
}
 23fdaa0:	4620      	mov	r0, r4
 23fdaa2:	bd10      	pop	{r4, pc}
 23fdaa4:	023ffc70 	.word	0x023ffc70

023fdaa8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fdaa8:	2300      	movs	r3, #0
 23fdaaa:	7c00      	ldrb	r0, [r0, #16]
 23fdaac:	f7fd ba0c 	b.w	23faec8 <hal_usart_begin_config>

023fdab0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fdab0:	2200      	movs	r2, #0
 23fdab2:	f7ff bff9 	b.w	23fdaa8 <_ZN11USARTSerial5beginEmm>

023fdab6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fdab6:	7c00      	ldrb	r0, [r0, #16]
 23fdab8:	f7fd b996 	b.w	23fade8 <hal_usart_end>

023fdabc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fdabc:	7c00      	ldrb	r0, [r0, #16]
 23fdabe:	f7fd b9e7 	b.w	23fae90 <hal_usart_is_enabled>

023fdac2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fdac2:	b510      	push	{r4, lr}
      if (_M_empty())
 23fdac4:	6883      	ldr	r3, [r0, #8]
 23fdac6:	4604      	mov	r4, r0
 23fdac8:	b90b      	cbnz	r3, 23fdace <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fdaca:	f000 fcdc 	bl	23fe486 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fdace:	68c3      	ldr	r3, [r0, #12]
 23fdad0:	4798      	blx	r3
      if (_M_manager)
 23fdad2:	68a3      	ldr	r3, [r4, #8]
 23fdad4:	b11b      	cbz	r3, 23fdade <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fdad6:	2203      	movs	r2, #3
 23fdad8:	4621      	mov	r1, r4
 23fdada:	4620      	mov	r0, r4
 23fdadc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fdade:	4620      	mov	r0, r4
}
 23fdae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fdae4:	2110      	movs	r1, #16
 23fdae6:	f7fb b808 	b.w	23f8afa <_ZdlPvj>

023fdaea <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fdaea:	4770      	bx	lr

023fdaec <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fdaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdaee:	4606      	mov	r6, r0
 23fdaf0:	4615      	mov	r5, r2
 23fdaf2:	460c      	mov	r4, r1
 23fdaf4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fdaf6:	42bc      	cmp	r4, r7
 23fdaf8:	d006      	beq.n	23fdb08 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fdafa:	6833      	ldr	r3, [r6, #0]
 23fdafc:	4630      	mov	r0, r6
 23fdafe:	689b      	ldr	r3, [r3, #8]
 23fdb00:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fdb04:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fdb06:	e7f6      	b.n	23fdaf6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fdb08:	4628      	mov	r0, r5
 23fdb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdb0c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fdb0c:	2200      	movs	r2, #0
 23fdb0e:	7c00      	ldrb	r0, [r0, #16]
 23fdb10:	f7fd ba20 	b.w	23faf54 <hal_i2c_write>

023fdb14 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fdb14:	2100      	movs	r1, #0
 23fdb16:	7c00      	ldrb	r0, [r0, #16]
 23fdb18:	f7fd ba2a 	b.w	23faf70 <hal_i2c_available>

023fdb1c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fdb1c:	2100      	movs	r1, #0
 23fdb1e:	7c00      	ldrb	r0, [r0, #16]
 23fdb20:	f7fd ba34 	b.w	23faf8c <hal_i2c_read>

023fdb24 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fdb24:	2100      	movs	r1, #0
 23fdb26:	7c00      	ldrb	r0, [r0, #16]
 23fdb28:	f7fd ba3e 	b.w	23fafa8 <hal_i2c_peek>

023fdb2c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fdb2c:	2100      	movs	r1, #0
 23fdb2e:	7c00      	ldrb	r0, [r0, #16]
 23fdb30:	f7fd ba48 	b.w	23fafc4 <hal_i2c_flush>

023fdb34 <_ZN7TwoWireD0Ev>:
 23fdb34:	b510      	push	{r4, lr}
 23fdb36:	4604      	mov	r4, r0
 23fdb38:	2114      	movs	r1, #20
 23fdb3a:	f7fa ffde 	bl	23f8afa <_ZdlPvj>
 23fdb3e:	4620      	mov	r0, r4
 23fdb40:	bd10      	pop	{r4, pc}
	...

023fdb44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fdb44:	b538      	push	{r3, r4, r5, lr}
 23fdb46:	4604      	mov	r4, r0
 23fdb48:	4615      	mov	r5, r2
 23fdb4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fdb4e:	2200      	movs	r2, #0
 23fdb50:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fdb54:	4b09      	ldr	r3, [pc, #36]	; (23fdb7c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fdb56:	4608      	mov	r0, r1
  _i2c = i2c;
 23fdb58:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fdb5a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fdb5c:	4629      	mov	r1, r5
 23fdb5e:	f7fd fa4d 	bl	23faffc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fdb62:	30bf      	adds	r0, #191	; 0xbf
 23fdb64:	d108      	bne.n	23fdb78 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fdb66:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fdb68:	07db      	lsls	r3, r3, #31
 23fdb6a:	d505      	bpl.n	23fdb78 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fdb6c:	6868      	ldr	r0, [r5, #4]
 23fdb6e:	f7fd fd55 	bl	23fb61c <free>
    free(conf.tx_buffer);
 23fdb72:	68e8      	ldr	r0, [r5, #12]
 23fdb74:	f7fd fd52 	bl	23fb61c <free>
}
 23fdb78:	4620      	mov	r0, r4
 23fdb7a:	bd38      	pop	{r3, r4, r5, pc}
 23fdb7c:	023ffca0 	.word	0x023ffca0

023fdb80 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fdb80:	2300      	movs	r3, #0
 23fdb82:	7c00      	ldrb	r0, [r0, #16]
 23fdb84:	461a      	mov	r2, r3
 23fdb86:	4619      	mov	r1, r3
 23fdb88:	f7fd b9ba 	b.w	23faf00 <hal_i2c_begin>

023fdb8c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fdb8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fdb8e:	2200      	movs	r2, #0
 23fdb90:	2314      	movs	r3, #20
 23fdb92:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fdb96:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fdb9a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fdb9c:	7c00      	ldrb	r0, [r0, #16]
 23fdb9e:	f88d 3008 	strb.w	r3, [sp, #8]
 23fdba2:	684b      	ldr	r3, [r1, #4]
 23fdba4:	9303      	str	r3, [sp, #12]
 23fdba6:	68cb      	ldr	r3, [r1, #12]
 23fdba8:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fdbaa:	7a0b      	ldrb	r3, [r1, #8]
 23fdbac:	a901      	add	r1, sp, #4
 23fdbae:	9305      	str	r3, [sp, #20]
 23fdbb0:	f7fd fa32 	bl	23fb018 <hal_i2c_request_ex>
}
 23fdbb4:	b007      	add	sp, #28
 23fdbb6:	f85d fb04 	ldr.w	pc, [sp], #4

023fdbba <_ZN7TwoWire11requestFromEhjh>:
{
 23fdbba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fdbbc:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fdbbe:	f88d 1000 	strb.w	r1, [sp]
 23fdbc2:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fdbc6:	bf18      	it	ne
 23fdbc8:	2301      	movne	r3, #1
 23fdbca:	9103      	str	r1, [sp, #12]
 23fdbcc:	4669      	mov	r1, sp
    size_ = size;
 23fdbce:	9201      	str	r2, [sp, #4]
 23fdbd0:	f88d 3008 	strb.w	r3, [sp, #8]
 23fdbd4:	f7ff ffda 	bl	23fdb8c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fdbd8:	b005      	add	sp, #20
 23fdbda:	f85d fb04 	ldr.w	pc, [sp], #4

023fdbde <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fdbde:	2301      	movs	r3, #1
 23fdbe0:	f7ff bfeb 	b.w	23fdbba <_ZN7TwoWire11requestFromEhjh>

023fdbe4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fdbe4:	2200      	movs	r2, #0
 23fdbe6:	7c00      	ldrb	r0, [r0, #16]
 23fdbe8:	f7fd b998 	b.w	23faf1c <hal_i2c_begin_transmission>

023fdbec <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fdbec:	2200      	movs	r2, #0
 23fdbee:	7c00      	ldrb	r0, [r0, #16]
 23fdbf0:	f7fd b9a2 	b.w	23faf38 <hal_i2c_end_transmission>

023fdbf4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fdbf4:	2200      	movs	r2, #0
 23fdbf6:	6840      	ldr	r0, [r0, #4]
 23fdbf8:	4611      	mov	r1, r2
 23fdbfa:	f7fd bbcd 	b.w	23fb398 <network_ready>

023fdbfe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fdbfe:	2200      	movs	r2, #0
 23fdc00:	6840      	ldr	r0, [r0, #4]
 23fdc02:	4611      	mov	r1, r2
 23fdc04:	f7fd bc00 	b.w	23fb408 <network_listening>

023fdc08 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fdc08:	2200      	movs	r2, #0
 23fdc0a:	6840      	ldr	r0, [r0, #4]
 23fdc0c:	4611      	mov	r1, r2
 23fdc0e:	f7fd bc17 	b.w	23fb440 <network_get_listen_timeout>

023fdc12 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fdc12:	2200      	movs	r2, #0
 23fdc14:	6840      	ldr	r0, [r0, #4]
 23fdc16:	f7fd bc05 	b.w	23fb424 <network_set_listen_timeout>

023fdc1a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fdc1a:	2200      	movs	r2, #0
 23fdc1c:	6840      	ldr	r0, [r0, #4]
 23fdc1e:	f081 0101 	eor.w	r1, r1, #1
 23fdc22:	f7fd bbe3 	b.w	23fb3ec <network_listen>

023fdc26 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fdc26:	2300      	movs	r3, #0
 23fdc28:	6840      	ldr	r0, [r0, #4]
 23fdc2a:	461a      	mov	r2, r3
 23fdc2c:	4619      	mov	r1, r3
 23fdc2e:	f7fd bbcf 	b.w	23fb3d0 <network_off>

023fdc32 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fdc32:	2300      	movs	r3, #0
 23fdc34:	6840      	ldr	r0, [r0, #4]
 23fdc36:	461a      	mov	r2, r3
 23fdc38:	4619      	mov	r1, r3
 23fdc3a:	f7fd bbbb 	b.w	23fb3b4 <network_on>

023fdc3e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fdc3e:	2200      	movs	r2, #0
 23fdc40:	6840      	ldr	r0, [r0, #4]
 23fdc42:	4611      	mov	r1, r2
 23fdc44:	f7fd bb8c 	b.w	23fb360 <network_connecting>

023fdc48 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fdc48:	2200      	movs	r2, #0
 23fdc4a:	2102      	movs	r1, #2
 23fdc4c:	6840      	ldr	r0, [r0, #4]
 23fdc4e:	f7fd bb95 	b.w	23fb37c <network_disconnect>

023fdc52 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fdc52:	2300      	movs	r3, #0
 23fdc54:	6840      	ldr	r0, [r0, #4]
 23fdc56:	461a      	mov	r2, r3
 23fdc58:	f7fd bb74 	b.w	23fb344 <network_connect>

023fdc5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fdc5c:	2204      	movs	r2, #4
 23fdc5e:	4b02      	ldr	r3, [pc, #8]	; (23fdc68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fdc60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fdc62:	4a02      	ldr	r2, [pc, #8]	; (23fdc6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fdc64:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fdc66:	4770      	bx	lr
 23fdc68:	1007aedc 	.word	0x1007aedc
 23fdc6c:	023ffcc8 	.word	0x023ffcc8

023fdc70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fdc70:	2300      	movs	r3, #0
 23fdc72:	6840      	ldr	r0, [r0, #4]
 23fdc74:	461a      	mov	r2, r3
 23fdc76:	f7fd bb65 	b.w	23fb344 <network_connect>

023fdc7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fdc7a:	2200      	movs	r2, #0
 23fdc7c:	2102      	movs	r1, #2
 23fdc7e:	6840      	ldr	r0, [r0, #4]
 23fdc80:	f7fd bb7c 	b.w	23fb37c <network_disconnect>

023fdc84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fdc84:	2200      	movs	r2, #0
 23fdc86:	6840      	ldr	r0, [r0, #4]
 23fdc88:	4611      	mov	r1, r2
 23fdc8a:	f7fd bb69 	b.w	23fb360 <network_connecting>

023fdc8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fdc8e:	2200      	movs	r2, #0
 23fdc90:	6840      	ldr	r0, [r0, #4]
 23fdc92:	4611      	mov	r1, r2
 23fdc94:	f7fd bb80 	b.w	23fb398 <network_ready>

023fdc98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fdc98:	2300      	movs	r3, #0
 23fdc9a:	6840      	ldr	r0, [r0, #4]
 23fdc9c:	461a      	mov	r2, r3
 23fdc9e:	4619      	mov	r1, r3
 23fdca0:	f7fd bb88 	b.w	23fb3b4 <network_on>

023fdca4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fdca4:	2300      	movs	r3, #0
 23fdca6:	6840      	ldr	r0, [r0, #4]
 23fdca8:	461a      	mov	r2, r3
 23fdcaa:	4619      	mov	r1, r3
 23fdcac:	f7fd bb90 	b.w	23fb3d0 <network_off>

023fdcb0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fdcb0:	2100      	movs	r1, #0
 23fdcb2:	6840      	ldr	r0, [r0, #4]
 23fdcb4:	f7fd bbd2 	b.w	23fb45c <network_is_on>

023fdcb8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fdcb8:	2100      	movs	r1, #0
 23fdcba:	6840      	ldr	r0, [r0, #4]
 23fdcbc:	f7fd bbdc 	b.w	23fb478 <network_is_off>

023fdcc0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fdcc0:	2200      	movs	r2, #0
 23fdcc2:	6840      	ldr	r0, [r0, #4]
 23fdcc4:	f081 0101 	eor.w	r1, r1, #1
 23fdcc8:	f7fd bb90 	b.w	23fb3ec <network_listen>

023fdccc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fdccc:	2200      	movs	r2, #0
 23fdcce:	6840      	ldr	r0, [r0, #4]
 23fdcd0:	f7fd bba8 	b.w	23fb424 <network_set_listen_timeout>

023fdcd4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fdcd4:	2200      	movs	r2, #0
 23fdcd6:	6840      	ldr	r0, [r0, #4]
 23fdcd8:	4611      	mov	r1, r2
 23fdcda:	f7fd bbb1 	b.w	23fb440 <network_get_listen_timeout>

023fdcde <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fdcde:	2200      	movs	r2, #0
 23fdce0:	6840      	ldr	r0, [r0, #4]
 23fdce2:	4611      	mov	r1, r2
 23fdce4:	f7fd bb90 	b.w	23fb408 <network_listening>

023fdce8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fdce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdcec:	b095      	sub	sp, #84	; 0x54
 23fdcee:	4614      	mov	r4, r2
 23fdcf0:	460d      	mov	r5, r1
 23fdcf2:	4607      	mov	r7, r0
    IPAddress addr;
 23fdcf4:	f7ff fdc0 	bl	23fd878 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fdcf8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fdcfa:	221c      	movs	r2, #28
 23fdcfc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fdcfe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fdd00:	f000 fd0b 	bl	23fe71a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fdd04:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fdd06:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fdd08:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fdd0a:	2100      	movs	r1, #0
 23fdd0c:	466b      	mov	r3, sp
 23fdd0e:	aa0c      	add	r2, sp, #48	; 0x30
 23fdd10:	f7fc ff1a 	bl	23fab48 <netdb_getaddrinfo>
    if (!r) {
 23fdd14:	4604      	mov	r4, r0
 23fdd16:	2800      	cmp	r0, #0
 23fdd18:	d14b      	bne.n	23fddb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fdd1a:	4602      	mov	r2, r0
 23fdd1c:	2101      	movs	r1, #1
 23fdd1e:	6868      	ldr	r0, [r5, #4]
 23fdd20:	f7fd fb3a 	bl	23fb398 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdd24:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fdd26:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdd28:	4622      	mov	r2, r4
 23fdd2a:	6868      	ldr	r0, [r5, #4]
 23fdd2c:	f7fd fb34 	bl	23fb398 <network_ready>
        bool ok = false;
 23fdd30:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fdd32:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fdd34:	9e00      	ldr	r6, [sp, #0]
 23fdd36:	2e00      	cmp	r6, #0
 23fdd38:	d03b      	beq.n	23fddb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fdd3a:	2900      	cmp	r1, #0
 23fdd3c:	d139      	bne.n	23fddb2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fdd3e:	6873      	ldr	r3, [r6, #4]
 23fdd40:	2b02      	cmp	r3, #2
 23fdd42:	d003      	beq.n	23fdd4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fdd44:	2b0a      	cmp	r3, #10
 23fdd46:	d011      	beq.n	23fdd6c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fdd48:	69f6      	ldr	r6, [r6, #28]
 23fdd4a:	e7f4      	b.n	23fdd36 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fdd4c:	f1b8 0f00 	cmp.w	r8, #0
 23fdd50:	d0fa      	beq.n	23fdd48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fdd52:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fdd54:	a806      	add	r0, sp, #24
 23fdd56:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fdd58:	1d3c      	adds	r4, r7, #4
 23fdd5a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fdd5c:	f7ff fdba 	bl	23fd8d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fdd60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fdd62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fdd64:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fdd66:	4641      	mov	r1, r8
 23fdd68:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fdd6a:	e7ed      	b.n	23fdd48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fdd6c:	f1b9 0f00 	cmp.w	r9, #0
 23fdd70:	d0ea      	beq.n	23fdd48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fdd72:	2210      	movs	r2, #16
 23fdd74:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fdd76:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fdd78:	f000 fccf 	bl	23fe71a <memset>
                    a.v = 6;
 23fdd7c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdd7e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fdd80:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdd84:	f104 0308 	add.w	r3, r4, #8
 23fdd88:	3418      	adds	r4, #24
 23fdd8a:	462a      	mov	r2, r5
 23fdd8c:	6818      	ldr	r0, [r3, #0]
 23fdd8e:	6859      	ldr	r1, [r3, #4]
 23fdd90:	3308      	adds	r3, #8
 23fdd92:	c203      	stmia	r2!, {r0, r1}
 23fdd94:	42a3      	cmp	r3, r4
 23fdd96:	4615      	mov	r5, r2
 23fdd98:	d1f7      	bne.n	23fdd8a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fdd9a:	a901      	add	r1, sp, #4
 23fdd9c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fdd9e:	1d3c      	adds	r4, r7, #4
 23fdda0:	ad07      	add	r5, sp, #28
 23fdda2:	f7ff fd77 	bl	23fd894 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fdda6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fdda8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fddaa:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fddac:	4649      	mov	r1, r9
 23fddae:	7023      	strb	r3, [r4, #0]
                    break;
 23fddb0:	e7ca      	b.n	23fdd48 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fddb2:	9800      	ldr	r0, [sp, #0]
 23fddb4:	f7fc feba 	bl	23fab2c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fddb8:	4638      	mov	r0, r7
 23fddba:	b015      	add	sp, #84	; 0x54
 23fddbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fddc0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fddc0:	4b02      	ldr	r3, [pc, #8]	; (23fddcc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fddc2:	4a03      	ldr	r2, [pc, #12]	; (23fddd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fddc4:	601a      	str	r2, [r3, #0]
 23fddc6:	2200      	movs	r2, #0
 23fddc8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fddca:	4770      	bx	lr
 23fddcc:	1007aee4 	.word	0x1007aee4
 23fddd0:	023ffd04 	.word	0x023ffd04

023fddd4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fddd4:	2201      	movs	r2, #1
 23fddd6:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fddda:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fddde:	4618      	mov	r0, r3
 23fdde0:	2901      	cmp	r1, #1
 23fdde2:	d108      	bne.n	23fddf6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fdde4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fdde8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fddec:	3a01      	subs	r2, #1
 23fddee:	f103 0310 	add.w	r3, r3, #16
 23fddf2:	d1f2      	bne.n	23fddda <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fddf4:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fddf6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fddf8:	bf04      	itt	eq
 23fddfa:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fddfe:	1852      	addeq	r2, r2, r1
 23fde00:	e7f4      	b.n	23fddec <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fde02 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fde02:	b40e      	push	{r1, r2, r3}
 23fde04:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fde06:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde08:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fde0a:	af00      	add	r7, sp, #0
 23fde0c:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fde10:	f855 2b04 	ldr.w	r2, [r5], #4
 23fde14:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde16:	462b      	mov	r3, r5
 23fde18:	1878      	adds	r0, r7, r1
 23fde1a:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fde1c:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde1e:	f7fd fc19 	bl	23fb654 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fde22:	280f      	cmp	r0, #15
 23fde24:	687a      	ldr	r2, [r7, #4]
 23fde26:	d91a      	bls.n	23fde5e <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fde28:	f100 0308 	add.w	r3, r0, #8
 23fde2c:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fde30:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fde32:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde36:	1c41      	adds	r1, r0, #1
 23fde38:	462b      	mov	r3, r5
 23fde3a:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fde3c:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fde3e:	f7fd fc09 	bl	23fb654 <vsnprintf>
        if (n > 0) {
 23fde42:	1e02      	subs	r2, r0, #0
 23fde44:	dd04      	ble.n	23fde50 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fde46:	6823      	ldr	r3, [r4, #0]
 23fde48:	4669      	mov	r1, sp
 23fde4a:	4620      	mov	r0, r4
 23fde4c:	689b      	ldr	r3, [r3, #8]
 23fde4e:	4798      	blx	r3
 23fde50:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fde52:	3720      	adds	r7, #32
 23fde54:	46bd      	mov	sp, r7
 23fde56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fde5a:	b003      	add	sp, #12
 23fde5c:	4770      	bx	lr
    } else if (n > 0) {
 23fde5e:	2800      	cmp	r0, #0
 23fde60:	d0f7      	beq.n	23fde52 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fde62:	6823      	ldr	r3, [r4, #0]
 23fde64:	4602      	mov	r2, r0
 23fde66:	689b      	ldr	r3, [r3, #8]
 23fde68:	4620      	mov	r0, r4
 23fde6a:	f107 0110 	add.w	r1, r7, #16
 23fde6e:	4798      	blx	r3
}
 23fde70:	e7ef      	b.n	23fde52 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fde72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fde72:	b538      	push	{r3, r4, r5, lr}
 23fde74:	680b      	ldr	r3, [r1, #0]
 23fde76:	4604      	mov	r4, r0
 23fde78:	6003      	str	r3, [r0, #0]
 23fde7a:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fde7c:	6843      	ldr	r3, [r0, #4]
 23fde7e:	429d      	cmp	r5, r3
 23fde80:	d008      	beq.n	23fde94 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fde82:	b115      	cbz	r5, 23fde8a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fde84:	686b      	ldr	r3, [r5, #4]
 23fde86:	3301      	adds	r3, #1
 23fde88:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fde8a:	6860      	ldr	r0, [r4, #4]
 23fde8c:	b108      	cbz	r0, 23fde92 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fde8e:	f7fd ff4c 	bl	23fbd2a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fde92:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fde94:	bd38      	pop	{r3, r4, r5, pc}

023fde96 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23fde96:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fde98:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fde9a:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fde9e:	2201      	movs	r2, #1
 23fdea0:	689b      	ldr	r3, [r3, #8]
 23fdea2:	f10d 0107 	add.w	r1, sp, #7
 23fdea6:	4798      	blx	r3
}
 23fdea8:	b003      	add	sp, #12
 23fdeaa:	f85d fb04 	ldr.w	pc, [sp], #4

023fdeae <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdeae:	460b      	mov	r3, r1
 23fdeb0:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fdeb2:	2200      	movs	r2, #0
 23fdeb4:	b510      	push	{r4, lr}
 23fdeb6:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdeb8:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fdebc:	6083      	str	r3, [r0, #8]
    if (t) {
 23fdebe:	b90b      	cbnz	r3, 23fdec4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fdec0:	4620      	mov	r0, r4
 23fdec2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fdec4:	f7ff ffd5 	bl	23fde72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fdec8:	e7fa      	b.n	23fdec0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fdeca <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fdeca:	6883      	ldr	r3, [r0, #8]
 23fdecc:	b1eb      	cbz	r3, 23fdf0a <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fdece:	781a      	ldrb	r2, [r3, #0]
 23fded0:	2a03      	cmp	r2, #3
 23fded2:	d81a      	bhi.n	23fdf0a <_ZNK5spark9JSONValue4typeEv+0x40>
 23fded4:	e8df f002 	tbb	[pc, r2]
 23fded8:	1b021704 	.word	0x1b021704
 23fdedc:	2005      	movs	r0, #5
 23fdede:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fdee0:	6802      	ldr	r2, [r0, #0]
 23fdee2:	685b      	ldr	r3, [r3, #4]
 23fdee4:	6852      	ldr	r2, [r2, #4]
 23fdee6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fdee8:	282d      	cmp	r0, #45	; 0x2d
 23fdeea:	d012      	beq.n	23fdf12 <_ZNK5spark9JSONValue4typeEv+0x48>
 23fdeec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fdef0:	2b09      	cmp	r3, #9
 23fdef2:	d90e      	bls.n	23fdf12 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fdef4:	2874      	cmp	r0, #116	; 0x74
 23fdef6:	d00e      	beq.n	23fdf16 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fdef8:	2866      	cmp	r0, #102	; 0x66
 23fdefa:	d00c      	beq.n	23fdf16 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fdefc:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fdf00:	4258      	negs	r0, r3
 23fdf02:	4158      	adcs	r0, r3
 23fdf04:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fdf06:	2006      	movs	r0, #6
 23fdf08:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fdf0a:	2000      	movs	r0, #0
 23fdf0c:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fdf0e:	2004      	movs	r0, #4
 23fdf10:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fdf12:	2003      	movs	r0, #3
 23fdf14:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fdf16:	2002      	movs	r0, #2
}
 23fdf18:	4770      	bx	lr

023fdf1a <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fdf1a:	b510      	push	{r4, lr}
 23fdf1c:	4604      	mov	r4, r0
    switch (type()) {
 23fdf1e:	f7ff ffd4 	bl	23fdeca <_ZNK5spark9JSONValue4typeEv>
 23fdf22:	2802      	cmp	r0, #2
 23fdf24:	d00e      	beq.n	23fdf44 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fdf26:	1ec3      	subs	r3, r0, #3
 23fdf28:	b2db      	uxtb	r3, r3
 23fdf2a:	2b01      	cmp	r3, #1
 23fdf2c:	d814      	bhi.n	23fdf58 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fdf2e:	6822      	ldr	r2, [r4, #0]
 23fdf30:	68a3      	ldr	r3, [r4, #8]
 23fdf32:	6850      	ldr	r0, [r2, #4]
 23fdf34:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fdf36:	220a      	movs	r2, #10
}
 23fdf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fdf3c:	2100      	movs	r1, #0
 23fdf3e:	4418      	add	r0, r3
 23fdf40:	f000 bd0a 	b.w	23fe958 <strtol>
        const char* const s = d_->json + t_->start;
 23fdf44:	6822      	ldr	r2, [r4, #0]
 23fdf46:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fdf48:	6852      	ldr	r2, [r2, #4]
 23fdf4a:	685b      	ldr	r3, [r3, #4]
 23fdf4c:	5cd0      	ldrb	r0, [r2, r3]
 23fdf4e:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fdf52:	4258      	negs	r0, r3
 23fdf54:	4158      	adcs	r0, r3
}
 23fdf56:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fdf58:	2000      	movs	r0, #0
 23fdf5a:	e7fc      	b.n	23fdf56 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fdf5c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdf5c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdf5e:	2300      	movs	r3, #0
 23fdf60:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdf62:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fdf66:	480e      	ldr	r0, [pc, #56]	; (23fdfa0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fdf68:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fdf6c:	b1a9      	cbz	r1, 23fdf9a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fdf6e:	780b      	ldrb	r3, [r1, #0]
 23fdf70:	2b03      	cmp	r3, #3
 23fdf72:	d006      	beq.n	23fdf82 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fdf74:	b98b      	cbnz	r3, 23fdf9a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fdf76:	6813      	ldr	r3, [r2, #0]
 23fdf78:	6858      	ldr	r0, [r3, #4]
 23fdf7a:	684b      	ldr	r3, [r1, #4]
 23fdf7c:	5cc3      	ldrb	r3, [r0, r3]
 23fdf7e:	2b6e      	cmp	r3, #110	; 0x6e
 23fdf80:	d007      	beq.n	23fdf92 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fdf82:	6813      	ldr	r3, [r2, #0]
 23fdf84:	684d      	ldr	r5, [r1, #4]
 23fdf86:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fdf88:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fdf8a:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fdf8c:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fdf8e:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fdf90:	60e3      	str	r3, [r4, #12]
 23fdf92:	4611      	mov	r1, r2
 23fdf94:	4620      	mov	r0, r4
 23fdf96:	f7ff ff6c 	bl	23fde72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdf9a:	4620      	mov	r0, r4
 23fdf9c:	bd38      	pop	{r3, r4, r5, pc}
 23fdf9e:	bf00      	nop
 23fdfa0:	023ffb5a 	.word	0x023ffb5a

023fdfa4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fdfa4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fdfa6:	2500      	movs	r5, #0
 23fdfa8:	460b      	mov	r3, r1
 23fdfaa:	4604      	mov	r4, r0
 23fdfac:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fdfae:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fdfb2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fdfb6:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fdfba:	b14b      	cbz	r3, 23fdfd0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fdfbc:	781a      	ldrb	r2, [r3, #0]
 23fdfbe:	2a01      	cmp	r2, #1
 23fdfc0:	d106      	bne.n	23fdfd0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fdfc2:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fdfc6:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fdfc8:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fdfca:	6143      	str	r3, [r0, #20]
 23fdfcc:	f7ff ff51 	bl	23fde72 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fdfd0:	4620      	mov	r0, r4
 23fdfd2:	bd38      	pop	{r3, r4, r5, pc}

023fdfd4 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fdfd4:	b510      	push	{r4, lr}
    if (!n_) {
 23fdfd6:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fdfd8:	4604      	mov	r4, r0
    if (!n_) {
 23fdfda:	b163      	cbz	r3, 23fdff6 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fdfdc:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fdfde:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fdfe0:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fdfe2:	3010      	adds	r0, #16
 23fdfe4:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fdfe6:	6120      	str	r0, [r4, #16]
    --n_;
 23fdfe8:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fdfea:	b113      	cbz	r3, 23fdff2 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fdfec:	f7ff fef2 	bl	23fddd4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fdff0:	60a0      	str	r0, [r4, #8]
    return true;
 23fdff2:	2001      	movs	r0, #1
 23fdff4:	e000      	b.n	23fdff8 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fdff6:	4618      	mov	r0, r3
}
 23fdff8:	bd10      	pop	{r4, pc}

023fdffa <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fdffa:	b510      	push	{r4, lr}
    write('}');
 23fdffc:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fdffe:	4604      	mov	r4, r0
    write('}');
 23fe000:	f7ff ff49 	bl	23fde96 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fe004:	2301      	movs	r3, #1
}
 23fe006:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe008:	7123      	strb	r3, [r4, #4]
}
 23fe00a:	bd10      	pop	{r4, pc}

023fe00c <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fe00c:	b508      	push	{r3, lr}
    switch (state_) {
 23fe00e:	7903      	ldrb	r3, [r0, #4]
 23fe010:	2b01      	cmp	r3, #1
 23fe012:	d002      	beq.n	23fe01a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fe014:	2b02      	cmp	r3, #2
 23fe016:	d004      	beq.n	23fe022 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fe018:	bd08      	pop	{r3, pc}
        write(',');
 23fe01a:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fe01c:	f7ff ff3b 	bl	23fde96 <_ZN5spark10JSONWriter5writeEc>
}
 23fe020:	e7fa      	b.n	23fe018 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fe022:	213a      	movs	r1, #58	; 0x3a
 23fe024:	e7fa      	b.n	23fe01c <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fe026 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fe026:	b510      	push	{r4, lr}
 23fe028:	4604      	mov	r4, r0
    writeSeparator();
 23fe02a:	f7ff ffef 	bl	23fe00c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fe02e:	4620      	mov	r0, r4
 23fe030:	217b      	movs	r1, #123	; 0x7b
 23fe032:	f7ff ff30 	bl	23fde96 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fe036:	2300      	movs	r3, #0
}
 23fe038:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fe03a:	7123      	strb	r3, [r4, #4]
}
 23fe03c:	bd10      	pop	{r4, pc}
	...

023fe040 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fe040:	b513      	push	{r0, r1, r4, lr}
 23fe042:	4604      	mov	r4, r0
 23fe044:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe046:	f7ff ffe1 	bl	23fe00c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fe04a:	6823      	ldr	r3, [r4, #0]
 23fe04c:	4620      	mov	r0, r4
 23fe04e:	68db      	ldr	r3, [r3, #12]
 23fe050:	9a01      	ldr	r2, [sp, #4]
 23fe052:	4903      	ldr	r1, [pc, #12]	; (23fe060 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fe054:	4798      	blx	r3
    state_ = NEXT;
 23fe056:	2301      	movs	r3, #1
}
 23fe058:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe05a:	7123      	strb	r3, [r4, #4]
}
 23fe05c:	b002      	add	sp, #8
 23fe05e:	bd10      	pop	{r4, pc}
 23fe060:	023febf2 	.word	0x023febf2

023fe064 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fe064:	b513      	push	{r0, r1, r4, lr}
 23fe066:	4604      	mov	r4, r0
 23fe068:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fe06a:	f7ff ffcf 	bl	23fe00c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fe06e:	6823      	ldr	r3, [r4, #0]
 23fe070:	4620      	mov	r0, r4
 23fe072:	68db      	ldr	r3, [r3, #12]
 23fe074:	9a01      	ldr	r2, [sp, #4]
 23fe076:	4903      	ldr	r1, [pc, #12]	; (23fe084 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fe078:	4798      	blx	r3
    state_ = NEXT;
 23fe07a:	2301      	movs	r3, #1
}
 23fe07c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe07e:	7123      	strb	r3, [r4, #4]
}
 23fe080:	b002      	add	sp, #8
 23fe082:	bd10      	pop	{r4, pc}
 23fe084:	023ffd38 	.word	0x023ffd38

023fe088 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe08c:	460d      	mov	r5, r1
 23fe08e:	4690      	mov	r8, r2
    write('"');
 23fe090:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fe092:	4604      	mov	r4, r0
 23fe094:	462f      	mov	r7, r5
    write('"');
 23fe096:	f7ff fefe 	bl	23fde96 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fe09a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fe140 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fe09e:	44a8      	add	r8, r5
    while (s != end) {
 23fe0a0:	4547      	cmp	r7, r8
 23fe0a2:	46ba      	mov	sl, r7
 23fe0a4:	d03d      	beq.n	23fe122 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fe0a6:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fe0aa:	2e22      	cmp	r6, #34	; 0x22
 23fe0ac:	d006      	beq.n	23fe0bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe0ae:	2e5c      	cmp	r6, #92	; 0x5c
 23fe0b0:	d004      	beq.n	23fe0bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fe0b2:	4630      	mov	r0, r6
 23fe0b4:	f000 fb02 	bl	23fe6bc <isprint>
 23fe0b8:	2800      	cmp	r0, #0
 23fe0ba:	d1f1      	bne.n	23fe0a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fe0bc:	6823      	ldr	r3, [r4, #0]
 23fe0be:	4629      	mov	r1, r5
 23fe0c0:	4620      	mov	r0, r4
 23fe0c2:	689b      	ldr	r3, [r3, #8]
 23fe0c4:	ebaa 0205 	sub.w	r2, sl, r5
 23fe0c8:	4798      	blx	r3
            write('\\');
 23fe0ca:	215c      	movs	r1, #92	; 0x5c
 23fe0cc:	4620      	mov	r0, r4
 23fe0ce:	f7ff fee2 	bl	23fde96 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fe0d2:	2e0d      	cmp	r6, #13
 23fe0d4:	d80a      	bhi.n	23fe0ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fe0d6:	2e07      	cmp	r6, #7
 23fe0d8:	d91c      	bls.n	23fe114 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe0da:	f1a6 0308 	sub.w	r3, r6, #8
 23fe0de:	2b05      	cmp	r3, #5
 23fe0e0:	d818      	bhi.n	23fe114 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fe0e2:	e8df f003 	tbb	[pc, r3]
 23fe0e6:	0f0d      	.short	0x0f0d
 23fe0e8:	15131711 	.word	0x15131711
 23fe0ec:	2e22      	cmp	r6, #34	; 0x22
 23fe0ee:	d001      	beq.n	23fe0f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fe0f0:	2e5c      	cmp	r6, #92	; 0x5c
 23fe0f2:	d10f      	bne.n	23fe114 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fe0f4:	4631      	mov	r1, r6
                write('b');
 23fe0f6:	4620      	mov	r0, r4
 23fe0f8:	f7ff fecd 	bl	23fde96 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fe0fc:	463d      	mov	r5, r7
    while (s != end) {
 23fe0fe:	e7cf      	b.n	23fe0a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fe100:	2162      	movs	r1, #98	; 0x62
 23fe102:	e7f8      	b.n	23fe0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fe104:	2174      	movs	r1, #116	; 0x74
 23fe106:	e7f6      	b.n	23fe0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fe108:	216e      	movs	r1, #110	; 0x6e
 23fe10a:	e7f4      	b.n	23fe0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fe10c:	2166      	movs	r1, #102	; 0x66
 23fe10e:	e7f2      	b.n	23fe0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fe110:	2172      	movs	r1, #114	; 0x72
 23fe112:	e7f0      	b.n	23fe0f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fe114:	6823      	ldr	r3, [r4, #0]
 23fe116:	4632      	mov	r2, r6
 23fe118:	4649      	mov	r1, r9
 23fe11a:	4620      	mov	r0, r4
 23fe11c:	68db      	ldr	r3, [r3, #12]
 23fe11e:	4798      	blx	r3
                break;
 23fe120:	e7ec      	b.n	23fe0fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fe122:	42bd      	cmp	r5, r7
 23fe124:	d005      	beq.n	23fe132 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fe126:	6823      	ldr	r3, [r4, #0]
 23fe128:	4629      	mov	r1, r5
 23fe12a:	4620      	mov	r0, r4
 23fe12c:	689b      	ldr	r3, [r3, #8]
 23fe12e:	1b7a      	subs	r2, r7, r5
 23fe130:	4798      	blx	r3
    }
    write('"');
 23fe132:	2122      	movs	r1, #34	; 0x22
 23fe134:	4620      	mov	r0, r4
 23fe136:	f7ff feae 	bl	23fde96 <_ZN5spark10JSONWriter5writeEc>
}
 23fe13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe13e:	bf00      	nop
 23fe140:	023ffd3b 	.word	0x023ffd3b

023fe144 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fe144:	b513      	push	{r0, r1, r4, lr}
 23fe146:	4604      	mov	r4, r0
 23fe148:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe14c:	f7ff ff5e 	bl	23fe00c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fe150:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe154:	4620      	mov	r0, r4
 23fe156:	f7ff ff97 	bl	23fe088 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fe15a:	2302      	movs	r3, #2
}
 23fe15c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fe15e:	7123      	strb	r3, [r4, #4]
}
 23fe160:	b002      	add	sp, #8
 23fe162:	bd10      	pop	{r4, pc}

023fe164 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fe164:	b513      	push	{r0, r1, r4, lr}
 23fe166:	4604      	mov	r4, r0
 23fe168:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fe16c:	f7ff ff4e 	bl	23fe00c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fe170:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fe174:	4620      	mov	r0, r4
 23fe176:	f7ff ff87 	bl	23fe088 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fe17a:	2301      	movs	r3, #1
}
 23fe17c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fe17e:	7123      	strb	r3, [r4, #4]
}
 23fe180:	b002      	add	sp, #8
 23fe182:	bd10      	pop	{r4, pc}

023fe184 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe184:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe186:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe188:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe18a:	d902      	bls.n	23fe192 <pinAvailable+0xe>
    return false;
 23fe18c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe18e:	b003      	add	sp, #12
 23fe190:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe192:	f1a0 030f 	sub.w	r3, r0, #15
 23fe196:	2b02      	cmp	r3, #2
 23fe198:	d90b      	bls.n	23fe1b2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe19a:	2801      	cmp	r0, #1
 23fe19c:	d821      	bhi.n	23fe1e2 <pinAvailable+0x5e>
 23fe19e:	f000 f947 	bl	23fe430 <_Z19__fetch_global_Wirev>
 23fe1a2:	2100      	movs	r1, #0
 23fe1a4:	7c00      	ldrb	r0, [r0, #16]
 23fe1a6:	f7fc ff1b 	bl	23fafe0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe1aa:	f080 0001 	eor.w	r0, r0, #1
 23fe1ae:	b2c0      	uxtb	r0, r0
 23fe1b0:	e7ed      	b.n	23fe18e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe1b2:	4d11      	ldr	r5, [pc, #68]	; (23fe1f8 <pinAvailable+0x74>)
 23fe1b4:	e8d5 1f8f 	ldab	r1, [r5]
 23fe1b8:	f011 0101 	ands.w	r1, r1, #1
 23fe1bc:	d10b      	bne.n	23fe1d6 <pinAvailable+0x52>
 23fe1be:	4628      	mov	r0, r5
 23fe1c0:	9101      	str	r1, [sp, #4]
 23fe1c2:	f7fa fca9 	bl	23f8b18 <__cxa_guard_acquire>
 23fe1c6:	9901      	ldr	r1, [sp, #4]
 23fe1c8:	b128      	cbz	r0, 23fe1d6 <pinAvailable+0x52>
 23fe1ca:	480c      	ldr	r0, [pc, #48]	; (23fe1fc <pinAvailable+0x78>)
 23fe1cc:	f7fd fada 	bl	23fb784 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe1d0:	4628      	mov	r0, r5
 23fe1d2:	f7fa fca6 	bl	23f8b22 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe1d6:	4b09      	ldr	r3, [pc, #36]	; (23fe1fc <pinAvailable+0x78>)
 23fe1d8:	7818      	ldrb	r0, [r3, #0]
 23fe1da:	f7fc ff71 	bl	23fb0c0 <hal_spi_is_enabled>
 23fe1de:	2800      	cmp	r0, #0
 23fe1e0:	d1d4      	bne.n	23fe18c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe1e2:	3c08      	subs	r4, #8
 23fe1e4:	2c01      	cmp	r4, #1
 23fe1e6:	d805      	bhi.n	23fe1f4 <pinAvailable+0x70>
 23fe1e8:	f000 f876 	bl	23fe2d8 <_Z22__fetch_global_Serial1v>
 23fe1ec:	7c00      	ldrb	r0, [r0, #16]
 23fe1ee:	f7fc fe4f 	bl	23fae90 <hal_usart_is_enabled>
 23fe1f2:	e7da      	b.n	23fe1aa <pinAvailable+0x26>
  return true; // 'pin' is available
 23fe1f4:	2001      	movs	r0, #1
 23fe1f6:	e7ca      	b.n	23fe18e <pinAvailable+0xa>
 23fe1f8:	1007ae40 	.word	0x1007ae40
 23fe1fc:	1007ae44 	.word	0x1007ae44

023fe200 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe200:	281b      	cmp	r0, #27
{
 23fe202:	b538      	push	{r3, r4, r5, lr}
 23fe204:	4604      	mov	r4, r0
 23fe206:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe208:	d80a      	bhi.n	23fe220 <pinMode+0x20>
 23fe20a:	29ff      	cmp	r1, #255	; 0xff
 23fe20c:	d008      	beq.n	23fe220 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fe20e:	f7ff ffb9 	bl	23fe184 <pinAvailable>
 23fe212:	b128      	cbz	r0, 23fe220 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fe214:	4629      	mov	r1, r5
 23fe216:	4620      	mov	r0, r4
}
 23fe218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fe21c:	f7fc bcb0 	b.w	23fab80 <hal_gpio_mode>
}
 23fe220:	bd38      	pop	{r3, r4, r5, pc}

023fe222 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fe222:	b538      	push	{r3, r4, r5, lr}
 23fe224:	4604      	mov	r4, r0
 23fe226:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fe228:	f7fc fcb8 	bl	23fab9c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fe22c:	28ff      	cmp	r0, #255	; 0xff
 23fe22e:	d010      	beq.n	23fe252 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fe230:	2806      	cmp	r0, #6
 23fe232:	d804      	bhi.n	23fe23e <digitalWrite+0x1c>
 23fe234:	234d      	movs	r3, #77	; 0x4d
 23fe236:	fa23 f000 	lsr.w	r0, r3, r0
 23fe23a:	07c3      	lsls	r3, r0, #31
 23fe23c:	d409      	bmi.n	23fe252 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fe23e:	4620      	mov	r0, r4
 23fe240:	f7ff ffa0 	bl	23fe184 <pinAvailable>
 23fe244:	b128      	cbz	r0, 23fe252 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fe246:	4629      	mov	r1, r5
 23fe248:	4620      	mov	r0, r4
}
 23fe24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fe24e:	f7fc bcb3 	b.w	23fabb8 <hal_gpio_write>
}
 23fe252:	bd38      	pop	{r3, r4, r5, pc}

023fe254 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23fe254:	b510      	push	{r4, lr}
 23fe256:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23fe258:	f7fc fca0 	bl	23fab9c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23fe25c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23fe25e:	b2db      	uxtb	r3, r3
 23fe260:	2b01      	cmp	r3, #1
 23fe262:	d908      	bls.n	23fe276 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23fe264:	4620      	mov	r0, r4
 23fe266:	f7ff ff8d 	bl	23fe184 <pinAvailable>
 23fe26a:	b120      	cbz	r0, 23fe276 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23fe26c:	4620      	mov	r0, r4
}
 23fe26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23fe272:	f7fc bcaf 	b.w	23fabd4 <hal_gpio_read>
}
 23fe276:	2000      	movs	r0, #0
 23fe278:	bd10      	pop	{r4, pc}

023fe27a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe27a:	4770      	bx	lr

023fe27c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe27c:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe27e:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe280:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe282:	462a      	mov	r2, r5
 23fe284:	2100      	movs	r1, #0
 23fe286:	f000 fa48 	bl	23fe71a <memset>
 23fe28a:	8025      	strh	r5, [r4, #0]
 23fe28c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe28e:	4907      	ldr	r1, [pc, #28]	; (23fe2ac <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fe290:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fe292:	8125      	strh	r5, [r4, #8]
 23fe294:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe296:	f000 f8f1 	bl	23fe47c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe29a:	4904      	ldr	r1, [pc, #16]	; (23fe2ac <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fe29c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fe29e:	4628      	mov	r0, r5
 23fe2a0:	f000 f8ec 	bl	23fe47c <_ZnajRKSt9nothrow_t>
    };
 23fe2a4:	60e0      	str	r0, [r4, #12]
}
 23fe2a6:	4620      	mov	r0, r4
 23fe2a8:	bd38      	pop	{r3, r4, r5, pc}
 23fe2aa:	bf00      	nop
 23fe2ac:	023ffd41 	.word	0x023ffd41

023fe2b0 <__tcf_2>:
 23fe2b0:	4770      	bx	lr

023fe2b2 <__tcf_1>:
 23fe2b2:	4770      	bx	lr

023fe2b4 <_Z20acquireSerial1Bufferv>:
{
 23fe2b4:	b510      	push	{r4, lr}
 23fe2b6:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fe2b8:	f7ff ffe0 	bl	23fe27c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fe2bc:	4620      	mov	r0, r4
 23fe2be:	bd10      	pop	{r4, pc}

023fe2c0 <_Z20acquireSerial2Bufferv>:
 23fe2c0:	b510      	push	{r4, lr}
 23fe2c2:	4604      	mov	r4, r0
 23fe2c4:	f7ff ffda 	bl	23fe27c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe2c8:	4620      	mov	r0, r4
 23fe2ca:	bd10      	pop	{r4, pc}

023fe2cc <_Z20acquireSerial3Bufferv>:
 23fe2cc:	b510      	push	{r4, lr}
 23fe2ce:	4604      	mov	r4, r0
 23fe2d0:	f7ff ffd4 	bl	23fe27c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fe2d4:	4620      	mov	r0, r4
 23fe2d6:	bd10      	pop	{r4, pc}

023fe2d8 <_Z22__fetch_global_Serial1v>:
{
 23fe2d8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe2da:	4d0e      	ldr	r5, [pc, #56]	; (23fe314 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fe2dc:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe2de:	e8d5 1f8f 	ldab	r1, [r5]
 23fe2e2:	f011 0401 	ands.w	r4, r1, #1
 23fe2e6:	d111      	bne.n	23fe30c <_Z22__fetch_global_Serial1v+0x34>
 23fe2e8:	4628      	mov	r0, r5
 23fe2ea:	f7fa fc15 	bl	23f8b18 <__cxa_guard_acquire>
 23fe2ee:	b168      	cbz	r0, 23fe30c <_Z22__fetch_global_Serial1v+0x34>
 23fe2f0:	a801      	add	r0, sp, #4
 23fe2f2:	f7ff ffdf 	bl	23fe2b4 <_Z20acquireSerial1Bufferv>
 23fe2f6:	4621      	mov	r1, r4
 23fe2f8:	aa01      	add	r2, sp, #4
 23fe2fa:	4807      	ldr	r0, [pc, #28]	; (23fe318 <_Z22__fetch_global_Serial1v+0x40>)
 23fe2fc:	f7ff fbc0 	bl	23fda80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe300:	4628      	mov	r0, r5
 23fe302:	f7fa fc0e 	bl	23f8b22 <__cxa_guard_release>
 23fe306:	4805      	ldr	r0, [pc, #20]	; (23fe31c <_Z22__fetch_global_Serial1v+0x44>)
 23fe308:	f000 f9d2 	bl	23fe6b0 <atexit>
    return serial1;
}
 23fe30c:	4802      	ldr	r0, [pc, #8]	; (23fe318 <_Z22__fetch_global_Serial1v+0x40>)
 23fe30e:	b007      	add	sp, #28
 23fe310:	bd30      	pop	{r4, r5, pc}
 23fe312:	bf00      	nop
 23fe314:	1007aeec 	.word	0x1007aeec
 23fe318:	1007aef8 	.word	0x1007aef8
 23fe31c:	023fe27b 	.word	0x023fe27b

023fe320 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fe320:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe322:	4c0d      	ldr	r4, [pc, #52]	; (23fe358 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fe324:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fe326:	e8d4 3f8f 	ldab	r3, [r4]
 23fe32a:	07db      	lsls	r3, r3, #31
 23fe32c:	d411      	bmi.n	23fe352 <_Z22__fetch_global_Serial2v+0x32>
 23fe32e:	4620      	mov	r0, r4
 23fe330:	f7fa fbf2 	bl	23f8b18 <__cxa_guard_acquire>
 23fe334:	b168      	cbz	r0, 23fe352 <_Z22__fetch_global_Serial2v+0x32>
 23fe336:	a801      	add	r0, sp, #4
 23fe338:	f7ff ffc2 	bl	23fe2c0 <_Z20acquireSerial2Bufferv>
 23fe33c:	2101      	movs	r1, #1
 23fe33e:	aa01      	add	r2, sp, #4
 23fe340:	4806      	ldr	r0, [pc, #24]	; (23fe35c <_Z22__fetch_global_Serial2v+0x3c>)
 23fe342:	f7ff fb9d 	bl	23fda80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe346:	4620      	mov	r0, r4
 23fe348:	f7fa fbeb 	bl	23f8b22 <__cxa_guard_release>
 23fe34c:	4804      	ldr	r0, [pc, #16]	; (23fe360 <_Z22__fetch_global_Serial2v+0x40>)
 23fe34e:	f000 f9af 	bl	23fe6b0 <atexit>
	return serial2;
}
 23fe352:	4802      	ldr	r0, [pc, #8]	; (23fe35c <_Z22__fetch_global_Serial2v+0x3c>)
 23fe354:	b006      	add	sp, #24
 23fe356:	bd10      	pop	{r4, pc}
 23fe358:	1007aef0 	.word	0x1007aef0
 23fe35c:	1007af0c 	.word	0x1007af0c
 23fe360:	023fe2b3 	.word	0x023fe2b3

023fe364 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fe364:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fe366:	f7ff ffdb 	bl	23fe320 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe36a:	4b07      	ldr	r3, [pc, #28]	; (23fe388 <_Z15serialEventRun2v+0x24>)
 23fe36c:	4604      	mov	r4, r0
 23fe36e:	b153      	cbz	r3, 23fe386 <_Z15serialEventRun2v+0x22>
 23fe370:	f7ff fba4 	bl	23fdabc <_ZN11USARTSerial9isEnabledEv>
 23fe374:	b138      	cbz	r0, 23fe386 <_Z15serialEventRun2v+0x22>
 23fe376:	6823      	ldr	r3, [r4, #0]
 23fe378:	4620      	mov	r0, r4
 23fe37a:	691b      	ldr	r3, [r3, #16]
 23fe37c:	4798      	blx	r3
 23fe37e:	2800      	cmp	r0, #0
 23fe380:	dd01      	ble.n	23fe386 <_Z15serialEventRun2v+0x22>
        handler();
 23fe382:	e000      	b.n	23fe386 <_Z15serialEventRun2v+0x22>
 23fe384:	bf00      	nop
}
 23fe386:	bd10      	pop	{r4, pc}
 23fe388:	00000000 	.word	0x00000000

023fe38c <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fe38c:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe38e:	4c0d      	ldr	r4, [pc, #52]	; (23fe3c4 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fe390:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fe392:	e8d4 3f8f 	ldab	r3, [r4]
 23fe396:	07db      	lsls	r3, r3, #31
 23fe398:	d411      	bmi.n	23fe3be <_Z22__fetch_global_Serial3v+0x32>
 23fe39a:	4620      	mov	r0, r4
 23fe39c:	f7fa fbbc 	bl	23f8b18 <__cxa_guard_acquire>
 23fe3a0:	b168      	cbz	r0, 23fe3be <_Z22__fetch_global_Serial3v+0x32>
 23fe3a2:	a801      	add	r0, sp, #4
 23fe3a4:	f7ff ff92 	bl	23fe2cc <_Z20acquireSerial3Bufferv>
 23fe3a8:	2102      	movs	r1, #2
 23fe3aa:	aa01      	add	r2, sp, #4
 23fe3ac:	4806      	ldr	r0, [pc, #24]	; (23fe3c8 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe3ae:	f7ff fb67 	bl	23fda80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fe3b2:	4620      	mov	r0, r4
 23fe3b4:	f7fa fbb5 	bl	23f8b22 <__cxa_guard_release>
 23fe3b8:	4804      	ldr	r0, [pc, #16]	; (23fe3cc <_Z22__fetch_global_Serial3v+0x40>)
 23fe3ba:	f000 f979 	bl	23fe6b0 <atexit>
	return serial3;
}
 23fe3be:	4802      	ldr	r0, [pc, #8]	; (23fe3c8 <_Z22__fetch_global_Serial3v+0x3c>)
 23fe3c0:	b006      	add	sp, #24
 23fe3c2:	bd10      	pop	{r4, pc}
 23fe3c4:	1007aef4 	.word	0x1007aef4
 23fe3c8:	1007af20 	.word	0x1007af20
 23fe3cc:	023fe2b1 	.word	0x023fe2b1

023fe3d0 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fe3d0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fe3d2:	f7ff ffdb 	bl	23fe38c <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fe3d6:	4b07      	ldr	r3, [pc, #28]	; (23fe3f4 <_Z15serialEventRun3v+0x24>)
 23fe3d8:	4604      	mov	r4, r0
 23fe3da:	b153      	cbz	r3, 23fe3f2 <_Z15serialEventRun3v+0x22>
 23fe3dc:	f7ff fb6e 	bl	23fdabc <_ZN11USARTSerial9isEnabledEv>
 23fe3e0:	b138      	cbz	r0, 23fe3f2 <_Z15serialEventRun3v+0x22>
 23fe3e2:	6823      	ldr	r3, [r4, #0]
 23fe3e4:	4620      	mov	r0, r4
 23fe3e6:	691b      	ldr	r3, [r3, #16]
 23fe3e8:	4798      	blx	r3
 23fe3ea:	2800      	cmp	r0, #0
 23fe3ec:	dd01      	ble.n	23fe3f2 <_Z15serialEventRun3v+0x22>
        handler();
 23fe3ee:	e000      	b.n	23fe3f2 <_Z15serialEventRun3v+0x22>
 23fe3f0:	bf00      	nop
}
 23fe3f2:	bd10      	pop	{r4, pc}
 23fe3f4:	00000000 	.word	0x00000000

023fe3f8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe3f8:	4770      	bx	lr
	...

023fe3fc <_Z17acquireWireBufferv>:
{
 23fe3fc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe3fe:	4b0a      	ldr	r3, [pc, #40]	; (23fe428 <_Z17acquireWireBufferv+0x2c>)
{
 23fe400:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe402:	6003      	str	r3, [r0, #0]
 23fe404:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe406:	4909      	ldr	r1, [pc, #36]	; (23fe42c <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fe408:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe40a:	2020      	movs	r0, #32
 23fe40c:	f000 f836 	bl	23fe47c <_ZnajRKSt9nothrow_t>
	};
 23fe410:	2520      	movs	r5, #32
 23fe412:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe414:	4905      	ldr	r1, [pc, #20]	; (23fe42c <_Z17acquireWireBufferv+0x30>)
 23fe416:	4628      	mov	r0, r5
	};
 23fe418:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe41a:	f000 f82f 	bl	23fe47c <_ZnajRKSt9nothrow_t>
	};
 23fe41e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fe422:	4620      	mov	r0, r4
 23fe424:	bd38      	pop	{r3, r4, r5, pc}
 23fe426:	bf00      	nop
 23fe428:	00010018 	.word	0x00010018
 23fe42c:	023ffd41 	.word	0x023ffd41

023fe430 <_Z19__fetch_global_Wirev>:
{
 23fe430:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe432:	4d0e      	ldr	r5, [pc, #56]	; (23fe46c <_Z19__fetch_global_Wirev+0x3c>)
{
 23fe434:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe436:	e8d5 1f8f 	ldab	r1, [r5]
 23fe43a:	f011 0401 	ands.w	r4, r1, #1
 23fe43e:	d111      	bne.n	23fe464 <_Z19__fetch_global_Wirev+0x34>
 23fe440:	4628      	mov	r0, r5
 23fe442:	f7fa fb69 	bl	23f8b18 <__cxa_guard_acquire>
 23fe446:	b168      	cbz	r0, 23fe464 <_Z19__fetch_global_Wirev+0x34>
 23fe448:	4668      	mov	r0, sp
 23fe44a:	f7ff ffd7 	bl	23fe3fc <_Z17acquireWireBufferv>
 23fe44e:	466a      	mov	r2, sp
 23fe450:	4621      	mov	r1, r4
 23fe452:	4807      	ldr	r0, [pc, #28]	; (23fe470 <_Z19__fetch_global_Wirev+0x40>)
 23fe454:	f7ff fb76 	bl	23fdb44 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fe458:	4628      	mov	r0, r5
 23fe45a:	f7fa fb62 	bl	23f8b22 <__cxa_guard_release>
 23fe45e:	4805      	ldr	r0, [pc, #20]	; (23fe474 <_Z19__fetch_global_Wirev+0x44>)
 23fe460:	f000 f926 	bl	23fe6b0 <atexit>
	return wire;
}
 23fe464:	4802      	ldr	r0, [pc, #8]	; (23fe470 <_Z19__fetch_global_Wirev+0x40>)
 23fe466:	b007      	add	sp, #28
 23fe468:	bd30      	pop	{r4, r5, pc}
 23fe46a:	bf00      	nop
 23fe46c:	1007af38 	.word	0x1007af38
 23fe470:	1007af3c 	.word	0x1007af3c
 23fe474:	023fe3f9 	.word	0x023fe3f9

023fe478 <_ZnwjRKSt9nothrow_t>:
 23fe478:	f7fa bb39 	b.w	23f8aee <_Znwj>

023fe47c <_ZnajRKSt9nothrow_t>:
 23fe47c:	f7fa bb39 	b.w	23f8af2 <_Znaj>

023fe480 <_ZSt20__throw_length_errorPKc>:
 23fe480:	b508      	push	{r3, lr}
 23fe482:	f7fd f8f5 	bl	23fb670 <abort>

023fe486 <_ZSt25__throw_bad_function_callv>:
 23fe486:	b508      	push	{r3, lr}
 23fe488:	f7fd f8f2 	bl	23fb670 <abort>

023fe48c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 23fe48c:	4901      	ldr	r1, [pc, #4]	; (23fe494 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 23fe48e:	f000 b8f9 	b.w	23fe684 <_ZNKSt9type_infoeqERKS_>
 23fe492:	bf00      	nop
 23fe494:	023ffd5c 	.word	0x023ffd5c

023fe498 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 23fe498:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fe49a:	2400      	movs	r4, #0
 23fe49c:	2310      	movs	r3, #16
 23fe49e:	4615      	mov	r5, r2
 23fe4a0:	6812      	ldr	r2, [r2, #0]
 23fe4a2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fe4a6:	6803      	ldr	r3, [r0, #0]
 23fe4a8:	e9cd 4400 	strd	r4, r4, [sp]
 23fe4ac:	699e      	ldr	r6, [r3, #24]
 23fe4ae:	466b      	mov	r3, sp
 23fe4b0:	47b0      	blx	r6
 23fe4b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 23fe4b6:	f003 0306 	and.w	r3, r3, #6
 23fe4ba:	2b06      	cmp	r3, #6
 23fe4bc:	bf05      	ittet	eq
 23fe4be:	9b00      	ldreq	r3, [sp, #0]
 23fe4c0:	2001      	moveq	r0, #1
 23fe4c2:	4620      	movne	r0, r4
 23fe4c4:	602b      	streq	r3, [r5, #0]
 23fe4c6:	b004      	add	sp, #16
 23fe4c8:	bd70      	pop	{r4, r5, r6, pc}

023fe4ca <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 23fe4ca:	9800      	ldr	r0, [sp, #0]
 23fe4cc:	4290      	cmp	r0, r2
 23fe4ce:	bf14      	ite	ne
 23fe4d0:	2001      	movne	r0, #1
 23fe4d2:	2006      	moveq	r0, #6
 23fe4d4:	4770      	bx	lr
	...

023fe4d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 23fe4d8:	4b03      	ldr	r3, [pc, #12]	; (23fe4e8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 23fe4da:	b510      	push	{r4, lr}
 23fe4dc:	4604      	mov	r4, r0
 23fe4de:	6003      	str	r3, [r0, #0]
 23fe4e0:	f000 f8cd 	bl	23fe67e <_ZNSt9type_infoD1Ev>
 23fe4e4:	4620      	mov	r0, r4
 23fe4e6:	bd10      	pop	{r4, pc}
 23fe4e8:	023ffd9c 	.word	0x023ffd9c

023fe4ec <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 23fe4ec:	b510      	push	{r4, lr}
 23fe4ee:	4604      	mov	r4, r0
 23fe4f0:	f7ff fff2 	bl	23fe4d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fe4f4:	2108      	movs	r1, #8
 23fe4f6:	4620      	mov	r0, r4
 23fe4f8:	f7fa faff 	bl	23f8afa <_ZdlPvj>
 23fe4fc:	4620      	mov	r0, r4
 23fe4fe:	bd10      	pop	{r4, pc}

023fe500 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 23fe500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe504:	f8dd 8018 	ldr.w	r8, [sp, #24]
 23fe508:	461f      	mov	r7, r3
 23fe50a:	4606      	mov	r6, r0
 23fe50c:	4615      	mov	r5, r2
 23fe50e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 23fe512:	4598      	cmp	r8, r3
 23fe514:	d107      	bne.n	23fe526 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fe516:	9907      	ldr	r1, [sp, #28]
 23fe518:	f000 f8b4 	bl	23fe684 <_ZNKSt9type_infoeqERKS_>
 23fe51c:	b118      	cbz	r0, 23fe526 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 23fe51e:	7165      	strb	r5, [r4, #5]
 23fe520:	2000      	movs	r0, #0
 23fe522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe526:	4639      	mov	r1, r7
 23fe528:	4630      	mov	r0, r6
 23fe52a:	f000 f8ab 	bl	23fe684 <_ZNKSt9type_infoeqERKS_>
 23fe52e:	2800      	cmp	r0, #0
 23fe530:	d0f6      	beq.n	23fe520 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 23fe532:	2301      	movs	r3, #1
 23fe534:	f8c4 8000 	str.w	r8, [r4]
 23fe538:	7125      	strb	r5, [r4, #4]
 23fe53a:	71a3      	strb	r3, [r4, #6]
 23fe53c:	e7f0      	b.n	23fe520 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

023fe53e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 23fe53e:	b538      	push	{r3, r4, r5, lr}
 23fe540:	4615      	mov	r5, r2
 23fe542:	461c      	mov	r4, r3
 23fe544:	f000 f89e 	bl	23fe684 <_ZNKSt9type_infoeqERKS_>
 23fe548:	b120      	cbz	r0, 23fe554 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 23fe54a:	2308      	movs	r3, #8
 23fe54c:	6025      	str	r5, [r4, #0]
 23fe54e:	60e3      	str	r3, [r4, #12]
 23fe550:	2306      	movs	r3, #6
 23fe552:	7123      	strb	r3, [r4, #4]
 23fe554:	bd38      	pop	{r3, r4, r5, pc}

023fe556 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 23fe556:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe558:	4605      	mov	r5, r0
 23fe55a:	460c      	mov	r4, r1
 23fe55c:	461e      	mov	r6, r3
 23fe55e:	9201      	str	r2, [sp, #4]
 23fe560:	f000 f890 	bl	23fe684 <_ZNKSt9type_infoeqERKS_>
 23fe564:	b950      	cbnz	r0, 23fe57c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fe566:	2e03      	cmp	r6, #3
 23fe568:	d808      	bhi.n	23fe57c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 23fe56a:	6823      	ldr	r3, [r4, #0]
 23fe56c:	4629      	mov	r1, r5
 23fe56e:	9a01      	ldr	r2, [sp, #4]
 23fe570:	4620      	mov	r0, r4
 23fe572:	695b      	ldr	r3, [r3, #20]
 23fe574:	b002      	add	sp, #8
 23fe576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fe57a:	4718      	bx	r3
 23fe57c:	b002      	add	sp, #8
 23fe57e:	bd70      	pop	{r4, r5, r6, pc}

023fe580 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 23fe580:	4b03      	ldr	r3, [pc, #12]	; (23fe590 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 23fe582:	b510      	push	{r4, lr}
 23fe584:	4604      	mov	r4, r0
 23fe586:	6003      	str	r3, [r0, #0]
 23fe588:	f7ff ffa6 	bl	23fe4d8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 23fe58c:	4620      	mov	r0, r4
 23fe58e:	bd10      	pop	{r4, pc}
 23fe590:	023ffdfc 	.word	0x023ffdfc

023fe594 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 23fe594:	b510      	push	{r4, lr}
 23fe596:	4604      	mov	r4, r0
 23fe598:	f7ff fff2 	bl	23fe580 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 23fe59c:	210c      	movs	r1, #12
 23fe59e:	4620      	mov	r0, r4
 23fe5a0:	f7fa faab 	bl	23f8afa <_ZdlPvj>
 23fe5a4:	4620      	mov	r0, r4
 23fe5a6:	bd10      	pop	{r4, pc}

023fe5a8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 23fe5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23fe5aa:	9f08      	ldr	r7, [sp, #32]
 23fe5ac:	4605      	mov	r5, r0
 23fe5ae:	460e      	mov	r6, r1
 23fe5b0:	4614      	mov	r4, r2
 23fe5b2:	4297      	cmp	r7, r2
 23fe5b4:	d00a      	beq.n	23fe5cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 23fe5b6:	68a8      	ldr	r0, [r5, #8]
 23fe5b8:	4631      	mov	r1, r6
 23fe5ba:	6802      	ldr	r2, [r0, #0]
 23fe5bc:	9708      	str	r7, [sp, #32]
 23fe5be:	6a15      	ldr	r5, [r2, #32]
 23fe5c0:	4622      	mov	r2, r4
 23fe5c2:	46ac      	mov	ip, r5
 23fe5c4:	b003      	add	sp, #12
 23fe5c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fe5ca:	4760      	bx	ip
 23fe5cc:	4619      	mov	r1, r3
 23fe5ce:	9301      	str	r3, [sp, #4]
 23fe5d0:	f000 f858 	bl	23fe684 <_ZNKSt9type_infoeqERKS_>
 23fe5d4:	9b01      	ldr	r3, [sp, #4]
 23fe5d6:	2800      	cmp	r0, #0
 23fe5d8:	d0ed      	beq.n	23fe5b6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 23fe5da:	2006      	movs	r0, #6
 23fe5dc:	b003      	add	sp, #12
 23fe5de:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe5e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 23fe5e0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe5e4:	460d      	mov	r5, r1
 23fe5e6:	4619      	mov	r1, r3
 23fe5e8:	4681      	mov	r9, r0
 23fe5ea:	4617      	mov	r7, r2
 23fe5ec:	4698      	mov	r8, r3
 23fe5ee:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 23fe5f2:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 23fe5f6:	f000 f845 	bl	23fe684 <_ZNKSt9type_infoeqERKS_>
 23fe5fa:	b190      	cbz	r0, 23fe622 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 23fe5fc:	2d00      	cmp	r5, #0
 23fe5fe:	6034      	str	r4, [r6, #0]
 23fe600:	7137      	strb	r7, [r6, #4]
 23fe602:	db09      	blt.n	23fe618 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 23fe604:	1961      	adds	r1, r4, r5
 23fe606:	458a      	cmp	sl, r1
 23fe608:	bf0c      	ite	eq
 23fe60a:	2106      	moveq	r1, #6
 23fe60c:	2101      	movne	r1, #1
 23fe60e:	71b1      	strb	r1, [r6, #6]
 23fe610:	2000      	movs	r0, #0
 23fe612:	b001      	add	sp, #4
 23fe614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe618:	3502      	adds	r5, #2
 23fe61a:	d1f9      	bne.n	23fe610 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe61c:	2301      	movs	r3, #1
 23fe61e:	71b3      	strb	r3, [r6, #6]
 23fe620:	e7f6      	b.n	23fe610 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe622:	4554      	cmp	r4, sl
 23fe624:	d106      	bne.n	23fe634 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fe626:	4659      	mov	r1, fp
 23fe628:	4648      	mov	r0, r9
 23fe62a:	f000 f82b 	bl	23fe684 <_ZNKSt9type_infoeqERKS_>
 23fe62e:	b108      	cbz	r0, 23fe634 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 23fe630:	7177      	strb	r7, [r6, #5]
 23fe632:	e7ed      	b.n	23fe610 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 23fe634:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23fe638:	463a      	mov	r2, r7
 23fe63a:	4629      	mov	r1, r5
 23fe63c:	6803      	ldr	r3, [r0, #0]
 23fe63e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 23fe642:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 23fe646:	69dc      	ldr	r4, [r3, #28]
 23fe648:	4643      	mov	r3, r8
 23fe64a:	46a4      	mov	ip, r4
 23fe64c:	b001      	add	sp, #4
 23fe64e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe652:	4760      	bx	ip

023fe654 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 23fe654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe658:	4607      	mov	r7, r0
 23fe65a:	460c      	mov	r4, r1
 23fe65c:	4615      	mov	r5, r2
 23fe65e:	461e      	mov	r6, r3
 23fe660:	f7ff ff6d 	bl	23fe53e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 23fe664:	b948      	cbnz	r0, 23fe67a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 23fe666:	68b8      	ldr	r0, [r7, #8]
 23fe668:	462a      	mov	r2, r5
 23fe66a:	4621      	mov	r1, r4
 23fe66c:	6803      	ldr	r3, [r0, #0]
 23fe66e:	699f      	ldr	r7, [r3, #24]
 23fe670:	4633      	mov	r3, r6
 23fe672:	46bc      	mov	ip, r7
 23fe674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23fe678:	4760      	bx	ip
 23fe67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe67e <_ZNSt9type_infoD1Ev>:
 23fe67e:	4770      	bx	lr

023fe680 <_ZNKSt9type_info14__is_pointer_pEv>:
 23fe680:	2000      	movs	r0, #0
 23fe682:	4770      	bx	lr

023fe684 <_ZNKSt9type_infoeqERKS_>:
 23fe684:	4281      	cmp	r1, r0
 23fe686:	b508      	push	{r3, lr}
 23fe688:	d00e      	beq.n	23fe6a8 <_ZNKSt9type_infoeqERKS_+0x24>
 23fe68a:	6840      	ldr	r0, [r0, #4]
 23fe68c:	7803      	ldrb	r3, [r0, #0]
 23fe68e:	2b2a      	cmp	r3, #42	; 0x2a
 23fe690:	d00c      	beq.n	23fe6ac <_ZNKSt9type_infoeqERKS_+0x28>
 23fe692:	6849      	ldr	r1, [r1, #4]
 23fe694:	780b      	ldrb	r3, [r1, #0]
 23fe696:	2b2a      	cmp	r3, #42	; 0x2a
 23fe698:	bf08      	it	eq
 23fe69a:	3101      	addeq	r1, #1
 23fe69c:	f7fa f9f8 	bl	23f8a90 <strcmp>
 23fe6a0:	fab0 f080 	clz	r0, r0
 23fe6a4:	0940      	lsrs	r0, r0, #5
 23fe6a6:	bd08      	pop	{r3, pc}
 23fe6a8:	2001      	movs	r0, #1
 23fe6aa:	e7fc      	b.n	23fe6a6 <_ZNKSt9type_infoeqERKS_+0x22>
 23fe6ac:	2000      	movs	r0, #0
 23fe6ae:	e7fa      	b.n	23fe6a6 <_ZNKSt9type_infoeqERKS_+0x22>

023fe6b0 <atexit>:
 23fe6b0:	2300      	movs	r3, #0
 23fe6b2:	4601      	mov	r1, r0
 23fe6b4:	461a      	mov	r2, r3
 23fe6b6:	4618      	mov	r0, r3
 23fe6b8:	f000 b9bc 	b.w	23fea34 <__register_exitproc>

023fe6bc <isprint>:
 23fe6bc:	4b02      	ldr	r3, [pc, #8]	; (23fe6c8 <isprint+0xc>)
 23fe6be:	4418      	add	r0, r3
 23fe6c0:	7840      	ldrb	r0, [r0, #1]
 23fe6c2:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23fe6c6:	4770      	bx	lr
 23fe6c8:	023ffec9 	.word	0x023ffec9

023fe6cc <memcpy>:
 23fe6cc:	440a      	add	r2, r1
 23fe6ce:	1e43      	subs	r3, r0, #1
 23fe6d0:	4291      	cmp	r1, r2
 23fe6d2:	d100      	bne.n	23fe6d6 <memcpy+0xa>
 23fe6d4:	4770      	bx	lr
 23fe6d6:	b510      	push	{r4, lr}
 23fe6d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fe6dc:	4291      	cmp	r1, r2
 23fe6de:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fe6e2:	d1f9      	bne.n	23fe6d8 <memcpy+0xc>
 23fe6e4:	bd10      	pop	{r4, pc}

023fe6e6 <memmove>:
 23fe6e6:	4288      	cmp	r0, r1
 23fe6e8:	b510      	push	{r4, lr}
 23fe6ea:	eb01 0402 	add.w	r4, r1, r2
 23fe6ee:	d902      	bls.n	23fe6f6 <memmove+0x10>
 23fe6f0:	4284      	cmp	r4, r0
 23fe6f2:	4623      	mov	r3, r4
 23fe6f4:	d807      	bhi.n	23fe706 <memmove+0x20>
 23fe6f6:	1e43      	subs	r3, r0, #1
 23fe6f8:	42a1      	cmp	r1, r4
 23fe6fa:	d008      	beq.n	23fe70e <memmove+0x28>
 23fe6fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fe700:	f803 2f01 	strb.w	r2, [r3, #1]!
 23fe704:	e7f8      	b.n	23fe6f8 <memmove+0x12>
 23fe706:	4402      	add	r2, r0
 23fe708:	4601      	mov	r1, r0
 23fe70a:	428a      	cmp	r2, r1
 23fe70c:	d100      	bne.n	23fe710 <memmove+0x2a>
 23fe70e:	bd10      	pop	{r4, pc}
 23fe710:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23fe714:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23fe718:	e7f7      	b.n	23fe70a <memmove+0x24>

023fe71a <memset>:
 23fe71a:	4402      	add	r2, r0
 23fe71c:	4603      	mov	r3, r0
 23fe71e:	4293      	cmp	r3, r2
 23fe720:	d100      	bne.n	23fe724 <memset+0xa>
 23fe722:	4770      	bx	lr
 23fe724:	f803 1b01 	strb.w	r1, [r3], #1
 23fe728:	e7f9      	b.n	23fe71e <memset+0x4>
	...

023fe72c <srand>:
 23fe72c:	b538      	push	{r3, r4, r5, lr}
 23fe72e:	4b10      	ldr	r3, [pc, #64]	; (23fe770 <srand+0x44>)
 23fe730:	4604      	mov	r4, r0
 23fe732:	681d      	ldr	r5, [r3, #0]
 23fe734:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe736:	b9b3      	cbnz	r3, 23fe766 <srand+0x3a>
 23fe738:	2018      	movs	r0, #24
 23fe73a:	f7fc ff61 	bl	23fb600 <malloc>
 23fe73e:	4602      	mov	r2, r0
 23fe740:	63a8      	str	r0, [r5, #56]	; 0x38
 23fe742:	b920      	cbnz	r0, 23fe74e <srand+0x22>
 23fe744:	4b0b      	ldr	r3, [pc, #44]	; (23fe774 <srand+0x48>)
 23fe746:	2142      	movs	r1, #66	; 0x42
 23fe748:	480b      	ldr	r0, [pc, #44]	; (23fe778 <srand+0x4c>)
 23fe74a:	f7fc ffbb 	bl	23fb6c4 <__assert_func>
 23fe74e:	490b      	ldr	r1, [pc, #44]	; (23fe77c <srand+0x50>)
 23fe750:	4b0b      	ldr	r3, [pc, #44]	; (23fe780 <srand+0x54>)
 23fe752:	e9c0 1300 	strd	r1, r3, [r0]
 23fe756:	4b0b      	ldr	r3, [pc, #44]	; (23fe784 <srand+0x58>)
 23fe758:	2100      	movs	r1, #0
 23fe75a:	6083      	str	r3, [r0, #8]
 23fe75c:	230b      	movs	r3, #11
 23fe75e:	8183      	strh	r3, [r0, #12]
 23fe760:	2001      	movs	r0, #1
 23fe762:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fe766:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fe768:	2200      	movs	r2, #0
 23fe76a:	611c      	str	r4, [r3, #16]
 23fe76c:	615a      	str	r2, [r3, #20]
 23fe76e:	bd38      	pop	{r3, r4, r5, pc}
 23fe770:	1007ad48 	.word	0x1007ad48
 23fe774:	023ffe35 	.word	0x023ffe35
 23fe778:	023ffe4c 	.word	0x023ffe4c
 23fe77c:	abcd330e 	.word	0xabcd330e
 23fe780:	e66d1234 	.word	0xe66d1234
 23fe784:	0005deec 	.word	0x0005deec

023fe788 <strchr>:
 23fe788:	b2c9      	uxtb	r1, r1
 23fe78a:	4603      	mov	r3, r0
 23fe78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fe790:	b11a      	cbz	r2, 23fe79a <strchr+0x12>
 23fe792:	428a      	cmp	r2, r1
 23fe794:	d1f9      	bne.n	23fe78a <strchr+0x2>
 23fe796:	4618      	mov	r0, r3
 23fe798:	4770      	bx	lr
 23fe79a:	2900      	cmp	r1, #0
 23fe79c:	bf18      	it	ne
 23fe79e:	2300      	movne	r3, #0
 23fe7a0:	e7f9      	b.n	23fe796 <strchr+0xe>

023fe7a2 <strchrnul>:
 23fe7a2:	b510      	push	{r4, lr}
 23fe7a4:	4604      	mov	r4, r0
 23fe7a6:	f7ff ffef 	bl	23fe788 <strchr>
 23fe7aa:	b918      	cbnz	r0, 23fe7b4 <strchrnul+0x12>
 23fe7ac:	4620      	mov	r0, r4
 23fe7ae:	f7fa f979 	bl	23f8aa4 <strlen>
 23fe7b2:	4420      	add	r0, r4
 23fe7b4:	bd10      	pop	{r4, pc}

023fe7b6 <strcpy>:
 23fe7b6:	4603      	mov	r3, r0
 23fe7b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fe7bc:	f803 2b01 	strb.w	r2, [r3], #1
 23fe7c0:	2a00      	cmp	r2, #0
 23fe7c2:	d1f9      	bne.n	23fe7b8 <strcpy+0x2>
 23fe7c4:	4770      	bx	lr
	...

023fe7c8 <strdup>:
 23fe7c8:	4b02      	ldr	r3, [pc, #8]	; (23fe7d4 <strdup+0xc>)
 23fe7ca:	4601      	mov	r1, r0
 23fe7cc:	6818      	ldr	r0, [r3, #0]
 23fe7ce:	f000 b803 	b.w	23fe7d8 <_strdup_r>
 23fe7d2:	bf00      	nop
 23fe7d4:	1007ad48 	.word	0x1007ad48

023fe7d8 <_strdup_r>:
 23fe7d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe7da:	4604      	mov	r4, r0
 23fe7dc:	4608      	mov	r0, r1
 23fe7de:	460d      	mov	r5, r1
 23fe7e0:	f7fa f960 	bl	23f8aa4 <strlen>
 23fe7e4:	1c42      	adds	r2, r0, #1
 23fe7e6:	4620      	mov	r0, r4
 23fe7e8:	4611      	mov	r1, r2
 23fe7ea:	9201      	str	r2, [sp, #4]
 23fe7ec:	f7fc ff4e 	bl	23fb68c <_malloc_r>
 23fe7f0:	4604      	mov	r4, r0
 23fe7f2:	b118      	cbz	r0, 23fe7fc <_strdup_r+0x24>
 23fe7f4:	9a01      	ldr	r2, [sp, #4]
 23fe7f6:	4629      	mov	r1, r5
 23fe7f8:	f7ff ff68 	bl	23fe6cc <memcpy>
 23fe7fc:	4620      	mov	r0, r4
 23fe7fe:	b003      	add	sp, #12
 23fe800:	bd30      	pop	{r4, r5, pc}

023fe802 <strncmp>:
 23fe802:	b510      	push	{r4, lr}
 23fe804:	b17a      	cbz	r2, 23fe826 <strncmp+0x24>
 23fe806:	4603      	mov	r3, r0
 23fe808:	3901      	subs	r1, #1
 23fe80a:	1884      	adds	r4, r0, r2
 23fe80c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe810:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fe814:	4290      	cmp	r0, r2
 23fe816:	d101      	bne.n	23fe81c <strncmp+0x1a>
 23fe818:	42a3      	cmp	r3, r4
 23fe81a:	d101      	bne.n	23fe820 <strncmp+0x1e>
 23fe81c:	1a80      	subs	r0, r0, r2
 23fe81e:	bd10      	pop	{r4, pc}
 23fe820:	2800      	cmp	r0, #0
 23fe822:	d1f3      	bne.n	23fe80c <strncmp+0xa>
 23fe824:	e7fa      	b.n	23fe81c <strncmp+0x1a>
 23fe826:	4610      	mov	r0, r2
 23fe828:	e7f9      	b.n	23fe81e <strncmp+0x1c>

023fe82a <strrchr>:
 23fe82a:	b538      	push	{r3, r4, r5, lr}
 23fe82c:	4603      	mov	r3, r0
 23fe82e:	460c      	mov	r4, r1
 23fe830:	b969      	cbnz	r1, 23fe84e <strrchr+0x24>
 23fe832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fe836:	f7ff bfa7 	b.w	23fe788 <strchr>
 23fe83a:	1c43      	adds	r3, r0, #1
 23fe83c:	4605      	mov	r5, r0
 23fe83e:	4621      	mov	r1, r4
 23fe840:	4618      	mov	r0, r3
 23fe842:	f7ff ffa1 	bl	23fe788 <strchr>
 23fe846:	2800      	cmp	r0, #0
 23fe848:	d1f7      	bne.n	23fe83a <strrchr+0x10>
 23fe84a:	4628      	mov	r0, r5
 23fe84c:	bd38      	pop	{r3, r4, r5, pc}
 23fe84e:	2500      	movs	r5, #0
 23fe850:	e7f5      	b.n	23fe83e <strrchr+0x14>
	...

023fe854 <_strtol_l.constprop.0>:
 23fe854:	2b01      	cmp	r3, #1
 23fe856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe85a:	d001      	beq.n	23fe860 <_strtol_l.constprop.0+0xc>
 23fe85c:	2b24      	cmp	r3, #36	; 0x24
 23fe85e:	d906      	bls.n	23fe86e <_strtol_l.constprop.0+0x1a>
 23fe860:	f7fc ff22 	bl	23fb6a8 <__errno>
 23fe864:	2316      	movs	r3, #22
 23fe866:	6003      	str	r3, [r0, #0]
 23fe868:	2000      	movs	r0, #0
 23fe86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fe86e:	460d      	mov	r5, r1
 23fe870:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23fe954 <_strtol_l.constprop.0+0x100>
 23fe874:	462e      	mov	r6, r5
 23fe876:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fe87a:	f814 700c 	ldrb.w	r7, [r4, ip]
 23fe87e:	f017 0708 	ands.w	r7, r7, #8
 23fe882:	d1f7      	bne.n	23fe874 <_strtol_l.constprop.0+0x20>
 23fe884:	2c2d      	cmp	r4, #45	; 0x2d
 23fe886:	d132      	bne.n	23fe8ee <_strtol_l.constprop.0+0x9a>
 23fe888:	782c      	ldrb	r4, [r5, #0]
 23fe88a:	2701      	movs	r7, #1
 23fe88c:	1cb5      	adds	r5, r6, #2
 23fe88e:	2b00      	cmp	r3, #0
 23fe890:	d05b      	beq.n	23fe94a <_strtol_l.constprop.0+0xf6>
 23fe892:	2b10      	cmp	r3, #16
 23fe894:	d109      	bne.n	23fe8aa <_strtol_l.constprop.0+0x56>
 23fe896:	2c30      	cmp	r4, #48	; 0x30
 23fe898:	d107      	bne.n	23fe8aa <_strtol_l.constprop.0+0x56>
 23fe89a:	782c      	ldrb	r4, [r5, #0]
 23fe89c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23fe8a0:	2c58      	cmp	r4, #88	; 0x58
 23fe8a2:	d14d      	bne.n	23fe940 <_strtol_l.constprop.0+0xec>
 23fe8a4:	786c      	ldrb	r4, [r5, #1]
 23fe8a6:	2310      	movs	r3, #16
 23fe8a8:	3502      	adds	r5, #2
 23fe8aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23fe8ae:	f04f 0c00 	mov.w	ip, #0
 23fe8b2:	f108 38ff 	add.w	r8, r8, #4294967295
 23fe8b6:	4666      	mov	r6, ip
 23fe8b8:	fbb8 f9f3 	udiv	r9, r8, r3
 23fe8bc:	fb03 8a19 	mls	sl, r3, r9, r8
 23fe8c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23fe8c4:	f1be 0f09 	cmp.w	lr, #9
 23fe8c8:	d816      	bhi.n	23fe8f8 <_strtol_l.constprop.0+0xa4>
 23fe8ca:	4674      	mov	r4, lr
 23fe8cc:	42a3      	cmp	r3, r4
 23fe8ce:	dd24      	ble.n	23fe91a <_strtol_l.constprop.0+0xc6>
 23fe8d0:	f1bc 0f00 	cmp.w	ip, #0
 23fe8d4:	db1e      	blt.n	23fe914 <_strtol_l.constprop.0+0xc0>
 23fe8d6:	45b1      	cmp	r9, r6
 23fe8d8:	d31c      	bcc.n	23fe914 <_strtol_l.constprop.0+0xc0>
 23fe8da:	d101      	bne.n	23fe8e0 <_strtol_l.constprop.0+0x8c>
 23fe8dc:	45a2      	cmp	sl, r4
 23fe8de:	db19      	blt.n	23fe914 <_strtol_l.constprop.0+0xc0>
 23fe8e0:	fb06 4603 	mla	r6, r6, r3, r4
 23fe8e4:	f04f 0c01 	mov.w	ip, #1
 23fe8e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 23fe8ec:	e7e8      	b.n	23fe8c0 <_strtol_l.constprop.0+0x6c>
 23fe8ee:	2c2b      	cmp	r4, #43	; 0x2b
 23fe8f0:	bf04      	itt	eq
 23fe8f2:	782c      	ldrbeq	r4, [r5, #0]
 23fe8f4:	1cb5      	addeq	r5, r6, #2
 23fe8f6:	e7ca      	b.n	23fe88e <_strtol_l.constprop.0+0x3a>
 23fe8f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23fe8fc:	f1be 0f19 	cmp.w	lr, #25
 23fe900:	d801      	bhi.n	23fe906 <_strtol_l.constprop.0+0xb2>
 23fe902:	3c37      	subs	r4, #55	; 0x37
 23fe904:	e7e2      	b.n	23fe8cc <_strtol_l.constprop.0+0x78>
 23fe906:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23fe90a:	f1be 0f19 	cmp.w	lr, #25
 23fe90e:	d804      	bhi.n	23fe91a <_strtol_l.constprop.0+0xc6>
 23fe910:	3c57      	subs	r4, #87	; 0x57
 23fe912:	e7db      	b.n	23fe8cc <_strtol_l.constprop.0+0x78>
 23fe914:	f04f 3cff 	mov.w	ip, #4294967295
 23fe918:	e7e6      	b.n	23fe8e8 <_strtol_l.constprop.0+0x94>
 23fe91a:	f1bc 0f00 	cmp.w	ip, #0
 23fe91e:	da05      	bge.n	23fe92c <_strtol_l.constprop.0+0xd8>
 23fe920:	2322      	movs	r3, #34	; 0x22
 23fe922:	4646      	mov	r6, r8
 23fe924:	6003      	str	r3, [r0, #0]
 23fe926:	b942      	cbnz	r2, 23fe93a <_strtol_l.constprop.0+0xe6>
 23fe928:	4630      	mov	r0, r6
 23fe92a:	e79e      	b.n	23fe86a <_strtol_l.constprop.0+0x16>
 23fe92c:	b107      	cbz	r7, 23fe930 <_strtol_l.constprop.0+0xdc>
 23fe92e:	4276      	negs	r6, r6
 23fe930:	2a00      	cmp	r2, #0
 23fe932:	d0f9      	beq.n	23fe928 <_strtol_l.constprop.0+0xd4>
 23fe934:	f1bc 0f00 	cmp.w	ip, #0
 23fe938:	d000      	beq.n	23fe93c <_strtol_l.constprop.0+0xe8>
 23fe93a:	1e69      	subs	r1, r5, #1
 23fe93c:	6011      	str	r1, [r2, #0]
 23fe93e:	e7f3      	b.n	23fe928 <_strtol_l.constprop.0+0xd4>
 23fe940:	2430      	movs	r4, #48	; 0x30
 23fe942:	2b00      	cmp	r3, #0
 23fe944:	d1b1      	bne.n	23fe8aa <_strtol_l.constprop.0+0x56>
 23fe946:	2308      	movs	r3, #8
 23fe948:	e7af      	b.n	23fe8aa <_strtol_l.constprop.0+0x56>
 23fe94a:	2c30      	cmp	r4, #48	; 0x30
 23fe94c:	d0a5      	beq.n	23fe89a <_strtol_l.constprop.0+0x46>
 23fe94e:	230a      	movs	r3, #10
 23fe950:	e7ab      	b.n	23fe8aa <_strtol_l.constprop.0+0x56>
 23fe952:	bf00      	nop
 23fe954:	023ffeca 	.word	0x023ffeca

023fe958 <strtol>:
 23fe958:	4613      	mov	r3, r2
 23fe95a:	460a      	mov	r2, r1
 23fe95c:	4601      	mov	r1, r0
 23fe95e:	4802      	ldr	r0, [pc, #8]	; (23fe968 <strtol+0x10>)
 23fe960:	6800      	ldr	r0, [r0, #0]
 23fe962:	f7ff bf77 	b.w	23fe854 <_strtol_l.constprop.0>
 23fe966:	bf00      	nop
 23fe968:	1007ad48 	.word	0x1007ad48

023fe96c <close>:
 23fe96c:	4b02      	ldr	r3, [pc, #8]	; (23fe978 <close+0xc>)
 23fe96e:	4601      	mov	r1, r0
 23fe970:	6818      	ldr	r0, [r3, #0]
 23fe972:	f000 b8c3 	b.w	23feafc <_close_r>
 23fe976:	bf00      	nop
 23fe978:	1007ad48 	.word	0x1007ad48

023fe97c <lseek>:
 23fe97c:	4613      	mov	r3, r2
 23fe97e:	460a      	mov	r2, r1
 23fe980:	4601      	mov	r1, r0
 23fe982:	4802      	ldr	r0, [pc, #8]	; (23fe98c <lseek+0x10>)
 23fe984:	6800      	ldr	r0, [r0, #0]
 23fe986:	f000 b8cd 	b.w	23feb24 <_lseek_r>
 23fe98a:	bf00      	nop
 23fe98c:	1007ad48 	.word	0x1007ad48

023fe990 <open>:
 23fe990:	b40e      	push	{r1, r2, r3}
 23fe992:	b503      	push	{r0, r1, lr}
 23fe994:	ab03      	add	r3, sp, #12
 23fe996:	4601      	mov	r1, r0
 23fe998:	4806      	ldr	r0, [pc, #24]	; (23fe9b4 <open+0x24>)
 23fe99a:	f853 2b04 	ldr.w	r2, [r3], #4
 23fe99e:	6800      	ldr	r0, [r0, #0]
 23fe9a0:	9301      	str	r3, [sp, #4]
 23fe9a2:	9b04      	ldr	r3, [sp, #16]
 23fe9a4:	f000 f8d0 	bl	23feb48 <_open_r>
 23fe9a8:	b002      	add	sp, #8
 23fe9aa:	f85d eb04 	ldr.w	lr, [sp], #4
 23fe9ae:	b003      	add	sp, #12
 23fe9b0:	4770      	bx	lr
 23fe9b2:	bf00      	nop
 23fe9b4:	1007ad48 	.word	0x1007ad48

023fe9b8 <read>:
 23fe9b8:	4613      	mov	r3, r2
 23fe9ba:	460a      	mov	r2, r1
 23fe9bc:	4601      	mov	r1, r0
 23fe9be:	4802      	ldr	r0, [pc, #8]	; (23fe9c8 <read+0x10>)
 23fe9c0:	6800      	ldr	r0, [r0, #0]
 23fe9c2:	f000 b8d3 	b.w	23feb6c <_read_r>
 23fe9c6:	bf00      	nop
 23fe9c8:	1007ad48 	.word	0x1007ad48

023fe9cc <unlink>:
 23fe9cc:	4b02      	ldr	r3, [pc, #8]	; (23fe9d8 <unlink+0xc>)
 23fe9ce:	4601      	mov	r1, r0
 23fe9d0:	6818      	ldr	r0, [r3, #0]
 23fe9d2:	f000 b80d 	b.w	23fe9f0 <_unlink_r>
 23fe9d6:	bf00      	nop
 23fe9d8:	1007ad48 	.word	0x1007ad48

023fe9dc <write>:
 23fe9dc:	4613      	mov	r3, r2
 23fe9de:	460a      	mov	r2, r1
 23fe9e0:	4601      	mov	r1, r0
 23fe9e2:	4802      	ldr	r0, [pc, #8]	; (23fe9ec <write+0x10>)
 23fe9e4:	6800      	ldr	r0, [r0, #0]
 23fe9e6:	f000 b813 	b.w	23fea10 <_write_r>
 23fe9ea:	bf00      	nop
 23fe9ec:	1007ad48 	.word	0x1007ad48

023fe9f0 <_unlink_r>:
 23fe9f0:	b538      	push	{r3, r4, r5, lr}
 23fe9f2:	2300      	movs	r3, #0
 23fe9f4:	4d05      	ldr	r5, [pc, #20]	; (23fea0c <_unlink_r+0x1c>)
 23fe9f6:	4604      	mov	r4, r0
 23fe9f8:	4608      	mov	r0, r1
 23fe9fa:	602b      	str	r3, [r5, #0]
 23fe9fc:	f7fc f976 	bl	23facec <_unlink>
 23fea00:	1c43      	adds	r3, r0, #1
 23fea02:	d102      	bne.n	23fea0a <_unlink_r+0x1a>
 23fea04:	682b      	ldr	r3, [r5, #0]
 23fea06:	b103      	cbz	r3, 23fea0a <_unlink_r+0x1a>
 23fea08:	6023      	str	r3, [r4, #0]
 23fea0a:	bd38      	pop	{r3, r4, r5, pc}
 23fea0c:	1007afe4 	.word	0x1007afe4

023fea10 <_write_r>:
 23fea10:	b538      	push	{r3, r4, r5, lr}
 23fea12:	4604      	mov	r4, r0
 23fea14:	4d06      	ldr	r5, [pc, #24]	; (23fea30 <_write_r+0x20>)
 23fea16:	4608      	mov	r0, r1
 23fea18:	4611      	mov	r1, r2
 23fea1a:	2200      	movs	r2, #0
 23fea1c:	602a      	str	r2, [r5, #0]
 23fea1e:	461a      	mov	r2, r3
 23fea20:	f7fc f92c 	bl	23fac7c <_write>
 23fea24:	1c43      	adds	r3, r0, #1
 23fea26:	d102      	bne.n	23fea2e <_write_r+0x1e>
 23fea28:	682b      	ldr	r3, [r5, #0]
 23fea2a:	b103      	cbz	r3, 23fea2e <_write_r+0x1e>
 23fea2c:	6023      	str	r3, [r4, #0]
 23fea2e:	bd38      	pop	{r3, r4, r5, pc}
 23fea30:	1007afe4 	.word	0x1007afe4

023fea34 <__register_exitproc>:
 23fea34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fea38:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23feaf8 <__register_exitproc+0xc4>
 23fea3c:	4606      	mov	r6, r0
 23fea3e:	461f      	mov	r7, r3
 23fea40:	460d      	mov	r5, r1
 23fea42:	f8d8 0000 	ldr.w	r0, [r8]
 23fea46:	4691      	mov	r9, r2
 23fea48:	f000 f868 	bl	23feb1c <__retarget_lock_acquire_recursive>
 23fea4c:	4b26      	ldr	r3, [pc, #152]	; (23feae8 <__register_exitproc+0xb4>)
 23fea4e:	681c      	ldr	r4, [r3, #0]
 23fea50:	b934      	cbnz	r4, 23fea60 <__register_exitproc+0x2c>
 23fea52:	4c26      	ldr	r4, [pc, #152]	; (23feaec <__register_exitproc+0xb8>)
 23fea54:	601c      	str	r4, [r3, #0]
 23fea56:	4b26      	ldr	r3, [pc, #152]	; (23feaf0 <__register_exitproc+0xbc>)
 23fea58:	b113      	cbz	r3, 23fea60 <__register_exitproc+0x2c>
 23fea5a:	681b      	ldr	r3, [r3, #0]
 23fea5c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fea60:	6863      	ldr	r3, [r4, #4]
 23fea62:	2b1f      	cmp	r3, #31
 23fea64:	dd07      	ble.n	23fea76 <__register_exitproc+0x42>
 23fea66:	f8d8 0000 	ldr.w	r0, [r8]
 23fea6a:	f000 f859 	bl	23feb20 <__retarget_lock_release_recursive>
 23fea6e:	f04f 30ff 	mov.w	r0, #4294967295
 23fea72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fea76:	b35e      	cbz	r6, 23fead0 <__register_exitproc+0x9c>
 23fea78:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fea7c:	b988      	cbnz	r0, 23feaa2 <__register_exitproc+0x6e>
 23fea7e:	4b1d      	ldr	r3, [pc, #116]	; (23feaf4 <__register_exitproc+0xc0>)
 23fea80:	b923      	cbnz	r3, 23fea8c <__register_exitproc+0x58>
 23fea82:	f8d8 0000 	ldr.w	r0, [r8]
 23fea86:	f000 f84a 	bl	23feb1e <__retarget_lock_release>
 23fea8a:	e7f0      	b.n	23fea6e <__register_exitproc+0x3a>
 23fea8c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fea90:	f7fc fdb6 	bl	23fb600 <malloc>
 23fea94:	2800      	cmp	r0, #0
 23fea96:	d0f4      	beq.n	23fea82 <__register_exitproc+0x4e>
 23fea98:	2300      	movs	r3, #0
 23fea9a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fea9e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23feaa2:	6863      	ldr	r3, [r4, #4]
 23feaa4:	2201      	movs	r2, #1
 23feaa6:	2e02      	cmp	r6, #2
 23feaa8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23feaac:	fa02 f203 	lsl.w	r2, r2, r3
 23feab0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23feab4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23feab8:	ea43 0302 	orr.w	r3, r3, r2
 23feabc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23feac0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23feac4:	bf02      	ittt	eq
 23feac6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23feaca:	4313      	orreq	r3, r2
 23feacc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fead0:	6863      	ldr	r3, [r4, #4]
 23fead2:	f8d8 0000 	ldr.w	r0, [r8]
 23fead6:	1c5a      	adds	r2, r3, #1
 23fead8:	3302      	adds	r3, #2
 23feada:	6062      	str	r2, [r4, #4]
 23feadc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23feae0:	f000 f81e 	bl	23feb20 <__retarget_lock_release_recursive>
 23feae4:	2000      	movs	r0, #0
 23feae6:	e7c4      	b.n	23fea72 <__register_exitproc+0x3e>
 23feae8:	1007afdc 	.word	0x1007afdc
 23feaec:	1007af50 	.word	0x1007af50
 23feaf0:	00000000 	.word	0x00000000
 23feaf4:	023fb601 	.word	0x023fb601
 23feaf8:	1007adac 	.word	0x1007adac

023feafc <_close_r>:
 23feafc:	b538      	push	{r3, r4, r5, lr}
 23feafe:	2300      	movs	r3, #0
 23feb00:	4d05      	ldr	r5, [pc, #20]	; (23feb18 <_close_r+0x1c>)
 23feb02:	4604      	mov	r4, r0
 23feb04:	4608      	mov	r0, r1
 23feb06:	602b      	str	r3, [r5, #0]
 23feb08:	f7fc f8d4 	bl	23facb4 <_close>
 23feb0c:	1c43      	adds	r3, r0, #1
 23feb0e:	d102      	bne.n	23feb16 <_close_r+0x1a>
 23feb10:	682b      	ldr	r3, [r5, #0]
 23feb12:	b103      	cbz	r3, 23feb16 <_close_r+0x1a>
 23feb14:	6023      	str	r3, [r4, #0]
 23feb16:	bd38      	pop	{r3, r4, r5, pc}
 23feb18:	1007afe4 	.word	0x1007afe4

023feb1c <__retarget_lock_acquire_recursive>:
 23feb1c:	4770      	bx	lr

023feb1e <__retarget_lock_release>:
 23feb1e:	4770      	bx	lr

023feb20 <__retarget_lock_release_recursive>:
 23feb20:	4770      	bx	lr
	...

023feb24 <_lseek_r>:
 23feb24:	b538      	push	{r3, r4, r5, lr}
 23feb26:	4604      	mov	r4, r0
 23feb28:	4d06      	ldr	r5, [pc, #24]	; (23feb44 <_lseek_r+0x20>)
 23feb2a:	4608      	mov	r0, r1
 23feb2c:	4611      	mov	r1, r2
 23feb2e:	2200      	movs	r2, #0
 23feb30:	602a      	str	r2, [r5, #0]
 23feb32:	461a      	mov	r2, r3
 23feb34:	f7fc f8cc 	bl	23facd0 <_lseek>
 23feb38:	1c43      	adds	r3, r0, #1
 23feb3a:	d102      	bne.n	23feb42 <_lseek_r+0x1e>
 23feb3c:	682b      	ldr	r3, [r5, #0]
 23feb3e:	b103      	cbz	r3, 23feb42 <_lseek_r+0x1e>
 23feb40:	6023      	str	r3, [r4, #0]
 23feb42:	bd38      	pop	{r3, r4, r5, pc}
 23feb44:	1007afe4 	.word	0x1007afe4

023feb48 <_open_r>:
 23feb48:	b538      	push	{r3, r4, r5, lr}
 23feb4a:	4604      	mov	r4, r0
 23feb4c:	4d06      	ldr	r5, [pc, #24]	; (23feb68 <_open_r+0x20>)
 23feb4e:	4608      	mov	r0, r1
 23feb50:	4611      	mov	r1, r2
 23feb52:	2200      	movs	r2, #0
 23feb54:	602a      	str	r2, [r5, #0]
 23feb56:	461a      	mov	r2, r3
 23feb58:	f7fc f882 	bl	23fac60 <_open>
 23feb5c:	1c43      	adds	r3, r0, #1
 23feb5e:	d102      	bne.n	23feb66 <_open_r+0x1e>
 23feb60:	682b      	ldr	r3, [r5, #0]
 23feb62:	b103      	cbz	r3, 23feb66 <_open_r+0x1e>
 23feb64:	6023      	str	r3, [r4, #0]
 23feb66:	bd38      	pop	{r3, r4, r5, pc}
 23feb68:	1007afe4 	.word	0x1007afe4

023feb6c <_read_r>:
 23feb6c:	b538      	push	{r3, r4, r5, lr}
 23feb6e:	4604      	mov	r4, r0
 23feb70:	4d06      	ldr	r5, [pc, #24]	; (23feb8c <_read_r+0x20>)
 23feb72:	4608      	mov	r0, r1
 23feb74:	4611      	mov	r1, r2
 23feb76:	2200      	movs	r2, #0
 23feb78:	602a      	str	r2, [r5, #0]
 23feb7a:	461a      	mov	r2, r3
 23feb7c:	f7fc f88c 	bl	23fac98 <_read>
 23feb80:	1c43      	adds	r3, r0, #1
 23feb82:	d102      	bne.n	23feb8a <_read_r+0x1e>
 23feb84:	682b      	ldr	r3, [r5, #0]
 23feb86:	b103      	cbz	r3, 23feb8a <_read_r+0x1e>
 23feb88:	6023      	str	r3, [r4, #0]
 23feb8a:	bd38      	pop	{r3, r4, r5, pc}
 23feb8c:	1007afe4 	.word	0x1007afe4

023feb90 <dynalib_user>:
 23feb90:	023f8ab5 023f8add 023f8ae1 00000000     ..?...?...?.....
 23feba0:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23febb0:	6c617574 61726400 69622077 70616d74     tual.draw bitmap
 23febc0:	61747320 41007472 55425f44 4e4f5454      start.AD_BUTTON
 23febd0:	4552505f 71005353 646f6372 6d622e65     _PRESS.qrcode.bm
 23febe0:	69440070 6e617473 28206563 20296d6d     p.Distance (mm) 
 23febf0:	6425203d 6e655300 676e6964 20646120     = %d.Sending ad 
 23fec00:	72706d69 69737365 41006e6f 4d495f44     impression.AD_IM
 23fec10:	53455250 4e4f4953 63657600 3a726f74     PRESSION.vector:
 23fec20:	5f4d5f3a 6c616572 5f636f6c 65736e69     :_M_realloc_inse
 23fec30:	2f007472 65704f00 2064656e 3d726964     rt./.Opened dir=
 23fec40:	43006425 65736f6c 69642064 64610072     %d.Closed dir.ad
 23fec50:	6c696620 616e2065 2073656d 676e656c      file names leng
 23fec60:	3d206874 00642520 6e756f46 73612064     th = %d.Found as
 23fec70:	20746573 61007325 6f470064 64662074     set %s.ad.Got fd
 23fec80:	0064253d 736f6c43 66206465 64253d64     =%d.Closed fd=%d
 23fec90:	61745300 6e697472 73612067 73746573     .Starting assets
 23feca0:	61766120 62616c69 253d656c 4c560064      available=%d.VL
 23fecb0:	314c3335 61662058 64656c69 206f7420     53L1X failed to 
 23fecc0:	74696e69 00000000                       init....

023fecc8 <_ZTVN5spark10LogHandlerE>:
	...
 23fecd8:	023f8b01 023f8b29                       ..?.).?.

023fece0 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fece8:	023f8b2d 023f8b61 023fce0d 023fcfb5     -.?.a.?...?...?.

023fecf8 <_ZTV16Adafruit_SSD1351>:
 23fecf8:	0000000c 00000000 00000000 023f9c39     ............9.?.
 23fed08:	023f99b1 023f990f 023f97c3 023f92c5     ..?...?...?...?.
 23fed18:	023f92f9 00000000 00000000 fffffff4     ..?.............
	...
 23fed30:	fffffff4 fffffff4 00000000 fffffff4     ................
	...
 23fed48:	fffffff4 fffffff4 00000000 023f92d9     ..............?.
 23fed58:	023f9319 023f9eab 023fbdad 023f9cdb     ..?...?...?...?.
 23fed68:	023f9cfb 023f999f 023f9a41 023f9db9     ..?...?.A.?...?.
 23fed78:	023f9e57 023f97d9 023f9ea9 023fa283     W.?...?...?...?.

023fed88 <_ZTV12Adafruit_GFX>:
	...
 23fed98:	023f9eab 023fbdad 023f8b01 023f9cfb     ..?...?...?...?.
 23feda8:	023f9e21 023f9e3d 023f9db9 023f9e57     !.?.=.?...?.W.?.
 23fedb8:	023f9e8d 023f9ea9 023fa283              ..?...?...?.

023fedc4 <glcdfontBitmaps>:
 23fedc4:	0000ff00 00000000 f8700000 88d8f8a8     ..........p.....
 23fedd4:	f8700070 d888f8a8 50000070 70f8f8f8     p.p.....p..P...p
 23fede4:	20000020 70f8f870 50700020 20f8a8f8      .. p..p .pP... 
 23fedf4:	70200070 20f8f8f8 00000070 20707020     p. p... p... pp 
 23fee04:	f8f80000 d88888d8 0000f8f8 20505020     ............ PP 
 23fee14:	f8f80000 d8a8a8d8 3800f8f8 a0a06818     ...........8.h..
 23fee24:	88700040 f8207088 48780020 40404078     @.p..p . .xHx@@@
 23fee34:	487800c0 58484878 a82000c0 70d8d870     ..xHxHHX.. .p..p
 23fee44:	c08020a8 c0f0f8f0 18080080 1878f878     . ..........x.x.
 23fee54:	70200008 70a820a8 d8d80020 00d8d8d8     .. p. .p .......
 23fee64:	a87800d8 282868a8 48300028 48102850     ..x..h(((.0HP(.H
 23fee74:	00003048 f8000000 702000f8 70a820a8     H0........ p. .p
 23fee84:	2000f820 2020a870 20000020 70a82020      .. p.   ..   .p
 23fee94:	20000020 2010f810 20000000 2040f840      .. ... ... @.@ 
 23feea4:	80000000 00f88080 50000000 0050f8f8     ...........P..P.
 23feeb4:	20000000 f8f87020 f8000000 202070f8     ...  p.......p  
	...
 23feecc:	20200000 00202020 50500020 00000050     ..     . .PPP...
 23feedc:	50500000 50f850f8 78200050 f02870a0     ..PP.P.PP. x.p(.
 23feeec:	c8c00020 98402010 a0400018 90a840a0      .... @...@..@..
 23feefc:	30300068 00004020 20100000 20404040     h.00 @..... @@@ 
 23fef0c:	20400010 20101010 a8200040 a870f870     ..@ ... @. .p.p.
 23fef1c:	20000020 2020f820 00000000 30300000      ..  .  ......00
 23fef2c:	00004020 0000f800 00000000 30000000      @.............0
 23fef3c:	08000030 80402010 88700000 88c8a898     0.... @...p.....
 23fef4c:	60200070 20202020 88700070 80807008     p. `    p.p..p..
 23fef5c:	08f800f8 88083010 30100070 10f89050     .....0..p..0P...
 23fef6c:	80f80010 880808f0 40380070 8888f080     ........p.8@....
 23fef7c:	08f80070 40201008 88700080 88887088     p..... @..p..p..
 23fef8c:	88700070 10087888 000000e0 00200020     p.p..x...... . .
 23fef9c:	00000000 20200020 10080040 10204020     .... .  @... @ .
 23fefac:	00000008 00f800f8 20400000 20100810     ..........@ ... 
 23fefbc:	88700040 00203008 88700020 80b0b8a8     @.p..0 . .p.....
 23fefcc:	50200078 88f88888 88f00088 8888f088     x. P............
 23fefdc:	887000f0 88808080 88f00070 88888888     ..p.....p.......
 23fefec:	80f800f0 8080f080 80f800f8 8080f080     ................
 23feffc:	88780080 88988080 88880078 8888f888     ..x.....x.......
 23ff00c:	20700088 20202020 10380070 90101010     ..p     p.8.....
 23ff01c:	90880060 90a0c0a0 80800088 80808080     `...............
 23ff02c:	d88800f8 88a8a8a8 88880088 8898a8c8     ................
 23ff03c:	88700088 88888888 88f00070 8080f088     ..p.....p.......
 23ff04c:	88700080 90a88888 88f00068 90a0f088     ..p.....h.......
 23ff05c:	88700088 88087080 a8f80070 20202020     ..p..p..p...    
 23ff06c:	88880020 88888888 88880070 50888888      .......p......P
 23ff07c:	88880020 a8a8a888 88880050 88502050      .......P...P P.
 23ff08c:	88880088 20202050 08f80020 80407010     ....P    ....p@.
 23ff09c:	407800f8 40404040 80000078 08102040     ..x@@@@@x...@ ..
 23ff0ac:	08780000 08080808 50200078 00000088     ..x.....x. P....
	...
 23ff0c4:	606000f8 00001020 00000000 90701060     ..`` .......`.p.
 23ff0d4:	80800078 c888c8b0 000000b0 88808870     x...........p...
 23ff0e4:	08080070 98889868 00000068 80f88870     p...h...h...p...
 23ff0f4:	28100070 20207020 00000020 68989870     p..( p   ...p..h
 23ff104:	80807008 8888c8b0 00200088 20202060     .p........ .`   
 23ff114:	00100070 90101010 80800060 a0c0a090     p.......`.......
 23ff124:	20600090 20202020 00000070 a8a8a8d0     ..`     p.......
 23ff134:	000000a8 8888c8b0 00000088 88888870     ............p...
 23ff144:	00000070 b0c8c8b0 00008080 68989868     p...........h..h
 23ff154:	00000808 8080c8b0 00000080 08708078     ............x.p.
 23ff164:	202000f0 282020f8 00000010 98888888     ..  .  (........
 23ff174:	00000068 50888888 00000020 a8a88888     h......P .......
 23ff184:	00000050 50205088 00000088 08788888     P....P P......x.
 23ff194:	00007088 402010f8 201000f8 20204020     .p.... @...  @  
 23ff1a4:	20200010 20200020 20400020 20201020     ..   .   .@  .  
 23ff1b4:	a8400040 00000010 70200000 f88888d8     @.@....... p....
 23ff1c4:	88700000 70888080 88006010 98888800     ..p....p.`......
 23ff1d4:	00180068 80f88870 00f80078 90701060     h...p...x...`.p.
 23ff1e4:	00880078 90701060 00c00078 90701060     x...`.p.x...`.p.
 23ff1f4:	00300078 90701060 78000078 1078c0c0     x.0.`.p.x..x..x.
 23ff204:	00f80030 80f88870 00880078 80f88870     0...p...x...p...
 23ff214:	00c00078 80f88870 00280078 10101030     x...p...x.(.0...
 23ff224:	48300038 10101030 00600038 10101030     8.0H0...8.`.0...
 23ff234:	00500038 f8885020 00208888 f8885020     8.P. P.... . P..
 23ff244:	00308888 80e080f0 000000f0 90781078     ..0.........x.x.
 23ff254:	50380078 9090f890 88700098 88887000     x.8P......p..p..
 23ff264:	88000070 88887000 c0000070 88887000     p....p..p....p..
 23ff274:	88700070 98888800 c0000068 98888800     p.p.....h.......
 23ff284:	00480068 38484848 00887008 88888870     h.H.HHH8.p..p...
 23ff294:	00880070 88888888 20200070 f8a0a0f8     p.......p.  ....
 23ff2a4:	58302020 4840e048 d8d800f8 f820f870       0XH.@H....p. .
 23ff2b4:	90e02020 b890e090 28189090 20207020       .........( p  
 23ff2c4:	0018c0a0 90701060 00180078 10101030     ....`.p.x...0...
 23ff2d4:	18000038 88887000 18000070 98888800     8....p..p.......
 23ff2e4:	78000068 48487000 00f80048 98b8e8c8     h..x.pHHH.......
 23ff2f4:	90700088 f8007890 88700000 f8007088     ..p..x....p..p..
 23ff304:	00200000 88806020 00000070 8080f800     .. . `..p.......
 23ff314:	00000000 0808f800 88800000 9848b890     ..............H.
 23ff324:	88803820 b858a890 20200808 20202000      8....X...  .   
 23ff334:	28000020 2850a050 a0000000 a0502850      ..(P.P(....P(P.
 23ff344:	88200000 88208820 a8508820 a850a850     .. . . . .P.P.P.
 23ff354:	1010a850 10101010 10101010 10f01010     P...............
 23ff364:	10101010 10f010f0 28281010 28e82828     ..........((((.(
 23ff374:	00002828 28f80000 00002828 10f010f0     ((.....(((......
 23ff384:	28281010 28e808e8 28282828 28282828     ..((...(((((((((
 23ff394:	00002828 28e808f8 28282828 00f808e8     ((.....(((((....
 23ff3a4:	28280000 00f82828 10100000 00f010f0     ..((((..........
 23ff3b4:	00000000 10f00000 10101010 00181010     ................
 23ff3c4:	10100000 00f81010 00000000 10f80000     ................
 23ff3d4:	10101010 10181010 00001010 00f80000     ................
 23ff3e4:	10100000 10f81010 10101010 10181018     ................
 23ff3f4:	28281010 28282828 28282828 00382028     ..((((((((((( 8.
 23ff404:	00000000 28282038 28282828 00f800e8     ....8 ((((((....
 23ff414:	00000000 28e800f8 28282828 28282028     .......(((((( ((
 23ff424:	00002828 00f800f8 28280000 28e800e8     ((........((...(
 23ff434:	10102828 00f800f8 28280000 00f82828     ((........((((..
 23ff444:	00000000 10f800f8 00001010 28f80000     ...............(
 23ff454:	28282828 00382828 10100000 00181018     ((((((8.........
 23ff464:	00000000 10181018 00001010 28380000     ..............8(
 23ff474:	28282828 28f82828 10102828 10f810f8     ((((((.(((......
 23ff484:	10101010 00f01010 00000000 10180000     ................
 23ff494:	f8f81010 f8f8f8f8 0000f8f8 f8f80000     ................
 23ff4a4:	e0e0f8f8 e0e0e0e0 1818e0e0 18181818     ................
 23ff4b4:	f8f81818 0000f8f8 00000000 90909068     ............h...
 23ff4c4:	70000068 f098f098 f8000080 80808098     h..p............
 23ff4d4:	f8000080 50505050 88f80050 88402040     ....PPPPP...@ @.
 23ff4e4:	000000f8 90909078 50000060 68505050     ....x...`..PPPPh
 23ff4f4:	f80000c0 202020a0 20f80020 70888870     .....    .. p..p
 23ff504:	5020f820 5088f888 50200020 50508888      . P...P . P..PP
 23ff514:	403000d8 88887030 00000070 a8a87000     ..0@0p..p....p..
 23ff524:	70080070 c8a8a898 80708070 8080f080     p..p....p.p.....
 23ff534:	88700070 88888888 f8000088 f800f800     p.p.............
 23ff544:	20200000 002020f8 204000f8 00402010     ..  .  ...@ . @.
 23ff554:	201000f8 00102040 283800f8 20202020     ... @ ....8(    
 23ff564:	20202020 a0202020 3030e0a0 3000f800            ...00...0
 23ff574:	e8000030 b8e800b8 d8700000 000070d8     0.........p..p..
 23ff584:	00000000 00303000 00000000 00300000     .....00.......0.
 23ff594:	20380000 a0a02020 48702060 00484848     ..8   ..` pHHHH.
 23ff5a4:	18700000 00786030 00000000 78787878     ..p.0`x.....xxxx
	...

023ff5be <glcdfontDescriptors>:
 23ff5be:	00000805 00080805 00100805 00180805     ................
 23ff5ce:	00200805 00280805 00300805 00380805     .. ...(...0...8.
 23ff5de:	00400805 00480805 00500805 00580805     ..@...H...P...X.
 23ff5ee:	00600805 00680805 00700805 00780805     ..`...h...p...x.
 23ff5fe:	00800805 00880805 00900805 00980805     ................
 23ff60e:	00a00805 00a80805 00b00805 00b80805     ................
 23ff61e:	00c00805 00c80805 00d00805 00d80805     ................
 23ff62e:	00e00805 00e80805 00f00805 00f80805     ................
 23ff63e:	01000805 01080805 01100805 01180805     ................
 23ff64e:	01200805 01280805 01300805 01380805     .. ...(...0...8.
 23ff65e:	01400805 01480805 01500805 01580805     ..@...H...P...X.
 23ff66e:	01600805 01680805 01700805 01780805     ..`...h...p...x.
 23ff67e:	01800805 01880805 01900805 01980805     ................
 23ff68e:	01a00805 01a80805 01b00805 01b80805     ................
 23ff69e:	01c00805 01c80805 01d00805 01d80805     ................
 23ff6ae:	01e00805 01e80805 01f00805 01f80805     ................
 23ff6be:	02000805 02080805 02100805 02180805     ................
 23ff6ce:	02200805 02280805 02300805 02380805     .. ...(...0...8.
 23ff6de:	02400805 02480805 02500805 02580805     ..@...H...P...X.
 23ff6ee:	02600805 02680805 02700805 02780805     ..`...h...p...x.
 23ff6fe:	02800805 02880805 02900805 02980805     ................
 23ff70e:	02a00805 02a80805 02b00805 02b80805     ................
 23ff71e:	02c00805 02c80805 02d00805 02d80805     ................
 23ff72e:	02e00805 02e80805 02f00805 02f80805     ................
 23ff73e:	03000805 03080805 03100805 03180805     ................
 23ff74e:	03200805 03280805 03300805 03380805     .. ...(...0...8.
 23ff75e:	03400805 03480805 03500805 03580805     ..@...H...P...X.
 23ff76e:	03600805 03680805 03700805 03780805     ..`...h...p...x.
 23ff77e:	03800805 03880805 03900805 03980805     ................
 23ff78e:	03a00805 03a80805 03b00805 03b80805     ................
 23ff79e:	03c00805 03c80805 03d00805 03d80805     ................
 23ff7ae:	03e00805 03e80805 03f00805 03f80805     ................
 23ff7be:	04000805 04080805 04100805 04180805     ................
 23ff7ce:	04200805 04280805 04300805 04380805     .. ...(...0...8.
 23ff7de:	04400805 04480805 04500805 04580805     ..@...H...P...X.
 23ff7ee:	04600805 04680805 04700805 04780805     ..`...h...p...x.
 23ff7fe:	04800805 04880805 04900805 04980805     ................
 23ff80e:	04a00805 04a80805 04b00805 04b80805     ................
 23ff81e:	04c00805 04c80805 04d00805 04d80805     ................
 23ff82e:	04e00805 04e80805 04f00805 04f80805     ................
 23ff83e:	05000805 05080805 05100805 05180805     ................
 23ff84e:	05200805 05280805 05300805 05380805     .. ...(...0...8.
 23ff85e:	05400805 05480805 05500805 05580805     ..@...H...P...X.
 23ff86e:	05600805 05680805 05700805 05780805     ..`...h...p...x.
 23ff87e:	05800805 05880805 05900805 05980805     ................
 23ff88e:	05a00805 05a80805 05b00805 05b80805     ................
 23ff89e:	05c00805 05c80805 05d00805 05d80805     ................
 23ff8ae:	05e00805 05e80805 05f00805 05f80805     ................
 23ff8be:	06000805 06080805 06100805 06180805     ................
 23ff8ce:	06200805 06280805 06300805 06380805     .. ...(...0...8.
 23ff8de:	06400805 06480805 06500805 06580805     ..@...H...P...X.
 23ff8ee:	06600805 06680805 06700805 06780805     ..`...h...p...x.
 23ff8fe:	06800805 06880805 06900805 06980805     ................
 23ff90e:	06a00805 06a80805 06b00805 06b80805     ................
 23ff91e:	06c00805 06c80805 06d00805 06d80805     ................
 23ff92e:	06e00805 06e80805 06f00805 06f80805     ................
 23ff93e:	07000805 07080805 07100805 07180805     ................
 23ff94e:	07200805 07280805 07300805 07380805     .. ...(...0...8.
 23ff95e:	07400805 07480805 07500805 07580805     ..@...H...P...X.
 23ff96e:	07600805 07680805 07700805 07780805     ..`...h...p...x.
 23ff97e:	07800805 07880805 07900805 07980805     ................
 23ff98e:	07a00805 07a80805 07b00805 07b80805     ................
 23ff99e:	07c00805 07c80805 07d00805 07d80805     ................
 23ff9ae:	07e00805 07e80805 07f00805 07f80805     ................
 23ff9be:	656c6966 656d616e 25203d20 69660073     filename = %s.fi
 23ff9ce:	6f20656c 206e6570 6e727265 64253d6f     le open errno=%d
 23ff9de:	52524500                                 .ERROR.

023ff9e5 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
 23ff9e5:	01010100 08020002 01100800 00000001     ................
 23ff9f5:	0f00ff00 00000000 000b2000 210a0200     ......... .....!
 23ffa05:	00050000 c8000000 ff380000 00080001     ..........8.....
 23ffa15:	0fdb0100 010df101 08800068 000000b8     ........h.......
 23ffa25:	00890f00 00000000 0f010000 000e0e0d     ................
 23ffa35:	ffc70200 0000009b                        ...........

023ffa40 <_ZTV7VL53L1X>:
	...
 23ffa48:	023faa47 023faa27 023faa11 023fa9cd     G.?.'.?...?...?.
 23ffa58:	023faa03 023fa9e9 023fa9cf              ..?...?...?.

023ffa64 <_ZTVN5spark13EthernetClassE>:
	...
 23ffa6c:	023fb75b 023fb751 023fb747 023fb73d     [.?.Q.?.G.?.=.?.
 23ffa7c:	023fb731 023fb725 023fdcb1 023fdcb9     1.?.%.?...?...?.
 23ffa8c:	023fb719 023fb711 023fb707 023fb6fd     ..?...?...?...?.
 23ffa9c:	023fdce9                                ..?.

023ffaa0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffaa0:	18100800 38302820                       .... (08

023ffaa8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

023ffab0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle16ApplicationAsset4DataESaIS2_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffab8:	023fbe59 023fbe7d 023fbecf 023fbe8b     Y.?.}.?...?...?.
 23ffac8:	023fbe5d                                ].?.

023ffacc <_ZTVN8particle16ApplicationAssetE>:
	...
 23ffad4:	023fba41 023fbb3d 023fbe55 023fbdad     A.?.=.?.U.?...?.
 23ffae4:	023fc14b 023fbe1b 023fbe37 023fbe53     K.?...?.7.?.S.?.
 23ffaf4:	023fc185 023fc0dd 023fc10d 64756162     ..?...?...?.baud
 23ffb04:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
 23ffb14:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 23ffb24:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 23ffb34:	2c00205d 29280020 2000203a 6f63005b     ] ., .(): . [.co
 23ffb44:	3d206564 69250020 74656400 736c6961     de = .%i.details
 23ffb54:	00203d20 6d000a0d 6c006600 6e66006e      = ....m.f.ln.fn
 23ffb64:	646f6300 65640065 6c696174 00000000     .code.detail....

023ffb74 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffb7c:	023fc205 023fc22b 023fc1e9 023fde03     ..?.+.?...?...?.

023ffb8c <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffb94:	023fc6b9 023fc6d1 023fce0d 023fcfb5     ..?...?...?...?.

023ffba4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffbac:	023fc6e5 023fc6f9 023fcfed 023fc1f1     ..?...?...?...?.

023ffbbc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffbc4:	023fc203 023fc239 023fcd71 023fc1f3     ..?.9.?.q.?...?.

023ffbd4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffbdc:	023fc201 023fc247 023fc621 023fc269     ..?.G.?.!.?.i.?.
 23ffbec:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
 23ffbfc:	007a2553 74637361 00656d69              S%z.asctime.

023ffc08 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffc10:	023fd2d9 023fd2df 023fd31d 023fd2ed     ..?...?...?...?.
 23ffc20:	023fd2db                                ..?.

023ffc24 <_ZTV9IPAddress>:
	...
 23ffc2c:	023fd815 023fd805 023fd807              ..?...?...?.

023ffc38 <_ZTV9USBSerial>:
	...
 23ffc40:	023fd8fb 023fd963 023fd939 023fbdad     ..?.c.?.9.?...?.
 23ffc50:	023fd92b 023fd8fd 023fd90d 023fd95d     +.?...?...?.].?.
 23ffc60:	023fd91d 023fd8f5                       ..?...?.

023ffc68 <_ZTV11USARTSerial>:
	...
 23ffc70:	023fda05 023fda71 023fda49 023fbdad     ..?.q.?.I.?...?.
 23ffc80:	023fda19 023fda35 023fda27 023fda43     ..?.5.?.'.?.C.?.
 23ffc90:	023fda07 023fda0b                       ..?...?.

023ffc98 <_ZTV7TwoWire>:
	...
 23ffca0:	023fdaeb 023fdb35 023fdb0d 023fdaed     ..?.5.?...?...?.
 23ffcb0:	023fdb15 023fdb1d 023fdb25 023fdb2d     ..?...?.%.?.-.?.

023ffcc0 <_ZTVN5spark9WiFiClassE>:
	...
 23ffcc8:	023fdc53 023fdc49 023fdc3f 023fdbf5     S.?.I.?.?.?...?.
 23ffcd8:	023fdc33 023fdc27 023fdcb1 023fdcb9     3.?.'.?...?...?.
 23ffce8:	023fdc1b 023fdc13 023fdc09 023fdbff     ..?...?...?...?.
 23ffcf8:	023fdce9                                ..?.

023ffcfc <_ZTVN5spark12NetworkClassE>:
	...
 23ffd04:	023fdc71 023fdc7b 023fdc85 023fdc8f     q.?.{.?...?...?.
 23ffd14:	023fdc99 023fdca5 023fdcb1 023fdcb9     ..?...?...?...?.
 23ffd24:	023fdcc1 023fdccd 023fdcd5 023fdcdf     ..?...?...?...?.
 23ffd34:	023fdce9 75007525 78343025               ..?.%u.u%04x.

023ffd41 <_ZSt7nothrow>:
	...

023ffd42 <_ZTSSt19_Sp_make_shared_tag>:
 23ffd42:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
 23ffd52:	5f646572 00676174                        red_tag...

023ffd5c <_ZTISt19_Sp_make_shared_tag>:
 23ffd5c:	023ffd9c 023ffd42                       ..?.B.?.

023ffd64 <_ZTIN10__cxxabiv117__class_type_infoE>:
 23ffd64:	023ffdfc 023ffd70 023ffe20              ..?.p.?. .?.

023ffd70 <_ZTSN10__cxxabiv117__class_type_infoE>:
 23ffd70:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
 23ffd80:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
 23ffd90:	00000045                                E...

023ffd94 <_ZTVN10__cxxabiv117__class_type_infoE>:
 23ffd94:	00000000 023ffd64 023fe4d9 023fe4ed     ....d.?...?...?.
 23ffda4:	023fe681 023fe681 023fe557 023fe499     ..?...?.W.?...?.
 23ffdb4:	023fe53f 023fe501 023fe4cb              ?.?...?...?.

023ffdc0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 23ffdc0:	023ffdfc 023ffdcc 023ffd64              ..?...?.d.?.

023ffdcc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 23ffdcc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
 23ffddc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
 23ffdec:	456f666e 00000000                       nfoE....

023ffdf4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 23ffdf4:	00000000 023ffdc0 023fe581 023fe595     ......?...?...?.
 23ffe04:	023fe681 023fe681 023fe557 023fe499     ..?...?.W.?...?.
 23ffe14:	023fe655 023fe5e1 023fe5a9              U.?...?...?.

023ffe20 <_ZTISt9type_info>:
 23ffe20:	023ffd9c 023ffe28                       ..?.(.?.

023ffe28 <_ZTSSt9type_info>:
 23ffe28:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
 23ffe38:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
 23ffe48:	00646564 746e6d2f 726f772f 6170736b     ded./mnt/workspa
 23ffe58:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 23ffe68:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 23ffe78:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe88:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe98:	3036315f 30383136 2f313436 2f637273     _1606180641/src/
 23ffea8:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffeb8:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffec9 <_ctype_>:
 23ffec9:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffed9:	20202020 20202020 20202020 20202020                     
 23ffee9:	10108820 10101010 10101010 10101010      ...............
 23ffef9:	04040410 04040404 10040404 10101010     ................
 23fff09:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff19:	01010101 01010101 01010101 10101010     ................
 23fff29:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff39:	02020202 02020202 02020202 10101010     ................
 23fff49:	00000020 00000000 00000000 00000000      ...............
	...

023fffca <link_const_data_end>:
	...

023fffcc <link_constructors_location>:
 23fffcc:	023f91d1 	.word	0x023f91d1
 23fffd0:	023fb765 	.word	0x023fb765
 23fffd4:	023fbb51 	.word	0x023fbb51
 23fffd8:	023fbd9d 	.word	0x023fbd9d
 23fffdc:	023fcdfd 	.word	0x023fcdfd
 23fffe0:	023fd161 	.word	0x023fd161
 23fffe4:	023fd17d 	.word	0x023fd17d
 23fffe8:	023fdc5d 	.word	0x023fdc5d
 23fffec:	023fddc1 	.word	0x023fddc1
